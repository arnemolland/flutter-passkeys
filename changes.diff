diff --git a/.github/workflows/deploy-corbado-auth-example.yml b/.github/workflows/deploy-corbado-auth-example.yml
new file mode 100644
index 0000000..11eb908
--- /dev/null
+++ b/.github/workflows/deploy-corbado-auth-example.yml
@@ -0,0 +1,35 @@
+name: Deploy corbado_auth example to Vercel
+env:
+  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
+  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
+
+on:
+  push:
+    branches: [ main ]
+
+jobs:
+  deploy:
+    runs-on: ubuntu-latest
+
+    steps:
+      - name: Checkout code
+        uses: actions/checkout@v4
+
+      - name: Set up Node.js
+        uses: actions/setup-node@v4
+
+      - name: Set up Flutter
+        uses: subosito/flutter-action@v2
+        with:
+          # Pin to a Flutter version that your app supports
+          # or omit to use the default stable version
+          flutter-version: "3.27.4"
+
+      - name: Deploy Next example to Vercel
+        run: |
+          cd packages/corbado_auth/example
+          npx vercel pull -t $VERCEL_TOKEN
+          npx vercel build --prod -t $VERCEL_TOKEN
+          npx vercel deploy --prebuilt --prod -t $VERCEL_TOKEN
+        env:
+          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_CORBADO_AUTH_EXAMPLE }}
diff --git a/.github/workflows/deploy-passkeys-example.yml b/.github/workflows/deploy-passkeys-example.yml
new file mode 100644
index 0000000..bfd1b6c
--- /dev/null
+++ b/.github/workflows/deploy-passkeys-example.yml
@@ -0,0 +1,37 @@
+name: Deploy passkeys example to Vercel
+env:
+  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
+  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
+
+on:
+  push:
+    branches: [ main ]
+  release:
+    types: [ published ]
+
+jobs:
+  deploy:
+    runs-on: ubuntu-latest
+
+    steps:
+      - name: Checkout code
+        uses: actions/checkout@v4
+
+      - name: Set up Node.js
+        uses: actions/setup-node@v4
+
+      - name: Set up Flutter
+        uses: subosito/flutter-action@v2
+        with:
+          # Pin to a Flutter version that your app supports
+          # or omit to use the default stable version
+          flutter-version: "3.27.4"
+
+      - name: Deploy Next example to Vercel
+        run: |
+          cd packages/passkeys/passkeys/example
+          npx vercel pull -t $VERCEL_TOKEN
+          npx vercel build --prod -t $VERCEL_TOKEN
+          npx vercel deploy --prebuilt --prod -t $VERCEL_TOKEN
+        env:
+          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_PASSKEYS_EXAMPLE }}
diff --git a/.gitignore b/.gitignore
index a0b2abe..fca96e5 100644
--- a/.gitignore
+++ b/.gitignore
@@ -57,3 +57,7 @@ gradlew.bat
 
 # Melos
 **/pubspec_overrides.yaml
+
+# FVM Version Cache
+.fvm/
+.fvmrc
\ No newline at end of file
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
new file mode 100644
index 0000000..84c3dcd
--- /dev/null
+++ b/CONTRIBUTING.md
@@ -0,0 +1,158 @@
+<img width="1070" alt="GitHub Repo Cover" src="https://raw.githubusercontent.com/corbado/flutter-passkeys/main/.github/images/root_headline.png">
+
+# Contribute to Passkeys
+
+## 1. Forking & cloning the repository
+
+- Fork `https://github.com/corbado/passkeys` into your own GitHub account. If
+  you already have a fork, and are now installing a development environment on
+  a new machine, make sure you've updated your fork so that you don't use stale
+  configuration options from long ago.
+- If you haven't configured your machine with an SSH key that's known to github, then
+  follow [GitHub's directions](https://help.github.com/articles/generating-ssh-keys/)
+  to generate an SSH key.
+- `git clone git@github.com:<your_name_here>/flutter-passkeys.git`
+- `git remote add upstream git@github.com:corbado/flutter-passkeys.git` (So that you
+  fetch from the main repository, not your clone, when running `git fetch`
+  et al.)
+
+## 2. Environment Setup
+
+passkeys uses [Melos](https://github.com/invertase/melos) to manage the project and dependencies.
+
+To install Melos, run the following command from your SSH client:
+
+```bash
+dart pub global activate melos
+```
+
+Next, at the root of your locally cloned repository bootstrap the projects dependencies:
+
+```bash
+melos bootstrap
+```
+
+The bootstrap command locally links all dependencies within the project without having to
+provide manual [`dependency_overrides`](https://dart.dev/tools/pub/pubspec). This allows all
+plugins, examples and tests to build from the local clone project.
+
+> You do not need to run `flutter pub get` once bootstrap has been completed.
+
+> If you're using [fvm](https://fvm.app/) you might need to specify the sdk-path: `melos bs --sdk-path=/Users/user/fvm/default/`
+
+
+## 4. Making Changes
+
+### Making Changes to native code (passkeys_android, passkeys_ios)
+
+If you're making changes to native code, you'll need to run the following command to regenerate the platform channels using [pigeon](https://github.com/flutter/packages/tree/main/packages/pigeon)
+
+```bash
+  cd packages/passkeys/passkeys_android
+  dart run pigeon --input pigeons/messages.dart 
+```
+
+It works the same for passkeys_ios
+
+```bash
+  cd packages/passkeys/passkeys_ios
+  dart run pigeon --input pigeons/messages.dart 
+```
+
+### Making Changes to the Web Javascript Code
+
+If you're making changes to the web package, you'll need to run the following command to build the javascript code and import it in to the example
+
+```bash
+  melos build-passkeys-web-javascript
+```
+
+## 5. Running the Example
+
+To run the example, we can use the following commands: 
+
+**For web:**
+
+```bash
+  melos run example-passkeys-web
+```
+
+**For native:**
+
+```bash
+  melos run example-passkeys-native
+```
+
+Using Melos (installed in step 3), any changes made to the plugins locally will also be reflected within all
+example applications code automatically.
+
+## 6. Contributing Code
+
+We use GitHub pull requests for contributions. Before starting, please:
+- Review the [Flutter style guide](https://github.com/flutter/flutter/blob/master/docs/contributing/Style-guide-for-Flutter-repo.md).
+- Check open [issues](https://github.com/corbado/flutter-passkeys/issues) and existing [pull requests](https://github.com/corbado/flutter-passkeys/pulls) to avoid duplicating work.
+
+To start working on a patch:
+
+1. `git fetch upstream`
+2. `git checkout upstream/main -b <name_of_your_branch>`
+3. Hack away!
+
+Once you have made your changes, ensure that it passes the internal analyzer & formatting checks. The following
+commands can be run locally to highlight any issues before committing your code:
+    
+```bash
+  melos run format:check
+  melos run analyze
+```
+
+Assuming all is successful, commit and push your code:
+
+1. `git commit -a -m "<your informative commit message>"`
+2. `git push origin <name_of_your_branch>`
+
+To send us a pull request:
+
+- `git pull-request` (if you are using [Hub](http://github.com/github/hub/)) or
+  go to `https://github.com/corbado/flutter-passkeys` and click the
+  "Compare & pull request" button
+
+Please make sure all your check-ins have detailed commit messages explaining the patch.
+
+When naming the title of your pull request, please follow the [Conventional Commits](https://www.conventionalcommits.org/en/v1.0.0-beta.4/)
+guide. For example, for a fix to the passkeys android package:
+
+`fix(passkeys_android): fixed a bug!`
+
+### Getting Merged
+
+Once your PR is open:
+- Ensure all checks and CI pipelines pass (GitHub Actions, etc.).
+- Wait for code reviews from maintainers.
+- Address any feedback, push changes, and keep your PR updated.
+
+
+## 7. Release Process (For Maintainers)
+This project uses Melos to handle versioning and publishing. Once changes in main are ready to release:
+
+1. Pull the latest main branch locally.
+2. For the changed packages, update the version in the `pubspec.yaml` file. The version should follow the [Semantic Versioning](https://semver.org/) guidelines.
+3. Update the `CHANGELOG.md` file with the new version and a list of changes. The changes should be grouped by package and follow the format of the previous entries.
+4. Dry run publish:
+  ```bash
+    melos publish
+   ```
+5. If everything looks good, publish:
+  ```bash
+    melos publish --no-dry-run
+  ```
+
+## 8. Contributing Documentation
+If youâ€™d like to improve or add documentation:
+
+- Make the changes in the relevant markdown or Dart doc comments.
+- Follow the same process above for creating a branch, committing, and opening a PR.
+- If you have any doc-specific questions, open an issue or discussion.
+
+---
+Thank you for investing your time in contributing to Passkeys! We value all community contributions. ðŸš€
diff --git a/melos.yaml b/melos.yaml
index 156a52f..952dc80 100644
--- a/melos.yaml
+++ b/melos.yaml
@@ -56,9 +56,9 @@ scripts:
   build-passkeys-web-javascript:
     description: Build passkeys_web's javascript code and copy it to the example.
     run: |
-      cd packages/passkeys/passkeys_web
+      cd packages/passkeys/passkeys_web/javascript
       npm run build
-      cp javascript/dist/bundle.js ../passkeys/example/web/bundle.js
+      cp dist/bundle.js ../../passkeys/example/web/bundle.js
 
   deploy-example-passkeys-web:
     description: Deploy passkeys example to Vercel.
diff --git a/packages/corbado_api_client/CHANGELOG.md b/packages/corbado_api_client/CHANGELOG.md
index d842038..62505c3 100644
--- a/packages/corbado_api_client/CHANGELOG.md
+++ b/packages/corbado_api_client/CHANGELOG.md
@@ -1,3 +1,13 @@
+## 2.1.0
+* Added `X-Corbado-SDK` header to all requests.
+
+## 2.0.0
+* Changed to FrontendAPI v2.
+
+## 1.1.1
+
+* Bump dependency versions (intl, meta, http).
+
 ## 1.1.0
 
 * Added support for email OTP endpoints.
diff --git a/packages/corbado_api_client/lib/corbado_api_client.dart b/packages/corbado_api_client/lib/corbado_api_client.dart
index b1ac732..a765239 100644
--- a/packages/corbado_api_client/lib/corbado_api_client.dart
+++ b/packages/corbado_api_client/lib/corbado_api_client.dart
@@ -1,9 +1,17 @@
+// Openapi Generator last run: : 2024-09-24T18:31:23.928402
 import 'package:openapi_generator_annotations/openapi_generator_annotations.dart';
 
 @Openapi(
-    additionalProperties: AdditionalProperties(pubName: 'corbado_api'),
-    inputSpecFile: './lib/openapi/corbado_public_api.yml',
-    generatorName: Generator.dart,
-    outputDirectory: './lib/frontendapi')
+  additionalProperties: AdditionalProperties(
+    pubName: 'corbado_frontend_api_client',
+    pubVersion: '2.1.0',
+    pubDescription: 'Client for the Corbado Frontend API',
+    pubHomepage: 'https://docs.corbado.com/overview/welcome',
+  ),
+  inputSpec: InputSpec(path: './lib/openapi/corbado_public_api.yml'),
+  generatorName: Generator.dio,
+  outputDirectory: './lib/frontendapi',
+)
+
 /// Represents the Corbado API client
-class CorbadoApiClient extends OpenapiGeneratorConfig {}
+class CorbadoApiClient {}
\ No newline at end of file
diff --git a/packages/corbado_api_client/lib/frontendapi/.gitignore b/packages/corbado_api_client/lib/frontendapi/.gitignore
index 1be28ce..4298cdc 100644
--- a/packages/corbado_api_client/lib/frontendapi/.gitignore
+++ b/packages/corbado_api_client/lib/frontendapi/.gitignore
@@ -1,12 +1,36 @@
 # See https://dart.dev/guides/libraries/private-files
 
+# Files and directories created by pub
 .dart_tool/
+.buildlog
 .packages
+.project
+.pub/
 build/
-pubspec.lock  # Except for application packages
+**/packages/
 
+# Files created by dart2js
+# (Most Dart developers will use pub build to compile Dart, use/modify these
+#  rules if you intend to use dart2js directly
+#  Convention is to use extension '.dart.js' for Dart compiled to Javascript to
+#  differentiate from explicit Javascript files)
+*.dart.js
+*.part.js
+*.js.deps
+*.js.map
+*.info.json
+
+# Directory created by dartdoc
 doc/api/
 
+# Don't commit pubspec lock file
+# (Library packages only! Remove pattern if developing an application package)
+pubspec.lock
+
+# Donâ€™t commit files and directories created by other development environments.
+# For example, if your development environment creates any of the following files,
+# consider putting them in a global ignore file:
+
 # IntelliJ
 *.iml
 *.ipr
diff --git a/packages/corbado_api_client/lib/frontendapi/.openapi-generator/FILES b/packages/corbado_api_client/lib/frontendapi/.openapi-generator/FILES
index d963e42..e6511e1 100644
--- a/packages/corbado_api_client/lib/frontendapi/.openapi-generator/FILES
+++ b/packages/corbado_api_client/lib/frontendapi/.openapi-generator/FILES
@@ -1,298 +1,288 @@
 .gitignore
-.openapi-generator-ignore
-.travis.yml
 README.md
 analysis_options.yaml
-doc/AppleAppSiteAssociationRsp.md
-doc/AppleAppSiteAssociationRspApplinks.md
-doc/AppleAppSiteAssociationRspApplinksDetailsInner.md
-doc/AppleAppSiteAssociationRspWebcredentials.md
-doc/AssetLink.md
-doc/AssetLinkTarget.md
-doc/AssetsApi.md
-doc/AuthMethod.md
-doc/AuthMethodsListReq.md
-doc/AuthMethodsListRsp.md
-doc/AuthMethodsListRspAllOf.md
-doc/AuthMethodsListRspAllOfData.md
-doc/AuthenticationRsp.md
-doc/EmailCodeConfirmReq.md
-doc/EmailCodeConfirmRsp.md
-doc/EmailCodeLoginStartReq.md
-doc/EmailCodeLoginStartRsp.md
-doc/EmailCodeRegisterStartReq.md
-doc/EmailCodeRegisterStartRsp.md
-doc/EmailCodeRegisterStartRspAllOf.md
-doc/EmailCodeRegisterStartRspAllOfData.md
-doc/EmailCodeStatusReq.md
-doc/EmailCodeStatusRsp.md
-doc/EmailLinkConfirmReq.md
-doc/EmailLinkConfirmRsp.md
-doc/EmailLinkConfirmRspAllOf.md
-doc/EmailLinkConfirmRspAllOfData.md
-doc/EmailLinkConfirmRspAllOfDataAllOf.md
-doc/EmailLinkLoginStartReq.md
-doc/EmailLinkLoginStartRsp.md
-doc/EmailLinkRegisterStartReq.md
-doc/EmailLinkRegisterStartRsp.md
-doc/EmailLinkRegisterStartRspAllOf.md
-doc/EmailLinkRegisterStartRspAllOfData.md
-doc/EmailLinkStatusReq.md
-doc/EmailLinkStatusRsp.md
-doc/EmptyReq.md
-doc/ErrorRsp.md
-doc/ErrorRspAllOf.md
-doc/ErrorRspAllOfError.md
-doc/ErrorRspAllOfErrorValidation.md
-doc/FullUser.md
+doc/AuthApi.md
+doc/AuthType.md
+doc/BlockBody.md
+doc/BlockBodyData.md
+doc/BlockType.md
+doc/ClientCapabilities.md
+doc/ClientInformation.md
+doc/ConfigsApi.md
+doc/ConnectAppendFinishReq.md
+doc/ConnectAppendFinishRsp.md
+doc/ConnectAppendInitReq.md
+doc/ConnectAppendInitRsp.md
+doc/ConnectAppendStartReq.md
+doc/ConnectAppendStartRsp.md
+doc/ConnectEventCreateReq.md
+doc/ConnectLoginFinishReq.md
+doc/ConnectLoginFinishRsp.md
+doc/ConnectLoginInitReq.md
+doc/ConnectLoginInitRsp.md
+doc/ConnectLoginStartReq.md
+doc/ConnectLoginStartRsp.md
+doc/ConnectManageDeleteReq.md
+doc/ConnectManageDeleteRsp.md
+doc/ConnectManageInitReq.md
+doc/ConnectManageInitRsp.md
+doc/ConnectManageListReq.md
+doc/ConnectManageListRsp.md
+doc/ContinueOnOtherDevice.md
+doc/CorbadoConnectApi.md
+doc/EventCreateReq.md
+doc/FullNameWithError.md
+doc/GeneralBlockCompleted.md
+doc/GeneralBlockLoginInit.md
+doc/GeneralBlockPasskeyAppend.md
+doc/GeneralBlockPasskeyAppended.md
+doc/GeneralBlockPasskeyVerify.md
+doc/GeneralBlockPostSignupEmailVerify.md
+doc/GeneralBlockSignupInit.md
+doc/GeneralBlockVerifyIdentifier.md
+doc/GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner.md
 doc/GenericRsp.md
-doc/Jwk.md
+doc/Identifier.md
+doc/IdentifierUpdateReq.md
+doc/IdentifierVerifyFinishReq.md
+doc/IdentifierVerifyStartReq.md
+doc/JavaScriptHighEntropy.md
+doc/LoginIdentifier.md
+doc/LoginIdentifierConfig.md
 doc/LoginIdentifierType.md
-doc/LoginTokenReq.md
-doc/LoginTokenRsp.md
-doc/LogoutRsp.md
-doc/LogoutRspAllOf.md
-doc/MePassKeyRsp.md
-doc/MePassKeyRspAllOf.md
+doc/LoginIdentifierWithError.md
+doc/LoginInitReq.md
+doc/MeIdentifierCreateReq.md
+doc/MeIdentifierDeleteReq.md
+doc/MeIdentifierUpdateReq.md
+doc/MeIdentifierVerifyFinishReq.md
+doc/MeIdentifierVerifyStartReq.md
+doc/MePasskeyDeleteRsp.md
+doc/MePasskeyRsp.md
+doc/MePasskeysAppendFinishReq.md
+doc/MePasskeysAppendStartReq.md
+doc/MePasskeysAppendStartRsp.md
+doc/MeRefreshRsp.md
 doc/MeRsp.md
-doc/MeRspAllOf.md
+doc/MeUpdateReq.md
 doc/Paging.md
-doc/PassKeyAppendFinishRsp.md
-doc/PassKeyAppendFinishRspAllOf.md
-doc/PassKeyAppendFinishRspAllOfData.md
-doc/PassKeyAssociateStartReq.md
-doc/PassKeyCredentialExistsReq.md
-doc/PassKeyCredentialExistsRsp.md
-doc/PassKeyCredentialExistsRspAllOf.md
-doc/PassKeyFinishReq.md
-doc/PassKeyItem.md
-doc/PassKeyList.md
-doc/PassKeyLoginFinishRsp.md
-doc/PassKeyLoginFinishRspAllOf.md
-doc/PassKeyLoginFinishRspAllOfData.md
-doc/PassKeyLoginFinishRspAllOfDataAllOf.md
-doc/PassKeyLoginStartReq.md
-doc/PassKeyMediationStartReq.md
-doc/PassKeyMediationStartRsp.md
-doc/PassKeyMediationStartRspAllOf.md
-doc/PassKeyMediationStartRspAllOfData.md
-doc/PassKeyRegisterFinishRsp.md
-doc/PassKeyRegisterFinishRspAllOf.md
-doc/PassKeyRegisterStartReq.md
-doc/PassKeyStartRsp.md
-doc/PassKeyStartRspAllOf.md
-doc/PassKeyStartRspAllOfData.md
-doc/PasswordVerifyReq.md
-doc/PasswordVerifyRsp.md
-doc/ProjectConfigRsp.md
-doc/ProjectConfigRspAllOf.md
-doc/ProjectConfigRspAllOfData.md
-doc/ProjectsApi.md
+doc/Passkey.md
+doc/PasskeyAppendFinishReq.md
+doc/PasskeyAppendStartReq.md
+doc/PasskeyEventType.md
+doc/PasskeyIconSet.md
+doc/PasskeyLoginFinishReq.md
+doc/PasskeyLoginStartReq.md
+doc/PasskeyMediationFinishReq.md
+doc/PasskeyOperation.md
+doc/ProcessCommon.md
+doc/ProcessInitReq.md
+doc/ProcessInitRsp.md
+doc/ProcessResponse.md
+doc/ProcessStaticInfo.md
 doc/RequestData.md
-doc/SessionRefreshRsp.md
-doc/SessionsApi.md
-doc/ShortSession.md
-doc/Status.md
-doc/UserEmail.md
-doc/UserPhoneNumber.md
+doc/RequestError.md
+doc/SessionConfigRsp.md
+doc/ShortSessionCookieConfig.md
+doc/SignupInitReq.md
+doc/SocialAccount.md
+doc/SocialData.md
+doc/SocialProviderType.md
+doc/SocialVerifyStartReq.md
+doc/UserDetailsConfigRsp.md
 doc/UsersApi.md
-doc/WellKnownJWKSListRsp.md
-git_push.sh
-lib/api.dart
-lib/api/assets_api.dart
-lib/api/projects_api.dart
-lib/api/sessions_api.dart
-lib/api/users_api.dart
-lib/api_client.dart
-lib/api_exception.dart
-lib/api_helper.dart
-lib/auth/api_key_auth.dart
-lib/auth/authentication.dart
-lib/auth/http_basic_auth.dart
-lib/auth/http_bearer_auth.dart
-lib/auth/oauth.dart
-lib/model/apple_app_site_association_rsp.dart
-lib/model/apple_app_site_association_rsp_applinks.dart
-lib/model/apple_app_site_association_rsp_applinks_details_inner.dart
-lib/model/apple_app_site_association_rsp_webcredentials.dart
-lib/model/asset_link.dart
-lib/model/asset_link_target.dart
-lib/model/auth_method.dart
-lib/model/auth_methods_list_req.dart
-lib/model/auth_methods_list_rsp.dart
-lib/model/auth_methods_list_rsp_all_of.dart
-lib/model/auth_methods_list_rsp_all_of_data.dart
-lib/model/authentication_rsp.dart
-lib/model/email_code_confirm_req.dart
-lib/model/email_code_confirm_rsp.dart
-lib/model/email_code_login_start_req.dart
-lib/model/email_code_login_start_rsp.dart
-lib/model/email_code_register_start_req.dart
-lib/model/email_code_register_start_rsp.dart
-lib/model/email_code_register_start_rsp_all_of.dart
-lib/model/email_code_register_start_rsp_all_of_data.dart
-lib/model/email_code_status_req.dart
-lib/model/email_code_status_rsp.dart
-lib/model/email_link_confirm_req.dart
-lib/model/email_link_confirm_rsp.dart
-lib/model/email_link_confirm_rsp_all_of.dart
-lib/model/email_link_confirm_rsp_all_of_data.dart
-lib/model/email_link_confirm_rsp_all_of_data_all_of.dart
-lib/model/email_link_login_start_req.dart
-lib/model/email_link_login_start_rsp.dart
-lib/model/email_link_register_start_req.dart
-lib/model/email_link_register_start_rsp.dart
-lib/model/email_link_register_start_rsp_all_of.dart
-lib/model/email_link_register_start_rsp_all_of_data.dart
-lib/model/email_link_status_req.dart
-lib/model/email_link_status_rsp.dart
-lib/model/empty_req.dart
-lib/model/error_rsp.dart
-lib/model/error_rsp_all_of.dart
-lib/model/error_rsp_all_of_error.dart
-lib/model/error_rsp_all_of_error_validation.dart
-lib/model/full_user.dart
-lib/model/generic_rsp.dart
-lib/model/jwk.dart
-lib/model/login_identifier_type.dart
-lib/model/login_token_req.dart
-lib/model/login_token_rsp.dart
-lib/model/logout_rsp.dart
-lib/model/logout_rsp_all_of.dart
-lib/model/me_pass_key_rsp.dart
-lib/model/me_pass_key_rsp_all_of.dart
-lib/model/me_rsp.dart
-lib/model/me_rsp_all_of.dart
-lib/model/paging.dart
-lib/model/pass_key_append_finish_rsp.dart
-lib/model/pass_key_append_finish_rsp_all_of.dart
-lib/model/pass_key_append_finish_rsp_all_of_data.dart
-lib/model/pass_key_associate_start_req.dart
-lib/model/pass_key_credential_exists_req.dart
-lib/model/pass_key_credential_exists_rsp.dart
-lib/model/pass_key_credential_exists_rsp_all_of.dart
-lib/model/pass_key_finish_req.dart
-lib/model/pass_key_item.dart
-lib/model/pass_key_list.dart
-lib/model/pass_key_login_finish_rsp.dart
-lib/model/pass_key_login_finish_rsp_all_of.dart
-lib/model/pass_key_login_finish_rsp_all_of_data.dart
-lib/model/pass_key_login_finish_rsp_all_of_data_all_of.dart
-lib/model/pass_key_login_start_req.dart
-lib/model/pass_key_mediation_start_req.dart
-lib/model/pass_key_mediation_start_rsp.dart
-lib/model/pass_key_mediation_start_rsp_all_of.dart
-lib/model/pass_key_mediation_start_rsp_all_of_data.dart
-lib/model/pass_key_register_finish_rsp.dart
-lib/model/pass_key_register_finish_rsp_all_of.dart
-lib/model/pass_key_register_start_req.dart
-lib/model/pass_key_start_rsp.dart
-lib/model/pass_key_start_rsp_all_of.dart
-lib/model/pass_key_start_rsp_all_of_data.dart
-lib/model/password_verify_req.dart
-lib/model/password_verify_rsp.dart
-lib/model/project_config_rsp.dart
-lib/model/project_config_rsp_all_of.dart
-lib/model/project_config_rsp_all_of_data.dart
-lib/model/request_data.dart
-lib/model/session_refresh_rsp.dart
-lib/model/short_session.dart
-lib/model/status.dart
-lib/model/user_email.dart
-lib/model/user_phone_number.dart
-lib/model/well_known_jwks_list_rsp.dart
+doc/VerificationMethod.md
+lib/corbado_frontend_api_client.dart
+lib/src/api.dart
+lib/src/api/auth_api.dart
+lib/src/api/configs_api.dart
+lib/src/api/corbado_connect_api.dart
+lib/src/api/users_api.dart
+lib/src/api_util.dart
+lib/src/auth/api_key_auth.dart
+lib/src/auth/auth.dart
+lib/src/auth/basic_auth.dart
+lib/src/auth/bearer_auth.dart
+lib/src/auth/oauth.dart
+lib/src/date_serializer.dart
+lib/src/model/auth_type.dart
+lib/src/model/block_body.dart
+lib/src/model/block_body_data.dart
+lib/src/model/block_type.dart
+lib/src/model/client_capabilities.dart
+lib/src/model/client_information.dart
+lib/src/model/connect_append_finish_req.dart
+lib/src/model/connect_append_finish_rsp.dart
+lib/src/model/connect_append_init_req.dart
+lib/src/model/connect_append_init_rsp.dart
+lib/src/model/connect_append_start_req.dart
+lib/src/model/connect_append_start_rsp.dart
+lib/src/model/connect_event_create_req.dart
+lib/src/model/connect_login_finish_req.dart
+lib/src/model/connect_login_finish_rsp.dart
+lib/src/model/connect_login_init_req.dart
+lib/src/model/connect_login_init_rsp.dart
+lib/src/model/connect_login_start_req.dart
+lib/src/model/connect_login_start_rsp.dart
+lib/src/model/connect_manage_delete_req.dart
+lib/src/model/connect_manage_delete_rsp.dart
+lib/src/model/connect_manage_init_req.dart
+lib/src/model/connect_manage_init_rsp.dart
+lib/src/model/connect_manage_list_req.dart
+lib/src/model/connect_manage_list_rsp.dart
+lib/src/model/continue_on_other_device.dart
+lib/src/model/date.dart
+lib/src/model/event_create_req.dart
+lib/src/model/full_name_with_error.dart
+lib/src/model/general_block_completed.dart
+lib/src/model/general_block_login_init.dart
+lib/src/model/general_block_passkey_append.dart
+lib/src/model/general_block_passkey_appended.dart
+lib/src/model/general_block_passkey_verify.dart
+lib/src/model/general_block_post_signup_email_verify.dart
+lib/src/model/general_block_signup_init.dart
+lib/src/model/general_block_verify_identifier.dart
+lib/src/model/general_block_verify_identifier_alternative_verification_methods_inner.dart
+lib/src/model/generic_rsp.dart
+lib/src/model/identifier.dart
+lib/src/model/identifier_update_req.dart
+lib/src/model/identifier_verify_finish_req.dart
+lib/src/model/identifier_verify_start_req.dart
+lib/src/model/java_script_high_entropy.dart
+lib/src/model/login_identifier.dart
+lib/src/model/login_identifier_config.dart
+lib/src/model/login_identifier_type.dart
+lib/src/model/login_identifier_with_error.dart
+lib/src/model/login_init_req.dart
+lib/src/model/me_identifier_create_req.dart
+lib/src/model/me_identifier_delete_req.dart
+lib/src/model/me_identifier_update_req.dart
+lib/src/model/me_identifier_verify_finish_req.dart
+lib/src/model/me_identifier_verify_start_req.dart
+lib/src/model/me_passkey_delete_rsp.dart
+lib/src/model/me_passkey_rsp.dart
+lib/src/model/me_passkeys_append_finish_req.dart
+lib/src/model/me_passkeys_append_start_req.dart
+lib/src/model/me_passkeys_append_start_rsp.dart
+lib/src/model/me_refresh_rsp.dart
+lib/src/model/me_rsp.dart
+lib/src/model/me_update_req.dart
+lib/src/model/paging.dart
+lib/src/model/passkey.dart
+lib/src/model/passkey_append_finish_req.dart
+lib/src/model/passkey_append_start_req.dart
+lib/src/model/passkey_event_type.dart
+lib/src/model/passkey_icon_set.dart
+lib/src/model/passkey_login_finish_req.dart
+lib/src/model/passkey_login_start_req.dart
+lib/src/model/passkey_mediation_finish_req.dart
+lib/src/model/passkey_operation.dart
+lib/src/model/process_common.dart
+lib/src/model/process_init_req.dart
+lib/src/model/process_init_rsp.dart
+lib/src/model/process_response.dart
+lib/src/model/process_static_info.dart
+lib/src/model/request_data.dart
+lib/src/model/request_error.dart
+lib/src/model/session_config_rsp.dart
+lib/src/model/short_session_cookie_config.dart
+lib/src/model/signup_init_req.dart
+lib/src/model/social_account.dart
+lib/src/model/social_data.dart
+lib/src/model/social_provider_type.dart
+lib/src/model/social_verify_start_req.dart
+lib/src/model/user_details_config_rsp.dart
+lib/src/model/verification_method.dart
+lib/src/serializers.dart
 pubspec.yaml
-test/apple_app_site_association_rsp_applinks_details_inner_test.dart
-test/apple_app_site_association_rsp_applinks_test.dart
-test/apple_app_site_association_rsp_test.dart
-test/apple_app_site_association_rsp_webcredentials_test.dart
-test/asset_link_target_test.dart
-test/asset_link_test.dart
-test/assets_api_test.dart
-test/auth_method_test.dart
-test/auth_methods_list_req_test.dart
-test/auth_methods_list_rsp_all_of_data_test.dart
-test/auth_methods_list_rsp_all_of_test.dart
-test/auth_methods_list_rsp_test.dart
-test/authentication_rsp_test.dart
-test/email_code_confirm_req_test.dart
-test/email_code_confirm_rsp_test.dart
-test/email_code_login_start_req_test.dart
-test/email_code_login_start_rsp_test.dart
-test/email_code_register_start_req_test.dart
-test/email_code_register_start_rsp_all_of_data_test.dart
-test/email_code_register_start_rsp_all_of_test.dart
-test/email_code_register_start_rsp_test.dart
-test/email_code_status_req_test.dart
-test/email_code_status_rsp_test.dart
-test/email_link_confirm_req_test.dart
-test/email_link_confirm_rsp_all_of_data_all_of_test.dart
-test/email_link_confirm_rsp_all_of_data_test.dart
-test/email_link_confirm_rsp_all_of_test.dart
-test/email_link_confirm_rsp_test.dart
-test/email_link_login_start_req_test.dart
-test/email_link_login_start_rsp_test.dart
-test/email_link_register_start_req_test.dart
-test/email_link_register_start_rsp_all_of_data_test.dart
-test/email_link_register_start_rsp_all_of_test.dart
-test/email_link_register_start_rsp_test.dart
-test/email_link_status_req_test.dart
-test/email_link_status_rsp_test.dart
-test/empty_req_test.dart
-test/error_rsp_all_of_error_test.dart
-test/error_rsp_all_of_error_validation_test.dart
-test/error_rsp_all_of_test.dart
-test/error_rsp_test.dart
-test/full_user_test.dart
+test/auth_api_test.dart
+test/auth_type_test.dart
+test/block_body_data_test.dart
+test/block_body_test.dart
+test/block_type_test.dart
+test/client_capabilities_test.dart
+test/client_information_test.dart
+test/configs_api_test.dart
+test/connect_append_finish_req_test.dart
+test/connect_append_finish_rsp_test.dart
+test/connect_append_init_req_test.dart
+test/connect_append_init_rsp_test.dart
+test/connect_append_start_req_test.dart
+test/connect_append_start_rsp_test.dart
+test/connect_event_create_req_test.dart
+test/connect_login_finish_req_test.dart
+test/connect_login_finish_rsp_test.dart
+test/connect_login_init_req_test.dart
+test/connect_login_init_rsp_test.dart
+test/connect_login_start_req_test.dart
+test/connect_login_start_rsp_test.dart
+test/connect_manage_delete_req_test.dart
+test/connect_manage_delete_rsp_test.dart
+test/connect_manage_init_req_test.dart
+test/connect_manage_init_rsp_test.dart
+test/connect_manage_list_req_test.dart
+test/connect_manage_list_rsp_test.dart
+test/continue_on_other_device_test.dart
+test/corbado_connect_api_test.dart
+test/event_create_req_test.dart
+test/full_name_with_error_test.dart
+test/general_block_completed_test.dart
+test/general_block_login_init_test.dart
+test/general_block_passkey_append_test.dart
+test/general_block_passkey_appended_test.dart
+test/general_block_passkey_verify_test.dart
+test/general_block_post_signup_email_verify_test.dart
+test/general_block_signup_init_test.dart
+test/general_block_verify_identifier_alternative_verification_methods_inner_test.dart
+test/general_block_verify_identifier_test.dart
 test/generic_rsp_test.dart
-test/jwk_test.dart
+test/identifier_test.dart
+test/identifier_update_req_test.dart
+test/identifier_verify_finish_req_test.dart
+test/identifier_verify_start_req_test.dart
+test/java_script_high_entropy_test.dart
+test/login_identifier_config_test.dart
+test/login_identifier_test.dart
 test/login_identifier_type_test.dart
-test/login_token_req_test.dart
-test/login_token_rsp_test.dart
-test/logout_rsp_all_of_test.dart
-test/logout_rsp_test.dart
-test/me_pass_key_rsp_all_of_test.dart
-test/me_pass_key_rsp_test.dart
-test/me_rsp_all_of_test.dart
+test/login_identifier_with_error_test.dart
+test/login_init_req_test.dart
+test/me_identifier_create_req_test.dart
+test/me_identifier_delete_req_test.dart
+test/me_identifier_update_req_test.dart
+test/me_identifier_verify_finish_req_test.dart
+test/me_identifier_verify_start_req_test.dart
+test/me_passkey_delete_rsp_test.dart
+test/me_passkey_rsp_test.dart
+test/me_passkeys_append_finish_req_test.dart
+test/me_passkeys_append_start_req_test.dart
+test/me_passkeys_append_start_rsp_test.dart
+test/me_refresh_rsp_test.dart
 test/me_rsp_test.dart
+test/me_update_req_test.dart
 test/paging_test.dart
-test/pass_key_append_finish_rsp_all_of_data_test.dart
-test/pass_key_append_finish_rsp_all_of_test.dart
-test/pass_key_append_finish_rsp_test.dart
-test/pass_key_associate_start_req_test.dart
-test/pass_key_credential_exists_req_test.dart
-test/pass_key_credential_exists_rsp_all_of_test.dart
-test/pass_key_credential_exists_rsp_test.dart
-test/pass_key_finish_req_test.dart
-test/pass_key_item_test.dart
-test/pass_key_list_test.dart
-test/pass_key_login_finish_rsp_all_of_data_all_of_test.dart
-test/pass_key_login_finish_rsp_all_of_data_test.dart
-test/pass_key_login_finish_rsp_all_of_test.dart
-test/pass_key_login_finish_rsp_test.dart
-test/pass_key_login_start_req_test.dart
-test/pass_key_mediation_start_req_test.dart
-test/pass_key_mediation_start_rsp_all_of_data_test.dart
-test/pass_key_mediation_start_rsp_all_of_test.dart
-test/pass_key_mediation_start_rsp_test.dart
-test/pass_key_register_finish_rsp_all_of_test.dart
-test/pass_key_register_finish_rsp_test.dart
-test/pass_key_register_start_req_test.dart
-test/pass_key_start_rsp_all_of_data_test.dart
-test/pass_key_start_rsp_all_of_test.dart
-test/pass_key_start_rsp_test.dart
-test/password_verify_req_test.dart
-test/password_verify_rsp_test.dart
-test/project_config_rsp_all_of_data_test.dart
-test/project_config_rsp_all_of_test.dart
-test/project_config_rsp_test.dart
-test/projects_api_test.dart
+test/passkey_append_finish_req_test.dart
+test/passkey_append_start_req_test.dart
+test/passkey_event_type_test.dart
+test/passkey_icon_set_test.dart
+test/passkey_login_finish_req_test.dart
+test/passkey_login_start_req_test.dart
+test/passkey_mediation_finish_req_test.dart
+test/passkey_operation_test.dart
+test/passkey_test.dart
+test/process_common_test.dart
+test/process_init_req_test.dart
+test/process_init_rsp_test.dart
+test/process_response_test.dart
+test/process_static_info_test.dart
 test/request_data_test.dart
-test/session_refresh_rsp_test.dart
-test/sessions_api_test.dart
-test/short_session_test.dart
-test/status_test.dart
-test/user_email_test.dart
-test/user_phone_number_test.dart
+test/request_error_test.dart
+test/session_config_rsp_test.dart
+test/short_session_cookie_config_test.dart
+test/signup_init_req_test.dart
+test/social_account_test.dart
+test/social_data_test.dart
+test/social_provider_type_test.dart
+test/social_verify_start_req_test.dart
+test/user_details_config_rsp_test.dart
 test/users_api_test.dart
-test/well_known_jwks_list_rsp_test.dart
+test/verification_method_test.dart
diff --git a/packages/corbado_api_client/lib/frontendapi/.travis.yml b/packages/corbado_api_client/lib/frontendapi/.travis.yml
deleted file mode 100644
index 2774ccb..0000000
--- a/packages/corbado_api_client/lib/frontendapi/.travis.yml
+++ /dev/null
@@ -1,14 +0,0 @@
-#
-# AUTO-GENERATED FILE, DO NOT MODIFY!
-#
-# https://docs.travis-ci.com/user/languages/dart/
-#
-language: dart
-dart:
-# Install a specific stable release
-- "2.12"
-install:
-- pub get
-
-script:
-- pub run test
diff --git a/packages/corbado_api_client/lib/frontendapi/CHANGELOG.md b/packages/corbado_api_client/lib/frontendapi/CHANGELOG.md
new file mode 100644
index 0000000..823d56a
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/CHANGELOG.md
@@ -0,0 +1,28 @@
+## 2.1.1
+* Fixes Platform.version exception on Web
+
+## 2.1.0
+* Added `X-Corbado-SDK` header to all requests.
+
+## 2.0.0
+* Changed to FrontendAPI v2.
+
+## 1.1.1
+
+* Bump dependency versions (intl, meta, http).
+
+## 1.1.0
+
+* Added support for email OTP endpoints.
+
+## 1.0.0
+
+* Better comments. Stable release.
+
+## 0.1.1
+
+* Add a short README.md.
+
+## 0.1.0
+
+* Initial Open Source release.
diff --git a/packages/corbado_api_client/lib/frontendapi/LICENSE b/packages/corbado_api_client/lib/frontendapi/LICENSE
new file mode 100644
index 0000000..8180035
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/LICENSE
@@ -0,0 +1,27 @@
+Copyright (c) 2023, Corbado GmbH
+
+All rights reserved.
+
+Redistribution and use in source and binary forms, with or without modification,
+are permitted provided that the following conditions are met:
+
+    * Redistributions of source code must retain the above copyright notice,
+      this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above copyright notice,
+      this list of conditions and the following disclaimer in the documentation
+      and/or other materials provided with the distribution.
+    * Neither the name of {{ project }} nor the names of its contributors
+      may be used to endorse or promote products derived from this software
+      without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
+CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
\ No newline at end of file
diff --git a/packages/corbado_api_client/lib/frontendapi/README.md b/packages/corbado_api_client/lib/frontendapi/README.md
index 5657b9c..7a8d083 100644
--- a/packages/corbado_api_client/lib/frontendapi/README.md
+++ b/packages/corbado_api_client/lib/frontendapi/README.md
@@ -1,196 +1,206 @@
-# corbado_api
+# corbado_frontend_api_client (EXPERIMENTAL)
 Overview of all Corbado Frontend API calls to implement passwordless authentication.
 
 This Dart package is automatically generated by the [OpenAPI Generator](https://openapi-generator.tech) project:
 
-- API version: 1.0.0
-- Build package: org.openapitools.codegen.languages.DartClientCodegen
+- API version: 2.0.4
+- Build package: org.openapitools.codegen.languages.DartDioClientCodegen
 For more information, please visit [https://www.corbado.com](https://www.corbado.com)
 
 ## Requirements
 
-Dart 2.12 or later
+* Dart 2.15.0+ or Flutter 2.8.0+
+* Dio 5.0.0+ (https://pub.dev/packages/dio)
 
 ## Installation & Usage
 
-### Github
-If this Dart package is published to Github, add the following dependency to your pubspec.yaml
-```
+### pub.dev
+To use the package from [pub.dev](https://pub.dev), please include the following in pubspec.yaml
+```yaml
 dependencies:
-  corbado_api:
-    git: https://github.com/GIT_USER_ID/GIT_REPO_ID.git
+  corbado_frontend_api_client: 2.0.0
 ```
 
-### Local
-To use the package in your local drive, add the following dependency to your pubspec.yaml
-```
+### Github
+If this Dart package is published to Github, please include the following in pubspec.yaml
+```yaml
 dependencies:
-  corbado_api:
-    path: /path/to/corbado_api
+  corbado_frontend_api_client:
+    git:
+      url: https://github.com/GIT_USER_ID/GIT_REPO_ID.git
+      #ref: main
 ```
 
-## Tests
-
-TODO
+### Local development
+To use the package from your local drive, please include the following in pubspec.yaml
+```yaml
+dependencies:
+  corbado_frontend_api_client:
+    path: /path/to/corbado_frontend_api_client
+```
 
 ## Getting Started
 
 Please follow the [installation procedure](#installation--usage) and then run the following:
 
 ```dart
-import 'package:corbado_api/api.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
 
-// TODO Configure HTTP Bearer authorization: bearerAuth
-// Case 1. Use String Token
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken('YOUR_ACCESS_TOKEN');
-// Case 2. Use Function which generate token.
-// String yourTokenGeneratorFunction() { ... }
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken(yourTokenGeneratorFunction);
-// TODO Configure API key authorization: projectID
-//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
-// uncomment below to setup prefix (e.g. Bearer) for API key, if needed
-//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
 
-final api_instance = AssetsApi();
+final api = CorbadoFrontendApiClient().getAuthApi();
 
 try {
-    final result = api_instance.appleAppSiteAssociation();
-    print(result);
-} catch (e) {
-    print('Exception when calling AssetsApi->appleAppSiteAssociation: $e\n');
+    final response = await api.blockSkip();
+    print(response);
+} catch on DioException (e) {
+    print("Exception when calling AuthApi->blockSkip: $e\n");
 }
 
 ```
 
 ## Documentation for API Endpoints
 
-All URIs are relative to *https://<project ID>.frontendapi.corbado.io*
+All URIs are relative to *https://&lt;project ID&gt;.frontendapi.corbado.io*
 
 Class | Method | HTTP request | Description
 ------------ | ------------- | ------------- | -------------
-*AssetsApi* | [**appleAppSiteAssociation**](doc//AssetsApi.md#appleappsiteassociation) | **GET** /.well-known/apple-app-site-association | 
-*AssetsApi* | [**assetLinks**](doc//AssetsApi.md#assetlinks) | **GET** /.well-known/assetlinks.json | 
-*ProjectsApi* | [**projectConfig**](doc//ProjectsApi.md#projectconfig) | **GET** /v1/projects/projectConfig | 
-*SessionsApi* | [**sessionLogout**](doc//SessionsApi.md#sessionlogout) | **DELETE** /v1/sessions/logout | 
-*SessionsApi* | [**sessionRefresh**](doc//SessionsApi.md#sessionrefresh) | **PUT** /v1/sessions/refresh | 
-*SessionsApi* | [**wellKnownJWKSList**](doc//SessionsApi.md#wellknownjwkslist) | **GET** /.well-known/jwks | 
-*UsersApi* | [**authMethodsList**](doc//UsersApi.md#authmethodslist) | **POST** /v1/users/authmethods | 
-*UsersApi* | [**currentUserGet**](doc//UsersApi.md#currentuserget) | **GET** /v1/me | 
-*UsersApi* | [**currentUserPassKeyDelete**](doc//UsersApi.md#currentuserpasskeydelete) | **DELETE** /v1/me/passkeys/{credentialID} | 
-*UsersApi* | [**currentUserPassKeyGet**](doc//UsersApi.md#currentuserpasskeyget) | **GET** /v1/me/passkeys | 
-*UsersApi* | [**emailCodeConfirm**](doc//UsersApi.md#emailcodeconfirm) | **POST** /v1/users/emailcodes/confirm | 
-*UsersApi* | [**emailCodeLoginStart**](doc//UsersApi.md#emailcodeloginstart) | **POST** /v1/users/emailcodes/login/start | 
-*UsersApi* | [**emailCodeRegisterStart**](doc//UsersApi.md#emailcoderegisterstart) | **POST** /v1/users/emailcodes/register/start | 
-*UsersApi* | [**emailCodeStatus**](doc//UsersApi.md#emailcodestatus) | **POST** /v1/users/emailcodes/status | 
-*UsersApi* | [**emailLinkConfirm**](doc//UsersApi.md#emaillinkconfirm) | **POST** /v1/users/emaillinks/confirm | 
-*UsersApi* | [**emailLinkLoginStart**](doc//UsersApi.md#emaillinkloginstart) | **POST** /v1/users/emaillinks/login/start | 
-*UsersApi* | [**emailLinkRegisterStart**](doc//UsersApi.md#emaillinkregisterstart) | **POST** /v1/users/emaillinks/register/start | 
-*UsersApi* | [**emailLinkStatus**](doc//UsersApi.md#emaillinkstatus) | **POST** /v1/users/emaillinks/status | 
-*UsersApi* | [**loginToken**](doc//UsersApi.md#logintoken) | **POST** /v1/users/logintoken | 
-*UsersApi* | [**passKeyAppendFinish**](doc//UsersApi.md#passkeyappendfinish) | **POST** /v1/users/passkey/append/finish | 
-*UsersApi* | [**passKeyAppendStart**](doc//UsersApi.md#passkeyappendstart) | **POST** /v1/users/passkey/append/start | 
-*UsersApi* | [**passKeyAssociateStart**](doc//UsersApi.md#passkeyassociatestart) | **POST** /v1/users/passkey/associate/start | 
-*UsersApi* | [**passKeyCredentialExists**](doc//UsersApi.md#passkeycredentialexists) | **POST** /v1/users/device/passkey | 
-*UsersApi* | [**passKeyLoginFinish**](doc//UsersApi.md#passkeyloginfinish) | **POST** /v1/users/passkey/login/finish | 
-*UsersApi* | [**passKeyLoginStart**](doc//UsersApi.md#passkeyloginstart) | **POST** /v1/users/passkey/login/start | 
-*UsersApi* | [**passKeyMediationStart**](doc//UsersApi.md#passkeymediationstart) | **POST** /v1/users/passkey/mediation/start | 
-*UsersApi* | [**passKeyRegisterFinish**](doc//UsersApi.md#passkeyregisterfinish) | **POST** /v1/users/passkey/register/finish | 
-*UsersApi* | [**passKeyRegisterStart**](doc//UsersApi.md#passkeyregisterstart) | **POST** /v1/users/passkey/register/start | 
-*UsersApi* | [**password**](doc//UsersApi.md#password) | **POST** /v1/users/password/verify | 
+[*AuthApi*](doc/AuthApi.md) | [**blockSkip**](doc/AuthApi.md#blockskip) | **POST** /v2/auth/block/skip | 
+[*AuthApi*](doc/AuthApi.md) | [**eventCreate**](doc/AuthApi.md#eventcreate) | **POST** /v2/auth/events | 
+[*AuthApi*](doc/AuthApi.md) | [**identifierUpdate**](doc/AuthApi.md#identifierupdate) | **POST** /v2/auth/identifier/update | 
+[*AuthApi*](doc/AuthApi.md) | [**identifierVerifyFinish**](doc/AuthApi.md#identifierverifyfinish) | **POST** /v2/auth/identifier/verify/finish | 
+[*AuthApi*](doc/AuthApi.md) | [**identifierVerifyStart**](doc/AuthApi.md#identifierverifystart) | **POST** /v2/auth/identifier/verify/start | 
+[*AuthApi*](doc/AuthApi.md) | [**identifierVerifyStatus**](doc/AuthApi.md#identifierverifystatus) | **GET** /v2/auth/identifier/verify/status | 
+[*AuthApi*](doc/AuthApi.md) | [**loginInit**](doc/AuthApi.md#logininit) | **POST** /v2/auth/login/init | 
+[*AuthApi*](doc/AuthApi.md) | [**passkeyAppendFinish**](doc/AuthApi.md#passkeyappendfinish) | **POST** /v2/auth/passkey/append/finish | 
+[*AuthApi*](doc/AuthApi.md) | [**passkeyAppendStart**](doc/AuthApi.md#passkeyappendstart) | **POST** /v2/auth/passkey/append/start | 
+[*AuthApi*](doc/AuthApi.md) | [**passkeyLoginFinish**](doc/AuthApi.md#passkeyloginfinish) | **POST** /v2/auth/passkey/login/finish | 
+[*AuthApi*](doc/AuthApi.md) | [**passkeyLoginStart**](doc/AuthApi.md#passkeyloginstart) | **POST** /v2/auth/passkey/login/start | 
+[*AuthApi*](doc/AuthApi.md) | [**passkeyMediationFinish**](doc/AuthApi.md#passkeymediationfinish) | **POST** /v2/auth/passkey/mediation/finish | 
+[*AuthApi*](doc/AuthApi.md) | [**processComplete**](doc/AuthApi.md#processcomplete) | **POST** /v2/auth/process/complete | 
+[*AuthApi*](doc/AuthApi.md) | [**processGet**](doc/AuthApi.md#processget) | **GET** /v2/auth/process | 
+[*AuthApi*](doc/AuthApi.md) | [**processInit**](doc/AuthApi.md#processinit) | **POST** /v2/auth/process/init | 
+[*AuthApi*](doc/AuthApi.md) | [**processReset**](doc/AuthApi.md#processreset) | **POST** /v2/auth/process/reset | 
+[*AuthApi*](doc/AuthApi.md) | [**signupInit**](doc/AuthApi.md#signupinit) | **POST** /v2/auth/signup/init | 
+[*AuthApi*](doc/AuthApi.md) | [**socialVerifyCallback**](doc/AuthApi.md#socialverifycallback) | **GET** /v2/auth/social/verify/callback | 
+[*AuthApi*](doc/AuthApi.md) | [**socialVerifyFinish**](doc/AuthApi.md#socialverifyfinish) | **POST** /v2/auth/social/verify/finish | 
+[*AuthApi*](doc/AuthApi.md) | [**socialVerifyStart**](doc/AuthApi.md#socialverifystart) | **POST** /v2/auth/social/verify/start | 
+[*ConfigsApi*](doc/ConfigsApi.md) | [**getSessionConfig**](doc/ConfigsApi.md#getsessionconfig) | **GET** /v2/session-config | 
+[*ConfigsApi*](doc/ConfigsApi.md) | [**getUserDetailsConfig**](doc/ConfigsApi.md#getuserdetailsconfig) | **GET** /v2/user-details-config | 
+[*CorbadoConnectApi*](doc/CorbadoConnectApi.md) | [**connectAppendFinish**](doc/CorbadoConnectApi.md#connectappendfinish) | **POST** /v2/connect/append/finish | 
+[*CorbadoConnectApi*](doc/CorbadoConnectApi.md) | [**connectAppendInit**](doc/CorbadoConnectApi.md#connectappendinit) | **POST** /v2/connect/append/init | 
+[*CorbadoConnectApi*](doc/CorbadoConnectApi.md) | [**connectAppendStart**](doc/CorbadoConnectApi.md#connectappendstart) | **POST** /v2/connect/append/start | 
+[*CorbadoConnectApi*](doc/CorbadoConnectApi.md) | [**connectEventCreate**](doc/CorbadoConnectApi.md#connecteventcreate) | **POST** /v2/connect/events | 
+[*CorbadoConnectApi*](doc/CorbadoConnectApi.md) | [**connectLoginFinish**](doc/CorbadoConnectApi.md#connectloginfinish) | **POST** /v2/connect/login/finish | 
+[*CorbadoConnectApi*](doc/CorbadoConnectApi.md) | [**connectLoginInit**](doc/CorbadoConnectApi.md#connectlogininit) | **POST** /v2/connect/login/init | 
+[*CorbadoConnectApi*](doc/CorbadoConnectApi.md) | [**connectLoginStart**](doc/CorbadoConnectApi.md#connectloginstart) | **POST** /v2/connect/login/start | 
+[*CorbadoConnectApi*](doc/CorbadoConnectApi.md) | [**connectManageDelete**](doc/CorbadoConnectApi.md#connectmanagedelete) | **POST** /v2/connect/manage/delete | 
+[*CorbadoConnectApi*](doc/CorbadoConnectApi.md) | [**connectManageInit**](doc/CorbadoConnectApi.md#connectmanageinit) | **POST** /v2/connect/manage/init | 
+[*CorbadoConnectApi*](doc/CorbadoConnectApi.md) | [**connectManageList**](doc/CorbadoConnectApi.md#connectmanagelist) | **POST** /v2/connect/manage/list | 
+[*UsersApi*](doc/UsersApi.md) | [**currentUserDelete**](doc/UsersApi.md#currentuserdelete) | **DELETE** /v2/me | 
+[*UsersApi*](doc/UsersApi.md) | [**currentUserGet**](doc/UsersApi.md#currentuserget) | **GET** /v2/me | 
+[*UsersApi*](doc/UsersApi.md) | [**currentUserIdentifierCreate**](doc/UsersApi.md#currentuseridentifiercreate) | **POST** /v2/me/identifier | 
+[*UsersApi*](doc/UsersApi.md) | [**currentUserIdentifierDelete**](doc/UsersApi.md#currentuseridentifierdelete) | **DELETE** /v2/me/identifier | 
+[*UsersApi*](doc/UsersApi.md) | [**currentUserIdentifierUpdate**](doc/UsersApi.md#currentuseridentifierupdate) | **PATCH** /v2/me/identifier | 
+[*UsersApi*](doc/UsersApi.md) | [**currentUserIdentifierVerifyFinish**](doc/UsersApi.md#currentuseridentifierverifyfinish) | **POST** /v2/me/identifier/verify/finish | 
+[*UsersApi*](doc/UsersApi.md) | [**currentUserIdentifierVerifyStart**](doc/UsersApi.md#currentuseridentifierverifystart) | **POST** /v2/me/identifier/verify/start | 
+[*UsersApi*](doc/UsersApi.md) | [**currentUserPasskeyAppendFinish**](doc/UsersApi.md#currentuserpasskeyappendfinish) | **POST** /v2/me/passkeys/append/finish | 
+[*UsersApi*](doc/UsersApi.md) | [**currentUserPasskeyAppendStart**](doc/UsersApi.md#currentuserpasskeyappendstart) | **POST** /v2/me/passkeys/append/start | 
+[*UsersApi*](doc/UsersApi.md) | [**currentUserPasskeyDelete**](doc/UsersApi.md#currentuserpasskeydelete) | **DELETE** /v2/me/passkeys/{credentialID} | 
+[*UsersApi*](doc/UsersApi.md) | [**currentUserPasskeyGet**](doc/UsersApi.md#currentuserpasskeyget) | **GET** /v2/me/passkeys | 
+[*UsersApi*](doc/UsersApi.md) | [**currentUserSessionLogout**](doc/UsersApi.md#currentusersessionlogout) | **POST** /v2/me/logout | 
+[*UsersApi*](doc/UsersApi.md) | [**currentUserSessionRefresh**](doc/UsersApi.md#currentusersessionrefresh) | **POST** /v2/me/refresh | 
+[*UsersApi*](doc/UsersApi.md) | [**currentUserUpdate**](doc/UsersApi.md#currentuserupdate) | **PATCH** /v2/me | 
 
 
 ## Documentation For Models
 
- - [AppleAppSiteAssociationRsp](doc//AppleAppSiteAssociationRsp.md)
- - [AppleAppSiteAssociationRspApplinks](doc//AppleAppSiteAssociationRspApplinks.md)
- - [AppleAppSiteAssociationRspApplinksDetailsInner](doc//AppleAppSiteAssociationRspApplinksDetailsInner.md)
- - [AppleAppSiteAssociationRspWebcredentials](doc//AppleAppSiteAssociationRspWebcredentials.md)
- - [AssetLink](doc//AssetLink.md)
- - [AssetLinkTarget](doc//AssetLinkTarget.md)
- - [AuthMethod](doc//AuthMethod.md)
- - [AuthMethodsListReq](doc//AuthMethodsListReq.md)
- - [AuthMethodsListRsp](doc//AuthMethodsListRsp.md)
- - [AuthMethodsListRspAllOf](doc//AuthMethodsListRspAllOf.md)
- - [AuthMethodsListRspAllOfData](doc//AuthMethodsListRspAllOfData.md)
- - [AuthenticationRsp](doc//AuthenticationRsp.md)
- - [EmailCodeConfirmReq](doc//EmailCodeConfirmReq.md)
- - [EmailCodeConfirmRsp](doc//EmailCodeConfirmRsp.md)
- - [EmailCodeLoginStartReq](doc//EmailCodeLoginStartReq.md)
- - [EmailCodeLoginStartRsp](doc//EmailCodeLoginStartRsp.md)
- - [EmailCodeRegisterStartReq](doc//EmailCodeRegisterStartReq.md)
- - [EmailCodeRegisterStartRsp](doc//EmailCodeRegisterStartRsp.md)
- - [EmailCodeRegisterStartRspAllOf](doc//EmailCodeRegisterStartRspAllOf.md)
- - [EmailCodeRegisterStartRspAllOfData](doc//EmailCodeRegisterStartRspAllOfData.md)
- - [EmailCodeStatusReq](doc//EmailCodeStatusReq.md)
- - [EmailCodeStatusRsp](doc//EmailCodeStatusRsp.md)
- - [EmailLinkConfirmReq](doc//EmailLinkConfirmReq.md)
- - [EmailLinkConfirmRsp](doc//EmailLinkConfirmRsp.md)
- - [EmailLinkConfirmRspAllOf](doc//EmailLinkConfirmRspAllOf.md)
- - [EmailLinkConfirmRspAllOfData](doc//EmailLinkConfirmRspAllOfData.md)
- - [EmailLinkConfirmRspAllOfDataAllOf](doc//EmailLinkConfirmRspAllOfDataAllOf.md)
- - [EmailLinkLoginStartReq](doc//EmailLinkLoginStartReq.md)
- - [EmailLinkLoginStartRsp](doc//EmailLinkLoginStartRsp.md)
- - [EmailLinkRegisterStartReq](doc//EmailLinkRegisterStartReq.md)
- - [EmailLinkRegisterStartRsp](doc//EmailLinkRegisterStartRsp.md)
- - [EmailLinkRegisterStartRspAllOf](doc//EmailLinkRegisterStartRspAllOf.md)
- - [EmailLinkRegisterStartRspAllOfData](doc//EmailLinkRegisterStartRspAllOfData.md)
- - [EmailLinkStatusReq](doc//EmailLinkStatusReq.md)
- - [EmailLinkStatusRsp](doc//EmailLinkStatusRsp.md)
- - [EmptyReq](doc//EmptyReq.md)
- - [ErrorRsp](doc//ErrorRsp.md)
- - [ErrorRspAllOf](doc//ErrorRspAllOf.md)
- - [ErrorRspAllOfError](doc//ErrorRspAllOfError.md)
- - [ErrorRspAllOfErrorValidation](doc//ErrorRspAllOfErrorValidation.md)
- - [FullUser](doc//FullUser.md)
- - [GenericRsp](doc//GenericRsp.md)
- - [Jwk](doc//Jwk.md)
- - [LoginIdentifierType](doc//LoginIdentifierType.md)
- - [LoginTokenReq](doc//LoginTokenReq.md)
- - [LoginTokenRsp](doc//LoginTokenRsp.md)
- - [LogoutRsp](doc//LogoutRsp.md)
- - [LogoutRspAllOf](doc//LogoutRspAllOf.md)
- - [MePassKeyRsp](doc//MePassKeyRsp.md)
- - [MePassKeyRspAllOf](doc//MePassKeyRspAllOf.md)
- - [MeRsp](doc//MeRsp.md)
- - [MeRspAllOf](doc//MeRspAllOf.md)
- - [Paging](doc//Paging.md)
- - [PassKeyAppendFinishRsp](doc//PassKeyAppendFinishRsp.md)
- - [PassKeyAppendFinishRspAllOf](doc//PassKeyAppendFinishRspAllOf.md)
- - [PassKeyAppendFinishRspAllOfData](doc//PassKeyAppendFinishRspAllOfData.md)
- - [PassKeyAssociateStartReq](doc//PassKeyAssociateStartReq.md)
- - [PassKeyCredentialExistsReq](doc//PassKeyCredentialExistsReq.md)
- - [PassKeyCredentialExistsRsp](doc//PassKeyCredentialExistsRsp.md)
- - [PassKeyCredentialExistsRspAllOf](doc//PassKeyCredentialExistsRspAllOf.md)
- - [PassKeyFinishReq](doc//PassKeyFinishReq.md)
- - [PassKeyItem](doc//PassKeyItem.md)
- - [PassKeyList](doc//PassKeyList.md)
- - [PassKeyLoginFinishRsp](doc//PassKeyLoginFinishRsp.md)
- - [PassKeyLoginFinishRspAllOf](doc//PassKeyLoginFinishRspAllOf.md)
- - [PassKeyLoginFinishRspAllOfData](doc//PassKeyLoginFinishRspAllOfData.md)
- - [PassKeyLoginFinishRspAllOfDataAllOf](doc//PassKeyLoginFinishRspAllOfDataAllOf.md)
- - [PassKeyLoginStartReq](doc//PassKeyLoginStartReq.md)
- - [PassKeyMediationStartReq](doc//PassKeyMediationStartReq.md)
- - [PassKeyMediationStartRsp](doc//PassKeyMediationStartRsp.md)
- - [PassKeyMediationStartRspAllOf](doc//PassKeyMediationStartRspAllOf.md)
- - [PassKeyMediationStartRspAllOfData](doc//PassKeyMediationStartRspAllOfData.md)
- - [PassKeyRegisterFinishRsp](doc//PassKeyRegisterFinishRsp.md)
- - [PassKeyRegisterFinishRspAllOf](doc//PassKeyRegisterFinishRspAllOf.md)
- - [PassKeyRegisterStartReq](doc//PassKeyRegisterStartReq.md)
- - [PassKeyStartRsp](doc//PassKeyStartRsp.md)
- - [PassKeyStartRspAllOf](doc//PassKeyStartRspAllOf.md)
- - [PassKeyStartRspAllOfData](doc//PassKeyStartRspAllOfData.md)
- - [PasswordVerifyReq](doc//PasswordVerifyReq.md)
- - [PasswordVerifyRsp](doc//PasswordVerifyRsp.md)
- - [ProjectConfigRsp](doc//ProjectConfigRsp.md)
- - [ProjectConfigRspAllOf](doc//ProjectConfigRspAllOf.md)
- - [ProjectConfigRspAllOfData](doc//ProjectConfigRspAllOfData.md)
- - [RequestData](doc//RequestData.md)
- - [SessionRefreshRsp](doc//SessionRefreshRsp.md)
- - [ShortSession](doc//ShortSession.md)
- - [Status](doc//Status.md)
- - [UserEmail](doc//UserEmail.md)
- - [UserPhoneNumber](doc//UserPhoneNumber.md)
- - [WellKnownJWKSListRsp](doc//WellKnownJWKSListRsp.md)
+ - [AuthType](doc/AuthType.md)
+ - [BlockBody](doc/BlockBody.md)
+ - [BlockBodyData](doc/BlockBodyData.md)
+ - [BlockType](doc/BlockType.md)
+ - [ClientCapabilities](doc/ClientCapabilities.md)
+ - [ClientInformation](doc/ClientInformation.md)
+ - [ConnectAppendFinishReq](doc/ConnectAppendFinishReq.md)
+ - [ConnectAppendFinishRsp](doc/ConnectAppendFinishRsp.md)
+ - [ConnectAppendInitReq](doc/ConnectAppendInitReq.md)
+ - [ConnectAppendInitRsp](doc/ConnectAppendInitRsp.md)
+ - [ConnectAppendStartReq](doc/ConnectAppendStartReq.md)
+ - [ConnectAppendStartRsp](doc/ConnectAppendStartRsp.md)
+ - [ConnectEventCreateReq](doc/ConnectEventCreateReq.md)
+ - [ConnectLoginFinishReq](doc/ConnectLoginFinishReq.md)
+ - [ConnectLoginFinishRsp](doc/ConnectLoginFinishRsp.md)
+ - [ConnectLoginInitReq](doc/ConnectLoginInitReq.md)
+ - [ConnectLoginInitRsp](doc/ConnectLoginInitRsp.md)
+ - [ConnectLoginStartReq](doc/ConnectLoginStartReq.md)
+ - [ConnectLoginStartRsp](doc/ConnectLoginStartRsp.md)
+ - [ConnectManageDeleteReq](doc/ConnectManageDeleteReq.md)
+ - [ConnectManageDeleteRsp](doc/ConnectManageDeleteRsp.md)
+ - [ConnectManageInitReq](doc/ConnectManageInitReq.md)
+ - [ConnectManageInitRsp](doc/ConnectManageInitRsp.md)
+ - [ConnectManageListReq](doc/ConnectManageListReq.md)
+ - [ConnectManageListRsp](doc/ConnectManageListRsp.md)
+ - [ContinueOnOtherDevice](doc/ContinueOnOtherDevice.md)
+ - [EventCreateReq](doc/EventCreateReq.md)
+ - [FullNameWithError](doc/FullNameWithError.md)
+ - [GeneralBlockCompleted](doc/GeneralBlockCompleted.md)
+ - [GeneralBlockLoginInit](doc/GeneralBlockLoginInit.md)
+ - [GeneralBlockPasskeyAppend](doc/GeneralBlockPasskeyAppend.md)
+ - [GeneralBlockPasskeyAppended](doc/GeneralBlockPasskeyAppended.md)
+ - [GeneralBlockPasskeyVerify](doc/GeneralBlockPasskeyVerify.md)
+ - [GeneralBlockPostSignupEmailVerify](doc/GeneralBlockPostSignupEmailVerify.md)
+ - [GeneralBlockSignupInit](doc/GeneralBlockSignupInit.md)
+ - [GeneralBlockVerifyIdentifier](doc/GeneralBlockVerifyIdentifier.md)
+ - [GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner](doc/GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner.md)
+ - [GenericRsp](doc/GenericRsp.md)
+ - [Identifier](doc/Identifier.md)
+ - [IdentifierUpdateReq](doc/IdentifierUpdateReq.md)
+ - [IdentifierVerifyFinishReq](doc/IdentifierVerifyFinishReq.md)
+ - [IdentifierVerifyStartReq](doc/IdentifierVerifyStartReq.md)
+ - [JavaScriptHighEntropy](doc/JavaScriptHighEntropy.md)
+ - [LoginIdentifier](doc/LoginIdentifier.md)
+ - [LoginIdentifierConfig](doc/LoginIdentifierConfig.md)
+ - [LoginIdentifierType](doc/LoginIdentifierType.md)
+ - [LoginIdentifierWithError](doc/LoginIdentifierWithError.md)
+ - [LoginInitReq](doc/LoginInitReq.md)
+ - [MeIdentifierCreateReq](doc/MeIdentifierCreateReq.md)
+ - [MeIdentifierDeleteReq](doc/MeIdentifierDeleteReq.md)
+ - [MeIdentifierUpdateReq](doc/MeIdentifierUpdateReq.md)
+ - [MeIdentifierVerifyFinishReq](doc/MeIdentifierVerifyFinishReq.md)
+ - [MeIdentifierVerifyStartReq](doc/MeIdentifierVerifyStartReq.md)
+ - [MePasskeyDeleteRsp](doc/MePasskeyDeleteRsp.md)
+ - [MePasskeyRsp](doc/MePasskeyRsp.md)
+ - [MePasskeysAppendFinishReq](doc/MePasskeysAppendFinishReq.md)
+ - [MePasskeysAppendStartReq](doc/MePasskeysAppendStartReq.md)
+ - [MePasskeysAppendStartRsp](doc/MePasskeysAppendStartRsp.md)
+ - [MeRefreshRsp](doc/MeRefreshRsp.md)
+ - [MeRsp](doc/MeRsp.md)
+ - [MeUpdateReq](doc/MeUpdateReq.md)
+ - [Paging](doc/Paging.md)
+ - [Passkey](doc/Passkey.md)
+ - [PasskeyAppendFinishReq](doc/PasskeyAppendFinishReq.md)
+ - [PasskeyAppendStartReq](doc/PasskeyAppendStartReq.md)
+ - [PasskeyEventType](doc/PasskeyEventType.md)
+ - [PasskeyIconSet](doc/PasskeyIconSet.md)
+ - [PasskeyLoginFinishReq](doc/PasskeyLoginFinishReq.md)
+ - [PasskeyLoginStartReq](doc/PasskeyLoginStartReq.md)
+ - [PasskeyMediationFinishReq](doc/PasskeyMediationFinishReq.md)
+ - [PasskeyOperation](doc/PasskeyOperation.md)
+ - [ProcessCommon](doc/ProcessCommon.md)
+ - [ProcessInitReq](doc/ProcessInitReq.md)
+ - [ProcessInitRsp](doc/ProcessInitRsp.md)
+ - [ProcessResponse](doc/ProcessResponse.md)
+ - [ProcessStaticInfo](doc/ProcessStaticInfo.md)
+ - [RequestData](doc/RequestData.md)
+ - [RequestError](doc/RequestError.md)
+ - [SessionConfigRsp](doc/SessionConfigRsp.md)
+ - [ShortSessionCookieConfig](doc/ShortSessionCookieConfig.md)
+ - [SignupInitReq](doc/SignupInitReq.md)
+ - [SocialAccount](doc/SocialAccount.md)
+ - [SocialData](doc/SocialData.md)
+ - [SocialProviderType](doc/SocialProviderType.md)
+ - [SocialVerifyStartReq](doc/SocialVerifyStartReq.md)
+ - [UserDetailsConfigRsp](doc/UserDetailsConfigRsp.md)
+ - [VerificationMethod](doc/VerificationMethod.md)
 
 
 ## Documentation For Authorization
@@ -199,11 +209,11 @@ Class | Method | HTTP request | Description
 Authentication schemes defined for the API:
 ### basicAuth
 
-- **Type**: HTTP Basic authentication
+- **Type**: HTTP basic authentication
 
 ### bearerAuth
 
-- **Type**: HTTP Bearer authentication
+- **Type**: HTTP Bearer Token authentication (JWT)
 
 ### projectID
 
diff --git a/packages/corbado_api_client/lib/frontendapi/analysis_options.yaml b/packages/corbado_api_client/lib/frontendapi/analysis_options.yaml
index e69de29..16a9585 100644
--- a/packages/corbado_api_client/lib/frontendapi/analysis_options.yaml
+++ b/packages/corbado_api_client/lib/frontendapi/analysis_options.yaml
@@ -0,0 +1,9 @@
+analyzer:
+  language:
+    strict-inference: true
+    strict-raw-types: true
+    strict-casts: false
+  exclude:
+    - test/*.dart
+  errors:
+    deprecated_member_use_from_same_package: ignore
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/AppleAppSiteAssociationRsp.md b/packages/corbado_api_client/lib/frontendapi/doc/AppleAppSiteAssociationRsp.md
deleted file mode 100644
index afc2888..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/AppleAppSiteAssociationRsp.md
+++ /dev/null
@@ -1,17 +0,0 @@
-# corbado_api.model.AppleAppSiteAssociationRsp
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**applinks** | [**AppleAppSiteAssociationRspApplinks**](AppleAppSiteAssociationRspApplinks.md) |  | 
-**webcredentials** | [**AppleAppSiteAssociationRspWebcredentials**](AppleAppSiteAssociationRspWebcredentials.md) |  | 
-**appclips** | [**AppleAppSiteAssociationRspWebcredentials**](AppleAppSiteAssociationRspWebcredentials.md) |  | 
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/AssetLinkTarget.md b/packages/corbado_api_client/lib/frontendapi/doc/AssetLinkTarget.md
deleted file mode 100644
index 34ae78b..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/AssetLinkTarget.md
+++ /dev/null
@@ -1,18 +0,0 @@
-# corbado_api.model.AssetLinkTarget
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**namespace** | **String** |  | 
-**packageName** | **String** |  | [optional] 
-**site** | **String** |  | [optional] 
-**sha256CertFingerprints** | **List<String>** |  | [optional] [default to const []]
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/AssetsApi.md b/packages/corbado_api_client/lib/frontendapi/doc/AssetsApi.md
deleted file mode 100644
index 6e07ba1..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/AssetsApi.md
+++ /dev/null
@@ -1,113 +0,0 @@
-# corbado_api.api.AssetsApi
-
-## Load the API package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-All URIs are relative to *https://<project ID>.frontendapi.corbado.io*
-
-Method | HTTP request | Description
-------------- | ------------- | -------------
-[**appleAppSiteAssociation**](AssetsApi.md#appleappsiteassociation) | **GET** /.well-known/apple-app-site-association | 
-[**assetLinks**](AssetsApi.md#assetlinks) | **GET** /.well-known/assetlinks.json | 
-
-
-# **appleAppSiteAssociation**
-> AppleAppSiteAssociationRsp appleAppSiteAssociation()
-
-
-
-Provides apple app site association
-
-### Example
-```dart
-import 'package:corbado_api/api.dart';
-// TODO Configure HTTP Bearer authorization: bearerAuth
-// Case 1. Use String Token
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken('YOUR_ACCESS_TOKEN');
-// Case 2. Use Function which generate token.
-// String yourTokenGeneratorFunction() { ... }
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken(yourTokenGeneratorFunction);
-// TODO Configure API key authorization: projectID
-//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
-// uncomment below to setup prefix (e.g. Bearer) for API key, if needed
-//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
-
-final api_instance = AssetsApi();
-
-try {
-    final result = api_instance.appleAppSiteAssociation();
-    print(result);
-} catch (e) {
-    print('Exception when calling AssetsApi->appleAppSiteAssociation: $e\n');
-}
-```
-
-### Parameters
-This endpoint does not need any parameter.
-
-### Return type
-
-[**AppleAppSiteAssociationRsp**](AppleAppSiteAssociationRsp.md)
-
-### Authorization
-
-[bearerAuth](../README.md#bearerAuth), [projectID](../README.md#projectID)
-
-### HTTP request headers
-
- - **Content-Type**: Not defined
- - **Accept**: application/json
-
-[[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
-
-# **assetLinks**
-> List<AssetLink> assetLinks()
-
-
-
-Provides asset links for android devices
-
-### Example
-```dart
-import 'package:corbado_api/api.dart';
-// TODO Configure HTTP Bearer authorization: bearerAuth
-// Case 1. Use String Token
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken('YOUR_ACCESS_TOKEN');
-// Case 2. Use Function which generate token.
-// String yourTokenGeneratorFunction() { ... }
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken(yourTokenGeneratorFunction);
-// TODO Configure API key authorization: projectID
-//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
-// uncomment below to setup prefix (e.g. Bearer) for API key, if needed
-//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
-
-final api_instance = AssetsApi();
-
-try {
-    final result = api_instance.assetLinks();
-    print(result);
-} catch (e) {
-    print('Exception when calling AssetsApi->assetLinks: $e\n');
-}
-```
-
-### Parameters
-This endpoint does not need any parameter.
-
-### Return type
-
-[**List<AssetLink>**](AssetLink.md)
-
-### Authorization
-
-[bearerAuth](../README.md#bearerAuth), [projectID](../README.md#projectID)
-
-### HTTP request headers
-
- - **Content-Type**: Not defined
- - **Accept**: application/json
-
-[[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/AuthApi.md b/packages/corbado_api_client/lib/frontendapi/doc/AuthApi.md
new file mode 100644
index 0000000..e33af55
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/AuthApi.md
@@ -0,0 +1,951 @@
+# corbado_frontend_api_client.api.AuthApi
+
+## Load the API package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+All URIs are relative to *https://&lt;project ID&gt;.frontendapi.corbado.io*
+
+Method | HTTP request | Description
+------------- | ------------- | -------------
+[**blockSkip**](AuthApi.md#blockskip) | **POST** /v2/auth/block/skip | 
+[**eventCreate**](AuthApi.md#eventcreate) | **POST** /v2/auth/events | 
+[**identifierUpdate**](AuthApi.md#identifierupdate) | **POST** /v2/auth/identifier/update | 
+[**identifierVerifyFinish**](AuthApi.md#identifierverifyfinish) | **POST** /v2/auth/identifier/verify/finish | 
+[**identifierVerifyStart**](AuthApi.md#identifierverifystart) | **POST** /v2/auth/identifier/verify/start | 
+[**identifierVerifyStatus**](AuthApi.md#identifierverifystatus) | **GET** /v2/auth/identifier/verify/status | 
+[**loginInit**](AuthApi.md#logininit) | **POST** /v2/auth/login/init | 
+[**passkeyAppendFinish**](AuthApi.md#passkeyappendfinish) | **POST** /v2/auth/passkey/append/finish | 
+[**passkeyAppendStart**](AuthApi.md#passkeyappendstart) | **POST** /v2/auth/passkey/append/start | 
+[**passkeyLoginFinish**](AuthApi.md#passkeyloginfinish) | **POST** /v2/auth/passkey/login/finish | 
+[**passkeyLoginStart**](AuthApi.md#passkeyloginstart) | **POST** /v2/auth/passkey/login/start | 
+[**passkeyMediationFinish**](AuthApi.md#passkeymediationfinish) | **POST** /v2/auth/passkey/mediation/finish | 
+[**processComplete**](AuthApi.md#processcomplete) | **POST** /v2/auth/process/complete | 
+[**processGet**](AuthApi.md#processget) | **GET** /v2/auth/process | 
+[**processInit**](AuthApi.md#processinit) | **POST** /v2/auth/process/init | 
+[**processReset**](AuthApi.md#processreset) | **POST** /v2/auth/process/reset | 
+[**signupInit**](AuthApi.md#signupinit) | **POST** /v2/auth/signup/init | 
+[**socialVerifyCallback**](AuthApi.md#socialverifycallback) | **GET** /v2/auth/social/verify/callback | 
+[**socialVerifyFinish**](AuthApi.md#socialverifyfinish) | **POST** /v2/auth/social/verify/finish | 
+[**socialVerifyStart**](AuthApi.md#socialverifystart) | **POST** /v2/auth/social/verify/start | 
+
+
+# **blockSkip**
+> ProcessResponse blockSkip()
+
+
+
+tbd
+
+### Example
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+// TODO Configure API key authorization: projectID
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
+// uncomment below to setup prefix (e.g. Bearer) for API key, if needed
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
+
+final api = CorbadoFrontendApiClient().getAuthApi();
+
+try {
+    final response = api.blockSkip();
+    print(response);
+} catch on DioException (e) {
+    print('Exception when calling AuthApi->blockSkip: $e\n');
+}
+```
+
+### Parameters
+This endpoint does not need any parameter.
+
+### Return type
+
+[**ProcessResponse**](ProcessResponse.md)
+
+### Authorization
+
+[bearerAuth](../README.md#bearerAuth), [projectID](../README.md#projectID)
+
+### HTTP request headers
+
+ - **Content-Type**: Not defined
+ - **Accept**: application/json
+
+[[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
+
+# **eventCreate**
+> eventCreate(eventCreateReq)
+
+
+
+Creates a new user generated complete event.
+
+### Example
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+// TODO Configure API key authorization: projectID
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
+// uncomment below to setup prefix (e.g. Bearer) for API key, if needed
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
+
+final api = CorbadoFrontendApiClient().getAuthApi();
+final EventCreateReq eventCreateReq = ; // EventCreateReq | 
+
+try {
+    api.eventCreate(eventCreateReq);
+} catch on DioException (e) {
+    print('Exception when calling AuthApi->eventCreate: $e\n');
+}
+```
+
+### Parameters
+
+Name | Type | Description  | Notes
+------------- | ------------- | ------------- | -------------
+ **eventCreateReq** | [**EventCreateReq**](EventCreateReq.md)|  | 
+
+### Return type
+
+void (empty response body)
+
+### Authorization
+
+[bearerAuth](../README.md#bearerAuth), [projectID](../README.md#projectID)
+
+### HTTP request headers
+
+ - **Content-Type**: application/json
+ - **Accept**: Not defined
+
+[[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
+
+# **identifierUpdate**
+> ProcessResponse identifierUpdate(identifierUpdateReq)
+
+
+
+tbd
+
+### Example
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+// TODO Configure API key authorization: projectID
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
+// uncomment below to setup prefix (e.g. Bearer) for API key, if needed
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
+
+final api = CorbadoFrontendApiClient().getAuthApi();
+final IdentifierUpdateReq identifierUpdateReq = ; // IdentifierUpdateReq | 
+
+try {
+    final response = api.identifierUpdate(identifierUpdateReq);
+    print(response);
+} catch on DioException (e) {
+    print('Exception when calling AuthApi->identifierUpdate: $e\n');
+}
+```
+
+### Parameters
+
+Name | Type | Description  | Notes
+------------- | ------------- | ------------- | -------------
+ **identifierUpdateReq** | [**IdentifierUpdateReq**](IdentifierUpdateReq.md)|  | 
+
+### Return type
+
+[**ProcessResponse**](ProcessResponse.md)
+
+### Authorization
+
+[bearerAuth](../README.md#bearerAuth), [projectID](../README.md#projectID)
+
+### HTTP request headers
+
+ - **Content-Type**: application/json
+ - **Accept**: application/json
+
+[[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
+
+# **identifierVerifyFinish**
+> ProcessResponse identifierVerifyFinish(identifierVerifyFinishReq)
+
+
+
+tbd
+
+### Example
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+// TODO Configure API key authorization: projectID
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
+// uncomment below to setup prefix (e.g. Bearer) for API key, if needed
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
+
+final api = CorbadoFrontendApiClient().getAuthApi();
+final IdentifierVerifyFinishReq identifierVerifyFinishReq = ; // IdentifierVerifyFinishReq | 
+
+try {
+    final response = api.identifierVerifyFinish(identifierVerifyFinishReq);
+    print(response);
+} catch on DioException (e) {
+    print('Exception when calling AuthApi->identifierVerifyFinish: $e\n');
+}
+```
+
+### Parameters
+
+Name | Type | Description  | Notes
+------------- | ------------- | ------------- | -------------
+ **identifierVerifyFinishReq** | [**IdentifierVerifyFinishReq**](IdentifierVerifyFinishReq.md)|  | 
+
+### Return type
+
+[**ProcessResponse**](ProcessResponse.md)
+
+### Authorization
+
+[bearerAuth](../README.md#bearerAuth), [projectID](../README.md#projectID)
+
+### HTTP request headers
+
+ - **Content-Type**: application/json
+ - **Accept**: application/json
+
+[[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
+
+# **identifierVerifyStart**
+> ProcessResponse identifierVerifyStart(identifierVerifyStartReq)
+
+
+
+tbd
+
+### Example
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+// TODO Configure API key authorization: projectID
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
+// uncomment below to setup prefix (e.g. Bearer) for API key, if needed
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
+
+final api = CorbadoFrontendApiClient().getAuthApi();
+final IdentifierVerifyStartReq identifierVerifyStartReq = ; // IdentifierVerifyStartReq | 
+
+try {
+    final response = api.identifierVerifyStart(identifierVerifyStartReq);
+    print(response);
+} catch on DioException (e) {
+    print('Exception when calling AuthApi->identifierVerifyStart: $e\n');
+}
+```
+
+### Parameters
+
+Name | Type | Description  | Notes
+------------- | ------------- | ------------- | -------------
+ **identifierVerifyStartReq** | [**IdentifierVerifyStartReq**](IdentifierVerifyStartReq.md)|  | 
+
+### Return type
+
+[**ProcessResponse**](ProcessResponse.md)
+
+### Authorization
+
+[bearerAuth](../README.md#bearerAuth), [projectID](../README.md#projectID)
+
+### HTTP request headers
+
+ - **Content-Type**: application/json
+ - **Accept**: application/json
+
+[[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
+
+# **identifierVerifyStatus**
+> ProcessResponse identifierVerifyStatus()
+
+
+
+tbd
+
+### Example
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+// TODO Configure API key authorization: projectID
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
+// uncomment below to setup prefix (e.g. Bearer) for API key, if needed
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
+
+final api = CorbadoFrontendApiClient().getAuthApi();
+
+try {
+    final response = api.identifierVerifyStatus();
+    print(response);
+} catch on DioException (e) {
+    print('Exception when calling AuthApi->identifierVerifyStatus: $e\n');
+}
+```
+
+### Parameters
+This endpoint does not need any parameter.
+
+### Return type
+
+[**ProcessResponse**](ProcessResponse.md)
+
+### Authorization
+
+[bearerAuth](../README.md#bearerAuth), [projectID](../README.md#projectID)
+
+### HTTP request headers
+
+ - **Content-Type**: Not defined
+ - **Accept**: application/json
+
+[[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
+
+# **loginInit**
+> ProcessResponse loginInit(loginInitReq)
+
+
+
+tbd
+
+### Example
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+// TODO Configure API key authorization: projectID
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
+// uncomment below to setup prefix (e.g. Bearer) for API key, if needed
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
+
+final api = CorbadoFrontendApiClient().getAuthApi();
+final LoginInitReq loginInitReq = ; // LoginInitReq | 
+
+try {
+    final response = api.loginInit(loginInitReq);
+    print(response);
+} catch on DioException (e) {
+    print('Exception when calling AuthApi->loginInit: $e\n');
+}
+```
+
+### Parameters
+
+Name | Type | Description  | Notes
+------------- | ------------- | ------------- | -------------
+ **loginInitReq** | [**LoginInitReq**](LoginInitReq.md)|  | 
+
+### Return type
+
+[**ProcessResponse**](ProcessResponse.md)
+
+### Authorization
+
+[bearerAuth](../README.md#bearerAuth), [projectID](../README.md#projectID)
+
+### HTTP request headers
+
+ - **Content-Type**: application/json
+ - **Accept**: application/json
+
+[[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
+
+# **passkeyAppendFinish**
+> ProcessResponse passkeyAppendFinish(passkeyAppendFinishReq)
+
+
+
+tbd
+
+### Example
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+// TODO Configure API key authorization: projectID
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
+// uncomment below to setup prefix (e.g. Bearer) for API key, if needed
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
+
+final api = CorbadoFrontendApiClient().getAuthApi();
+final PasskeyAppendFinishReq passkeyAppendFinishReq = ; // PasskeyAppendFinishReq | 
+
+try {
+    final response = api.passkeyAppendFinish(passkeyAppendFinishReq);
+    print(response);
+} catch on DioException (e) {
+    print('Exception when calling AuthApi->passkeyAppendFinish: $e\n');
+}
+```
+
+### Parameters
+
+Name | Type | Description  | Notes
+------------- | ------------- | ------------- | -------------
+ **passkeyAppendFinishReq** | [**PasskeyAppendFinishReq**](PasskeyAppendFinishReq.md)|  | 
+
+### Return type
+
+[**ProcessResponse**](ProcessResponse.md)
+
+### Authorization
+
+[bearerAuth](../README.md#bearerAuth), [projectID](../README.md#projectID)
+
+### HTTP request headers
+
+ - **Content-Type**: application/json
+ - **Accept**: application/json
+
+[[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
+
+# **passkeyAppendStart**
+> ProcessResponse passkeyAppendStart(passkeyAppendStartReq)
+
+
+
+tbd
+
+### Example
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+// TODO Configure API key authorization: projectID
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
+// uncomment below to setup prefix (e.g. Bearer) for API key, if needed
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
+
+final api = CorbadoFrontendApiClient().getAuthApi();
+final PasskeyAppendStartReq passkeyAppendStartReq = ; // PasskeyAppendStartReq | 
+
+try {
+    final response = api.passkeyAppendStart(passkeyAppendStartReq);
+    print(response);
+} catch on DioException (e) {
+    print('Exception when calling AuthApi->passkeyAppendStart: $e\n');
+}
+```
+
+### Parameters
+
+Name | Type | Description  | Notes
+------------- | ------------- | ------------- | -------------
+ **passkeyAppendStartReq** | [**PasskeyAppendStartReq**](PasskeyAppendStartReq.md)|  | 
+
+### Return type
+
+[**ProcessResponse**](ProcessResponse.md)
+
+### Authorization
+
+[bearerAuth](../README.md#bearerAuth), [projectID](../README.md#projectID)
+
+### HTTP request headers
+
+ - **Content-Type**: application/json
+ - **Accept**: application/json
+
+[[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
+
+# **passkeyLoginFinish**
+> ProcessResponse passkeyLoginFinish(passkeyLoginFinishReq)
+
+
+
+tbd
+
+### Example
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+// TODO Configure API key authorization: projectID
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
+// uncomment below to setup prefix (e.g. Bearer) for API key, if needed
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
+
+final api = CorbadoFrontendApiClient().getAuthApi();
+final PasskeyLoginFinishReq passkeyLoginFinishReq = ; // PasskeyLoginFinishReq | 
+
+try {
+    final response = api.passkeyLoginFinish(passkeyLoginFinishReq);
+    print(response);
+} catch on DioException (e) {
+    print('Exception when calling AuthApi->passkeyLoginFinish: $e\n');
+}
+```
+
+### Parameters
+
+Name | Type | Description  | Notes
+------------- | ------------- | ------------- | -------------
+ **passkeyLoginFinishReq** | [**PasskeyLoginFinishReq**](PasskeyLoginFinishReq.md)|  | 
+
+### Return type
+
+[**ProcessResponse**](ProcessResponse.md)
+
+### Authorization
+
+[bearerAuth](../README.md#bearerAuth), [projectID](../README.md#projectID)
+
+### HTTP request headers
+
+ - **Content-Type**: application/json
+ - **Accept**: application/json
+
+[[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
+
+# **passkeyLoginStart**
+> ProcessResponse passkeyLoginStart(passkeyLoginStartReq)
+
+
+
+tbd
+
+### Example
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+// TODO Configure API key authorization: projectID
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
+// uncomment below to setup prefix (e.g. Bearer) for API key, if needed
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
+
+final api = CorbadoFrontendApiClient().getAuthApi();
+final PasskeyLoginStartReq passkeyLoginStartReq = ; // PasskeyLoginStartReq | 
+
+try {
+    final response = api.passkeyLoginStart(passkeyLoginStartReq);
+    print(response);
+} catch on DioException (e) {
+    print('Exception when calling AuthApi->passkeyLoginStart: $e\n');
+}
+```
+
+### Parameters
+
+Name | Type | Description  | Notes
+------------- | ------------- | ------------- | -------------
+ **passkeyLoginStartReq** | [**PasskeyLoginStartReq**](PasskeyLoginStartReq.md)|  | 
+
+### Return type
+
+[**ProcessResponse**](ProcessResponse.md)
+
+### Authorization
+
+[bearerAuth](../README.md#bearerAuth), [projectID](../README.md#projectID)
+
+### HTTP request headers
+
+ - **Content-Type**: application/json
+ - **Accept**: application/json
+
+[[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
+
+# **passkeyMediationFinish**
+> ProcessResponse passkeyMediationFinish(passkeyMediationFinishReq)
+
+
+
+tbd
+
+### Example
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+// TODO Configure API key authorization: projectID
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
+// uncomment below to setup prefix (e.g. Bearer) for API key, if needed
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
+
+final api = CorbadoFrontendApiClient().getAuthApi();
+final PasskeyMediationFinishReq passkeyMediationFinishReq = ; // PasskeyMediationFinishReq | 
+
+try {
+    final response = api.passkeyMediationFinish(passkeyMediationFinishReq);
+    print(response);
+} catch on DioException (e) {
+    print('Exception when calling AuthApi->passkeyMediationFinish: $e\n');
+}
+```
+
+### Parameters
+
+Name | Type | Description  | Notes
+------------- | ------------- | ------------- | -------------
+ **passkeyMediationFinishReq** | [**PasskeyMediationFinishReq**](PasskeyMediationFinishReq.md)|  | 
+
+### Return type
+
+[**ProcessResponse**](ProcessResponse.md)
+
+### Authorization
+
+[bearerAuth](../README.md#bearerAuth), [projectID](../README.md#projectID)
+
+### HTTP request headers
+
+ - **Content-Type**: application/json
+ - **Accept**: application/json
+
+[[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
+
+# **processComplete**
+> ProcessResponse processComplete()
+
+
+
+tbd
+
+### Example
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+// TODO Configure API key authorization: projectID
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
+// uncomment below to setup prefix (e.g. Bearer) for API key, if needed
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
+
+final api = CorbadoFrontendApiClient().getAuthApi();
+
+try {
+    final response = api.processComplete();
+    print(response);
+} catch on DioException (e) {
+    print('Exception when calling AuthApi->processComplete: $e\n');
+}
+```
+
+### Parameters
+This endpoint does not need any parameter.
+
+### Return type
+
+[**ProcessResponse**](ProcessResponse.md)
+
+### Authorization
+
+[bearerAuth](../README.md#bearerAuth), [projectID](../README.md#projectID)
+
+### HTTP request headers
+
+ - **Content-Type**: Not defined
+ - **Accept**: application/json
+
+[[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
+
+# **processGet**
+> ProcessResponse processGet(preferredBlock)
+
+
+
+tbd
+
+### Example
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+// TODO Configure API key authorization: projectID
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
+// uncomment below to setup prefix (e.g. Bearer) for API key, if needed
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
+
+final api = CorbadoFrontendApiClient().getAuthApi();
+final BlockType preferredBlock = ; // BlockType | 
+
+try {
+    final response = api.processGet(preferredBlock);
+    print(response);
+} catch on DioException (e) {
+    print('Exception when calling AuthApi->processGet: $e\n');
+}
+```
+
+### Parameters
+
+Name | Type | Description  | Notes
+------------- | ------------- | ------------- | -------------
+ **preferredBlock** | [**BlockType**](.md)|  | [optional] 
+
+### Return type
+
+[**ProcessResponse**](ProcessResponse.md)
+
+### Authorization
+
+[bearerAuth](../README.md#bearerAuth), [projectID](../README.md#projectID)
+
+### HTTP request headers
+
+ - **Content-Type**: Not defined
+ - **Accept**: application/json
+
+[[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
+
+# **processInit**
+> ProcessInitRsp processInit(processInitReq)
+
+
+
+tbd
+
+### Example
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+// TODO Configure API key authorization: projectID
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
+// uncomment below to setup prefix (e.g. Bearer) for API key, if needed
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
+
+final api = CorbadoFrontendApiClient().getAuthApi();
+final ProcessInitReq processInitReq = ; // ProcessInitReq | 
+
+try {
+    final response = api.processInit(processInitReq);
+    print(response);
+} catch on DioException (e) {
+    print('Exception when calling AuthApi->processInit: $e\n');
+}
+```
+
+### Parameters
+
+Name | Type | Description  | Notes
+------------- | ------------- | ------------- | -------------
+ **processInitReq** | [**ProcessInitReq**](ProcessInitReq.md)|  | 
+
+### Return type
+
+[**ProcessInitRsp**](ProcessInitRsp.md)
+
+### Authorization
+
+[bearerAuth](../README.md#bearerAuth), [projectID](../README.md#projectID)
+
+### HTTP request headers
+
+ - **Content-Type**: application/json
+ - **Accept**: application/json
+
+[[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
+
+# **processReset**
+> ProcessResponse processReset()
+
+
+
+tbd
+
+### Example
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+// TODO Configure API key authorization: projectID
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
+// uncomment below to setup prefix (e.g. Bearer) for API key, if needed
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
+
+final api = CorbadoFrontendApiClient().getAuthApi();
+
+try {
+    final response = api.processReset();
+    print(response);
+} catch on DioException (e) {
+    print('Exception when calling AuthApi->processReset: $e\n');
+}
+```
+
+### Parameters
+This endpoint does not need any parameter.
+
+### Return type
+
+[**ProcessResponse**](ProcessResponse.md)
+
+### Authorization
+
+[bearerAuth](../README.md#bearerAuth), [projectID](../README.md#projectID)
+
+### HTTP request headers
+
+ - **Content-Type**: Not defined
+ - **Accept**: application/json
+
+[[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
+
+# **signupInit**
+> ProcessResponse signupInit(signupInitReq)
+
+
+
+tbd
+
+### Example
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+// TODO Configure API key authorization: projectID
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
+// uncomment below to setup prefix (e.g. Bearer) for API key, if needed
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
+
+final api = CorbadoFrontendApiClient().getAuthApi();
+final SignupInitReq signupInitReq = ; // SignupInitReq | 
+
+try {
+    final response = api.signupInit(signupInitReq);
+    print(response);
+} catch on DioException (e) {
+    print('Exception when calling AuthApi->signupInit: $e\n');
+}
+```
+
+### Parameters
+
+Name | Type | Description  | Notes
+------------- | ------------- | ------------- | -------------
+ **signupInitReq** | [**SignupInitReq**](SignupInitReq.md)|  | 
+
+### Return type
+
+[**ProcessResponse**](ProcessResponse.md)
+
+### Authorization
+
+[bearerAuth](../README.md#bearerAuth), [projectID](../README.md#projectID)
+
+### HTTP request headers
+
+ - **Content-Type**: application/json
+ - **Accept**: application/json
+
+[[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
+
+# **socialVerifyCallback**
+> socialVerifyCallback()
+
+
+
+tbd
+
+### Example
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+// TODO Configure API key authorization: projectID
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
+// uncomment below to setup prefix (e.g. Bearer) for API key, if needed
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
+
+final api = CorbadoFrontendApiClient().getAuthApi();
+
+try {
+    api.socialVerifyCallback();
+} catch on DioException (e) {
+    print('Exception when calling AuthApi->socialVerifyCallback: $e\n');
+}
+```
+
+### Parameters
+This endpoint does not need any parameter.
+
+### Return type
+
+void (empty response body)
+
+### Authorization
+
+[bearerAuth](../README.md#bearerAuth), [projectID](../README.md#projectID)
+
+### HTTP request headers
+
+ - **Content-Type**: Not defined
+ - **Accept**: Not defined
+
+[[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
+
+# **socialVerifyFinish**
+> ProcessResponse socialVerifyFinish(body)
+
+
+
+tbd
+
+### Example
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+// TODO Configure API key authorization: projectID
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
+// uncomment below to setup prefix (e.g. Bearer) for API key, if needed
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
+
+final api = CorbadoFrontendApiClient().getAuthApi();
+final JsonObject body = Object; // JsonObject | 
+
+try {
+    final response = api.socialVerifyFinish(body);
+    print(response);
+} catch on DioException (e) {
+    print('Exception when calling AuthApi->socialVerifyFinish: $e\n');
+}
+```
+
+### Parameters
+
+Name | Type | Description  | Notes
+------------- | ------------- | ------------- | -------------
+ **body** | **JsonObject**|  | 
+
+### Return type
+
+[**ProcessResponse**](ProcessResponse.md)
+
+### Authorization
+
+[bearerAuth](../README.md#bearerAuth), [projectID](../README.md#projectID)
+
+### HTTP request headers
+
+ - **Content-Type**: application/json
+ - **Accept**: application/json
+
+[[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
+
+# **socialVerifyStart**
+> ProcessResponse socialVerifyStart(socialVerifyStartReq)
+
+
+
+tbd
+
+### Example
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+// TODO Configure API key authorization: projectID
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
+// uncomment below to setup prefix (e.g. Bearer) for API key, if needed
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
+
+final api = CorbadoFrontendApiClient().getAuthApi();
+final SocialVerifyStartReq socialVerifyStartReq = ; // SocialVerifyStartReq | 
+
+try {
+    final response = api.socialVerifyStart(socialVerifyStartReq);
+    print(response);
+} catch on DioException (e) {
+    print('Exception when calling AuthApi->socialVerifyStart: $e\n');
+}
+```
+
+### Parameters
+
+Name | Type | Description  | Notes
+------------- | ------------- | ------------- | -------------
+ **socialVerifyStartReq** | [**SocialVerifyStartReq**](SocialVerifyStartReq.md)|  | 
+
+### Return type
+
+[**ProcessResponse**](ProcessResponse.md)
+
+### Authorization
+
+[bearerAuth](../README.md#bearerAuth), [projectID](../README.md#projectID)
+
+### HTTP request headers
+
+ - **Content-Type**: application/json
+ - **Accept**: application/json
+
+[[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/AuthMethodsListReq.md b/packages/corbado_api_client/lib/frontendapi/doc/AuthMethodsListReq.md
deleted file mode 100644
index 4c01264..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/AuthMethodsListReq.md
+++ /dev/null
@@ -1,16 +0,0 @@
-# corbado_api.model.AuthMethodsListReq
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**username** | **String** | Users login name | 
-**requestID** | **String** | Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side | [optional] 
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/AuthMethodsListRsp.md b/packages/corbado_api_client/lib/frontendapi/doc/AuthMethodsListRsp.md
deleted file mode 100644
index 0fc8029..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/AuthMethodsListRsp.md
+++ /dev/null
@@ -1,19 +0,0 @@
-# corbado_api.model.AuthMethodsListRsp
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**httpStatusCode** | **int** | HTTP status code of operation | 
-**message** | **String** |  | 
-**requestData** | [**RequestData**](RequestData.md) |  | 
-**runtime** | **double** | Runtime in seconds for this request | 
-**data** | [**AuthMethodsListRspAllOfData**](AuthMethodsListRspAllOfData.md) |  | 
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/AuthMethodsListRspAllOfData.md b/packages/corbado_api_client/lib/frontendapi/doc/AuthMethodsListRspAllOfData.md
deleted file mode 100644
index ec8ee5c..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/AuthMethodsListRspAllOfData.md
+++ /dev/null
@@ -1,16 +0,0 @@
-# corbado_api.model.AuthMethodsListRspAllOfData
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**selectedMethods** | [**List<AuthMethod>**](AuthMethod.md) |  | [default to const []]
-**possibleMethods** | [**List<AuthMethod>**](AuthMethod.md) |  | [default to const []]
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/AuthMethod.md b/packages/corbado_api_client/lib/frontendapi/doc/AuthType.md
similarity index 75%
rename from packages/corbado_api_client/lib/frontendapi/doc/AuthMethod.md
rename to packages/corbado_api_client/lib/frontendapi/doc/AuthType.md
index 48422ad..a8a9e9a 100644
--- a/packages/corbado_api_client/lib/frontendapi/doc/AuthMethod.md
+++ b/packages/corbado_api_client/lib/frontendapi/doc/AuthType.md
@@ -1,8 +1,8 @@
-# corbado_api.model.AuthMethod
+# corbado_frontend_api_client.model.AuthType
 
 ## Load the model package
 ```dart
-import 'package:corbado_api/api.dart';
+import 'package:corbado_frontend_api_client/api.dart';
 ```
 
 ## Properties
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/BlockBody.md b/packages/corbado_api_client/lib/frontendapi/doc/BlockBody.md
new file mode 100644
index 0000000..846e5fd
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/BlockBody.md
@@ -0,0 +1,20 @@
+# corbado_frontend_api_client.model.BlockBody
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**block** | [**BlockType**](BlockType.md) |  | 
+**authType** | [**AuthType**](AuthType.md) |  | 
+**data** | [**BlockBodyData**](BlockBodyData.md) |  | 
+**alternatives** | [**BuiltList&lt;BlockBody&gt;**](BlockBody.md) |  | [optional] 
+**error** | [**RequestError**](RequestError.md) |  | [optional] 
+**continueOnOtherDevice** | [**ContinueOnOtherDevice**](ContinueOnOtherDevice.md) |  | [optional] 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/BlockBodyData.md b/packages/corbado_api_client/lib/frontendapi/doc/BlockBodyData.md
new file mode 100644
index 0000000..7626306
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/BlockBodyData.md
@@ -0,0 +1,40 @@
+# corbado_frontend_api_client.model.BlockBodyData
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**blockType** | **String** |  | 
+**challenge** | **String** |  | 
+**identifierValue** | **String** |  | 
+**identifierType** | [**LoginIdentifierType**](LoginIdentifierType.md) |  | 
+**autoSubmit** | **bool** |  | 
+**passkeyIconSet** | [**PasskeyIconSet**](PasskeyIconSet.md) |  | 
+**variant** | **String** |  | 
+**verificationMethod** | [**VerificationMethod**](VerificationMethod.md) |  | 
+**identifier** | **String** |  | 
+**alternativeVerificationMethods** | [**BuiltList&lt;GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner&gt;**](GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner.md) |  | 
+**isPostLoginVerification** | **bool** |  | 
+**shortSession** | **String** |  | 
+**identifiers** | [**BuiltList&lt;LoginIdentifierWithError&gt;**](LoginIdentifierWithError.md) |  | 
+**socialData** | [**SocialData**](SocialData.md) |  | 
+**isPhone** | **bool** |  | 
+**isPhoneAvailable** | **bool** |  | 
+**isEmailAvailable** | **bool** |  | 
+**isUsernameAvailable** | **bool** |  | 
+**loginHint** | **String** |  | [optional] 
+**retryNotBefore** | **int** |  | [optional] 
+**error** | [**RequestError**](RequestError.md) |  | [optional] 
+**longSession** | **String** | Only given when project environment is dev 1 | [optional] 
+**passkeyOperation** | [**PasskeyOperation**](PasskeyOperation.md) |  | [optional] 
+**fullName** | [**FullNameWithError**](FullNameWithError.md) |  | [optional] 
+**conditionalUIChallenge** | **String** |  | [optional] 
+**fieldError** | [**RequestError**](RequestError.md) |  | [optional] 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/Status.md b/packages/corbado_api_client/lib/frontendapi/doc/BlockType.md
similarity index 75%
rename from packages/corbado_api_client/lib/frontendapi/doc/Status.md
rename to packages/corbado_api_client/lib/frontendapi/doc/BlockType.md
index eb398cc..5b61d5b 100644
--- a/packages/corbado_api_client/lib/frontendapi/doc/Status.md
+++ b/packages/corbado_api_client/lib/frontendapi/doc/BlockType.md
@@ -1,8 +1,8 @@
-# corbado_api.model.Status
+# corbado_frontend_api_client.model.BlockType
 
 ## Load the model package
 ```dart
-import 'package:corbado_api/api.dart';
+import 'package:corbado_frontend_api_client/api.dart';
 ```
 
 ## Properties
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/ClientCapabilities.md b/packages/corbado_api_client/lib/frontendapi/doc/ClientCapabilities.md
new file mode 100644
index 0000000..d455108
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/ClientCapabilities.md
@@ -0,0 +1,19 @@
+# corbado_frontend_api_client.model.ClientCapabilities
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**conditionalCreate** | **bool** |  | [optional] 
+**conditionalMediation** | **bool** |  | [optional] 
+**hybridTransport** | **bool** |  | [optional] 
+**passkeyPlatformAuthenticator** | **bool** |  | [optional] 
+**userVerifyingPlatformAuthenticator** | **bool** |  | [optional] 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/ClientInformation.md b/packages/corbado_api_client/lib/frontendapi/doc/ClientInformation.md
new file mode 100644
index 0000000..a5aedbd
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/ClientInformation.md
@@ -0,0 +1,23 @@
+# corbado_frontend_api_client.model.ClientInformation
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**bluetoothAvailable** | **bool** |  | [optional] 
+**clientEnvHandle** | **String** |  | [optional] 
+**visitorId** | **String** |  | [optional] 
+**canUsePasskeys** | **bool** | Deprecated, use isUserVerifyingPlatformAuthenticatorAvailable instead | [optional] 
+**isUserVerifyingPlatformAuthenticatorAvailable** | **bool** |  | [optional] 
+**isConditionalMediationAvailable** | **bool** |  | [optional] 
+**clientCapabilities** | [**ClientCapabilities**](ClientCapabilities.md) |  | [optional] 
+**javaScriptHighEntropy** | [**JavaScriptHighEntropy**](JavaScriptHighEntropy.md) |  | [optional] 
+**isNative** | **bool** |  | [optional] 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/ConfigsApi.md b/packages/corbado_api_client/lib/frontendapi/doc/ConfigsApi.md
new file mode 100644
index 0000000..7623851
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/ConfigsApi.md
@@ -0,0 +1,101 @@
+# corbado_frontend_api_client.api.ConfigsApi
+
+## Load the API package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+All URIs are relative to *https://&lt;project ID&gt;.frontendapi.corbado.io*
+
+Method | HTTP request | Description
+------------- | ------------- | -------------
+[**getSessionConfig**](ConfigsApi.md#getsessionconfig) | **GET** /v2/session-config | 
+[**getUserDetailsConfig**](ConfigsApi.md#getuserdetailsconfig) | **GET** /v2/user-details-config | 
+
+
+# **getSessionConfig**
+> SessionConfigRsp getSessionConfig()
+
+
+
+tbd
+
+### Example
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+// TODO Configure API key authorization: projectID
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
+// uncomment below to setup prefix (e.g. Bearer) for API key, if needed
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
+
+final api = CorbadoFrontendApiClient().getConfigsApi();
+
+try {
+    final response = api.getSessionConfig();
+    print(response);
+} catch on DioException (e) {
+    print('Exception when calling ConfigsApi->getSessionConfig: $e\n');
+}
+```
+
+### Parameters
+This endpoint does not need any parameter.
+
+### Return type
+
+[**SessionConfigRsp**](SessionConfigRsp.md)
+
+### Authorization
+
+[bearerAuth](../README.md#bearerAuth), [projectID](../README.md#projectID)
+
+### HTTP request headers
+
+ - **Content-Type**: Not defined
+ - **Accept**: application/json
+
+[[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
+
+# **getUserDetailsConfig**
+> UserDetailsConfigRsp getUserDetailsConfig()
+
+
+
+Gets configs needed by the UserDetails component
+
+### Example
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+// TODO Configure API key authorization: projectID
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
+// uncomment below to setup prefix (e.g. Bearer) for API key, if needed
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
+
+final api = CorbadoFrontendApiClient().getConfigsApi();
+
+try {
+    final response = api.getUserDetailsConfig();
+    print(response);
+} catch on DioException (e) {
+    print('Exception when calling ConfigsApi->getUserDetailsConfig: $e\n');
+}
+```
+
+### Parameters
+This endpoint does not need any parameter.
+
+### Return type
+
+[**UserDetailsConfigRsp**](UserDetailsConfigRsp.md)
+
+### Authorization
+
+[bearerAuth](../README.md#bearerAuth), [projectID](../README.md#projectID)
+
+### HTTP request headers
+
+ - **Content-Type**: Not defined
+ - **Accept**: application/json
+
+[[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/ConnectAppendFinishReq.md b/packages/corbado_api_client/lib/frontendapi/doc/ConnectAppendFinishReq.md
new file mode 100644
index 0000000..6253dd1
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/ConnectAppendFinishReq.md
@@ -0,0 +1,15 @@
+# corbado_frontend_api_client.model.ConnectAppendFinishReq
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**attestationResponse** | **String** |  | 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/EmailCodeRegisterStartRspAllOf.md b/packages/corbado_api_client/lib/frontendapi/doc/ConnectAppendFinishRsp.md
similarity index 62%
rename from packages/corbado_api_client/lib/frontendapi/doc/EmailCodeRegisterStartRspAllOf.md
rename to packages/corbado_api_client/lib/frontendapi/doc/ConnectAppendFinishRsp.md
index e328da1..0331ff7 100644
--- a/packages/corbado_api_client/lib/frontendapi/doc/EmailCodeRegisterStartRspAllOf.md
+++ b/packages/corbado_api_client/lib/frontendapi/doc/ConnectAppendFinishRsp.md
@@ -1,14 +1,14 @@
-# corbado_api.model.EmailCodeRegisterStartRspAllOf
+# corbado_frontend_api_client.model.ConnectAppendFinishRsp
 
 ## Load the model package
 ```dart
-import 'package:corbado_api/api.dart';
+import 'package:corbado_frontend_api_client/api.dart';
 ```
 
 ## Properties
 Name | Type | Description | Notes
 ------------ | ------------- | ------------- | -------------
-**data** | [**EmailCodeRegisterStartRspAllOfData**](EmailCodeRegisterStartRspAllOfData.md) |  | 
+**passkeyOperation** | [**PasskeyOperation**](PasskeyOperation.md) |  | 
 
 [[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
 
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/ConnectAppendInitReq.md b/packages/corbado_api_client/lib/frontendapi/doc/ConnectAppendInitReq.md
new file mode 100644
index 0000000..6e1176e
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/ConnectAppendInitReq.md
@@ -0,0 +1,16 @@
+# corbado_frontend_api_client.model.ConnectAppendInitReq
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**clientInformation** | [**ClientInformation**](ClientInformation.md) |  | 
+**flags** | **BuiltMap&lt;String, String&gt;** |  | 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/ConnectAppendInitRsp.md b/packages/corbado_api_client/lib/frontendapi/doc/ConnectAppendInitRsp.md
new file mode 100644
index 0000000..c5debf6
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/ConnectAppendInitRsp.md
@@ -0,0 +1,20 @@
+# corbado_frontend_api_client.model.ConnectAppendInitRsp
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**processID** | **String** |  | 
+**expiresAt** | **int** |  | 
+**frontendApiUrl** | **String** |  | 
+**appendAllowed** | **bool** |  | 
+**flags** | **BuiltMap&lt;String, String&gt;** |  | 
+**newClientEnvHandle** | **String** |  | [optional] 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/ConnectAppendStartReq.md b/packages/corbado_api_client/lib/frontendapi/doc/ConnectAppendStartReq.md
new file mode 100644
index 0000000..4a73ca0
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/ConnectAppendStartReq.md
@@ -0,0 +1,17 @@
+# corbado_frontend_api_client.model.ConnectAppendStartReq
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**appendTokenValue** | **String** |  | 
+**loadedMs** | **int** |  | 
+**forcePasskeyAppend** | **bool** |  | [optional] 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/ConnectAppendStartRsp.md b/packages/corbado_api_client/lib/frontendapi/doc/ConnectAppendStartRsp.md
new file mode 100644
index 0000000..54311eb
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/ConnectAppendStartRsp.md
@@ -0,0 +1,16 @@
+# corbado_frontend_api_client.model.ConnectAppendStartRsp
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**attestationOptions** | **String** |  | 
+**variant** | **String** |  | 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/ConnectEventCreateReq.md b/packages/corbado_api_client/lib/frontendapi/doc/ConnectEventCreateReq.md
new file mode 100644
index 0000000..80560d6
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/ConnectEventCreateReq.md
@@ -0,0 +1,15 @@
+# corbado_frontend_api_client.model.ConnectEventCreateReq
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**eventType** | [**PasskeyEventType**](PasskeyEventType.md) |  | 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/AssetLink.md b/packages/corbado_api_client/lib/frontendapi/doc/ConnectLoginFinishReq.md
similarity index 62%
rename from packages/corbado_api_client/lib/frontendapi/doc/AssetLink.md
rename to packages/corbado_api_client/lib/frontendapi/doc/ConnectLoginFinishReq.md
index d0fbe9b..041dcf6 100644
--- a/packages/corbado_api_client/lib/frontendapi/doc/AssetLink.md
+++ b/packages/corbado_api_client/lib/frontendapi/doc/ConnectLoginFinishReq.md
@@ -1,15 +1,15 @@
-# corbado_api.model.AssetLink
+# corbado_frontend_api_client.model.ConnectLoginFinishReq
 
 ## Load the model package
 ```dart
-import 'package:corbado_api/api.dart';
+import 'package:corbado_frontend_api_client/api.dart';
 ```
 
 ## Properties
 Name | Type | Description | Notes
 ------------ | ------------- | ------------- | -------------
-**relation** | **List<String>** |  | [default to const []]
-**target** | [**AssetLinkTarget**](AssetLinkTarget.md) |  | 
+**isConditionalUI** | **bool** |  | 
+**assertionResponse** | **String** |  | 
 
 [[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
 
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/ConnectLoginFinishRsp.md b/packages/corbado_api_client/lib/frontendapi/doc/ConnectLoginFinishRsp.md
new file mode 100644
index 0000000..f67ed2b
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/ConnectLoginFinishRsp.md
@@ -0,0 +1,16 @@
+# corbado_frontend_api_client.model.ConnectLoginFinishRsp
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**passkeyOperation** | [**PasskeyOperation**](PasskeyOperation.md) |  | 
+**session** | **String** |  | 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/ConnectLoginInitReq.md b/packages/corbado_api_client/lib/frontendapi/doc/ConnectLoginInitReq.md
new file mode 100644
index 0000000..1afc781
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/ConnectLoginInitReq.md
@@ -0,0 +1,16 @@
+# corbado_frontend_api_client.model.ConnectLoginInitReq
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**clientInformation** | [**ClientInformation**](ClientInformation.md) |  | 
+**flags** | **BuiltMap&lt;String, String&gt;** |  | 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/ConnectLoginInitRsp.md b/packages/corbado_api_client/lib/frontendapi/doc/ConnectLoginInitRsp.md
new file mode 100644
index 0000000..6e4448c
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/ConnectLoginInitRsp.md
@@ -0,0 +1,21 @@
+# corbado_frontend_api_client.model.ConnectLoginInitRsp
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**token** | **String** |  | 
+**expiresAt** | **int** |  | 
+**frontendApiUrl** | **String** |  | 
+**loginAllowed** | **bool** |  | 
+**flags** | **BuiltMap&lt;String, String&gt;** |  | 
+**newClientEnvHandle** | **String** |  | [optional] 
+**conditionalUIChallenge** | **String** |  | [optional] 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/ConnectLoginStartReq.md b/packages/corbado_api_client/lib/frontendapi/doc/ConnectLoginStartReq.md
new file mode 100644
index 0000000..9952d79
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/ConnectLoginStartReq.md
@@ -0,0 +1,17 @@
+# corbado_frontend_api_client.model.ConnectLoginStartReq
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**identifier** | **String** |  | 
+**source_** | **String** |  | 
+**loadedMs** | **int** |  | 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/ConnectLoginStartRsp.md b/packages/corbado_api_client/lib/frontendapi/doc/ConnectLoginStartRsp.md
new file mode 100644
index 0000000..64bb995
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/ConnectLoginStartRsp.md
@@ -0,0 +1,16 @@
+# corbado_frontend_api_client.model.ConnectLoginStartRsp
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**assertionOptions** | **String** |  | 
+**isCDA** | **bool** |  | 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/ConnectManageDeleteReq.md b/packages/corbado_api_client/lib/frontendapi/doc/ConnectManageDeleteReq.md
new file mode 100644
index 0000000..0682c01
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/ConnectManageDeleteReq.md
@@ -0,0 +1,16 @@
+# corbado_frontend_api_client.model.ConnectManageDeleteReq
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**connectToken** | **String** |  | 
+**credentialID** | **String** |  | 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/ConnectManageDeleteRsp.md b/packages/corbado_api_client/lib/frontendapi/doc/ConnectManageDeleteRsp.md
new file mode 100644
index 0000000..818dbfb
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/ConnectManageDeleteRsp.md
@@ -0,0 +1,15 @@
+# corbado_frontend_api_client.model.ConnectManageDeleteRsp
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**credentialID** | **String** |  | 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/ConnectManageInitReq.md b/packages/corbado_api_client/lib/frontendapi/doc/ConnectManageInitReq.md
new file mode 100644
index 0000000..ed73c8d
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/ConnectManageInitReq.md
@@ -0,0 +1,16 @@
+# corbado_frontend_api_client.model.ConnectManageInitReq
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**clientInformation** | [**ClientInformation**](ClientInformation.md) |  | 
+**flags** | **BuiltMap&lt;String, String&gt;** |  | 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/ConnectManageInitRsp.md b/packages/corbado_api_client/lib/frontendapi/doc/ConnectManageInitRsp.md
new file mode 100644
index 0000000..062c2bd
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/ConnectManageInitRsp.md
@@ -0,0 +1,20 @@
+# corbado_frontend_api_client.model.ConnectManageInitRsp
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**processID** | **String** |  | 
+**expiresAt** | **int** |  | 
+**frontendApiUrl** | **String** |  | 
+**manageAllowed** | **bool** |  | 
+**flags** | **BuiltMap&lt;String, String&gt;** |  | 
+**newClientEnvHandle** | **String** |  | [optional] 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/ConnectManageListReq.md b/packages/corbado_api_client/lib/frontendapi/doc/ConnectManageListReq.md
new file mode 100644
index 0000000..77df797
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/ConnectManageListReq.md
@@ -0,0 +1,15 @@
+# corbado_frontend_api_client.model.ConnectManageListReq
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**connectToken** | **String** |  | 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/ConnectManageListRsp.md b/packages/corbado_api_client/lib/frontendapi/doc/ConnectManageListRsp.md
new file mode 100644
index 0000000..b93f5d9
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/ConnectManageListRsp.md
@@ -0,0 +1,15 @@
+# corbado_frontend_api_client.model.ConnectManageListRsp
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**passkeys** | [**BuiltList&lt;Passkey&gt;**](Passkey.md) |  | 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/EmailLinkRegisterStartRspAllOfData.md b/packages/corbado_api_client/lib/frontendapi/doc/ContinueOnOtherDevice.md
similarity index 68%
rename from packages/corbado_api_client/lib/frontendapi/doc/EmailLinkRegisterStartRspAllOfData.md
rename to packages/corbado_api_client/lib/frontendapi/doc/ContinueOnOtherDevice.md
index c18d5dc..69956cd 100644
--- a/packages/corbado_api_client/lib/frontendapi/doc/EmailLinkRegisterStartRspAllOfData.md
+++ b/packages/corbado_api_client/lib/frontendapi/doc/ContinueOnOtherDevice.md
@@ -1,14 +1,14 @@
-# corbado_api.model.EmailLinkRegisterStartRspAllOfData
+# corbado_frontend_api_client.model.ContinueOnOtherDevice
 
 ## Load the model package
 ```dart
-import 'package:corbado_api/api.dart';
+import 'package:corbado_frontend_api_client/api.dart';
 ```
 
 ## Properties
 Name | Type | Description | Notes
 ------------ | ------------- | ------------- | -------------
-**emailLinkID** | **String** |  | 
+**reason** | **String** |  | 
 
 [[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
 
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/CorbadoConnectApi.md b/packages/corbado_api_client/lib/frontendapi/doc/CorbadoConnectApi.md
new file mode 100644
index 0000000..72e4896
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/CorbadoConnectApi.md
@@ -0,0 +1,492 @@
+# corbado_frontend_api_client.api.CorbadoConnectApi
+
+## Load the API package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+All URIs are relative to *https://&lt;project ID&gt;.frontendapi.corbado.io*
+
+Method | HTTP request | Description
+------------- | ------------- | -------------
+[**connectAppendFinish**](CorbadoConnectApi.md#connectappendfinish) | **POST** /v2/connect/append/finish | 
+[**connectAppendInit**](CorbadoConnectApi.md#connectappendinit) | **POST** /v2/connect/append/init | 
+[**connectAppendStart**](CorbadoConnectApi.md#connectappendstart) | **POST** /v2/connect/append/start | 
+[**connectEventCreate**](CorbadoConnectApi.md#connecteventcreate) | **POST** /v2/connect/events | 
+[**connectLoginFinish**](CorbadoConnectApi.md#connectloginfinish) | **POST** /v2/connect/login/finish | 
+[**connectLoginInit**](CorbadoConnectApi.md#connectlogininit) | **POST** /v2/connect/login/init | 
+[**connectLoginStart**](CorbadoConnectApi.md#connectloginstart) | **POST** /v2/connect/login/start | 
+[**connectManageDelete**](CorbadoConnectApi.md#connectmanagedelete) | **POST** /v2/connect/manage/delete | 
+[**connectManageInit**](CorbadoConnectApi.md#connectmanageinit) | **POST** /v2/connect/manage/init | 
+[**connectManageList**](CorbadoConnectApi.md#connectmanagelist) | **POST** /v2/connect/manage/list | 
+
+
+# **connectAppendFinish**
+> ConnectAppendFinishRsp connectAppendFinish(connectAppendFinishReq)
+
+
+
+Finishes an initialized connect passkey append process.
+
+### Example
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+// TODO Configure API key authorization: projectID
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
+// uncomment below to setup prefix (e.g. Bearer) for API key, if needed
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
+
+final api = CorbadoFrontendApiClient().getCorbadoConnectApi();
+final ConnectAppendFinishReq connectAppendFinishReq = ; // ConnectAppendFinishReq | 
+
+try {
+    final response = api.connectAppendFinish(connectAppendFinishReq);
+    print(response);
+} catch on DioException (e) {
+    print('Exception when calling CorbadoConnectApi->connectAppendFinish: $e\n');
+}
+```
+
+### Parameters
+
+Name | Type | Description  | Notes
+------------- | ------------- | ------------- | -------------
+ **connectAppendFinishReq** | [**ConnectAppendFinishReq**](ConnectAppendFinishReq.md)|  | 
+
+### Return type
+
+[**ConnectAppendFinishRsp**](ConnectAppendFinishRsp.md)
+
+### Authorization
+
+[bearerAuth](../README.md#bearerAuth), [projectID](../README.md#projectID)
+
+### HTTP request headers
+
+ - **Content-Type**: application/json
+ - **Accept**: application/json
+
+[[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
+
+# **connectAppendInit**
+> ConnectAppendInitRsp connectAppendInit(connectAppendInitReq)
+
+
+
+Initializes a connect process for passkey append.
+
+### Example
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+// TODO Configure API key authorization: projectID
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
+// uncomment below to setup prefix (e.g. Bearer) for API key, if needed
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
+
+final api = CorbadoFrontendApiClient().getCorbadoConnectApi();
+final ConnectAppendInitReq connectAppendInitReq = ; // ConnectAppendInitReq | 
+
+try {
+    final response = api.connectAppendInit(connectAppendInitReq);
+    print(response);
+} catch on DioException (e) {
+    print('Exception when calling CorbadoConnectApi->connectAppendInit: $e\n');
+}
+```
+
+### Parameters
+
+Name | Type | Description  | Notes
+------------- | ------------- | ------------- | -------------
+ **connectAppendInitReq** | [**ConnectAppendInitReq**](ConnectAppendInitReq.md)|  | 
+
+### Return type
+
+[**ConnectAppendInitRsp**](ConnectAppendInitRsp.md)
+
+### Authorization
+
+[bearerAuth](../README.md#bearerAuth), [projectID](../README.md#projectID)
+
+### HTTP request headers
+
+ - **Content-Type**: application/json
+ - **Accept**: application/json
+
+[[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
+
+# **connectAppendStart**
+> ConnectAppendStartRsp connectAppendStart(connectAppendStartReq)
+
+
+
+Starts an initialized connect passkey append process.
+
+### Example
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+// TODO Configure API key authorization: projectID
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
+// uncomment below to setup prefix (e.g. Bearer) for API key, if needed
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
+
+final api = CorbadoFrontendApiClient().getCorbadoConnectApi();
+final ConnectAppendStartReq connectAppendStartReq = ; // ConnectAppendStartReq | 
+
+try {
+    final response = api.connectAppendStart(connectAppendStartReq);
+    print(response);
+} catch on DioException (e) {
+    print('Exception when calling CorbadoConnectApi->connectAppendStart: $e\n');
+}
+```
+
+### Parameters
+
+Name | Type | Description  | Notes
+------------- | ------------- | ------------- | -------------
+ **connectAppendStartReq** | [**ConnectAppendStartReq**](ConnectAppendStartReq.md)|  | 
+
+### Return type
+
+[**ConnectAppendStartRsp**](ConnectAppendStartRsp.md)
+
+### Authorization
+
+[bearerAuth](../README.md#bearerAuth), [projectID](../README.md#projectID)
+
+### HTTP request headers
+
+ - **Content-Type**: application/json
+ - **Accept**: application/json
+
+[[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
+
+# **connectEventCreate**
+> connectEventCreate(connectEventCreateReq)
+
+
+
+Creates a new user generated connect event.
+
+### Example
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+// TODO Configure API key authorization: projectID
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
+// uncomment below to setup prefix (e.g. Bearer) for API key, if needed
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
+
+final api = CorbadoFrontendApiClient().getCorbadoConnectApi();
+final ConnectEventCreateReq connectEventCreateReq = ; // ConnectEventCreateReq | 
+
+try {
+    api.connectEventCreate(connectEventCreateReq);
+} catch on DioException (e) {
+    print('Exception when calling CorbadoConnectApi->connectEventCreate: $e\n');
+}
+```
+
+### Parameters
+
+Name | Type | Description  | Notes
+------------- | ------------- | ------------- | -------------
+ **connectEventCreateReq** | [**ConnectEventCreateReq**](ConnectEventCreateReq.md)|  | 
+
+### Return type
+
+void (empty response body)
+
+### Authorization
+
+[bearerAuth](../README.md#bearerAuth), [projectID](../README.md#projectID)
+
+### HTTP request headers
+
+ - **Content-Type**: application/json
+ - **Accept**: Not defined
+
+[[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
+
+# **connectLoginFinish**
+> ConnectLoginFinishRsp connectLoginFinish(connectLoginFinishReq)
+
+
+
+Finishes an initialized connect login process.
+
+### Example
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+// TODO Configure API key authorization: projectID
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
+// uncomment below to setup prefix (e.g. Bearer) for API key, if needed
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
+
+final api = CorbadoFrontendApiClient().getCorbadoConnectApi();
+final ConnectLoginFinishReq connectLoginFinishReq = ; // ConnectLoginFinishReq | 
+
+try {
+    final response = api.connectLoginFinish(connectLoginFinishReq);
+    print(response);
+} catch on DioException (e) {
+    print('Exception when calling CorbadoConnectApi->connectLoginFinish: $e\n');
+}
+```
+
+### Parameters
+
+Name | Type | Description  | Notes
+------------- | ------------- | ------------- | -------------
+ **connectLoginFinishReq** | [**ConnectLoginFinishReq**](ConnectLoginFinishReq.md)|  | 
+
+### Return type
+
+[**ConnectLoginFinishRsp**](ConnectLoginFinishRsp.md)
+
+### Authorization
+
+[bearerAuth](../README.md#bearerAuth), [projectID](../README.md#projectID)
+
+### HTTP request headers
+
+ - **Content-Type**: application/json
+ - **Accept**: application/json
+
+[[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
+
+# **connectLoginInit**
+> ConnectLoginInitRsp connectLoginInit(connectLoginInitReq)
+
+
+
+Initializes a connect process for login.
+
+### Example
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+// TODO Configure API key authorization: projectID
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
+// uncomment below to setup prefix (e.g. Bearer) for API key, if needed
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
+
+final api = CorbadoFrontendApiClient().getCorbadoConnectApi();
+final ConnectLoginInitReq connectLoginInitReq = ; // ConnectLoginInitReq | 
+
+try {
+    final response = api.connectLoginInit(connectLoginInitReq);
+    print(response);
+} catch on DioException (e) {
+    print('Exception when calling CorbadoConnectApi->connectLoginInit: $e\n');
+}
+```
+
+### Parameters
+
+Name | Type | Description  | Notes
+------------- | ------------- | ------------- | -------------
+ **connectLoginInitReq** | [**ConnectLoginInitReq**](ConnectLoginInitReq.md)|  | 
+
+### Return type
+
+[**ConnectLoginInitRsp**](ConnectLoginInitRsp.md)
+
+### Authorization
+
+[bearerAuth](../README.md#bearerAuth), [projectID](../README.md#projectID)
+
+### HTTP request headers
+
+ - **Content-Type**: application/json
+ - **Accept**: application/json
+
+[[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
+
+# **connectLoginStart**
+> ConnectLoginStartRsp connectLoginStart(connectLoginStartReq)
+
+
+
+Starts an initialized connect login process.
+
+### Example
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+// TODO Configure API key authorization: projectID
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
+// uncomment below to setup prefix (e.g. Bearer) for API key, if needed
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
+
+final api = CorbadoFrontendApiClient().getCorbadoConnectApi();
+final ConnectLoginStartReq connectLoginStartReq = ; // ConnectLoginStartReq | 
+
+try {
+    final response = api.connectLoginStart(connectLoginStartReq);
+    print(response);
+} catch on DioException (e) {
+    print('Exception when calling CorbadoConnectApi->connectLoginStart: $e\n');
+}
+```
+
+### Parameters
+
+Name | Type | Description  | Notes
+------------- | ------------- | ------------- | -------------
+ **connectLoginStartReq** | [**ConnectLoginStartReq**](ConnectLoginStartReq.md)|  | 
+
+### Return type
+
+[**ConnectLoginStartRsp**](ConnectLoginStartRsp.md)
+
+### Authorization
+
+[bearerAuth](../README.md#bearerAuth), [projectID](../README.md#projectID)
+
+### HTTP request headers
+
+ - **Content-Type**: application/json
+ - **Accept**: application/json
+
+[[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
+
+# **connectManageDelete**
+> ConnectManageDeleteRsp connectManageDelete(connectManageDeleteReq)
+
+
+
+Deletes a passkey for a user identified by a connect token
+
+### Example
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+// TODO Configure API key authorization: projectID
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
+// uncomment below to setup prefix (e.g. Bearer) for API key, if needed
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
+
+final api = CorbadoFrontendApiClient().getCorbadoConnectApi();
+final ConnectManageDeleteReq connectManageDeleteReq = ; // ConnectManageDeleteReq | 
+
+try {
+    final response = api.connectManageDelete(connectManageDeleteReq);
+    print(response);
+} catch on DioException (e) {
+    print('Exception when calling CorbadoConnectApi->connectManageDelete: $e\n');
+}
+```
+
+### Parameters
+
+Name | Type | Description  | Notes
+------------- | ------------- | ------------- | -------------
+ **connectManageDeleteReq** | [**ConnectManageDeleteReq**](ConnectManageDeleteReq.md)|  | 
+
+### Return type
+
+[**ConnectManageDeleteRsp**](ConnectManageDeleteRsp.md)
+
+### Authorization
+
+[bearerAuth](../README.md#bearerAuth), [projectID](../README.md#projectID)
+
+### HTTP request headers
+
+ - **Content-Type**: application/json
+ - **Accept**: application/json
+
+[[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
+
+# **connectManageInit**
+> ConnectManageInitRsp connectManageInit(connectManageInitReq)
+
+
+
+Initializes a connect process for passkey management.
+
+### Example
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+// TODO Configure API key authorization: projectID
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
+// uncomment below to setup prefix (e.g. Bearer) for API key, if needed
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
+
+final api = CorbadoFrontendApiClient().getCorbadoConnectApi();
+final ConnectManageInitReq connectManageInitReq = ; // ConnectManageInitReq | 
+
+try {
+    final response = api.connectManageInit(connectManageInitReq);
+    print(response);
+} catch on DioException (e) {
+    print('Exception when calling CorbadoConnectApi->connectManageInit: $e\n');
+}
+```
+
+### Parameters
+
+Name | Type | Description  | Notes
+------------- | ------------- | ------------- | -------------
+ **connectManageInitReq** | [**ConnectManageInitReq**](ConnectManageInitReq.md)|  | 
+
+### Return type
+
+[**ConnectManageInitRsp**](ConnectManageInitRsp.md)
+
+### Authorization
+
+[bearerAuth](../README.md#bearerAuth), [projectID](../README.md#projectID)
+
+### HTTP request headers
+
+ - **Content-Type**: application/json
+ - **Accept**: application/json
+
+[[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
+
+# **connectManageList**
+> ConnectManageListRsp connectManageList(connectManageListReq)
+
+
+
+Lists all passkeys for a user identifier by a connect token.
+
+### Example
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+// TODO Configure API key authorization: projectID
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
+// uncomment below to setup prefix (e.g. Bearer) for API key, if needed
+//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
+
+final api = CorbadoFrontendApiClient().getCorbadoConnectApi();
+final ConnectManageListReq connectManageListReq = ; // ConnectManageListReq | 
+
+try {
+    final response = api.connectManageList(connectManageListReq);
+    print(response);
+} catch on DioException (e) {
+    print('Exception when calling CorbadoConnectApi->connectManageList: $e\n');
+}
+```
+
+### Parameters
+
+Name | Type | Description  | Notes
+------------- | ------------- | ------------- | -------------
+ **connectManageListReq** | [**ConnectManageListReq**](ConnectManageListReq.md)|  | 
+
+### Return type
+
+[**ConnectManageListRsp**](ConnectManageListRsp.md)
+
+### Authorization
+
+[bearerAuth](../README.md#bearerAuth), [projectID](../README.md#projectID)
+
+### HTTP request headers
+
+ - **Content-Type**: application/json
+ - **Accept**: application/json
+
+[[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/EmailCodeConfirmRsp.md b/packages/corbado_api_client/lib/frontendapi/doc/EmailCodeConfirmRsp.md
deleted file mode 100644
index 69d5cc2..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/EmailCodeConfirmRsp.md
+++ /dev/null
@@ -1,19 +0,0 @@
-# corbado_api.model.EmailCodeConfirmRsp
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**httpStatusCode** | **int** | HTTP status code of operation | 
-**message** | **String** |  | 
-**requestData** | [**RequestData**](RequestData.md) |  | 
-**runtime** | **double** | Runtime in seconds for this request | 
-**data** | [**EmailLinkConfirmRspAllOfData**](EmailLinkConfirmRspAllOfData.md) |  | 
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/EmailCodeLoginStartReq.md b/packages/corbado_api_client/lib/frontendapi/doc/EmailCodeLoginStartReq.md
deleted file mode 100644
index 0e0869f..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/EmailCodeLoginStartReq.md
+++ /dev/null
@@ -1,16 +0,0 @@
-# corbado_api.model.EmailCodeLoginStartReq
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**username** | **String** |  | 
-**requestID** | **String** | Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side | [optional] 
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/EmailCodeLoginStartRsp.md b/packages/corbado_api_client/lib/frontendapi/doc/EmailCodeLoginStartRsp.md
deleted file mode 100644
index 950a559..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/EmailCodeLoginStartRsp.md
+++ /dev/null
@@ -1,19 +0,0 @@
-# corbado_api.model.EmailCodeLoginStartRsp
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**httpStatusCode** | **int** | HTTP status code of operation | 
-**message** | **String** |  | 
-**requestData** | [**RequestData**](RequestData.md) |  | 
-**runtime** | **double** | Runtime in seconds for this request | 
-**data** | [**EmailCodeRegisterStartRspAllOfData**](EmailCodeRegisterStartRspAllOfData.md) |  | 
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/EmailCodeRegisterStartReq.md b/packages/corbado_api_client/lib/frontendapi/doc/EmailCodeRegisterStartReq.md
deleted file mode 100644
index 45e0c62..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/EmailCodeRegisterStartReq.md
+++ /dev/null
@@ -1,17 +0,0 @@
-# corbado_api.model.EmailCodeRegisterStartReq
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**username** | **String** |  | [optional] 
-**email** | **String** |  | 
-**requestID** | **String** | Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side | [optional] 
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/EmailCodeRegisterStartRsp.md b/packages/corbado_api_client/lib/frontendapi/doc/EmailCodeRegisterStartRsp.md
deleted file mode 100644
index 7a9a50b..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/EmailCodeRegisterStartRsp.md
+++ /dev/null
@@ -1,19 +0,0 @@
-# corbado_api.model.EmailCodeRegisterStartRsp
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**httpStatusCode** | **int** | HTTP status code of operation | 
-**message** | **String** |  | 
-**requestData** | [**RequestData**](RequestData.md) |  | 
-**runtime** | **double** | Runtime in seconds for this request | 
-**data** | [**EmailCodeRegisterStartRspAllOfData**](EmailCodeRegisterStartRspAllOfData.md) |  | 
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/EmailCodeStatusReq.md b/packages/corbado_api_client/lib/frontendapi/doc/EmailCodeStatusReq.md
deleted file mode 100644
index 4e72ed7..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/EmailCodeStatusReq.md
+++ /dev/null
@@ -1,16 +0,0 @@
-# corbado_api.model.EmailCodeStatusReq
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**emailCodeID** | **String** |  | 
-**requestID** | **String** | Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side | [optional] 
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/EmailCodeStatusRsp.md b/packages/corbado_api_client/lib/frontendapi/doc/EmailCodeStatusRsp.md
deleted file mode 100644
index 3568568..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/EmailCodeStatusRsp.md
+++ /dev/null
@@ -1,19 +0,0 @@
-# corbado_api.model.EmailCodeStatusRsp
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**httpStatusCode** | **int** | HTTP status code of operation | 
-**message** | **String** |  | 
-**requestData** | [**RequestData**](RequestData.md) |  | 
-**runtime** | **double** | Runtime in seconds for this request | 
-**data** | [**AuthenticationRsp**](AuthenticationRsp.md) |  | 
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/EmailLinkConfirmReq.md b/packages/corbado_api_client/lib/frontendapi/doc/EmailLinkConfirmReq.md
deleted file mode 100644
index 961cf2f..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/EmailLinkConfirmReq.md
+++ /dev/null
@@ -1,17 +0,0 @@
-# corbado_api.model.EmailLinkConfirmReq
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**emailLinkID** | **String** |  | 
-**token** | **String** |  | 
-**requestID** | **String** | Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side | [optional] 
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/EmailLinkConfirmRsp.md b/packages/corbado_api_client/lib/frontendapi/doc/EmailLinkConfirmRsp.md
deleted file mode 100644
index 10acb79..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/EmailLinkConfirmRsp.md
+++ /dev/null
@@ -1,19 +0,0 @@
-# corbado_api.model.EmailLinkConfirmRsp
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**httpStatusCode** | **int** | HTTP status code of operation | 
-**message** | **String** |  | 
-**requestData** | [**RequestData**](RequestData.md) |  | 
-**runtime** | **double** | Runtime in seconds for this request | 
-**data** | [**EmailLinkConfirmRspAllOfData**](EmailLinkConfirmRspAllOfData.md) |  | 
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/EmailLinkConfirmRspAllOf.md b/packages/corbado_api_client/lib/frontendapi/doc/EmailLinkConfirmRspAllOf.md
deleted file mode 100644
index d597789..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/EmailLinkConfirmRspAllOf.md
+++ /dev/null
@@ -1,15 +0,0 @@
-# corbado_api.model.EmailLinkConfirmRspAllOf
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**data** | [**EmailLinkConfirmRspAllOfData**](EmailLinkConfirmRspAllOfData.md) |  | 
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/EmailLinkConfirmRspAllOfData.md b/packages/corbado_api_client/lib/frontendapi/doc/EmailLinkConfirmRspAllOfData.md
deleted file mode 100644
index 5c2cdc0..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/EmailLinkConfirmRspAllOfData.md
+++ /dev/null
@@ -1,19 +0,0 @@
-# corbado_api.model.EmailLinkConfirmRspAllOfData
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**authMethods** | [**List<AuthMethod>**](AuthMethod.md) |  | [default to const []]
-**redirectURL** | **String** |  | 
-**sessionToken** | **String** | Only given when using session v1 | [optional] 
-**longSession** | **String** | Only given when project environment is dev | [optional] 
-**shortSession** | [**ShortSession**](ShortSession.md) |  | [optional] 
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/EmailLinkConfirmRspAllOfDataAllOf.md b/packages/corbado_api_client/lib/frontendapi/doc/EmailLinkConfirmRspAllOfDataAllOf.md
deleted file mode 100644
index 9b5083e..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/EmailLinkConfirmRspAllOfDataAllOf.md
+++ /dev/null
@@ -1,15 +0,0 @@
-# corbado_api.model.EmailLinkConfirmRspAllOfDataAllOf
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**authMethods** | [**List<AuthMethod>**](AuthMethod.md) |  | [default to const []]
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/EmailLinkLoginStartReq.md b/packages/corbado_api_client/lib/frontendapi/doc/EmailLinkLoginStartReq.md
deleted file mode 100644
index 3a229e1..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/EmailLinkLoginStartReq.md
+++ /dev/null
@@ -1,16 +0,0 @@
-# corbado_api.model.EmailLinkLoginStartReq
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**username** | **String** |  | 
-**requestID** | **String** | Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side | [optional] 
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/EmailLinkLoginStartRsp.md b/packages/corbado_api_client/lib/frontendapi/doc/EmailLinkLoginStartRsp.md
deleted file mode 100644
index 5dedad8..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/EmailLinkLoginStartRsp.md
+++ /dev/null
@@ -1,19 +0,0 @@
-# corbado_api.model.EmailLinkLoginStartRsp
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**httpStatusCode** | **int** | HTTP status code of operation | 
-**message** | **String** |  | 
-**requestData** | [**RequestData**](RequestData.md) |  | 
-**runtime** | **double** | Runtime in seconds for this request | 
-**data** | [**EmailLinkRegisterStartRspAllOfData**](EmailLinkRegisterStartRspAllOfData.md) |  | 
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/EmailLinkRegisterStartReq.md b/packages/corbado_api_client/lib/frontendapi/doc/EmailLinkRegisterStartReq.md
deleted file mode 100644
index 8868b97..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/EmailLinkRegisterStartReq.md
+++ /dev/null
@@ -1,17 +0,0 @@
-# corbado_api.model.EmailLinkRegisterStartReq
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**username** | **String** |  | [optional] 
-**email** | **String** |  | 
-**requestID** | **String** | Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side | [optional] 
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/EmailLinkRegisterStartRsp.md b/packages/corbado_api_client/lib/frontendapi/doc/EmailLinkRegisterStartRsp.md
deleted file mode 100644
index b7c2075..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/EmailLinkRegisterStartRsp.md
+++ /dev/null
@@ -1,19 +0,0 @@
-# corbado_api.model.EmailLinkRegisterStartRsp
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**httpStatusCode** | **int** | HTTP status code of operation | 
-**message** | **String** |  | 
-**requestData** | [**RequestData**](RequestData.md) |  | 
-**runtime** | **double** | Runtime in seconds for this request | 
-**data** | [**EmailLinkRegisterStartRspAllOfData**](EmailLinkRegisterStartRspAllOfData.md) |  | 
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/EmailLinkRegisterStartRspAllOf.md b/packages/corbado_api_client/lib/frontendapi/doc/EmailLinkRegisterStartRspAllOf.md
deleted file mode 100644
index d4acaf2..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/EmailLinkRegisterStartRspAllOf.md
+++ /dev/null
@@ -1,15 +0,0 @@
-# corbado_api.model.EmailLinkRegisterStartRspAllOf
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**data** | [**EmailLinkRegisterStartRspAllOfData**](EmailLinkRegisterStartRspAllOfData.md) |  | 
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/EmailLinkStatusReq.md b/packages/corbado_api_client/lib/frontendapi/doc/EmailLinkStatusReq.md
deleted file mode 100644
index f578dd2..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/EmailLinkStatusReq.md
+++ /dev/null
@@ -1,16 +0,0 @@
-# corbado_api.model.EmailLinkStatusReq
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**emailLinkID** | **String** |  | 
-**requestID** | **String** | Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side | [optional] 
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/EmailLinkStatusRsp.md b/packages/corbado_api_client/lib/frontendapi/doc/EmailLinkStatusRsp.md
deleted file mode 100644
index 04e2ff4..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/EmailLinkStatusRsp.md
+++ /dev/null
@@ -1,19 +0,0 @@
-# corbado_api.model.EmailLinkStatusRsp
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**httpStatusCode** | **int** | HTTP status code of operation | 
-**message** | **String** |  | 
-**requestData** | [**RequestData**](RequestData.md) |  | 
-**runtime** | **double** | Runtime in seconds for this request | 
-**data** | [**AuthenticationRsp**](AuthenticationRsp.md) |  | 
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/EmptyReq.md b/packages/corbado_api_client/lib/frontendapi/doc/EmptyReq.md
deleted file mode 100644
index 87e41d7..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/EmptyReq.md
+++ /dev/null
@@ -1,15 +0,0 @@
-# corbado_api.model.EmptyReq
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**requestID** | **String** | Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side | [optional] 
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/ErrorRsp.md b/packages/corbado_api_client/lib/frontendapi/doc/ErrorRsp.md
deleted file mode 100644
index bcdf314..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/ErrorRsp.md
+++ /dev/null
@@ -1,19 +0,0 @@
-# corbado_api.model.ErrorRsp
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**httpStatusCode** | **int** | HTTP status code of operation | 
-**message** | **String** |  | 
-**requestData** | [**RequestData**](RequestData.md) |  | 
-**runtime** | **double** | Runtime in seconds for this request | 
-**error** | [**ErrorRspAllOfError**](ErrorRspAllOfError.md) |  | 
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/ErrorRspAllOfError.md b/packages/corbado_api_client/lib/frontendapi/doc/ErrorRspAllOfError.md
deleted file mode 100644
index f58a997..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/ErrorRspAllOfError.md
+++ /dev/null
@@ -1,18 +0,0 @@
-# corbado_api.model.ErrorRspAllOfError
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**type** | **String** | Type of error | 
-**details** | **String** | Details of error | [optional] 
-**validation** | [**List<ErrorRspAllOfErrorValidation>**](ErrorRspAllOfErrorValidation.md) | Validation errors per field | [optional] [default to const []]
-**links** | **List<String>** | Additional links to help understand the error | [default to const []]
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/EventCreateReq.md b/packages/corbado_api_client/lib/frontendapi/doc/EventCreateReq.md
new file mode 100644
index 0000000..5ee9b2b
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/EventCreateReq.md
@@ -0,0 +1,15 @@
+# corbado_frontend_api_client.model.EventCreateReq
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**eventType** | [**PasskeyEventType**](PasskeyEventType.md) |  | 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/FullNameWithError.md b/packages/corbado_api_client/lib/frontendapi/doc/FullNameWithError.md
new file mode 100644
index 0000000..c3f1cc8
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/FullNameWithError.md
@@ -0,0 +1,16 @@
+# corbado_frontend_api_client.model.FullNameWithError
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**fullName** | **String** |  | 
+**error** | [**RequestError**](RequestError.md) |  | [optional] 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/FullUser.md b/packages/corbado_api_client/lib/frontendapi/doc/FullUser.md
deleted file mode 100644
index f446bde..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/FullUser.md
+++ /dev/null
@@ -1,22 +0,0 @@
-# corbado_api.model.FullUser
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**ID** | **String** | ID of the user | 
-**name** | **String** |  | 
-**fullName** | **String** |  | 
-**created** | **String** | Timestamp of when the entity was created in yyyy-MM-dd'T'HH:mm:ss format | 
-**updated** | **String** | Timestamp of when the entity was last updated in yyyy-MM-dd'T'HH:mm:ss format | 
-**status** | [**Status**](Status.md) |  | 
-**emails** | [**List<UserEmail>**](UserEmail.md) |  | [default to const []]
-**phoneNumbers** | [**List<UserPhoneNumber>**](UserPhoneNumber.md) |  | [default to const []]
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/AuthenticationRsp.md b/packages/corbado_api_client/lib/frontendapi/doc/GeneralBlockCompleted.md
similarity index 56%
rename from packages/corbado_api_client/lib/frontendapi/doc/AuthenticationRsp.md
rename to packages/corbado_api_client/lib/frontendapi/doc/GeneralBlockCompleted.md
index f8d305e..2f7356a 100644
--- a/packages/corbado_api_client/lib/frontendapi/doc/AuthenticationRsp.md
+++ b/packages/corbado_api_client/lib/frontendapi/doc/GeneralBlockCompleted.md
@@ -1,17 +1,17 @@
-# corbado_api.model.AuthenticationRsp
+# corbado_frontend_api_client.model.GeneralBlockCompleted
 
 ## Load the model package
 ```dart
-import 'package:corbado_api/api.dart';
+import 'package:corbado_frontend_api_client/api.dart';
 ```
 
 ## Properties
 Name | Type | Description | Notes
 ------------ | ------------- | ------------- | -------------
-**redirectURL** | **String** |  | 
-**sessionToken** | **String** | Only given when using session v1 | [optional] 
-**longSession** | **String** | Only given when project environment is dev | [optional] 
-**shortSession** | [**ShortSession**](ShortSession.md) |  | [optional] 
+**blockType** | **String** |  | 
+**shortSession** | **String** |  | 
+**longSession** | **String** | Only given when project environment is dev 1 | [optional] 
+**passkeyOperation** | [**PasskeyOperation**](PasskeyOperation.md) |  | [optional] 
 
 [[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
 
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/GeneralBlockLoginInit.md b/packages/corbado_api_client/lib/frontendapi/doc/GeneralBlockLoginInit.md
new file mode 100644
index 0000000..d7433af
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/GeneralBlockLoginInit.md
@@ -0,0 +1,24 @@
+# corbado_frontend_api_client.model.GeneralBlockLoginInit
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**blockType** | **String** |  | 
+**identifierValue** | **String** |  | 
+**isPhone** | **bool** |  | 
+**isPhoneAvailable** | **bool** |  | 
+**isEmailAvailable** | **bool** |  | 
+**isUsernameAvailable** | **bool** |  | 
+**socialData** | [**SocialData**](SocialData.md) |  | 
+**conditionalUIChallenge** | **String** |  | [optional] 
+**fieldError** | [**RequestError**](RequestError.md) |  | [optional] 
+**error** | [**RequestError**](RequestError.md) |  | [optional] 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/GeneralBlockPasskeyAppend.md b/packages/corbado_api_client/lib/frontendapi/doc/GeneralBlockPasskeyAppend.md
new file mode 100644
index 0000000..2ccc5e2
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/GeneralBlockPasskeyAppend.md
@@ -0,0 +1,21 @@
+# corbado_frontend_api_client.model.GeneralBlockPasskeyAppend
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**blockType** | **String** |  | 
+**challenge** | **String** |  | 
+**identifierValue** | **String** |  | 
+**identifierType** | [**LoginIdentifierType**](LoginIdentifierType.md) |  | 
+**autoSubmit** | **bool** |  | 
+**passkeyIconSet** | [**PasskeyIconSet**](PasskeyIconSet.md) |  | 
+**variant** | **String** |  | 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/GeneralBlockPasskeyAppended.md b/packages/corbado_api_client/lib/frontendapi/doc/GeneralBlockPasskeyAppended.md
new file mode 100644
index 0000000..0710307
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/GeneralBlockPasskeyAppended.md
@@ -0,0 +1,15 @@
+# corbado_frontend_api_client.model.GeneralBlockPasskeyAppended
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**blockType** | **String** |  | 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/GeneralBlockPasskeyVerify.md b/packages/corbado_api_client/lib/frontendapi/doc/GeneralBlockPasskeyVerify.md
new file mode 100644
index 0000000..68801f4
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/GeneralBlockPasskeyVerify.md
@@ -0,0 +1,18 @@
+# corbado_frontend_api_client.model.GeneralBlockPasskeyVerify
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**blockType** | **String** |  | 
+**challenge** | **String** |  | 
+**identifierValue** | **String** |  | 
+**loginHint** | **String** |  | [optional] 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/GeneralBlockPostSignupEmailVerify.md b/packages/corbado_api_client/lib/frontendapi/doc/GeneralBlockPostSignupEmailVerify.md
new file mode 100644
index 0000000..8396b75
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/GeneralBlockPostSignupEmailVerify.md
@@ -0,0 +1,16 @@
+# corbado_frontend_api_client.model.GeneralBlockPostSignupEmailVerify
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**blockType** | **String** |  | 
+**error** | [**RequestError**](RequestError.md) |  | [optional] 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/GeneralBlockSignupInit.md b/packages/corbado_api_client/lib/frontendapi/doc/GeneralBlockSignupInit.md
new file mode 100644
index 0000000..1ebd4c5
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/GeneralBlockSignupInit.md
@@ -0,0 +1,19 @@
+# corbado_frontend_api_client.model.GeneralBlockSignupInit
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**blockType** | **String** |  | 
+**identifiers** | [**BuiltList&lt;LoginIdentifierWithError&gt;**](LoginIdentifierWithError.md) |  | 
+**fullName** | [**FullNameWithError**](FullNameWithError.md) |  | [optional] 
+**socialData** | [**SocialData**](SocialData.md) |  | [optional] 
+**error** | [**RequestError**](RequestError.md) |  | [optional] 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/GeneralBlockVerifyIdentifier.md b/packages/corbado_api_client/lib/frontendapi/doc/GeneralBlockVerifyIdentifier.md
new file mode 100644
index 0000000..bf93b73
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/GeneralBlockVerifyIdentifier.md
@@ -0,0 +1,21 @@
+# corbado_frontend_api_client.model.GeneralBlockVerifyIdentifier
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**blockType** | **String** |  | 
+**verificationMethod** | [**VerificationMethod**](VerificationMethod.md) |  | 
+**identifier** | **String** |  | 
+**alternativeVerificationMethods** | [**BuiltList&lt;GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner&gt;**](GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner.md) |  | 
+**isPostLoginVerification** | **bool** |  | 
+**retryNotBefore** | **int** |  | [optional] 
+**error** | [**RequestError**](RequestError.md) |  | [optional] 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner.md b/packages/corbado_api_client/lib/frontendapi/doc/GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner.md
new file mode 100644
index 0000000..3ca3fce
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner.md
@@ -0,0 +1,16 @@
+# corbado_frontend_api_client.model.GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**verificationMethod** | [**VerificationMethod**](VerificationMethod.md) |  | 
+**identifier** | **String** |  | 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/GenericRsp.md b/packages/corbado_api_client/lib/frontendapi/doc/GenericRsp.md
index f6d562f..cc0b5d5 100644
--- a/packages/corbado_api_client/lib/frontendapi/doc/GenericRsp.md
+++ b/packages/corbado_api_client/lib/frontendapi/doc/GenericRsp.md
@@ -1,8 +1,8 @@
-# corbado_api.model.GenericRsp
+# corbado_frontend_api_client.model.GenericRsp
 
 ## Load the model package
 ```dart
-import 'package:corbado_api/api.dart';
+import 'package:corbado_frontend_api_client/api.dart';
 ```
 
 ## Properties
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/Identifier.md b/packages/corbado_api_client/lib/frontendapi/doc/Identifier.md
new file mode 100644
index 0000000..16dd358
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/Identifier.md
@@ -0,0 +1,18 @@
+# corbado_frontend_api_client.model.Identifier
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**id** | **String** |  | 
+**value** | **String** |  | 
+**type** | [**LoginIdentifierType**](LoginIdentifierType.md) |  | 
+**status** | **String** |  | 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/IdentifierUpdateReq.md b/packages/corbado_api_client/lib/frontendapi/doc/IdentifierUpdateReq.md
new file mode 100644
index 0000000..a82e72e
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/IdentifierUpdateReq.md
@@ -0,0 +1,16 @@
+# corbado_frontend_api_client.model.IdentifierUpdateReq
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**identifierType** | [**LoginIdentifierType**](LoginIdentifierType.md) |  | 
+**value** | **String** |  | 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/EmailCodeConfirmReq.md b/packages/corbado_api_client/lib/frontendapi/doc/IdentifierVerifyFinishReq.md
similarity index 52%
rename from packages/corbado_api_client/lib/frontendapi/doc/EmailCodeConfirmReq.md
rename to packages/corbado_api_client/lib/frontendapi/doc/IdentifierVerifyFinishReq.md
index 4d4b2e1..e5c59fd 100644
--- a/packages/corbado_api_client/lib/frontendapi/doc/EmailCodeConfirmReq.md
+++ b/packages/corbado_api_client/lib/frontendapi/doc/IdentifierVerifyFinishReq.md
@@ -1,16 +1,17 @@
-# corbado_api.model.EmailCodeConfirmReq
+# corbado_frontend_api_client.model.IdentifierVerifyFinishReq
 
 ## Load the model package
 ```dart
-import 'package:corbado_api/api.dart';
+import 'package:corbado_frontend_api_client/api.dart';
 ```
 
 ## Properties
 Name | Type | Description | Notes
 ------------ | ------------- | ------------- | -------------
-**emailCodeID** | **String** |  | 
 **code** | **String** |  | 
-**requestID** | **String** | Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side | [optional] 
+**identifierType** | [**LoginIdentifierType**](LoginIdentifierType.md) |  | 
+**verificationType** | [**VerificationMethod**](VerificationMethod.md) |  | 
+**isNewDevice** | **bool** |  | 
 
 [[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
 
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/IdentifierVerifyStartReq.md b/packages/corbado_api_client/lib/frontendapi/doc/IdentifierVerifyStartReq.md
new file mode 100644
index 0000000..24d1d9a
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/IdentifierVerifyStartReq.md
@@ -0,0 +1,16 @@
+# corbado_frontend_api_client.model.IdentifierVerifyStartReq
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**identifierType** | [**LoginIdentifierType**](LoginIdentifierType.md) |  | 
+**verificationType** | [**VerificationMethod**](VerificationMethod.md) |  | 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/JavaScriptHighEntropy.md b/packages/corbado_api_client/lib/frontendapi/doc/JavaScriptHighEntropy.md
new file mode 100644
index 0000000..0be6beb
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/JavaScriptHighEntropy.md
@@ -0,0 +1,17 @@
+# corbado_frontend_api_client.model.JavaScriptHighEntropy
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**platform** | **String** |  | 
+**platformVersion** | **String** |  | 
+**mobile** | **bool** |  | 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/Jwk.md b/packages/corbado_api_client/lib/frontendapi/doc/Jwk.md
deleted file mode 100644
index 8340a1c..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/Jwk.md
+++ /dev/null
@@ -1,20 +0,0 @@
-# corbado_api.model.Jwk
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**alg** | **String** | The specific cryptographic algorithm used with the key | 
-**kty** | **String** | The family of cryptographic algorithms used with the key | 
-**use** | **String** | How the key was meant to be used; sig represents the signature | 
-**n** | **String** | The modulus for the RSA public key | 
-**e** | **String** | The exponent for the RSA public key | 
-**kid** | **String** | The unique identifier for the key | 
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/LoginIdentifier.md b/packages/corbado_api_client/lib/frontendapi/doc/LoginIdentifier.md
new file mode 100644
index 0000000..ccdd31b
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/LoginIdentifier.md
@@ -0,0 +1,16 @@
+# corbado_frontend_api_client.model.LoginIdentifier
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**type** | [**LoginIdentifierType**](LoginIdentifierType.md) |  | 
+**identifier** | **String** |  | 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/LoginIdentifierConfig.md b/packages/corbado_api_client/lib/frontendapi/doc/LoginIdentifierConfig.md
new file mode 100644
index 0000000..39fe925
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/LoginIdentifierConfig.md
@@ -0,0 +1,15 @@
+# corbado_frontend_api_client.model.LoginIdentifierConfig
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**type** | [**LoginIdentifierType**](LoginIdentifierType.md) |  | 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/LoginIdentifierType.md b/packages/corbado_api_client/lib/frontendapi/doc/LoginIdentifierType.md
index a044a10..9adc56c 100644
--- a/packages/corbado_api_client/lib/frontendapi/doc/LoginIdentifierType.md
+++ b/packages/corbado_api_client/lib/frontendapi/doc/LoginIdentifierType.md
@@ -1,8 +1,8 @@
-# corbado_api.model.LoginIdentifierType
+# corbado_frontend_api_client.model.LoginIdentifierType
 
 ## Load the model package
 ```dart
-import 'package:corbado_api/api.dart';
+import 'package:corbado_frontend_api_client/api.dart';
 ```
 
 ## Properties
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/LoginIdentifierWithError.md b/packages/corbado_api_client/lib/frontendapi/doc/LoginIdentifierWithError.md
new file mode 100644
index 0000000..9b317e9
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/LoginIdentifierWithError.md
@@ -0,0 +1,17 @@
+# corbado_frontend_api_client.model.LoginIdentifierWithError
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**type** | [**LoginIdentifierType**](LoginIdentifierType.md) |  | 
+**identifier** | **String** |  | 
+**error** | [**RequestError**](RequestError.md) |  | [optional] 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/LoginInitReq.md b/packages/corbado_api_client/lib/frontendapi/doc/LoginInitReq.md
new file mode 100644
index 0000000..6107bb7
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/LoginInitReq.md
@@ -0,0 +1,16 @@
+# corbado_frontend_api_client.model.LoginInitReq
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**identifierValue** | **String** |  | 
+**isPhone** | **bool** |  | 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/LoginTokenRsp.md b/packages/corbado_api_client/lib/frontendapi/doc/LoginTokenRsp.md
deleted file mode 100644
index 19b7f2e..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/LoginTokenRsp.md
+++ /dev/null
@@ -1,19 +0,0 @@
-# corbado_api.model.LoginTokenRsp
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**httpStatusCode** | **int** | HTTP status code of operation | 
-**message** | **String** |  | 
-**requestData** | [**RequestData**](RequestData.md) |  | 
-**runtime** | **double** | Runtime in seconds for this request | 
-**data** | [**AuthenticationRsp**](AuthenticationRsp.md) |  | 
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/LogoutRsp.md b/packages/corbado_api_client/lib/frontendapi/doc/LogoutRsp.md
deleted file mode 100644
index 79cd111..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/LogoutRsp.md
+++ /dev/null
@@ -1,19 +0,0 @@
-# corbado_api.model.LogoutRsp
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**httpStatusCode** | **int** | HTTP status code of operation | 
-**message** | **String** |  | 
-**requestData** | [**RequestData**](RequestData.md) |  | 
-**runtime** | **double** | Runtime in seconds for this request | 
-**shortSession** | [**ShortSession**](ShortSession.md) |  | [optional] 
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/LogoutRspAllOf.md b/packages/corbado_api_client/lib/frontendapi/doc/LogoutRspAllOf.md
deleted file mode 100644
index 76483a6..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/LogoutRspAllOf.md
+++ /dev/null
@@ -1,15 +0,0 @@
-# corbado_api.model.LogoutRspAllOf
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**shortSession** | [**ShortSession**](ShortSession.md) |  | [optional] 
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/MeIdentifierCreateReq.md b/packages/corbado_api_client/lib/frontendapi/doc/MeIdentifierCreateReq.md
new file mode 100644
index 0000000..f43f337
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/MeIdentifierCreateReq.md
@@ -0,0 +1,16 @@
+# corbado_frontend_api_client.model.MeIdentifierCreateReq
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**identifierType** | [**LoginIdentifierType**](LoginIdentifierType.md) |  | 
+**value** | **String** |  | 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/MeIdentifierDeleteReq.md b/packages/corbado_api_client/lib/frontendapi/doc/MeIdentifierDeleteReq.md
new file mode 100644
index 0000000..aa89f3c
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/MeIdentifierDeleteReq.md
@@ -0,0 +1,15 @@
+# corbado_frontend_api_client.model.MeIdentifierDeleteReq
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**identifierID** | **String** |  | 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/MeIdentifierUpdateReq.md b/packages/corbado_api_client/lib/frontendapi/doc/MeIdentifierUpdateReq.md
new file mode 100644
index 0000000..07573ce
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/MeIdentifierUpdateReq.md
@@ -0,0 +1,17 @@
+# corbado_frontend_api_client.model.MeIdentifierUpdateReq
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**identifierID** | **String** |  | 
+**identifierType** | [**LoginIdentifierType**](LoginIdentifierType.md) |  | 
+**value** | **String** |  | 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/MeIdentifierVerifyFinishReq.md b/packages/corbado_api_client/lib/frontendapi/doc/MeIdentifierVerifyFinishReq.md
new file mode 100644
index 0000000..d5a9c02
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/MeIdentifierVerifyFinishReq.md
@@ -0,0 +1,16 @@
+# corbado_frontend_api_client.model.MeIdentifierVerifyFinishReq
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**identifierID** | **String** |  | 
+**code** | **String** |  | 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/MeIdentifierVerifyStartReq.md b/packages/corbado_api_client/lib/frontendapi/doc/MeIdentifierVerifyStartReq.md
new file mode 100644
index 0000000..58cb48e
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/MeIdentifierVerifyStartReq.md
@@ -0,0 +1,16 @@
+# corbado_frontend_api_client.model.MeIdentifierVerifyStartReq
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**identifierID** | **String** |  | 
+**clientInformation** | [**ClientInformation**](ClientInformation.md) |  | 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/MePassKeyRsp.md b/packages/corbado_api_client/lib/frontendapi/doc/MePassKeyRsp.md
index 7b1ed2d..0a355b3 100644
--- a/packages/corbado_api_client/lib/frontendapi/doc/MePassKeyRsp.md
+++ b/packages/corbado_api_client/lib/frontendapi/doc/MePassKeyRsp.md
@@ -1,18 +1,15 @@
-# corbado_api.model.MePassKeyRsp
+# corbado_frontend_api_client.model.MePasskeyRsp
 
 ## Load the model package
 ```dart
-import 'package:corbado_api/api.dart';
+import 'package:corbado_frontend_api_client/api.dart';
 ```
 
 ## Properties
 Name | Type | Description | Notes
 ------------ | ------------- | ------------- | -------------
-**httpStatusCode** | **int** | HTTP status code of operation | 
-**message** | **String** |  | 
-**requestData** | [**RequestData**](RequestData.md) |  | 
-**runtime** | **double** | Runtime in seconds for this request | 
-**data** | [**PassKeyList**](PassKeyList.md) |  | 
+**passkeys** | [**BuiltList&lt;Passkey&gt;**](Passkey.md) |  | 
+**paging** | [**Paging**](Paging.md) |  | 
 
 [[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
 
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/EmailCodeRegisterStartRspAllOfData.md b/packages/corbado_api_client/lib/frontendapi/doc/MePasskeyDeleteRsp.md
similarity index 69%
rename from packages/corbado_api_client/lib/frontendapi/doc/EmailCodeRegisterStartRspAllOfData.md
rename to packages/corbado_api_client/lib/frontendapi/doc/MePasskeyDeleteRsp.md
index f21a74e..00cdf29 100644
--- a/packages/corbado_api_client/lib/frontendapi/doc/EmailCodeRegisterStartRspAllOfData.md
+++ b/packages/corbado_api_client/lib/frontendapi/doc/MePasskeyDeleteRsp.md
@@ -1,14 +1,14 @@
-# corbado_api.model.EmailCodeRegisterStartRspAllOfData
+# corbado_frontend_api_client.model.MePasskeyDeleteRsp
 
 ## Load the model package
 ```dart
-import 'package:corbado_api/api.dart';
+import 'package:corbado_frontend_api_client/api.dart';
 ```
 
 ## Properties
 Name | Type | Description | Notes
 ------------ | ------------- | ------------- | -------------
-**emailCodeID** | **String** |  | 
+**id** | **String** |  | 
 
 [[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
 
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/MePasskeysAppendFinishReq.md b/packages/corbado_api_client/lib/frontendapi/doc/MePasskeysAppendFinishReq.md
new file mode 100644
index 0000000..a801c53
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/MePasskeysAppendFinishReq.md
@@ -0,0 +1,16 @@
+# corbado_frontend_api_client.model.MePasskeysAppendFinishReq
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**attestationResponse** | **String** |  | 
+**clientInformation** | [**ClientInformation**](ClientInformation.md) |  | 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/AppleAppSiteAssociationRspApplinksDetailsInner.md b/packages/corbado_api_client/lib/frontendapi/doc/MePasskeysAppendStartReq.md
similarity index 62%
rename from packages/corbado_api_client/lib/frontendapi/doc/AppleAppSiteAssociationRspApplinksDetailsInner.md
rename to packages/corbado_api_client/lib/frontendapi/doc/MePasskeysAppendStartReq.md
index 8ed4b67..a60575d 100644
--- a/packages/corbado_api_client/lib/frontendapi/doc/AppleAppSiteAssociationRspApplinksDetailsInner.md
+++ b/packages/corbado_api_client/lib/frontendapi/doc/MePasskeysAppendStartReq.md
@@ -1,15 +1,14 @@
-# corbado_api.model.AppleAppSiteAssociationRspApplinksDetailsInner
+# corbado_frontend_api_client.model.MePasskeysAppendStartReq
 
 ## Load the model package
 ```dart
-import 'package:corbado_api/api.dart';
+import 'package:corbado_frontend_api_client/api.dart';
 ```
 
 ## Properties
 Name | Type | Description | Notes
 ------------ | ------------- | ------------- | -------------
-**appID** | **String** |  | 
-**paths** | **List<String>** |  | [default to const []]
+**clientInformation** | [**ClientInformation**](ClientInformation.md) |  | 
 
 [[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
 
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/MePasskeysAppendStartRsp.md b/packages/corbado_api_client/lib/frontendapi/doc/MePasskeysAppendStartRsp.md
new file mode 100644
index 0000000..7b0cfed
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/MePasskeysAppendStartRsp.md
@@ -0,0 +1,17 @@
+# corbado_frontend_api_client.model.MePasskeysAppendStartRsp
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**attestationOptions** | **String** |  | 
+**newClientEnvHandle** | **String** |  | [optional] 
+**appendNotAllowedReason** | **String** |  | [optional] 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/ErrorRspAllOf.md b/packages/corbado_api_client/lib/frontendapi/doc/MeRefreshRsp.md
similarity index 69%
rename from packages/corbado_api_client/lib/frontendapi/doc/ErrorRspAllOf.md
rename to packages/corbado_api_client/lib/frontendapi/doc/MeRefreshRsp.md
index 71fc563..ce8e79c 100644
--- a/packages/corbado_api_client/lib/frontendapi/doc/ErrorRspAllOf.md
+++ b/packages/corbado_api_client/lib/frontendapi/doc/MeRefreshRsp.md
@@ -1,14 +1,14 @@
-# corbado_api.model.ErrorRspAllOf
+# corbado_frontend_api_client.model.MeRefreshRsp
 
 ## Load the model package
 ```dart
-import 'package:corbado_api/api.dart';
+import 'package:corbado_frontend_api_client/api.dart';
 ```
 
 ## Properties
 Name | Type | Description | Notes
 ------------ | ------------- | ------------- | -------------
-**error** | [**ErrorRspAllOfError**](ErrorRspAllOfError.md) |  | 
+**shortSession** | **String** |  | 
 
 [[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
 
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/MeRsp.md b/packages/corbado_api_client/lib/frontendapi/doc/MeRsp.md
index d7a7dfd..9f285b8 100644
--- a/packages/corbado_api_client/lib/frontendapi/doc/MeRsp.md
+++ b/packages/corbado_api_client/lib/frontendapi/doc/MeRsp.md
@@ -1,18 +1,17 @@
-# corbado_api.model.MeRsp
+# corbado_frontend_api_client.model.MeRsp
 
 ## Load the model package
 ```dart
-import 'package:corbado_api/api.dart';
+import 'package:corbado_frontend_api_client/api.dart';
 ```
 
 ## Properties
 Name | Type | Description | Notes
 ------------ | ------------- | ------------- | -------------
-**httpStatusCode** | **int** | HTTP status code of operation | 
-**message** | **String** |  | 
-**requestData** | [**RequestData**](RequestData.md) |  | 
-**runtime** | **double** | Runtime in seconds for this request | 
-**data** | [**FullUser**](FullUser.md) |  | 
+**id** | **String** |  | 
+**fullName** | **String** |  | 
+**identifiers** | [**BuiltList&lt;Identifier&gt;**](Identifier.md) |  | 
+**socialAccounts** | [**BuiltList&lt;SocialAccount&gt;**](SocialAccount.md) |  | 
 
 [[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
 
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/MePassKeyRspAllOf.md b/packages/corbado_api_client/lib/frontendapi/doc/MeUpdateReq.md
similarity index 69%
rename from packages/corbado_api_client/lib/frontendapi/doc/MePassKeyRspAllOf.md
rename to packages/corbado_api_client/lib/frontendapi/doc/MeUpdateReq.md
index 5ea1ab0..f2dd0c9 100644
--- a/packages/corbado_api_client/lib/frontendapi/doc/MePassKeyRspAllOf.md
+++ b/packages/corbado_api_client/lib/frontendapi/doc/MeUpdateReq.md
@@ -1,14 +1,14 @@
-# corbado_api.model.MePassKeyRspAllOf
+# corbado_frontend_api_client.model.MeUpdateReq
 
 ## Load the model package
 ```dart
-import 'package:corbado_api/api.dart';
+import 'package:corbado_frontend_api_client/api.dart';
 ```
 
 ## Properties
 Name | Type | Description | Notes
 ------------ | ------------- | ------------- | -------------
-**data** | [**PassKeyList**](PassKeyList.md) |  | 
+**fullName** | **String** |  | 
 
 [[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
 
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/Paging.md b/packages/corbado_api_client/lib/frontendapi/doc/Paging.md
index 76a0ed7..54e5f3a 100644
--- a/packages/corbado_api_client/lib/frontendapi/doc/Paging.md
+++ b/packages/corbado_api_client/lib/frontendapi/doc/Paging.md
@@ -1,8 +1,8 @@
-# corbado_api.model.Paging
+# corbado_frontend_api_client.model.Paging
 
 ## Load the model package
 ```dart
-import 'package:corbado_api/api.dart';
+import 'package:corbado_frontend_api_client/api.dart';
 ```
 
 ## Properties
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/PassKeyAppendFinishRsp.md b/packages/corbado_api_client/lib/frontendapi/doc/PassKeyAppendFinishRsp.md
deleted file mode 100644
index 888e95d..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/PassKeyAppendFinishRsp.md
+++ /dev/null
@@ -1,19 +0,0 @@
-# corbado_api.model.PassKeyAppendFinishRsp
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**httpStatusCode** | **int** | HTTP status code of operation | 
-**message** | **String** |  | 
-**requestData** | [**RequestData**](RequestData.md) |  | 
-**runtime** | **double** | Runtime in seconds for this request | 
-**data** | [**PassKeyAppendFinishRspAllOfData**](PassKeyAppendFinishRspAllOfData.md) |  | 
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/PassKeyAppendFinishRspAllOf.md b/packages/corbado_api_client/lib/frontendapi/doc/PassKeyAppendFinishRspAllOf.md
deleted file mode 100644
index 8bde243..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/PassKeyAppendFinishRspAllOf.md
+++ /dev/null
@@ -1,15 +0,0 @@
-# corbado_api.model.PassKeyAppendFinishRspAllOf
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**data** | [**PassKeyAppendFinishRspAllOfData**](PassKeyAppendFinishRspAllOfData.md) |  | 
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/PassKeyAppendFinishRspAllOfData.md b/packages/corbado_api_client/lib/frontendapi/doc/PassKeyAppendFinishRspAllOfData.md
deleted file mode 100644
index 930a6aa..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/PassKeyAppendFinishRspAllOfData.md
+++ /dev/null
@@ -1,15 +0,0 @@
-# corbado_api.model.PassKeyAppendFinishRspAllOfData
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**redirectURL** | **String** |  | 
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/PassKeyAssociateStartReq.md b/packages/corbado_api_client/lib/frontendapi/doc/PassKeyAssociateStartReq.md
deleted file mode 100644
index 8100901..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/PassKeyAssociateStartReq.md
+++ /dev/null
@@ -1,16 +0,0 @@
-# corbado_api.model.PassKeyAssociateStartReq
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**associationToken** | **String** |  | 
-**requestID** | **String** | Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side | [optional] 
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/PassKeyCredentialExistsReq.md b/packages/corbado_api_client/lib/frontendapi/doc/PassKeyCredentialExistsReq.md
deleted file mode 100644
index ba28a1d..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/PassKeyCredentialExistsReq.md
+++ /dev/null
@@ -1,17 +0,0 @@
-# corbado_api.model.PassKeyCredentialExistsReq
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**loginIdentifier** | **String** |  | 
-**loginIdentifierType** | [**LoginIdentifierType**](LoginIdentifierType.md) |  | 
-**requestID** | **String** | Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side | [optional] 
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/PassKeyCredentialExistsRsp.md b/packages/corbado_api_client/lib/frontendapi/doc/PassKeyCredentialExistsRsp.md
deleted file mode 100644
index 193a390..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/PassKeyCredentialExistsRsp.md
+++ /dev/null
@@ -1,19 +0,0 @@
-# corbado_api.model.PassKeyCredentialExistsRsp
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**httpStatusCode** | **int** | HTTP status code of operation | 
-**message** | **String** |  | 
-**requestData** | [**RequestData**](RequestData.md) |  | 
-**runtime** | **double** | Runtime in seconds for this request | 
-**exists** | **bool** |  | 
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/PassKeyFinishReq.md b/packages/corbado_api_client/lib/frontendapi/doc/PassKeyFinishReq.md
deleted file mode 100644
index 47371b2..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/PassKeyFinishReq.md
+++ /dev/null
@@ -1,16 +0,0 @@
-# corbado_api.model.PassKeyFinishReq
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**signedChallenge** | **String** |  | 
-**requestID** | **String** | Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side | [optional] 
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/PassKeyList.md b/packages/corbado_api_client/lib/frontendapi/doc/PassKeyList.md
deleted file mode 100644
index 6da5c89..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/PassKeyList.md
+++ /dev/null
@@ -1,16 +0,0 @@
-# corbado_api.model.PassKeyList
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**passkeys** | [**List<PassKeyItem>**](PassKeyItem.md) |  | [default to const []]
-**paging** | [**Paging**](Paging.md) |  | [optional] 
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/PassKeyLoginFinishRsp.md b/packages/corbado_api_client/lib/frontendapi/doc/PassKeyLoginFinishRsp.md
deleted file mode 100644
index 7e36d89..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/PassKeyLoginFinishRsp.md
+++ /dev/null
@@ -1,19 +0,0 @@
-# corbado_api.model.PassKeyLoginFinishRsp
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**httpStatusCode** | **int** | HTTP status code of operation | 
-**message** | **String** |  | 
-**requestData** | [**RequestData**](RequestData.md) |  | 
-**runtime** | **double** | Runtime in seconds for this request | 
-**data** | [**PassKeyLoginFinishRspAllOfData**](PassKeyLoginFinishRspAllOfData.md) |  | 
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/PassKeyLoginFinishRspAllOf.md b/packages/corbado_api_client/lib/frontendapi/doc/PassKeyLoginFinishRspAllOf.md
deleted file mode 100644
index ab29778..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/PassKeyLoginFinishRspAllOf.md
+++ /dev/null
@@ -1,15 +0,0 @@
-# corbado_api.model.PassKeyLoginFinishRspAllOf
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**data** | [**PassKeyLoginFinishRspAllOfData**](PassKeyLoginFinishRspAllOfData.md) |  | 
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/PassKeyLoginFinishRspAllOfData.md b/packages/corbado_api_client/lib/frontendapi/doc/PassKeyLoginFinishRspAllOfData.md
deleted file mode 100644
index ab7571a..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/PassKeyLoginFinishRspAllOfData.md
+++ /dev/null
@@ -1,20 +0,0 @@
-# corbado_api.model.PassKeyLoginFinishRspAllOfData
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**username** | **String** |  | 
-**confirmedCredential** | **bool** |  | 
-**redirectURL** | **String** |  | 
-**sessionToken** | **String** | Only given when using session v1 | [optional] 
-**longSession** | **String** | Only given when project environment is dev | [optional] 
-**shortSession** | [**ShortSession**](ShortSession.md) |  | [optional] 
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/PassKeyLoginFinishRspAllOfDataAllOf.md b/packages/corbado_api_client/lib/frontendapi/doc/PassKeyLoginFinishRspAllOfDataAllOf.md
deleted file mode 100644
index beafcea..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/PassKeyLoginFinishRspAllOfDataAllOf.md
+++ /dev/null
@@ -1,16 +0,0 @@
-# corbado_api.model.PassKeyLoginFinishRspAllOfDataAllOf
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**username** | **String** |  | 
-**confirmedCredential** | **bool** |  | 
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/PassKeyLoginStartReq.md b/packages/corbado_api_client/lib/frontendapi/doc/PassKeyLoginStartReq.md
deleted file mode 100644
index 5f88d58..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/PassKeyLoginStartReq.md
+++ /dev/null
@@ -1,16 +0,0 @@
-# corbado_api.model.PassKeyLoginStartReq
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**username** | **String** | Users login name | 
-**requestID** | **String** | Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side | [optional] 
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/PassKeyMediationStartReq.md b/packages/corbado_api_client/lib/frontendapi/doc/PassKeyMediationStartReq.md
deleted file mode 100644
index 0425faf..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/PassKeyMediationStartReq.md
+++ /dev/null
@@ -1,16 +0,0 @@
-# corbado_api.model.PassKeyMediationStartReq
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**requestID** | **String** | Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side | [optional] 
-**username** | **String** |  | [optional] 
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/PassKeyMediationStartRsp.md b/packages/corbado_api_client/lib/frontendapi/doc/PassKeyMediationStartRsp.md
deleted file mode 100644
index caa7b6a..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/PassKeyMediationStartRsp.md
+++ /dev/null
@@ -1,19 +0,0 @@
-# corbado_api.model.PassKeyMediationStartRsp
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**httpStatusCode** | **int** | HTTP status code of operation | 
-**message** | **String** |  | 
-**requestData** | [**RequestData**](RequestData.md) |  | 
-**runtime** | **double** | Runtime in seconds for this request | 
-**data** | [**PassKeyMediationStartRspAllOfData**](PassKeyMediationStartRspAllOfData.md) |  | 
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/PassKeyMediationStartRspAllOf.md b/packages/corbado_api_client/lib/frontendapi/doc/PassKeyMediationStartRspAllOf.md
deleted file mode 100644
index 5a8d433..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/PassKeyMediationStartRspAllOf.md
+++ /dev/null
@@ -1,15 +0,0 @@
-# corbado_api.model.PassKeyMediationStartRspAllOf
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**data** | [**PassKeyMediationStartRspAllOfData**](PassKeyMediationStartRspAllOfData.md) |  | 
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/PassKeyMediationStartRspAllOfData.md b/packages/corbado_api_client/lib/frontendapi/doc/PassKeyMediationStartRspAllOfData.md
deleted file mode 100644
index 7a13bd1..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/PassKeyMediationStartRspAllOfData.md
+++ /dev/null
@@ -1,15 +0,0 @@
-# corbado_api.model.PassKeyMediationStartRspAllOfData
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**challenge** | **String** | Contains json payload data for start webauthn mediation challenge | 
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/PassKeyRegisterFinishRsp.md b/packages/corbado_api_client/lib/frontendapi/doc/PassKeyRegisterFinishRsp.md
deleted file mode 100644
index 55b779d..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/PassKeyRegisterFinishRsp.md
+++ /dev/null
@@ -1,19 +0,0 @@
-# corbado_api.model.PassKeyRegisterFinishRsp
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**httpStatusCode** | **int** | HTTP status code of operation | 
-**message** | **String** |  | 
-**requestData** | [**RequestData**](RequestData.md) |  | 
-**runtime** | **double** | Runtime in seconds for this request | 
-**data** | [**AuthenticationRsp**](AuthenticationRsp.md) |  | 
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/PassKeyRegisterFinishRspAllOf.md b/packages/corbado_api_client/lib/frontendapi/doc/PassKeyRegisterFinishRspAllOf.md
deleted file mode 100644
index 5dd7079..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/PassKeyRegisterFinishRspAllOf.md
+++ /dev/null
@@ -1,15 +0,0 @@
-# corbado_api.model.PassKeyRegisterFinishRspAllOf
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**data** | [**AuthenticationRsp**](AuthenticationRsp.md) |  | 
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/PassKeyRegisterStartReq.md b/packages/corbado_api_client/lib/frontendapi/doc/PassKeyRegisterStartReq.md
deleted file mode 100644
index 2c7fa03..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/PassKeyRegisterStartReq.md
+++ /dev/null
@@ -1,17 +0,0 @@
-# corbado_api.model.PassKeyRegisterStartReq
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**username** | **String** | Users login name | 
-**fullName** | **String** | Users full name | [optional] 
-**requestID** | **String** | Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side | [optional] 
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/PassKeyStartRsp.md b/packages/corbado_api_client/lib/frontendapi/doc/PassKeyStartRsp.md
deleted file mode 100644
index 1036d7e..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/PassKeyStartRsp.md
+++ /dev/null
@@ -1,19 +0,0 @@
-# corbado_api.model.PassKeyStartRsp
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**httpStatusCode** | **int** | HTTP status code of operation | 
-**message** | **String** |  | 
-**requestData** | [**RequestData**](RequestData.md) |  | 
-**runtime** | **double** | Runtime in seconds for this request | 
-**data** | [**PassKeyStartRspAllOfData**](PassKeyStartRspAllOfData.md) |  | 
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/PassKeyStartRspAllOf.md b/packages/corbado_api_client/lib/frontendapi/doc/PassKeyStartRspAllOf.md
deleted file mode 100644
index 365dd7c..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/PassKeyStartRspAllOf.md
+++ /dev/null
@@ -1,15 +0,0 @@
-# corbado_api.model.PassKeyStartRspAllOf
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**data** | [**PassKeyStartRspAllOfData**](PassKeyStartRspAllOfData.md) |  | 
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/PassKeyStartRspAllOfData.md b/packages/corbado_api_client/lib/frontendapi/doc/PassKeyStartRspAllOfData.md
deleted file mode 100644
index dc9fe1f..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/PassKeyStartRspAllOfData.md
+++ /dev/null
@@ -1,15 +0,0 @@
-# corbado_api.model.PassKeyStartRspAllOfData
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**challenge** | **String** | Contains json payload data for start webauthn login challenge | 
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/PassKeyItem.md b/packages/corbado_api_client/lib/frontendapi/doc/Passkey.md
similarity index 59%
rename from packages/corbado_api_client/lib/frontendapi/doc/PassKeyItem.md
rename to packages/corbado_api_client/lib/frontendapi/doc/Passkey.md
index 03097fc..fbf61ce 100644
--- a/packages/corbado_api_client/lib/frontendapi/doc/PassKeyItem.md
+++ b/packages/corbado_api_client/lib/frontendapi/doc/Passkey.md
@@ -1,22 +1,25 @@
-# corbado_api.model.PassKeyItem
+# corbado_frontend_api_client.model.Passkey
 
 ## Load the model package
 ```dart
-import 'package:corbado_api/api.dart';
+import 'package:corbado_frontend_api_client/api.dart';
 ```
 
 ## Properties
 Name | Type | Description | Notes
 ------------ | ------------- | ------------- | -------------
 **id** | **String** |  | 
-**aaguid** | **String** |  | 
-**userAgent** | **String** |  | 
+**credentialID** | **String** |  | 
 **attestationType** | **String** |  | 
-**transport** | **List<String>** |  | [default to const []]
+**transport** | **BuiltList&lt;String&gt;** |  | 
 **backupEligible** | **bool** |  | 
 **backupState** | **bool** |  | 
-**status** | **String** | Status | 
+**authenticatorAAGUID** | **String** |  | 
+**sourceOS** | **String** |  | 
+**sourceBrowser** | **String** |  | 
+**lastUsed** | **String** | Timestamp of when the passkey was last used in yyyy-MM-dd'T'HH:mm:ss format | 
 **created** | **String** | Timestamp of when the entity was created in yyyy-MM-dd'T'HH:mm:ss format | 
+**status** | **String** | Status | 
 
 [[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
 
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/PasskeyAppendFinishReq.md b/packages/corbado_api_client/lib/frontendapi/doc/PasskeyAppendFinishReq.md
new file mode 100644
index 0000000..f069cce
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/PasskeyAppendFinishReq.md
@@ -0,0 +1,15 @@
+# corbado_frontend_api_client.model.PasskeyAppendFinishReq
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**signedChallenge** | **String** |  | 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/PasskeyAppendStartReq.md b/packages/corbado_api_client/lib/frontendapi/doc/PasskeyAppendStartReq.md
new file mode 100644
index 0000000..e6a87dd
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/PasskeyAppendStartReq.md
@@ -0,0 +1,15 @@
+# corbado_frontend_api_client.model.PasskeyAppendStartReq
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**clientInformation** | [**ClientInformation**](ClientInformation.md) |  | [optional] 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/MeRspAllOf.md b/packages/corbado_api_client/lib/frontendapi/doc/PasskeyEventType.md
similarity index 73%
rename from packages/corbado_api_client/lib/frontendapi/doc/MeRspAllOf.md
rename to packages/corbado_api_client/lib/frontendapi/doc/PasskeyEventType.md
index aebe16d..21417b1 100644
--- a/packages/corbado_api_client/lib/frontendapi/doc/MeRspAllOf.md
+++ b/packages/corbado_api_client/lib/frontendapi/doc/PasskeyEventType.md
@@ -1,14 +1,13 @@
-# corbado_api.model.MeRspAllOf
+# corbado_frontend_api_client.model.PasskeyEventType
 
 ## Load the model package
 ```dart
-import 'package:corbado_api/api.dart';
+import 'package:corbado_frontend_api_client/api.dart';
 ```
 
 ## Properties
 Name | Type | Description | Notes
 ------------ | ------------- | ------------- | -------------
-**data** | [**FullUser**](FullUser.md) |  | 
 
 [[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
 
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/PassKeyCredentialExistsRspAllOf.md b/packages/corbado_api_client/lib/frontendapi/doc/PasskeyIconSet.md
similarity index 72%
rename from packages/corbado_api_client/lib/frontendapi/doc/PassKeyCredentialExistsRspAllOf.md
rename to packages/corbado_api_client/lib/frontendapi/doc/PasskeyIconSet.md
index 25f1ea1..1fe9d83 100644
--- a/packages/corbado_api_client/lib/frontendapi/doc/PassKeyCredentialExistsRspAllOf.md
+++ b/packages/corbado_api_client/lib/frontendapi/doc/PasskeyIconSet.md
@@ -1,14 +1,13 @@
-# corbado_api.model.PassKeyCredentialExistsRspAllOf
+# corbado_frontend_api_client.model.PasskeyIconSet
 
 ## Load the model package
 ```dart
-import 'package:corbado_api/api.dart';
+import 'package:corbado_frontend_api_client/api.dart';
 ```
 
 ## Properties
 Name | Type | Description | Notes
 ------------ | ------------- | ------------- | -------------
-**exists** | **bool** |  | 
 
 [[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
 
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/PasskeyLoginFinishReq.md b/packages/corbado_api_client/lib/frontendapi/doc/PasskeyLoginFinishReq.md
new file mode 100644
index 0000000..e5c3be0
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/PasskeyLoginFinishReq.md
@@ -0,0 +1,15 @@
+# corbado_frontend_api_client.model.PasskeyLoginFinishReq
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**signedChallenge** | **String** |  | 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/PasskeyLoginStartReq.md b/packages/corbado_api_client/lib/frontendapi/doc/PasskeyLoginStartReq.md
new file mode 100644
index 0000000..1cad7bb
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/PasskeyLoginStartReq.md
@@ -0,0 +1,15 @@
+# corbado_frontend_api_client.model.PasskeyLoginStartReq
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**clientInformation** | [**ClientInformation**](ClientInformation.md) |  | [optional] 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/AppleAppSiteAssociationRspWebcredentials.md b/packages/corbado_api_client/lib/frontendapi/doc/PasskeyMediationFinishReq.md
similarity index 66%
rename from packages/corbado_api_client/lib/frontendapi/doc/AppleAppSiteAssociationRspWebcredentials.md
rename to packages/corbado_api_client/lib/frontendapi/doc/PasskeyMediationFinishReq.md
index 5eb097d..be6905f 100644
--- a/packages/corbado_api_client/lib/frontendapi/doc/AppleAppSiteAssociationRspWebcredentials.md
+++ b/packages/corbado_api_client/lib/frontendapi/doc/PasskeyMediationFinishReq.md
@@ -1,14 +1,14 @@
-# corbado_api.model.AppleAppSiteAssociationRspWebcredentials
+# corbado_frontend_api_client.model.PasskeyMediationFinishReq
 
 ## Load the model package
 ```dart
-import 'package:corbado_api/api.dart';
+import 'package:corbado_frontend_api_client/api.dart';
 ```
 
 ## Properties
 Name | Type | Description | Notes
 ------------ | ------------- | ------------- | -------------
-**apps** | **List<String>** |  | [default to const []]
+**signedChallenge** | **String** |  | 
 
 [[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
 
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/PasskeyOperation.md b/packages/corbado_api_client/lib/frontendapi/doc/PasskeyOperation.md
new file mode 100644
index 0000000..4661822
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/PasskeyOperation.md
@@ -0,0 +1,18 @@
+# corbado_frontend_api_client.model.PasskeyOperation
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**operationType** | **String** |  | 
+**identifierValue** | **String** |  | 
+**identifierType** | [**LoginIdentifierType**](LoginIdentifierType.md) |  | 
+**ceremonyType** | **String** |  | 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/PasswordVerifyReq.md b/packages/corbado_api_client/lib/frontendapi/doc/PasswordVerifyReq.md
deleted file mode 100644
index af0a11d..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/PasswordVerifyReq.md
+++ /dev/null
@@ -1,17 +0,0 @@
-# corbado_api.model.PasswordVerifyReq
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**username** | **String** |  | 
-**password** | **String** |  | 
-**requestID** | **String** | Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side | [optional] 
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/PasswordVerifyRsp.md b/packages/corbado_api_client/lib/frontendapi/doc/PasswordVerifyRsp.md
deleted file mode 100644
index e59bfba..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/PasswordVerifyRsp.md
+++ /dev/null
@@ -1,19 +0,0 @@
-# corbado_api.model.PasswordVerifyRsp
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**httpStatusCode** | **int** | HTTP status code of operation | 
-**message** | **String** |  | 
-**requestData** | [**RequestData**](RequestData.md) |  | 
-**runtime** | **double** | Runtime in seconds for this request | 
-**data** | [**AuthenticationRsp**](AuthenticationRsp.md) |  | 
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/ProcessCommon.md b/packages/corbado_api_client/lib/frontendapi/doc/ProcessCommon.md
new file mode 100644
index 0000000..0b250e7
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/ProcessCommon.md
@@ -0,0 +1,17 @@
+# corbado_frontend_api_client.model.ProcessCommon
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**appName** | **String** |  | 
+**frontendApiUrl** | **String** |  | 
+**hideBadge** | **bool** |  | 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/ProcessInitReq.md b/packages/corbado_api_client/lib/frontendapi/doc/ProcessInitReq.md
new file mode 100644
index 0000000..5059716
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/ProcessInitReq.md
@@ -0,0 +1,18 @@
+# corbado_frontend_api_client.model.ProcessInitReq
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**clientInformation** | [**ClientInformation**](ClientInformation.md) |  | 
+**passkeyAppendShown** | **int** |  | [optional] 
+**optOutOfPasskeyAppendAfterHybrid** | **bool** | deprecated | [optional] 
+**preferredBlock** | [**BlockType**](BlockType.md) |  | [optional] 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/LoginTokenReq.md b/packages/corbado_api_client/lib/frontendapi/doc/ProcessInitRsp.md
similarity index 56%
rename from packages/corbado_api_client/lib/frontendapi/doc/LoginTokenReq.md
rename to packages/corbado_api_client/lib/frontendapi/doc/ProcessInitRsp.md
index 23419ac..6d40048 100644
--- a/packages/corbado_api_client/lib/frontendapi/doc/LoginTokenReq.md
+++ b/packages/corbado_api_client/lib/frontendapi/doc/ProcessInitRsp.md
@@ -1,15 +1,17 @@
-# corbado_api.model.LoginTokenReq
+# corbado_frontend_api_client.model.ProcessInitRsp
 
 ## Load the model package
 ```dart
-import 'package:corbado_api/api.dart';
+import 'package:corbado_frontend_api_client/api.dart';
 ```
 
 ## Properties
 Name | Type | Description | Notes
 ------------ | ------------- | ------------- | -------------
 **token** | **String** |  | 
-**requestID** | **String** | Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side | [optional] 
+**expiresAt** | **int** |  | 
+**processResponse** | [**ProcessResponse**](ProcessResponse.md) |  | 
+**newClientEnvHandle** | **String** |  | [optional] 
 
 [[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
 
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/ProcessResponse.md b/packages/corbado_api_client/lib/frontendapi/doc/ProcessResponse.md
new file mode 100644
index 0000000..24279c6
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/ProcessResponse.md
@@ -0,0 +1,17 @@
+# corbado_frontend_api_client.model.ProcessResponse
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**blockBody** | [**BlockBody**](BlockBody.md) |  | 
+**common** | [**ProcessCommon**](ProcessCommon.md) |  | 
+**newProcess** | [**ProcessStaticInfo**](ProcessStaticInfo.md) |  | [optional] 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/AuthMethodsListRspAllOf.md b/packages/corbado_api_client/lib/frontendapi/doc/ProcessStaticInfo.md
similarity index 65%
rename from packages/corbado_api_client/lib/frontendapi/doc/AuthMethodsListRspAllOf.md
rename to packages/corbado_api_client/lib/frontendapi/doc/ProcessStaticInfo.md
index 3b3c38d..5b674a4 100644
--- a/packages/corbado_api_client/lib/frontendapi/doc/AuthMethodsListRspAllOf.md
+++ b/packages/corbado_api_client/lib/frontendapi/doc/ProcessStaticInfo.md
@@ -1,14 +1,15 @@
-# corbado_api.model.AuthMethodsListRspAllOf
+# corbado_frontend_api_client.model.ProcessStaticInfo
 
 ## Load the model package
 ```dart
-import 'package:corbado_api/api.dart';
+import 'package:corbado_frontend_api_client/api.dart';
 ```
 
 ## Properties
 Name | Type | Description | Notes
 ------------ | ------------- | ------------- | -------------
-**data** | [**AuthMethodsListRspAllOfData**](AuthMethodsListRspAllOfData.md) |  | 
+**token** | **String** |  | 
+**expiresAt** | **int** |  | 
 
 [[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
 
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/ProjectConfigRsp.md b/packages/corbado_api_client/lib/frontendapi/doc/ProjectConfigRsp.md
deleted file mode 100644
index b535738..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/ProjectConfigRsp.md
+++ /dev/null
@@ -1,19 +0,0 @@
-# corbado_api.model.ProjectConfigRsp
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**httpStatusCode** | **int** | HTTP status code of operation | 
-**message** | **String** |  | 
-**requestData** | [**RequestData**](RequestData.md) |  | 
-**runtime** | **double** | Runtime in seconds for this request | 
-**data** | [**ProjectConfigRspAllOfData**](ProjectConfigRspAllOfData.md) |  | 
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/ProjectConfigRspAllOf.md b/packages/corbado_api_client/lib/frontendapi/doc/ProjectConfigRspAllOf.md
deleted file mode 100644
index 058e015..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/ProjectConfigRspAllOf.md
+++ /dev/null
@@ -1,15 +0,0 @@
-# corbado_api.model.ProjectConfigRspAllOf
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**data** | [**ProjectConfigRspAllOfData**](ProjectConfigRspAllOfData.md) |  | 
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/ProjectConfigRspAllOfData.md b/packages/corbado_api_client/lib/frontendapi/doc/ProjectConfigRspAllOfData.md
deleted file mode 100644
index a67f39e..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/ProjectConfigRspAllOfData.md
+++ /dev/null
@@ -1,20 +0,0 @@
-# corbado_api.model.ProjectConfigRspAllOfData
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**allowUserRegistration** | **bool** |  | 
-**passkeyAppendInterval** | **String** |  | 
-**fallbackLanguage** | **String** |  | 
-**autoDetectLanguage** | **bool** |  | 
-**userFullNameRequired** | **bool** |  | 
-**webComponentDebug** | **bool** |  | 
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/ProjectsApi.md b/packages/corbado_api_client/lib/frontendapi/doc/ProjectsApi.md
deleted file mode 100644
index 8eac308..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/ProjectsApi.md
+++ /dev/null
@@ -1,63 +0,0 @@
-# corbado_api.api.ProjectsApi
-
-## Load the API package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-All URIs are relative to *https://<project ID>.frontendapi.corbado.io*
-
-Method | HTTP request | Description
-------------- | ------------- | -------------
-[**projectConfig**](ProjectsApi.md#projectconfig) | **GET** /v1/projects/projectConfig | 
-
-
-# **projectConfig**
-> ProjectConfigRsp projectConfig()
-
-
-
-Get project configuration
-
-### Example
-```dart
-import 'package:corbado_api/api.dart';
-// TODO Configure HTTP Bearer authorization: bearerAuth
-// Case 1. Use String Token
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken('YOUR_ACCESS_TOKEN');
-// Case 2. Use Function which generate token.
-// String yourTokenGeneratorFunction() { ... }
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken(yourTokenGeneratorFunction);
-// TODO Configure API key authorization: projectID
-//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
-// uncomment below to setup prefix (e.g. Bearer) for API key, if needed
-//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
-
-final api_instance = ProjectsApi();
-
-try {
-    final result = api_instance.projectConfig();
-    print(result);
-} catch (e) {
-    print('Exception when calling ProjectsApi->projectConfig: $e\n');
-}
-```
-
-### Parameters
-This endpoint does not need any parameter.
-
-### Return type
-
-[**ProjectConfigRsp**](ProjectConfigRsp.md)
-
-### Authorization
-
-[bearerAuth](../README.md#bearerAuth), [projectID](../README.md#projectID)
-
-### HTTP request headers
-
- - **Content-Type**: Not defined
- - **Accept**: application/json
-
-[[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/RequestData.md b/packages/corbado_api_client/lib/frontendapi/doc/RequestData.md
index b663128..6c0d46e 100644
--- a/packages/corbado_api_client/lib/frontendapi/doc/RequestData.md
+++ b/packages/corbado_api_client/lib/frontendapi/doc/RequestData.md
@@ -1,8 +1,8 @@
-# corbado_api.model.RequestData
+# corbado_frontend_api_client.model.RequestData
 
 ## Load the model package
 ```dart
-import 'package:corbado_api/api.dart';
+import 'package:corbado_frontend_api_client/api.dart';
 ```
 
 ## Properties
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/ErrorRspAllOfErrorValidation.md b/packages/corbado_api_client/lib/frontendapi/doc/RequestError.md
similarity index 72%
rename from packages/corbado_api_client/lib/frontendapi/doc/ErrorRspAllOfErrorValidation.md
rename to packages/corbado_api_client/lib/frontendapi/doc/RequestError.md
index 7a7508d..ffd3f42 100644
--- a/packages/corbado_api_client/lib/frontendapi/doc/ErrorRspAllOfErrorValidation.md
+++ b/packages/corbado_api_client/lib/frontendapi/doc/RequestError.md
@@ -1,14 +1,14 @@
-# corbado_api.model.ErrorRspAllOfErrorValidation
+# corbado_frontend_api_client.model.RequestError
 
 ## Load the model package
 ```dart
-import 'package:corbado_api/api.dart';
+import 'package:corbado_frontend_api_client/api.dart';
 ```
 
 ## Properties
 Name | Type | Description | Notes
 ------------ | ------------- | ------------- | -------------
-**field** | **String** |  | 
+**code** | **String** |  | 
 **message** | **String** |  | 
 
 [[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/SessionConfigRsp.md b/packages/corbado_api_client/lib/frontendapi/doc/SessionConfigRsp.md
new file mode 100644
index 0000000..09e9524
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/SessionConfigRsp.md
@@ -0,0 +1,17 @@
+# corbado_frontend_api_client.model.SessionConfigRsp
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**useSessionManagement** | **bool** |  | 
+**shortSessionCookieConfig** | [**ShortSessionCookieConfig**](ShortSessionCookieConfig.md) |  | [optional] 
+**frontendApiUrl** | **String** |  | [optional] 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/SessionRefreshRsp.md b/packages/corbado_api_client/lib/frontendapi/doc/SessionRefreshRsp.md
deleted file mode 100644
index d6dd55e..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/SessionRefreshRsp.md
+++ /dev/null
@@ -1,22 +0,0 @@
-# corbado_api.model.SessionRefreshRsp
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**httpStatusCode** | **int** | HTTP status code of operation | 
-**message** | **String** |  | 
-**requestData** | [**RequestData**](RequestData.md) |  | 
-**runtime** | **double** | Runtime in seconds for this request | 
-**redirectURL** | **String** |  | 
-**sessionToken** | **String** | Only given when using session v1 | [optional] 
-**longSession** | **String** | Only given when project environment is dev | [optional] 
-**shortSession** | [**ShortSession**](ShortSession.md) |  | [optional] 
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/SessionsApi.md b/packages/corbado_api_client/lib/frontendapi/doc/SessionsApi.md
deleted file mode 100644
index 6ab2e53..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/SessionsApi.md
+++ /dev/null
@@ -1,171 +0,0 @@
-# corbado_api.api.SessionsApi
-
-## Load the API package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-All URIs are relative to *https://<project ID>.frontendapi.corbado.io*
-
-Method | HTTP request | Description
-------------- | ------------- | -------------
-[**sessionLogout**](SessionsApi.md#sessionlogout) | **DELETE** /v1/sessions/logout | 
-[**sessionRefresh**](SessionsApi.md#sessionrefresh) | **PUT** /v1/sessions/refresh | 
-[**wellKnownJWKSList**](SessionsApi.md#wellknownjwkslist) | **GET** /.well-known/jwks | 
-
-
-# **sessionLogout**
-> LogoutRsp sessionLogout(emptyReq)
-
-
-
-Performs session logout
-
-### Example
-```dart
-import 'package:corbado_api/api.dart';
-// TODO Configure HTTP Bearer authorization: bearerAuth
-// Case 1. Use String Token
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken('YOUR_ACCESS_TOKEN');
-// Case 2. Use Function which generate token.
-// String yourTokenGeneratorFunction() { ... }
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken(yourTokenGeneratorFunction);
-// TODO Configure API key authorization: projectID
-//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
-// uncomment below to setup prefix (e.g. Bearer) for API key, if needed
-//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
-
-final api_instance = SessionsApi();
-final emptyReq = EmptyReq(); // EmptyReq | 
-
-try {
-    final result = api_instance.sessionLogout(emptyReq);
-    print(result);
-} catch (e) {
-    print('Exception when calling SessionsApi->sessionLogout: $e\n');
-}
-```
-
-### Parameters
-
-Name | Type | Description  | Notes
-------------- | ------------- | ------------- | -------------
- **emptyReq** | [**EmptyReq**](EmptyReq.md)|  | 
-
-### Return type
-
-[**LogoutRsp**](LogoutRsp.md)
-
-### Authorization
-
-[bearerAuth](../README.md#bearerAuth), [projectID](../README.md#projectID)
-
-### HTTP request headers
-
- - **Content-Type**: application/json
- - **Accept**: application/json
-
-[[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
-
-# **sessionRefresh**
-> SessionRefreshRsp sessionRefresh(emptyReq)
-
-
-
-Performs session refresh
-
-### Example
-```dart
-import 'package:corbado_api/api.dart';
-// TODO Configure HTTP Bearer authorization: bearerAuth
-// Case 1. Use String Token
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken('YOUR_ACCESS_TOKEN');
-// Case 2. Use Function which generate token.
-// String yourTokenGeneratorFunction() { ... }
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken(yourTokenGeneratorFunction);
-// TODO Configure API key authorization: projectID
-//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
-// uncomment below to setup prefix (e.g. Bearer) for API key, if needed
-//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
-
-final api_instance = SessionsApi();
-final emptyReq = EmptyReq(); // EmptyReq | 
-
-try {
-    final result = api_instance.sessionRefresh(emptyReq);
-    print(result);
-} catch (e) {
-    print('Exception when calling SessionsApi->sessionRefresh: $e\n');
-}
-```
-
-### Parameters
-
-Name | Type | Description  | Notes
-------------- | ------------- | ------------- | -------------
- **emptyReq** | [**EmptyReq**](EmptyReq.md)|  | 
-
-### Return type
-
-[**SessionRefreshRsp**](SessionRefreshRsp.md)
-
-### Authorization
-
-[bearerAuth](../README.md#bearerAuth), [projectID](../README.md#projectID)
-
-### HTTP request headers
-
- - **Content-Type**: application/json
- - **Accept**: application/json
-
-[[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
-
-# **wellKnownJWKSList**
-> WellKnownJWKSListRsp wellKnownJWKSList()
-
-
-
-Retrieves well-known JWKS for Project ID
-
-### Example
-```dart
-import 'package:corbado_api/api.dart';
-// TODO Configure HTTP Bearer authorization: bearerAuth
-// Case 1. Use String Token
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken('YOUR_ACCESS_TOKEN');
-// Case 2. Use Function which generate token.
-// String yourTokenGeneratorFunction() { ... }
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken(yourTokenGeneratorFunction);
-// TODO Configure API key authorization: projectID
-//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
-// uncomment below to setup prefix (e.g. Bearer) for API key, if needed
-//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
-
-final api_instance = SessionsApi();
-
-try {
-    final result = api_instance.wellKnownJWKSList();
-    print(result);
-} catch (e) {
-    print('Exception when calling SessionsApi->wellKnownJWKSList: $e\n');
-}
-```
-
-### Parameters
-This endpoint does not need any parameter.
-
-### Return type
-
-[**WellKnownJWKSListRsp**](WellKnownJWKSListRsp.md)
-
-### Authorization
-
-[bearerAuth](../README.md#bearerAuth), [projectID](../README.md#projectID)
-
-### HTTP request headers
-
- - **Content-Type**: Not defined
- - **Accept**: application/json
-
-[[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/ShortSession.md b/packages/corbado_api_client/lib/frontendapi/doc/ShortSessionCookieConfig.md
similarity index 73%
rename from packages/corbado_api_client/lib/frontendapi/doc/ShortSession.md
rename to packages/corbado_api_client/lib/frontendapi/doc/ShortSessionCookieConfig.md
index d6d209c..db8022a 100644
--- a/packages/corbado_api_client/lib/frontendapi/doc/ShortSession.md
+++ b/packages/corbado_api_client/lib/frontendapi/doc/ShortSessionCookieConfig.md
@@ -1,20 +1,18 @@
-# corbado_api.model.ShortSession
+# corbado_frontend_api_client.model.ShortSessionCookieConfig
 
 ## Load the model package
 ```dart
-import 'package:corbado_api/api.dart';
+import 'package:corbado_frontend_api_client/api.dart';
 ```
 
 ## Properties
 Name | Type | Description | Notes
 ------------ | ------------- | ------------- | -------------
-**key** | **String** |  | 
-**value** | **String** |  | 
 **domain** | **String** |  | 
-**path** | **String** |  | 
 **secure** | **bool** |  | 
-**expires** | **String** |  | 
 **sameSite** | **String** |  | 
+**path** | **String** |  | 
+**lifetimeSeconds** | **int** |  | 
 
 [[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
 
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/SignupInitReq.md b/packages/corbado_api_client/lib/frontendapi/doc/SignupInitReq.md
new file mode 100644
index 0000000..93bd554
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/SignupInitReq.md
@@ -0,0 +1,16 @@
+# corbado_frontend_api_client.model.SignupInitReq
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**identifiers** | [**BuiltList&lt;LoginIdentifier&gt;**](LoginIdentifier.md) |  | 
+**fullName** | **String** |  | [optional] 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/SocialAccount.md b/packages/corbado_api_client/lib/frontendapi/doc/SocialAccount.md
new file mode 100644
index 0000000..1b247de
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/SocialAccount.md
@@ -0,0 +1,18 @@
+# corbado_frontend_api_client.model.SocialAccount
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**providerType** | [**SocialProviderType**](SocialProviderType.md) |  | 
+**identifierValue** | **String** |  | 
+**avatarUrl** | **String** |  | 
+**fullName** | **String** |  | 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/SocialData.md b/packages/corbado_api_client/lib/frontendapi/doc/SocialData.md
new file mode 100644
index 0000000..bed4afe
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/SocialData.md
@@ -0,0 +1,18 @@
+# corbado_frontend_api_client.model.SocialData
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**providers** | [**BuiltList&lt;SocialProviderType&gt;**](SocialProviderType.md) |  | 
+**status** | **String** |  | 
+**oauthUrl** | **String** |  | [optional] 
+**error** | [**RequestError**](RequestError.md) |  | [optional] 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/SocialProviderType.md b/packages/corbado_api_client/lib/frontendapi/doc/SocialProviderType.md
new file mode 100644
index 0000000..999eb48
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/SocialProviderType.md
@@ -0,0 +1,14 @@
+# corbado_frontend_api_client.model.SocialProviderType
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/SocialVerifyStartReq.md b/packages/corbado_api_client/lib/frontendapi/doc/SocialVerifyStartReq.md
new file mode 100644
index 0000000..55b5791
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/SocialVerifyStartReq.md
@@ -0,0 +1,17 @@
+# corbado_frontend_api_client.model.SocialVerifyStartReq
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+**providerType** | [**SocialProviderType**](SocialProviderType.md) |  | 
+**redirectUrl** | **String** |  | 
+**authType** | [**AuthType**](AuthType.md) |  | 
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/AppleAppSiteAssociationRspApplinks.md b/packages/corbado_api_client/lib/frontendapi/doc/UserDetailsConfigRsp.md
similarity index 56%
rename from packages/corbado_api_client/lib/frontendapi/doc/AppleAppSiteAssociationRspApplinks.md
rename to packages/corbado_api_client/lib/frontendapi/doc/UserDetailsConfigRsp.md
index 828179f..b244be3 100644
--- a/packages/corbado_api_client/lib/frontendapi/doc/AppleAppSiteAssociationRspApplinks.md
+++ b/packages/corbado_api_client/lib/frontendapi/doc/UserDetailsConfigRsp.md
@@ -1,14 +1,15 @@
-# corbado_api.model.AppleAppSiteAssociationRspApplinks
+# corbado_frontend_api_client.model.UserDetailsConfigRsp
 
 ## Load the model package
 ```dart
-import 'package:corbado_api/api.dart';
+import 'package:corbado_frontend_api_client/api.dart';
 ```
 
 ## Properties
 Name | Type | Description | Notes
 ------------ | ------------- | ------------- | -------------
-**details** | [**List<AppleAppSiteAssociationRspApplinksDetailsInner>**](AppleAppSiteAssociationRspApplinksDetailsInner.md) |  | [default to const []]
+**fullNameRequired** | **bool** |  | 
+**identifiers** | [**BuiltList&lt;LoginIdentifierConfig&gt;**](LoginIdentifierConfig.md) |  | 
 
 [[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
 
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/UserEmail.md b/packages/corbado_api_client/lib/frontendapi/doc/UserEmail.md
deleted file mode 100644
index 168cee2..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/UserEmail.md
+++ /dev/null
@@ -1,19 +0,0 @@
-# corbado_api.model.UserEmail
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**ID** | **String** | generic ID | 
-**email** | **String** |  | 
-**created** | **String** | Timestamp of when the entity was created in yyyy-MM-dd'T'HH:mm:ss format | 
-**updated** | **String** | Timestamp of when the entity was last updated in yyyy-MM-dd'T'HH:mm:ss format | 
-**status** | [**Status**](Status.md) |  | 
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/UserPhoneNumber.md b/packages/corbado_api_client/lib/frontendapi/doc/UserPhoneNumber.md
deleted file mode 100644
index a4d92d9..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/UserPhoneNumber.md
+++ /dev/null
@@ -1,19 +0,0 @@
-# corbado_api.model.UserPhoneNumber
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**ID** | **String** | generic ID | 
-**phoneNumber** | **String** |  | 
-**created** | **String** | Timestamp of when the entity was created in yyyy-MM-dd'T'HH:mm:ss format | 
-**updated** | **String** | Timestamp of when the entity was last updated in yyyy-MM-dd'T'HH:mm:ss format | 
-**status** | [**Status**](Status.md) |  | 
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/UsersApi.md b/packages/corbado_api_client/lib/frontendapi/doc/UsersApi.md
index 8316eda..537036b 100644
--- a/packages/corbado_api_client/lib/frontendapi/doc/UsersApi.md
+++ b/packages/corbado_api_client/lib/frontendapi/doc/UsersApi.md
@@ -1,120 +1,52 @@
-# corbado_api.api.UsersApi
+# corbado_frontend_api_client.api.UsersApi
 
 ## Load the API package
 ```dart
-import 'package:corbado_api/api.dart';
+import 'package:corbado_frontend_api_client/api.dart';
 ```
 
-All URIs are relative to *https://<project ID>.frontendapi.corbado.io*
+All URIs are relative to *https://&lt;project ID&gt;.frontendapi.corbado.io*
 
 Method | HTTP request | Description
 ------------- | ------------- | -------------
-[**authMethodsList**](UsersApi.md#authmethodslist) | **POST** /v1/users/authmethods | 
-[**currentUserGet**](UsersApi.md#currentuserget) | **GET** /v1/me | 
-[**currentUserPassKeyDelete**](UsersApi.md#currentuserpasskeydelete) | **DELETE** /v1/me/passkeys/{credentialID} | 
-[**currentUserPassKeyGet**](UsersApi.md#currentuserpasskeyget) | **GET** /v1/me/passkeys | 
-[**emailCodeConfirm**](UsersApi.md#emailcodeconfirm) | **POST** /v1/users/emailcodes/confirm | 
-[**emailCodeLoginStart**](UsersApi.md#emailcodeloginstart) | **POST** /v1/users/emailcodes/login/start | 
-[**emailCodeRegisterStart**](UsersApi.md#emailcoderegisterstart) | **POST** /v1/users/emailcodes/register/start | 
-[**emailCodeStatus**](UsersApi.md#emailcodestatus) | **POST** /v1/users/emailcodes/status | 
-[**emailLinkConfirm**](UsersApi.md#emaillinkconfirm) | **POST** /v1/users/emaillinks/confirm | 
-[**emailLinkLoginStart**](UsersApi.md#emaillinkloginstart) | **POST** /v1/users/emaillinks/login/start | 
-[**emailLinkRegisterStart**](UsersApi.md#emaillinkregisterstart) | **POST** /v1/users/emaillinks/register/start | 
-[**emailLinkStatus**](UsersApi.md#emaillinkstatus) | **POST** /v1/users/emaillinks/status | 
-[**loginToken**](UsersApi.md#logintoken) | **POST** /v1/users/logintoken | 
-[**passKeyAppendFinish**](UsersApi.md#passkeyappendfinish) | **POST** /v1/users/passkey/append/finish | 
-[**passKeyAppendStart**](UsersApi.md#passkeyappendstart) | **POST** /v1/users/passkey/append/start | 
-[**passKeyAssociateStart**](UsersApi.md#passkeyassociatestart) | **POST** /v1/users/passkey/associate/start | 
-[**passKeyCredentialExists**](UsersApi.md#passkeycredentialexists) | **POST** /v1/users/device/passkey | 
-[**passKeyLoginFinish**](UsersApi.md#passkeyloginfinish) | **POST** /v1/users/passkey/login/finish | 
-[**passKeyLoginStart**](UsersApi.md#passkeyloginstart) | **POST** /v1/users/passkey/login/start | 
-[**passKeyMediationStart**](UsersApi.md#passkeymediationstart) | **POST** /v1/users/passkey/mediation/start | 
-[**passKeyRegisterFinish**](UsersApi.md#passkeyregisterfinish) | **POST** /v1/users/passkey/register/finish | 
-[**passKeyRegisterStart**](UsersApi.md#passkeyregisterstart) | **POST** /v1/users/passkey/register/start | 
-[**password**](UsersApi.md#password) | **POST** /v1/users/password/verify | 
-
-
-# **authMethodsList**
-> AuthMethodsListRsp authMethodsList(authMethodsListReq)
-
-
-
-Lists user's available authentication methods
+[**currentUserDelete**](UsersApi.md#currentuserdelete) | **DELETE** /v2/me | 
+[**currentUserGet**](UsersApi.md#currentuserget) | **GET** /v2/me | 
+[**currentUserIdentifierCreate**](UsersApi.md#currentuseridentifiercreate) | **POST** /v2/me/identifier | 
+[**currentUserIdentifierDelete**](UsersApi.md#currentuseridentifierdelete) | **DELETE** /v2/me/identifier | 
+[**currentUserIdentifierUpdate**](UsersApi.md#currentuseridentifierupdate) | **PATCH** /v2/me/identifier | 
+[**currentUserIdentifierVerifyFinish**](UsersApi.md#currentuseridentifierverifyfinish) | **POST** /v2/me/identifier/verify/finish | 
+[**currentUserIdentifierVerifyStart**](UsersApi.md#currentuseridentifierverifystart) | **POST** /v2/me/identifier/verify/start | 
+[**currentUserPasskeyAppendFinish**](UsersApi.md#currentuserpasskeyappendfinish) | **POST** /v2/me/passkeys/append/finish | 
+[**currentUserPasskeyAppendStart**](UsersApi.md#currentuserpasskeyappendstart) | **POST** /v2/me/passkeys/append/start | 
+[**currentUserPasskeyDelete**](UsersApi.md#currentuserpasskeydelete) | **DELETE** /v2/me/passkeys/{credentialID} | 
+[**currentUserPasskeyGet**](UsersApi.md#currentuserpasskeyget) | **GET** /v2/me/passkeys | 
+[**currentUserSessionLogout**](UsersApi.md#currentusersessionlogout) | **POST** /v2/me/logout | 
+[**currentUserSessionRefresh**](UsersApi.md#currentusersessionrefresh) | **POST** /v2/me/refresh | 
+[**currentUserUpdate**](UsersApi.md#currentuserupdate) | **PATCH** /v2/me | 
 
-### Example
-```dart
-import 'package:corbado_api/api.dart';
-// TODO Configure HTTP Bearer authorization: bearerAuth
-// Case 1. Use String Token
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken('YOUR_ACCESS_TOKEN');
-// Case 2. Use Function which generate token.
-// String yourTokenGeneratorFunction() { ... }
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken(yourTokenGeneratorFunction);
-// TODO Configure API key authorization: projectID
-//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
-// uncomment below to setup prefix (e.g. Bearer) for API key, if needed
-//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
 
-final api_instance = UsersApi();
-final authMethodsListReq = AuthMethodsListReq(); // AuthMethodsListReq | 
+# **currentUserDelete**
+> GenericRsp currentUserDelete()
 
-try {
-    final result = api_instance.authMethodsList(authMethodsListReq);
-    print(result);
-} catch (e) {
-    print('Exception when calling UsersApi->authMethodsList: $e\n');
-}
-```
 
-### Parameters
 
-Name | Type | Description  | Notes
-------------- | ------------- | ------------- | -------------
- **authMethodsListReq** | [**AuthMethodsListReq**](AuthMethodsListReq.md)|  | 
-
-### Return type
-
-[**AuthMethodsListRsp**](AuthMethodsListRsp.md)
-
-### Authorization
-
-[bearerAuth](../README.md#bearerAuth), [projectID](../README.md#projectID)
-
-### HTTP request headers
-
- - **Content-Type**: application/json
- - **Accept**: application/json
-
-[[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
-
-# **currentUserGet**
-> MeRsp currentUserGet()
-
-
-
-Gets current user
+Deletes current user
 
 ### Example
 ```dart
-import 'package:corbado_api/api.dart';
-// TODO Configure HTTP Bearer authorization: bearerAuth
-// Case 1. Use String Token
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken('YOUR_ACCESS_TOKEN');
-// Case 2. Use Function which generate token.
-// String yourTokenGeneratorFunction() { ... }
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken(yourTokenGeneratorFunction);
+import 'package:corbado_frontend_api_client/api.dart';
 // TODO Configure API key authorization: projectID
 //defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
 // uncomment below to setup prefix (e.g. Bearer) for API key, if needed
 //defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
 
-final api_instance = UsersApi();
+final api = CorbadoFrontendApiClient().getUsersApi();
 
 try {
-    final result = api_instance.currentUserGet();
-    print(result);
-} catch (e) {
-    print('Exception when calling UsersApi->currentUserGet: $e\n');
+    final response = api.currentUserDelete();
+    print(response);
+} catch on DioException (e) {
+    print('Exception when calling UsersApi->currentUserDelete: $e\n');
 }
 ```
 
@@ -123,59 +55,6 @@ This endpoint does not need any parameter.
 
 ### Return type
 
-[**MeRsp**](MeRsp.md)
-
-### Authorization
-
-[bearerAuth](../README.md#bearerAuth), [projectID](../README.md#projectID)
-
-### HTTP request headers
-
- - **Content-Type**: Not defined
- - **Accept**: application/json
-
-[[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
-
-# **currentUserPassKeyDelete**
-> GenericRsp currentUserPassKeyDelete(credentialID)
-
-
-
-Delete current user's passkeys
-
-### Example
-```dart
-import 'package:corbado_api/api.dart';
-// TODO Configure HTTP Bearer authorization: bearerAuth
-// Case 1. Use String Token
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken('YOUR_ACCESS_TOKEN');
-// Case 2. Use Function which generate token.
-// String yourTokenGeneratorFunction() { ... }
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken(yourTokenGeneratorFunction);
-// TODO Configure API key authorization: projectID
-//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
-// uncomment below to setup prefix (e.g. Bearer) for API key, if needed
-//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
-
-final api_instance = UsersApi();
-final credentialID = cre-abc123; // String | Credential ID from passkeys
-
-try {
-    final result = api_instance.currentUserPassKeyDelete(credentialID);
-    print(result);
-} catch (e) {
-    print('Exception when calling UsersApi->currentUserPassKeyDelete: $e\n');
-}
-```
-
-### Parameters
-
-Name | Type | Description  | Notes
-------------- | ------------- | ------------- | -------------
- **credentialID** | **String**| Credential ID from passkeys | 
-
-### Return type
-
 [**GenericRsp**](GenericRsp.md)
 
 ### Authorization
@@ -189,34 +68,28 @@ Name | Type | Description  | Notes
 
 [[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
 
-# **currentUserPassKeyGet**
-> MePassKeyRsp currentUserPassKeyGet()
+# **currentUserGet**
+> MeRsp currentUserGet()
 
 
 
-Gets current user's passkeys
+Gets current user
 
 ### Example
 ```dart
-import 'package:corbado_api/api.dart';
-// TODO Configure HTTP Bearer authorization: bearerAuth
-// Case 1. Use String Token
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken('YOUR_ACCESS_TOKEN');
-// Case 2. Use Function which generate token.
-// String yourTokenGeneratorFunction() { ... }
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken(yourTokenGeneratorFunction);
+import 'package:corbado_frontend_api_client/api.dart';
 // TODO Configure API key authorization: projectID
 //defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
 // uncomment below to setup prefix (e.g. Bearer) for API key, if needed
 //defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
 
-final api_instance = UsersApi();
+final api = CorbadoFrontendApiClient().getUsersApi();
 
 try {
-    final result = api_instance.currentUserPassKeyGet();
-    print(result);
-} catch (e) {
-    print('Exception when calling UsersApi->currentUserPassKeyGet: $e\n');
+    final response = api.currentUserGet();
+    print(response);
+} catch on DioException (e) {
+    print('Exception when calling UsersApi->currentUserGet: $e\n');
 }
 ```
 
@@ -225,7 +98,7 @@ This endpoint does not need any parameter.
 
 ### Return type
 
-[**MePassKeyRsp**](MePassKeyRsp.md)
+[**MeRsp**](MeRsp.md)
 
 ### Authorization
 
@@ -238,194 +111,29 @@ This endpoint does not need any parameter.
 
 [[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
 
-# **emailCodeConfirm**
-> EmailCodeConfirmRsp emailCodeConfirm(emailCodeConfirmReq)
-
-
-
-Performs email OTP register confirm
-
-### Example
-```dart
-import 'package:corbado_api/api.dart';
-// TODO Configure HTTP Bearer authorization: bearerAuth
-// Case 1. Use String Token
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken('YOUR_ACCESS_TOKEN');
-// Case 2. Use Function which generate token.
-// String yourTokenGeneratorFunction() { ... }
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken(yourTokenGeneratorFunction);
-// TODO Configure API key authorization: projectID
-//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
-// uncomment below to setup prefix (e.g. Bearer) for API key, if needed
-//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
-
-final api_instance = UsersApi();
-final emailCodeConfirmReq = EmailCodeConfirmReq(); // EmailCodeConfirmReq | 
-
-try {
-    final result = api_instance.emailCodeConfirm(emailCodeConfirmReq);
-    print(result);
-} catch (e) {
-    print('Exception when calling UsersApi->emailCodeConfirm: $e\n');
-}
-```
-
-### Parameters
-
-Name | Type | Description  | Notes
-------------- | ------------- | ------------- | -------------
- **emailCodeConfirmReq** | [**EmailCodeConfirmReq**](EmailCodeConfirmReq.md)|  | 
-
-### Return type
-
-[**EmailCodeConfirmRsp**](EmailCodeConfirmRsp.md)
-
-### Authorization
-
-[bearerAuth](../README.md#bearerAuth), [projectID](../README.md#projectID)
-
-### HTTP request headers
-
- - **Content-Type**: application/json
- - **Accept**: application/json
-
-[[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
-
-# **emailCodeLoginStart**
-> EmailCodeLoginStartRsp emailCodeLoginStart(emailCodeLoginStartReq)
-
-
-
-Performs email OTP login start
-
-### Example
-```dart
-import 'package:corbado_api/api.dart';
-// TODO Configure HTTP Bearer authorization: bearerAuth
-// Case 1. Use String Token
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken('YOUR_ACCESS_TOKEN');
-// Case 2. Use Function which generate token.
-// String yourTokenGeneratorFunction() { ... }
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken(yourTokenGeneratorFunction);
-// TODO Configure API key authorization: projectID
-//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
-// uncomment below to setup prefix (e.g. Bearer) for API key, if needed
-//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
-
-final api_instance = UsersApi();
-final emailCodeLoginStartReq = EmailCodeLoginStartReq(); // EmailCodeLoginStartReq | 
-
-try {
-    final result = api_instance.emailCodeLoginStart(emailCodeLoginStartReq);
-    print(result);
-} catch (e) {
-    print('Exception when calling UsersApi->emailCodeLoginStart: $e\n');
-}
-```
-
-### Parameters
-
-Name | Type | Description  | Notes
-------------- | ------------- | ------------- | -------------
- **emailCodeLoginStartReq** | [**EmailCodeLoginStartReq**](EmailCodeLoginStartReq.md)|  | 
-
-### Return type
-
-[**EmailCodeLoginStartRsp**](EmailCodeLoginStartRsp.md)
-
-### Authorization
-
-[bearerAuth](../README.md#bearerAuth), [projectID](../README.md#projectID)
-
-### HTTP request headers
-
- - **Content-Type**: application/json
- - **Accept**: application/json
-
-[[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
-
-# **emailCodeRegisterStart**
-> EmailCodeRegisterStartRsp emailCodeRegisterStart(emailCodeRegisterStartReq)
-
-
-
-Performs email OTP register start
-
-### Example
-```dart
-import 'package:corbado_api/api.dart';
-// TODO Configure HTTP Bearer authorization: bearerAuth
-// Case 1. Use String Token
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken('YOUR_ACCESS_TOKEN');
-// Case 2. Use Function which generate token.
-// String yourTokenGeneratorFunction() { ... }
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken(yourTokenGeneratorFunction);
-// TODO Configure API key authorization: projectID
-//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
-// uncomment below to setup prefix (e.g. Bearer) for API key, if needed
-//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
-
-final api_instance = UsersApi();
-final emailCodeRegisterStartReq = EmailCodeRegisterStartReq(); // EmailCodeRegisterStartReq | 
-
-try {
-    final result = api_instance.emailCodeRegisterStart(emailCodeRegisterStartReq);
-    print(result);
-} catch (e) {
-    print('Exception when calling UsersApi->emailCodeRegisterStart: $e\n');
-}
-```
-
-### Parameters
-
-Name | Type | Description  | Notes
-------------- | ------------- | ------------- | -------------
- **emailCodeRegisterStartReq** | [**EmailCodeRegisterStartReq**](EmailCodeRegisterStartReq.md)|  | 
-
-### Return type
-
-[**EmailCodeRegisterStartRsp**](EmailCodeRegisterStartRsp.md)
-
-### Authorization
-
-[bearerAuth](../README.md#bearerAuth), [projectID](../README.md#projectID)
-
-### HTTP request headers
-
- - **Content-Type**: application/json
- - **Accept**: application/json
-
-[[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
-
-# **emailCodeStatus**
-> EmailCodeStatusRsp emailCodeStatus(emailCodeStatusReq)
+# **currentUserIdentifierCreate**
+> GenericRsp currentUserIdentifierCreate(meIdentifierCreateReq)
 
 
 
-Performs email OTP login status check
+Creates an identifier
 
 ### Example
 ```dart
-import 'package:corbado_api/api.dart';
-// TODO Configure HTTP Bearer authorization: bearerAuth
-// Case 1. Use String Token
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken('YOUR_ACCESS_TOKEN');
-// Case 2. Use Function which generate token.
-// String yourTokenGeneratorFunction() { ... }
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken(yourTokenGeneratorFunction);
+import 'package:corbado_frontend_api_client/api.dart';
 // TODO Configure API key authorization: projectID
 //defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
 // uncomment below to setup prefix (e.g. Bearer) for API key, if needed
 //defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
 
-final api_instance = UsersApi();
-final emailCodeStatusReq = EmailCodeStatusReq(); // EmailCodeStatusReq | 
+final api = CorbadoFrontendApiClient().getUsersApi();
+final MeIdentifierCreateReq meIdentifierCreateReq = ; // MeIdentifierCreateReq | 
 
 try {
-    final result = api_instance.emailCodeStatus(emailCodeStatusReq);
-    print(result);
-} catch (e) {
-    print('Exception when calling UsersApi->emailCodeStatus: $e\n');
+    final response = api.currentUserIdentifierCreate(meIdentifierCreateReq);
+    print(response);
+} catch on DioException (e) {
+    print('Exception when calling UsersApi->currentUserIdentifierCreate: $e\n');
 }
 ```
 
@@ -433,223 +141,11 @@ try {
 
 Name | Type | Description  | Notes
 ------------- | ------------- | ------------- | -------------
- **emailCodeStatusReq** | [**EmailCodeStatusReq**](EmailCodeStatusReq.md)|  | 
+ **meIdentifierCreateReq** | [**MeIdentifierCreateReq**](MeIdentifierCreateReq.md)|  | 
 
 ### Return type
 
-[**EmailCodeStatusRsp**](EmailCodeStatusRsp.md)
-
-### Authorization
-
-[bearerAuth](../README.md#bearerAuth), [projectID](../README.md#projectID)
-
-### HTTP request headers
-
- - **Content-Type**: application/json
- - **Accept**: application/json
-
-[[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
-
-# **emailLinkConfirm**
-> EmailLinkConfirmRsp emailLinkConfirm(emailLinkConfirmReq)
-
-
-
-Performs email link register confirm
-
-### Example
-```dart
-import 'package:corbado_api/api.dart';
-// TODO Configure HTTP Bearer authorization: bearerAuth
-// Case 1. Use String Token
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken('YOUR_ACCESS_TOKEN');
-// Case 2. Use Function which generate token.
-// String yourTokenGeneratorFunction() { ... }
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken(yourTokenGeneratorFunction);
-// TODO Configure API key authorization: projectID
-//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
-// uncomment below to setup prefix (e.g. Bearer) for API key, if needed
-//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
-
-final api_instance = UsersApi();
-final emailLinkConfirmReq = EmailLinkConfirmReq(); // EmailLinkConfirmReq | 
-
-try {
-    final result = api_instance.emailLinkConfirm(emailLinkConfirmReq);
-    print(result);
-} catch (e) {
-    print('Exception when calling UsersApi->emailLinkConfirm: $e\n');
-}
-```
-
-### Parameters
-
-Name | Type | Description  | Notes
-------------- | ------------- | ------------- | -------------
- **emailLinkConfirmReq** | [**EmailLinkConfirmReq**](EmailLinkConfirmReq.md)|  | 
-
-### Return type
-
-[**EmailLinkConfirmRsp**](EmailLinkConfirmRsp.md)
-
-### Authorization
-
-[bearerAuth](../README.md#bearerAuth), [projectID](../README.md#projectID)
-
-### HTTP request headers
-
- - **Content-Type**: application/json
- - **Accept**: application/json
-
-[[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
-
-# **emailLinkLoginStart**
-> EmailLinkLoginStartRsp emailLinkLoginStart(emailLinkLoginStartReq)
-
-
-
-Performs email link login start
-
-### Example
-```dart
-import 'package:corbado_api/api.dart';
-// TODO Configure HTTP Bearer authorization: bearerAuth
-// Case 1. Use String Token
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken('YOUR_ACCESS_TOKEN');
-// Case 2. Use Function which generate token.
-// String yourTokenGeneratorFunction() { ... }
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken(yourTokenGeneratorFunction);
-// TODO Configure API key authorization: projectID
-//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
-// uncomment below to setup prefix (e.g. Bearer) for API key, if needed
-//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
-
-final api_instance = UsersApi();
-final emailLinkLoginStartReq = EmailLinkLoginStartReq(); // EmailLinkLoginStartReq | 
-
-try {
-    final result = api_instance.emailLinkLoginStart(emailLinkLoginStartReq);
-    print(result);
-} catch (e) {
-    print('Exception when calling UsersApi->emailLinkLoginStart: $e\n');
-}
-```
-
-### Parameters
-
-Name | Type | Description  | Notes
-------------- | ------------- | ------------- | -------------
- **emailLinkLoginStartReq** | [**EmailLinkLoginStartReq**](EmailLinkLoginStartReq.md)|  | 
-
-### Return type
-
-[**EmailLinkLoginStartRsp**](EmailLinkLoginStartRsp.md)
-
-### Authorization
-
-[bearerAuth](../README.md#bearerAuth), [projectID](../README.md#projectID)
-
-### HTTP request headers
-
- - **Content-Type**: application/json
- - **Accept**: application/json
-
-[[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
-
-# **emailLinkRegisterStart**
-> EmailLinkRegisterStartRsp emailLinkRegisterStart(emailLinkRegisterStartReq)
-
-
-
-Performs email link register start
-
-### Example
-```dart
-import 'package:corbado_api/api.dart';
-// TODO Configure HTTP Bearer authorization: bearerAuth
-// Case 1. Use String Token
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken('YOUR_ACCESS_TOKEN');
-// Case 2. Use Function which generate token.
-// String yourTokenGeneratorFunction() { ... }
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken(yourTokenGeneratorFunction);
-// TODO Configure API key authorization: projectID
-//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
-// uncomment below to setup prefix (e.g. Bearer) for API key, if needed
-//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
-
-final api_instance = UsersApi();
-final emailLinkRegisterStartReq = EmailLinkRegisterStartReq(); // EmailLinkRegisterStartReq | 
-
-try {
-    final result = api_instance.emailLinkRegisterStart(emailLinkRegisterStartReq);
-    print(result);
-} catch (e) {
-    print('Exception when calling UsersApi->emailLinkRegisterStart: $e\n');
-}
-```
-
-### Parameters
-
-Name | Type | Description  | Notes
-------------- | ------------- | ------------- | -------------
- **emailLinkRegisterStartReq** | [**EmailLinkRegisterStartReq**](EmailLinkRegisterStartReq.md)|  | 
-
-### Return type
-
-[**EmailLinkRegisterStartRsp**](EmailLinkRegisterStartRsp.md)
-
-### Authorization
-
-[bearerAuth](../README.md#bearerAuth), [projectID](../README.md#projectID)
-
-### HTTP request headers
-
- - **Content-Type**: application/json
- - **Accept**: application/json
-
-[[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
-
-# **emailLinkStatus**
-> EmailLinkStatusRsp emailLinkStatus(emailLinkStatusReq)
-
-
-
-Performs email link login status check
-
-### Example
-```dart
-import 'package:corbado_api/api.dart';
-// TODO Configure HTTP Bearer authorization: bearerAuth
-// Case 1. Use String Token
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken('YOUR_ACCESS_TOKEN');
-// Case 2. Use Function which generate token.
-// String yourTokenGeneratorFunction() { ... }
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken(yourTokenGeneratorFunction);
-// TODO Configure API key authorization: projectID
-//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
-// uncomment below to setup prefix (e.g. Bearer) for API key, if needed
-//defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
-
-final api_instance = UsersApi();
-final emailLinkStatusReq = EmailLinkStatusReq(); // EmailLinkStatusReq | 
-
-try {
-    final result = api_instance.emailLinkStatus(emailLinkStatusReq);
-    print(result);
-} catch (e) {
-    print('Exception when calling UsersApi->emailLinkStatus: $e\n');
-}
-```
-
-### Parameters
-
-Name | Type | Description  | Notes
-------------- | ------------- | ------------- | -------------
- **emailLinkStatusReq** | [**EmailLinkStatusReq**](EmailLinkStatusReq.md)|  | 
-
-### Return type
-
-[**EmailLinkStatusRsp**](EmailLinkStatusRsp.md)
+[**GenericRsp**](GenericRsp.md)
 
 ### Authorization
 
@@ -662,35 +158,29 @@ Name | Type | Description  | Notes
 
 [[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
 
-# **loginToken**
-> LoginTokenRsp loginToken(loginTokenReq)
+# **currentUserIdentifierDelete**
+> GenericRsp currentUserIdentifierDelete(meIdentifierDeleteReq)
 
 
 
-Performs login for given token
+Deletes an identifier
 
 ### Example
 ```dart
-import 'package:corbado_api/api.dart';
-// TODO Configure HTTP Bearer authorization: bearerAuth
-// Case 1. Use String Token
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken('YOUR_ACCESS_TOKEN');
-// Case 2. Use Function which generate token.
-// String yourTokenGeneratorFunction() { ... }
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken(yourTokenGeneratorFunction);
+import 'package:corbado_frontend_api_client/api.dart';
 // TODO Configure API key authorization: projectID
 //defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
 // uncomment below to setup prefix (e.g. Bearer) for API key, if needed
 //defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
 
-final api_instance = UsersApi();
-final loginTokenReq = LoginTokenReq(); // LoginTokenReq | 
+final api = CorbadoFrontendApiClient().getUsersApi();
+final MeIdentifierDeleteReq meIdentifierDeleteReq = ; // MeIdentifierDeleteReq | 
 
 try {
-    final result = api_instance.loginToken(loginTokenReq);
-    print(result);
-} catch (e) {
-    print('Exception when calling UsersApi->loginToken: $e\n');
+    final response = api.currentUserIdentifierDelete(meIdentifierDeleteReq);
+    print(response);
+} catch on DioException (e) {
+    print('Exception when calling UsersApi->currentUserIdentifierDelete: $e\n');
 }
 ```
 
@@ -698,11 +188,11 @@ try {
 
 Name | Type | Description  | Notes
 ------------- | ------------- | ------------- | -------------
- **loginTokenReq** | [**LoginTokenReq**](LoginTokenReq.md)|  | 
+ **meIdentifierDeleteReq** | [**MeIdentifierDeleteReq**](MeIdentifierDeleteReq.md)|  | 
 
 ### Return type
 
-[**LoginTokenRsp**](LoginTokenRsp.md)
+[**GenericRsp**](GenericRsp.md)
 
 ### Authorization
 
@@ -715,35 +205,29 @@ Name | Type | Description  | Notes
 
 [[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
 
-# **passKeyAppendFinish**
-> PassKeyAppendFinishRsp passKeyAppendFinish(passKeyFinishReq)
+# **currentUserIdentifierUpdate**
+> GenericRsp currentUserIdentifierUpdate(meIdentifierUpdateReq)
 
 
 
-Performs passkey append finish
+Modifies an identifier (only permitted for username; identifierID will change)
 
 ### Example
 ```dart
-import 'package:corbado_api/api.dart';
-// TODO Configure HTTP Bearer authorization: bearerAuth
-// Case 1. Use String Token
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken('YOUR_ACCESS_TOKEN');
-// Case 2. Use Function which generate token.
-// String yourTokenGeneratorFunction() { ... }
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken(yourTokenGeneratorFunction);
+import 'package:corbado_frontend_api_client/api.dart';
 // TODO Configure API key authorization: projectID
 //defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
 // uncomment below to setup prefix (e.g. Bearer) for API key, if needed
 //defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
 
-final api_instance = UsersApi();
-final passKeyFinishReq = PassKeyFinishReq(); // PassKeyFinishReq | 
+final api = CorbadoFrontendApiClient().getUsersApi();
+final MeIdentifierUpdateReq meIdentifierUpdateReq = ; // MeIdentifierUpdateReq | 
 
 try {
-    final result = api_instance.passKeyAppendFinish(passKeyFinishReq);
-    print(result);
-} catch (e) {
-    print('Exception when calling UsersApi->passKeyAppendFinish: $e\n');
+    final response = api.currentUserIdentifierUpdate(meIdentifierUpdateReq);
+    print(response);
+} catch on DioException (e) {
+    print('Exception when calling UsersApi->currentUserIdentifierUpdate: $e\n');
 }
 ```
 
@@ -751,11 +235,11 @@ try {
 
 Name | Type | Description  | Notes
 ------------- | ------------- | ------------- | -------------
- **passKeyFinishReq** | [**PassKeyFinishReq**](PassKeyFinishReq.md)|  | 
+ **meIdentifierUpdateReq** | [**MeIdentifierUpdateReq**](MeIdentifierUpdateReq.md)|  | 
 
 ### Return type
 
-[**PassKeyAppendFinishRsp**](PassKeyAppendFinishRsp.md)
+[**GenericRsp**](GenericRsp.md)
 
 ### Authorization
 
@@ -768,35 +252,29 @@ Name | Type | Description  | Notes
 
 [[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
 
-# **passKeyAppendStart**
-> PassKeyStartRsp passKeyAppendStart(emptyReq)
+# **currentUserIdentifierVerifyFinish**
+> GenericRsp currentUserIdentifierVerifyFinish(meIdentifierVerifyFinishReq)
 
 
 
-Performs passkey append start
+Verifies challenge
 
 ### Example
 ```dart
-import 'package:corbado_api/api.dart';
-// TODO Configure HTTP Bearer authorization: bearerAuth
-// Case 1. Use String Token
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken('YOUR_ACCESS_TOKEN');
-// Case 2. Use Function which generate token.
-// String yourTokenGeneratorFunction() { ... }
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken(yourTokenGeneratorFunction);
+import 'package:corbado_frontend_api_client/api.dart';
 // TODO Configure API key authorization: projectID
 //defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
 // uncomment below to setup prefix (e.g. Bearer) for API key, if needed
 //defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
 
-final api_instance = UsersApi();
-final emptyReq = EmptyReq(); // EmptyReq | 
+final api = CorbadoFrontendApiClient().getUsersApi();
+final MeIdentifierVerifyFinishReq meIdentifierVerifyFinishReq = ; // MeIdentifierVerifyFinishReq | 
 
 try {
-    final result = api_instance.passKeyAppendStart(emptyReq);
-    print(result);
-} catch (e) {
-    print('Exception when calling UsersApi->passKeyAppendStart: $e\n');
+    final response = api.currentUserIdentifierVerifyFinish(meIdentifierVerifyFinishReq);
+    print(response);
+} catch on DioException (e) {
+    print('Exception when calling UsersApi->currentUserIdentifierVerifyFinish: $e\n');
 }
 ```
 
@@ -804,11 +282,11 @@ try {
 
 Name | Type | Description  | Notes
 ------------- | ------------- | ------------- | -------------
- **emptyReq** | [**EmptyReq**](EmptyReq.md)|  | 
+ **meIdentifierVerifyFinishReq** | [**MeIdentifierVerifyFinishReq**](MeIdentifierVerifyFinishReq.md)|  | 
 
 ### Return type
 
-[**PassKeyStartRsp**](PassKeyStartRsp.md)
+[**GenericRsp**](GenericRsp.md)
 
 ### Authorization
 
@@ -821,35 +299,29 @@ Name | Type | Description  | Notes
 
 [[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
 
-# **passKeyAssociateStart**
-> PassKeyStartRsp passKeyAssociateStart(passKeyAssociateStartReq)
+# **currentUserIdentifierVerifyStart**
+> GenericRsp currentUserIdentifierVerifyStart(meIdentifierVerifyStartReq)
 
 
 
-Performs passkey associate start
+Creates challenge (only email otp and phone otp supported for now)
 
 ### Example
 ```dart
-import 'package:corbado_api/api.dart';
-// TODO Configure HTTP Bearer authorization: bearerAuth
-// Case 1. Use String Token
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken('YOUR_ACCESS_TOKEN');
-// Case 2. Use Function which generate token.
-// String yourTokenGeneratorFunction() { ... }
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken(yourTokenGeneratorFunction);
+import 'package:corbado_frontend_api_client/api.dart';
 // TODO Configure API key authorization: projectID
 //defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
 // uncomment below to setup prefix (e.g. Bearer) for API key, if needed
 //defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
 
-final api_instance = UsersApi();
-final passKeyAssociateStartReq = PassKeyAssociateStartReq(); // PassKeyAssociateStartReq | 
+final api = CorbadoFrontendApiClient().getUsersApi();
+final MeIdentifierVerifyStartReq meIdentifierVerifyStartReq = ; // MeIdentifierVerifyStartReq | 
 
 try {
-    final result = api_instance.passKeyAssociateStart(passKeyAssociateStartReq);
-    print(result);
-} catch (e) {
-    print('Exception when calling UsersApi->passKeyAssociateStart: $e\n');
+    final response = api.currentUserIdentifierVerifyStart(meIdentifierVerifyStartReq);
+    print(response);
+} catch on DioException (e) {
+    print('Exception when calling UsersApi->currentUserIdentifierVerifyStart: $e\n');
 }
 ```
 
@@ -857,11 +329,11 @@ try {
 
 Name | Type | Description  | Notes
 ------------- | ------------- | ------------- | -------------
- **passKeyAssociateStartReq** | [**PassKeyAssociateStartReq**](PassKeyAssociateStartReq.md)|  | 
+ **meIdentifierVerifyStartReq** | [**MeIdentifierVerifyStartReq**](MeIdentifierVerifyStartReq.md)|  | 
 
 ### Return type
 
-[**PassKeyStartRsp**](PassKeyStartRsp.md)
+[**GenericRsp**](GenericRsp.md)
 
 ### Authorization
 
@@ -874,35 +346,28 @@ Name | Type | Description  | Notes
 
 [[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
 
-# **passKeyCredentialExists**
-> PassKeyCredentialExistsRsp passKeyCredentialExists(passKeyCredentialExistsReq)
+# **currentUserPasskeyAppendFinish**
+> currentUserPasskeyAppendFinish(mePasskeysAppendFinishReq)
 
 
 
-Checks if active passkey credential exists for provided user and device
+Finishes passkey append for current user
 
 ### Example
 ```dart
-import 'package:corbado_api/api.dart';
-// TODO Configure HTTP Bearer authorization: bearerAuth
-// Case 1. Use String Token
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken('YOUR_ACCESS_TOKEN');
-// Case 2. Use Function which generate token.
-// String yourTokenGeneratorFunction() { ... }
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken(yourTokenGeneratorFunction);
+import 'package:corbado_frontend_api_client/api.dart';
 // TODO Configure API key authorization: projectID
 //defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
 // uncomment below to setup prefix (e.g. Bearer) for API key, if needed
 //defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
 
-final api_instance = UsersApi();
-final passKeyCredentialExistsReq = PassKeyCredentialExistsReq(); // PassKeyCredentialExistsReq | 
+final api = CorbadoFrontendApiClient().getUsersApi();
+final MePasskeysAppendFinishReq mePasskeysAppendFinishReq = ; // MePasskeysAppendFinishReq | 
 
 try {
-    final result = api_instance.passKeyCredentialExists(passKeyCredentialExistsReq);
-    print(result);
-} catch (e) {
-    print('Exception when calling UsersApi->passKeyCredentialExists: $e\n');
+    api.currentUserPasskeyAppendFinish(mePasskeysAppendFinishReq);
+} catch on DioException (e) {
+    print('Exception when calling UsersApi->currentUserPasskeyAppendFinish: $e\n');
 }
 ```
 
@@ -910,11 +375,11 @@ try {
 
 Name | Type | Description  | Notes
 ------------- | ------------- | ------------- | -------------
- **passKeyCredentialExistsReq** | [**PassKeyCredentialExistsReq**](PassKeyCredentialExistsReq.md)|  | 
+ **mePasskeysAppendFinishReq** | [**MePasskeysAppendFinishReq**](MePasskeysAppendFinishReq.md)|  | 
 
 ### Return type
 
-[**PassKeyCredentialExistsRsp**](PassKeyCredentialExistsRsp.md)
+void (empty response body)
 
 ### Authorization
 
@@ -923,39 +388,33 @@ Name | Type | Description  | Notes
 ### HTTP request headers
 
  - **Content-Type**: application/json
- - **Accept**: application/json
+ - **Accept**: Not defined
 
 [[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
 
-# **passKeyLoginFinish**
-> PassKeyLoginFinishRsp passKeyLoginFinish(passKeyFinishReq)
+# **currentUserPasskeyAppendStart**
+> MePasskeysAppendStartRsp currentUserPasskeyAppendStart(mePasskeysAppendStartReq)
 
 
 
-Performs passkey login finish
+Starts passkey append for current user
 
 ### Example
 ```dart
-import 'package:corbado_api/api.dart';
-// TODO Configure HTTP Bearer authorization: bearerAuth
-// Case 1. Use String Token
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken('YOUR_ACCESS_TOKEN');
-// Case 2. Use Function which generate token.
-// String yourTokenGeneratorFunction() { ... }
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken(yourTokenGeneratorFunction);
+import 'package:corbado_frontend_api_client/api.dart';
 // TODO Configure API key authorization: projectID
 //defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
 // uncomment below to setup prefix (e.g. Bearer) for API key, if needed
 //defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
 
-final api_instance = UsersApi();
-final passKeyFinishReq = PassKeyFinishReq(); // PassKeyFinishReq | 
+final api = CorbadoFrontendApiClient().getUsersApi();
+final MePasskeysAppendStartReq mePasskeysAppendStartReq = ; // MePasskeysAppendStartReq | 
 
 try {
-    final result = api_instance.passKeyLoginFinish(passKeyFinishReq);
-    print(result);
-} catch (e) {
-    print('Exception when calling UsersApi->passKeyLoginFinish: $e\n');
+    final response = api.currentUserPasskeyAppendStart(mePasskeysAppendStartReq);
+    print(response);
+} catch on DioException (e) {
+    print('Exception when calling UsersApi->currentUserPasskeyAppendStart: $e\n');
 }
 ```
 
@@ -963,11 +422,11 @@ try {
 
 Name | Type | Description  | Notes
 ------------- | ------------- | ------------- | -------------
- **passKeyFinishReq** | [**PassKeyFinishReq**](PassKeyFinishReq.md)|  | 
+ **mePasskeysAppendStartReq** | [**MePasskeysAppendStartReq**](MePasskeysAppendStartReq.md)|  | 
 
 ### Return type
 
-[**PassKeyLoginFinishRsp**](PassKeyLoginFinishRsp.md)
+[**MePasskeysAppendStartRsp**](MePasskeysAppendStartRsp.md)
 
 ### Authorization
 
@@ -980,35 +439,29 @@ Name | Type | Description  | Notes
 
 [[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
 
-# **passKeyLoginStart**
-> PassKeyStartRsp passKeyLoginStart(passKeyLoginStartReq)
+# **currentUserPasskeyDelete**
+> MePasskeyDeleteRsp currentUserPasskeyDelete(credentialID)
 
 
 
-Performs passkey login start
+Delete current user's passkeys
 
 ### Example
 ```dart
-import 'package:corbado_api/api.dart';
-// TODO Configure HTTP Bearer authorization: bearerAuth
-// Case 1. Use String Token
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken('YOUR_ACCESS_TOKEN');
-// Case 2. Use Function which generate token.
-// String yourTokenGeneratorFunction() { ... }
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken(yourTokenGeneratorFunction);
+import 'package:corbado_frontend_api_client/api.dart';
 // TODO Configure API key authorization: projectID
 //defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
 // uncomment below to setup prefix (e.g. Bearer) for API key, if needed
 //defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
 
-final api_instance = UsersApi();
-final passKeyLoginStartReq = PassKeyLoginStartReq(); // PassKeyLoginStartReq | 
+final api = CorbadoFrontendApiClient().getUsersApi();
+final String credentialID = cre-abc123; // String | Credential ID from passkeys
 
 try {
-    final result = api_instance.passKeyLoginStart(passKeyLoginStartReq);
-    print(result);
-} catch (e) {
-    print('Exception when calling UsersApi->passKeyLoginStart: $e\n');
+    final response = api.currentUserPasskeyDelete(credentialID);
+    print(response);
+} catch on DioException (e) {
+    print('Exception when calling UsersApi->currentUserPasskeyDelete: $e\n');
 }
 ```
 
@@ -1016,11 +469,11 @@ try {
 
 Name | Type | Description  | Notes
 ------------- | ------------- | ------------- | -------------
- **passKeyLoginStartReq** | [**PassKeyLoginStartReq**](PassKeyLoginStartReq.md)|  | 
+ **credentialID** | **String**| Credential ID from passkeys | 
 
 ### Return type
 
-[**PassKeyStartRsp**](PassKeyStartRsp.md)
+[**MePasskeyDeleteRsp**](MePasskeyDeleteRsp.md)
 
 ### Authorization
 
@@ -1028,52 +481,42 @@ Name | Type | Description  | Notes
 
 ### HTTP request headers
 
- - **Content-Type**: application/json
+ - **Content-Type**: Not defined
  - **Accept**: application/json
 
 [[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
 
-# **passKeyMediationStart**
-> PassKeyMediationStartRsp passKeyMediationStart(passKeyMediationStartReq)
+# **currentUserPasskeyGet**
+> MePasskeyRsp currentUserPasskeyGet()
 
 
 
-Performs passkey mediation start
+Gets current user's passkeys
 
 ### Example
 ```dart
-import 'package:corbado_api/api.dart';
-// TODO Configure HTTP Bearer authorization: bearerAuth
-// Case 1. Use String Token
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken('YOUR_ACCESS_TOKEN');
-// Case 2. Use Function which generate token.
-// String yourTokenGeneratorFunction() { ... }
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken(yourTokenGeneratorFunction);
+import 'package:corbado_frontend_api_client/api.dart';
 // TODO Configure API key authorization: projectID
 //defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
 // uncomment below to setup prefix (e.g. Bearer) for API key, if needed
 //defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
 
-final api_instance = UsersApi();
-final passKeyMediationStartReq = PassKeyMediationStartReq(); // PassKeyMediationStartReq | 
+final api = CorbadoFrontendApiClient().getUsersApi();
 
 try {
-    final result = api_instance.passKeyMediationStart(passKeyMediationStartReq);
-    print(result);
-} catch (e) {
-    print('Exception when calling UsersApi->passKeyMediationStart: $e\n');
+    final response = api.currentUserPasskeyGet();
+    print(response);
+} catch on DioException (e) {
+    print('Exception when calling UsersApi->currentUserPasskeyGet: $e\n');
 }
 ```
 
 ### Parameters
-
-Name | Type | Description  | Notes
-------------- | ------------- | ------------- | -------------
- **passKeyMediationStartReq** | [**PassKeyMediationStartReq**](PassKeyMediationStartReq.md)|  | 
+This endpoint does not need any parameter.
 
 ### Return type
 
-[**PassKeyMediationStartRsp**](PassKeyMediationStartRsp.md)
+[**MePasskeyRsp**](MePasskeyRsp.md)
 
 ### Authorization
 
@@ -1081,52 +524,41 @@ Name | Type | Description  | Notes
 
 ### HTTP request headers
 
- - **Content-Type**: application/json
+ - **Content-Type**: Not defined
  - **Accept**: application/json
 
 [[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
 
-# **passKeyRegisterFinish**
-> PassKeyRegisterFinishRsp passKeyRegisterFinish(passKeyFinishReq)
+# **currentUserSessionLogout**
+> currentUserSessionLogout()
 
 
 
-Performs passkey register finish
+Performs session logout
 
 ### Example
 ```dart
-import 'package:corbado_api/api.dart';
-// TODO Configure HTTP Bearer authorization: bearerAuth
-// Case 1. Use String Token
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken('YOUR_ACCESS_TOKEN');
-// Case 2. Use Function which generate token.
-// String yourTokenGeneratorFunction() { ... }
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken(yourTokenGeneratorFunction);
+import 'package:corbado_frontend_api_client/api.dart';
 // TODO Configure API key authorization: projectID
 //defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
 // uncomment below to setup prefix (e.g. Bearer) for API key, if needed
 //defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
 
-final api_instance = UsersApi();
-final passKeyFinishReq = PassKeyFinishReq(); // PassKeyFinishReq | 
+final api = CorbadoFrontendApiClient().getUsersApi();
 
 try {
-    final result = api_instance.passKeyRegisterFinish(passKeyFinishReq);
-    print(result);
-} catch (e) {
-    print('Exception when calling UsersApi->passKeyRegisterFinish: $e\n');
+    api.currentUserSessionLogout();
+} catch on DioException (e) {
+    print('Exception when calling UsersApi->currentUserSessionLogout: $e\n');
 }
 ```
 
 ### Parameters
-
-Name | Type | Description  | Notes
-------------- | ------------- | ------------- | -------------
- **passKeyFinishReq** | [**PassKeyFinishReq**](PassKeyFinishReq.md)|  | 
+This endpoint does not need any parameter.
 
 ### Return type
 
-[**PassKeyRegisterFinishRsp**](PassKeyRegisterFinishRsp.md)
+void (empty response body)
 
 ### Authorization
 
@@ -1134,52 +566,42 @@ Name | Type | Description  | Notes
 
 ### HTTP request headers
 
- - **Content-Type**: application/json
- - **Accept**: application/json
+ - **Content-Type**: Not defined
+ - **Accept**: Not defined
 
 [[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
 
-# **passKeyRegisterStart**
-> PassKeyStartRsp passKeyRegisterStart(passKeyRegisterStartReq)
+# **currentUserSessionRefresh**
+> MeRefreshRsp currentUserSessionRefresh()
 
 
 
-Performs passkey register start
+Performs session refresh
 
 ### Example
 ```dart
-import 'package:corbado_api/api.dart';
-// TODO Configure HTTP Bearer authorization: bearerAuth
-// Case 1. Use String Token
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken('YOUR_ACCESS_TOKEN');
-// Case 2. Use Function which generate token.
-// String yourTokenGeneratorFunction() { ... }
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken(yourTokenGeneratorFunction);
+import 'package:corbado_frontend_api_client/api.dart';
 // TODO Configure API key authorization: projectID
 //defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
 // uncomment below to setup prefix (e.g. Bearer) for API key, if needed
 //defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
 
-final api_instance = UsersApi();
-final passKeyRegisterStartReq = PassKeyRegisterStartReq(); // PassKeyRegisterStartReq | 
+final api = CorbadoFrontendApiClient().getUsersApi();
 
 try {
-    final result = api_instance.passKeyRegisterStart(passKeyRegisterStartReq);
-    print(result);
-} catch (e) {
-    print('Exception when calling UsersApi->passKeyRegisterStart: $e\n');
+    final response = api.currentUserSessionRefresh();
+    print(response);
+} catch on DioException (e) {
+    print('Exception when calling UsersApi->currentUserSessionRefresh: $e\n');
 }
 ```
 
 ### Parameters
-
-Name | Type | Description  | Notes
-------------- | ------------- | ------------- | -------------
- **passKeyRegisterStartReq** | [**PassKeyRegisterStartReq**](PassKeyRegisterStartReq.md)|  | 
+This endpoint does not need any parameter.
 
 ### Return type
 
-[**PassKeyStartRsp**](PassKeyStartRsp.md)
+[**MeRefreshRsp**](MeRefreshRsp.md)
 
 ### Authorization
 
@@ -1187,40 +609,34 @@ Name | Type | Description  | Notes
 
 ### HTTP request headers
 
- - **Content-Type**: application/json
+ - **Content-Type**: Not defined
  - **Accept**: application/json
 
 [[Back to top]](#) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to Model list]](../README.md#documentation-for-models) [[Back to README]](../README.md)
 
-# **password**
-> PasswordVerifyRsp password(passwordVerifyReq)
+# **currentUserUpdate**
+> GenericRsp currentUserUpdate(meUpdateReq)
 
 
 
-Performs password verify
+Updates current user
 
 ### Example
 ```dart
-import 'package:corbado_api/api.dart';
-// TODO Configure HTTP Bearer authorization: bearerAuth
-// Case 1. Use String Token
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken('YOUR_ACCESS_TOKEN');
-// Case 2. Use Function which generate token.
-// String yourTokenGeneratorFunction() { ... }
-//defaultApiClient.getAuthentication<HttpBearerAuth>('bearerAuth').setAccessToken(yourTokenGeneratorFunction);
+import 'package:corbado_frontend_api_client/api.dart';
 // TODO Configure API key authorization: projectID
 //defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKey = 'YOUR_API_KEY';
 // uncomment below to setup prefix (e.g. Bearer) for API key, if needed
 //defaultApiClient.getAuthentication<ApiKeyAuth>('projectID').apiKeyPrefix = 'Bearer';
 
-final api_instance = UsersApi();
-final passwordVerifyReq = PasswordVerifyReq(); // PasswordVerifyReq | 
+final api = CorbadoFrontendApiClient().getUsersApi();
+final MeUpdateReq meUpdateReq = ; // MeUpdateReq | 
 
 try {
-    final result = api_instance.password(passwordVerifyReq);
-    print(result);
-} catch (e) {
-    print('Exception when calling UsersApi->password: $e\n');
+    final response = api.currentUserUpdate(meUpdateReq);
+    print(response);
+} catch on DioException (e) {
+    print('Exception when calling UsersApi->currentUserUpdate: $e\n');
 }
 ```
 
@@ -1228,11 +644,11 @@ try {
 
 Name | Type | Description  | Notes
 ------------- | ------------- | ------------- | -------------
- **passwordVerifyReq** | [**PasswordVerifyReq**](PasswordVerifyReq.md)|  | 
+ **meUpdateReq** | [**MeUpdateReq**](MeUpdateReq.md)|  | 
 
 ### Return type
 
-[**PasswordVerifyRsp**](PasswordVerifyRsp.md)
+[**GenericRsp**](GenericRsp.md)
 
 ### Authorization
 
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/VerificationMethod.md b/packages/corbado_api_client/lib/frontendapi/doc/VerificationMethod.md
new file mode 100644
index 0000000..0df5407
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/doc/VerificationMethod.md
@@ -0,0 +1,14 @@
+# corbado_frontend_api_client.model.VerificationMethod
+
+## Load the model package
+```dart
+import 'package:corbado_frontend_api_client/api.dart';
+```
+
+## Properties
+Name | Type | Description | Notes
+------------ | ------------- | ------------- | -------------
+
+[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
+
+
diff --git a/packages/corbado_api_client/lib/frontendapi/doc/WellKnownJWKSListRsp.md b/packages/corbado_api_client/lib/frontendapi/doc/WellKnownJWKSListRsp.md
deleted file mode 100644
index e49e894..0000000
--- a/packages/corbado_api_client/lib/frontendapi/doc/WellKnownJWKSListRsp.md
+++ /dev/null
@@ -1,15 +0,0 @@
-# corbado_api.model.WellKnownJWKSListRsp
-
-## Load the model package
-```dart
-import 'package:corbado_api/api.dart';
-```
-
-## Properties
-Name | Type | Description | Notes
------------- | ------------- | ------------- | -------------
-**keys** | [**List<Jwk>**](Jwk.md) |  | [default to const []]
-
-[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/git_push.sh b/packages/corbado_api_client/lib/frontendapi/git_push.sh
deleted file mode 100644
index f53a75d..0000000
--- a/packages/corbado_api_client/lib/frontendapi/git_push.sh
+++ /dev/null
@@ -1,57 +0,0 @@
-#!/bin/sh
-# ref: https://help.github.com/articles/adding-an-existing-project-to-github-using-the-command-line/
-#
-# Usage example: /bin/sh ./git_push.sh wing328 openapi-petstore-perl "minor update" "gitlab.com"
-
-git_user_id=$1
-git_repo_id=$2
-release_note=$3
-git_host=$4
-
-if [ "$git_host" = "" ]; then
-    git_host="github.com"
-    echo "[INFO] No command line input provided. Set \$git_host to $git_host"
-fi
-
-if [ "$git_user_id" = "" ]; then
-    git_user_id="GIT_USER_ID"
-    echo "[INFO] No command line input provided. Set \$git_user_id to $git_user_id"
-fi
-
-if [ "$git_repo_id" = "" ]; then
-    git_repo_id="GIT_REPO_ID"
-    echo "[INFO] No command line input provided. Set \$git_repo_id to $git_repo_id"
-fi
-
-if [ "$release_note" = "" ]; then
-    release_note="Minor update"
-    echo "[INFO] No command line input provided. Set \$release_note to $release_note"
-fi
-
-# Initialize the local directory as a Git repository
-git init
-
-# Adds the files in the local repository and stages them for commit.
-git add .
-
-# Commits the tracked changes and prepares them to be pushed to a remote repository.
-git commit -m "$release_note"
-
-# Sets the new remote
-git_remote=$(git remote)
-if [ "$git_remote" = "" ]; then # git remote not defined
-
-    if [ "$GIT_TOKEN" = "" ]; then
-        echo "[INFO] \$GIT_TOKEN (environment variable) is not set. Using the git credential in your environment."
-        git remote add origin https://${git_host}/${git_user_id}/${git_repo_id}.git
-    else
-        git remote add origin https://${git_user_id}:"${GIT_TOKEN}"@${git_host}/${git_user_id}/${git_repo_id}.git
-    fi
-
-fi
-
-git pull origin master
-
-# Pushes (Forces) the changes in the local repository up to the remote repository
-echo "Git pushing to https://${git_host}/${git_user_id}/${git_repo_id}.git"
-git push origin master 2>&1 | grep -v 'To https'
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/api.dart b/packages/corbado_api_client/lib/frontendapi/lib/api.dart
deleted file mode 100644
index 1f9e9f3..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/api.dart
+++ /dev/null
@@ -1,134 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-library openapi.api;
-
-import 'dart:async';
-import 'dart:convert';
-import 'dart:io';
-
-import 'package:http/http.dart';
-import 'package:intl/intl.dart';
-import 'package:meta/meta.dart';
-
-part 'api_client.dart';
-part 'api_helper.dart';
-part 'api_exception.dart';
-part 'auth/authentication.dart';
-part 'auth/api_key_auth.dart';
-part 'auth/oauth.dart';
-part 'auth/http_basic_auth.dart';
-part 'auth/http_bearer_auth.dart';
-
-part 'api/assets_api.dart';
-part 'api/projects_api.dart';
-part 'api/sessions_api.dart';
-part 'api/users_api.dart';
-
-part 'model/apple_app_site_association_rsp.dart';
-part 'model/apple_app_site_association_rsp_applinks.dart';
-part 'model/apple_app_site_association_rsp_applinks_details_inner.dart';
-part 'model/apple_app_site_association_rsp_webcredentials.dart';
-part 'model/asset_link.dart';
-part 'model/asset_link_target.dart';
-part 'model/auth_method.dart';
-part 'model/auth_methods_list_req.dart';
-part 'model/auth_methods_list_rsp.dart';
-part 'model/auth_methods_list_rsp_all_of.dart';
-part 'model/auth_methods_list_rsp_all_of_data.dart';
-part 'model/authentication_rsp.dart';
-part 'model/email_code_confirm_req.dart';
-part 'model/email_code_confirm_rsp.dart';
-part 'model/email_code_login_start_req.dart';
-part 'model/email_code_login_start_rsp.dart';
-part 'model/email_code_register_start_req.dart';
-part 'model/email_code_register_start_rsp.dart';
-part 'model/email_code_register_start_rsp_all_of.dart';
-part 'model/email_code_register_start_rsp_all_of_data.dart';
-part 'model/email_code_status_req.dart';
-part 'model/email_code_status_rsp.dart';
-part 'model/email_link_confirm_req.dart';
-part 'model/email_link_confirm_rsp.dart';
-part 'model/email_link_confirm_rsp_all_of.dart';
-part 'model/email_link_confirm_rsp_all_of_data.dart';
-part 'model/email_link_confirm_rsp_all_of_data_all_of.dart';
-part 'model/email_link_login_start_req.dart';
-part 'model/email_link_login_start_rsp.dart';
-part 'model/email_link_register_start_req.dart';
-part 'model/email_link_register_start_rsp.dart';
-part 'model/email_link_register_start_rsp_all_of.dart';
-part 'model/email_link_register_start_rsp_all_of_data.dart';
-part 'model/email_link_status_req.dart';
-part 'model/email_link_status_rsp.dart';
-part 'model/empty_req.dart';
-part 'model/error_rsp.dart';
-part 'model/error_rsp_all_of.dart';
-part 'model/error_rsp_all_of_error.dart';
-part 'model/error_rsp_all_of_error_validation.dart';
-part 'model/full_user.dart';
-part 'model/generic_rsp.dart';
-part 'model/jwk.dart';
-part 'model/login_identifier_type.dart';
-part 'model/login_token_req.dart';
-part 'model/login_token_rsp.dart';
-part 'model/logout_rsp.dart';
-part 'model/logout_rsp_all_of.dart';
-part 'model/me_pass_key_rsp.dart';
-part 'model/me_pass_key_rsp_all_of.dart';
-part 'model/me_rsp.dart';
-part 'model/me_rsp_all_of.dart';
-part 'model/paging.dart';
-part 'model/pass_key_append_finish_rsp.dart';
-part 'model/pass_key_append_finish_rsp_all_of.dart';
-part 'model/pass_key_append_finish_rsp_all_of_data.dart';
-part 'model/pass_key_associate_start_req.dart';
-part 'model/pass_key_credential_exists_req.dart';
-part 'model/pass_key_credential_exists_rsp.dart';
-part 'model/pass_key_credential_exists_rsp_all_of.dart';
-part 'model/pass_key_finish_req.dart';
-part 'model/pass_key_item.dart';
-part 'model/pass_key_list.dart';
-part 'model/pass_key_login_finish_rsp.dart';
-part 'model/pass_key_login_finish_rsp_all_of.dart';
-part 'model/pass_key_login_finish_rsp_all_of_data.dart';
-part 'model/pass_key_login_finish_rsp_all_of_data_all_of.dart';
-part 'model/pass_key_login_start_req.dart';
-part 'model/pass_key_mediation_start_req.dart';
-part 'model/pass_key_mediation_start_rsp.dart';
-part 'model/pass_key_mediation_start_rsp_all_of.dart';
-part 'model/pass_key_mediation_start_rsp_all_of_data.dart';
-part 'model/pass_key_register_finish_rsp.dart';
-part 'model/pass_key_register_finish_rsp_all_of.dart';
-part 'model/pass_key_register_start_req.dart';
-part 'model/pass_key_start_rsp.dart';
-part 'model/pass_key_start_rsp_all_of.dart';
-part 'model/pass_key_start_rsp_all_of_data.dart';
-part 'model/password_verify_req.dart';
-part 'model/password_verify_rsp.dart';
-part 'model/project_config_rsp.dart';
-part 'model/project_config_rsp_all_of.dart';
-part 'model/project_config_rsp_all_of_data.dart';
-part 'model/request_data.dart';
-part 'model/session_refresh_rsp.dart';
-part 'model/short_session.dart';
-part 'model/status.dart';
-part 'model/user_email.dart';
-part 'model/user_phone_number.dart';
-part 'model/well_known_jwks_list_rsp.dart';
-
-
-const _delimiters = {'csv': ',', 'ssv': ' ', 'tsv': '\t', 'pipes': '|'};
-const _dateEpochMarker = 'epoch';
-final _dateFormatter = DateFormat('yyyy-MM-dd');
-final _regList = RegExp(r'^List<(.*)>$');
-final _regSet = RegExp(r'^Set<(.*)>$');
-final _regMap = RegExp(r'^Map<String,(.*)>$');
-
-ApiClient defaultApiClient = ApiClient();
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/api/assets_api.dart b/packages/corbado_api_client/lib/frontendapi/lib/api/assets_api.dart
deleted file mode 100644
index 0c13a86..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/api/assets_api.dart
+++ /dev/null
@@ -1,109 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-
-class AssetsApi {
-  AssetsApi([ApiClient? apiClient]) : apiClient = apiClient ?? defaultApiClient;
-
-  final ApiClient apiClient;
-
-  /// Provides apple app site association
-  ///
-  /// Note: This method returns the HTTP [Response].
-  Future<Response> appleAppSiteAssociationWithHttpInfo() async {
-    // ignore: prefer_const_declarations
-    final path = r'/.well-known/apple-app-site-association';
-
-    // ignore: prefer_final_locals
-    Object? postBody;
-
-    final queryParams = <QueryParam>[];
-    final headerParams = <String, String>{};
-    final formParams = <String, String>{};
-
-    const contentTypes = <String>[];
-
-
-    return apiClient.invokeAPI(
-      path,
-      'GET',
-      queryParams,
-      postBody,
-      headerParams,
-      formParams,
-      contentTypes.isEmpty ? null : contentTypes.first,
-    );
-  }
-
-  /// Provides apple app site association
-  Future<AppleAppSiteAssociationRsp?> appleAppSiteAssociation() async {
-    final response = await appleAppSiteAssociationWithHttpInfo();
-    if (response.statusCode >= HttpStatus.badRequest) {
-      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
-    }
-    // When a remote server returns no body with a status of 204, we shall not decode it.
-    // At the time of writing this, `dart:convert` will throw an "Unexpected end of input"
-    // FormatException when trying to decode an empty string.
-    if (response.body.isNotEmpty && response.statusCode != HttpStatus.noContent) {
-      return await apiClient.deserializeAsync(await _decodeBodyBytes(response), 'AppleAppSiteAssociationRsp',) as AppleAppSiteAssociationRsp;
-    
-    }
-    return null;
-  }
-
-  /// Provides asset links for android devices
-  ///
-  /// Note: This method returns the HTTP [Response].
-  Future<Response> assetLinksWithHttpInfo() async {
-    // ignore: prefer_const_declarations
-    final path = r'/.well-known/assetlinks.json';
-
-    // ignore: prefer_final_locals
-    Object? postBody;
-
-    final queryParams = <QueryParam>[];
-    final headerParams = <String, String>{};
-    final formParams = <String, String>{};
-
-    const contentTypes = <String>[];
-
-
-    return apiClient.invokeAPI(
-      path,
-      'GET',
-      queryParams,
-      postBody,
-      headerParams,
-      formParams,
-      contentTypes.isEmpty ? null : contentTypes.first,
-    );
-  }
-
-  /// Provides asset links for android devices
-  Future<List<AssetLink>?> assetLinks() async {
-    final response = await assetLinksWithHttpInfo();
-    if (response.statusCode >= HttpStatus.badRequest) {
-      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
-    }
-    // When a remote server returns no body with a status of 204, we shall not decode it.
-    // At the time of writing this, `dart:convert` will throw an "Unexpected end of input"
-    // FormatException when trying to decode an empty string.
-    if (response.body.isNotEmpty && response.statusCode != HttpStatus.noContent) {
-      final responseBody = await _decodeBodyBytes(response);
-      return (await apiClient.deserializeAsync(responseBody, 'List<AssetLink>') as List)
-        .cast<AssetLink>()
-        .toList();
-
-    }
-    return null;
-  }
-}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/api/projects_api.dart b/packages/corbado_api_client/lib/frontendapi/lib/api/projects_api.dart
deleted file mode 100644
index 80a4cf6..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/api/projects_api.dart
+++ /dev/null
@@ -1,62 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-
-class ProjectsApi {
-  ProjectsApi([ApiClient? apiClient]) : apiClient = apiClient ?? defaultApiClient;
-
-  final ApiClient apiClient;
-
-  /// Get project configuration
-  ///
-  /// Note: This method returns the HTTP [Response].
-  Future<Response> projectConfigWithHttpInfo() async {
-    // ignore: prefer_const_declarations
-    final path = r'/v1/projects/projectConfig';
-
-    // ignore: prefer_final_locals
-    Object? postBody;
-
-    final queryParams = <QueryParam>[];
-    final headerParams = <String, String>{};
-    final formParams = <String, String>{};
-
-    const contentTypes = <String>[];
-
-
-    return apiClient.invokeAPI(
-      path,
-      'GET',
-      queryParams,
-      postBody,
-      headerParams,
-      formParams,
-      contentTypes.isEmpty ? null : contentTypes.first,
-    );
-  }
-
-  /// Get project configuration
-  Future<ProjectConfigRsp?> projectConfig() async {
-    final response = await projectConfigWithHttpInfo();
-    if (response.statusCode >= HttpStatus.badRequest) {
-      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
-    }
-    // When a remote server returns no body with a status of 204, we shall not decode it.
-    // At the time of writing this, `dart:convert` will throw an "Unexpected end of input"
-    // FormatException when trying to decode an empty string.
-    if (response.body.isNotEmpty && response.statusCode != HttpStatus.noContent) {
-      return await apiClient.deserializeAsync(await _decodeBodyBytes(response), 'ProjectConfigRsp',) as ProjectConfigRsp;
-    
-    }
-    return null;
-  }
-}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/api/sessions_api.dart b/packages/corbado_api_client/lib/frontendapi/lib/api/sessions_api.dart
deleted file mode 100644
index 7eedc41..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/api/sessions_api.dart
+++ /dev/null
@@ -1,166 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-
-class SessionsApi {
-  SessionsApi([ApiClient? apiClient]) : apiClient = apiClient ?? defaultApiClient;
-
-  final ApiClient apiClient;
-
-  /// Performs session logout
-  ///
-  /// Note: This method returns the HTTP [Response].
-  ///
-  /// Parameters:
-  ///
-  /// * [EmptyReq] emptyReq (required):
-  Future<Response> sessionLogoutWithHttpInfo(EmptyReq emptyReq,) async {
-    // ignore: prefer_const_declarations
-    final path = r'/v1/sessions/logout';
-
-    // ignore: prefer_final_locals
-    Object? postBody = emptyReq;
-
-    final queryParams = <QueryParam>[];
-    final headerParams = <String, String>{};
-    final formParams = <String, String>{};
-
-    const contentTypes = <String>['application/json'];
-
-
-    return apiClient.invokeAPI(
-      path,
-      'DELETE',
-      queryParams,
-      postBody,
-      headerParams,
-      formParams,
-      contentTypes.isEmpty ? null : contentTypes.first,
-    );
-  }
-
-  /// Performs session logout
-  ///
-  /// Parameters:
-  ///
-  /// * [EmptyReq] emptyReq (required):
-  Future<LogoutRsp?> sessionLogout(EmptyReq emptyReq,) async {
-    final response = await sessionLogoutWithHttpInfo(emptyReq,);
-    if (response.statusCode >= HttpStatus.badRequest) {
-      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
-    }
-    // When a remote server returns no body with a status of 204, we shall not decode it.
-    // At the time of writing this, `dart:convert` will throw an "Unexpected end of input"
-    // FormatException when trying to decode an empty string.
-    if (response.body.isNotEmpty && response.statusCode != HttpStatus.noContent) {
-      return await apiClient.deserializeAsync(await _decodeBodyBytes(response), 'LogoutRsp',) as LogoutRsp;
-    
-    }
-    return null;
-  }
-
-  /// Performs session refresh
-  ///
-  /// Note: This method returns the HTTP [Response].
-  ///
-  /// Parameters:
-  ///
-  /// * [EmptyReq] emptyReq (required):
-  Future<Response> sessionRefreshWithHttpInfo(EmptyReq emptyReq,) async {
-    // ignore: prefer_const_declarations
-    final path = r'/v1/sessions/refresh';
-
-    // ignore: prefer_final_locals
-    Object? postBody = emptyReq;
-
-    final queryParams = <QueryParam>[];
-    final headerParams = <String, String>{};
-    final formParams = <String, String>{};
-
-    const contentTypes = <String>['application/json'];
-
-
-    return apiClient.invokeAPI(
-      path,
-      'PUT',
-      queryParams,
-      postBody,
-      headerParams,
-      formParams,
-      contentTypes.isEmpty ? null : contentTypes.first,
-    );
-  }
-
-  /// Performs session refresh
-  ///
-  /// Parameters:
-  ///
-  /// * [EmptyReq] emptyReq (required):
-  Future<SessionRefreshRsp?> sessionRefresh(EmptyReq emptyReq,) async {
-    final response = await sessionRefreshWithHttpInfo(emptyReq,);
-    if (response.statusCode >= HttpStatus.badRequest) {
-      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
-    }
-    // When a remote server returns no body with a status of 204, we shall not decode it.
-    // At the time of writing this, `dart:convert` will throw an "Unexpected end of input"
-    // FormatException when trying to decode an empty string.
-    if (response.body.isNotEmpty && response.statusCode != HttpStatus.noContent) {
-      return await apiClient.deserializeAsync(await _decodeBodyBytes(response), 'SessionRefreshRsp',) as SessionRefreshRsp;
-    
-    }
-    return null;
-  }
-
-  /// Retrieves well-known JWKS for Project ID
-  ///
-  /// Note: This method returns the HTTP [Response].
-  Future<Response> wellKnownJWKSListWithHttpInfo() async {
-    // ignore: prefer_const_declarations
-    final path = r'/.well-known/jwks';
-
-    // ignore: prefer_final_locals
-    Object? postBody;
-
-    final queryParams = <QueryParam>[];
-    final headerParams = <String, String>{};
-    final formParams = <String, String>{};
-
-    const contentTypes = <String>[];
-
-
-    return apiClient.invokeAPI(
-      path,
-      'GET',
-      queryParams,
-      postBody,
-      headerParams,
-      formParams,
-      contentTypes.isEmpty ? null : contentTypes.first,
-    );
-  }
-
-  /// Retrieves well-known JWKS for Project ID
-  Future<WellKnownJWKSListRsp?> wellKnownJWKSList() async {
-    final response = await wellKnownJWKSListWithHttpInfo();
-    if (response.statusCode >= HttpStatus.badRequest) {
-      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
-    }
-    // When a remote server returns no body with a status of 204, we shall not decode it.
-    // At the time of writing this, `dart:convert` will throw an "Unexpected end of input"
-    // FormatException when trying to decode an empty string.
-    if (response.body.isNotEmpty && response.statusCode != HttpStatus.noContent) {
-      return await apiClient.deserializeAsync(await _decodeBodyBytes(response), 'WellKnownJWKSListRsp',) as WellKnownJWKSListRsp;
-    
-    }
-    return null;
-  }
-}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/api/users_api.dart b/packages/corbado_api_client/lib/frontendapi/lib/api/users_api.dart
deleted file mode 100644
index 2ea14ae..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/api/users_api.dart
+++ /dev/null
@@ -1,1201 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-
-class UsersApi {
-  UsersApi([ApiClient? apiClient]) : apiClient = apiClient ?? defaultApiClient;
-
-  final ApiClient apiClient;
-
-  /// Lists user's available authentication methods
-  ///
-  /// Note: This method returns the HTTP [Response].
-  ///
-  /// Parameters:
-  ///
-  /// * [AuthMethodsListReq] authMethodsListReq (required):
-  Future<Response> authMethodsListWithHttpInfo(AuthMethodsListReq authMethodsListReq,) async {
-    // ignore: prefer_const_declarations
-    final path = r'/v1/users/authmethods';
-
-    // ignore: prefer_final_locals
-    Object? postBody = authMethodsListReq;
-
-    final queryParams = <QueryParam>[];
-    final headerParams = <String, String>{};
-    final formParams = <String, String>{};
-
-    const contentTypes = <String>['application/json'];
-
-
-    return apiClient.invokeAPI(
-      path,
-      'POST',
-      queryParams,
-      postBody,
-      headerParams,
-      formParams,
-      contentTypes.isEmpty ? null : contentTypes.first,
-    );
-  }
-
-  /// Lists user's available authentication methods
-  ///
-  /// Parameters:
-  ///
-  /// * [AuthMethodsListReq] authMethodsListReq (required):
-  Future<AuthMethodsListRsp?> authMethodsList(AuthMethodsListReq authMethodsListReq,) async {
-    final response = await authMethodsListWithHttpInfo(authMethodsListReq,);
-    if (response.statusCode >= HttpStatus.badRequest) {
-      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
-    }
-    // When a remote server returns no body with a status of 204, we shall not decode it.
-    // At the time of writing this, `dart:convert` will throw an "Unexpected end of input"
-    // FormatException when trying to decode an empty string.
-    if (response.body.isNotEmpty && response.statusCode != HttpStatus.noContent) {
-      return await apiClient.deserializeAsync(await _decodeBodyBytes(response), 'AuthMethodsListRsp',) as AuthMethodsListRsp;
-    
-    }
-    return null;
-  }
-
-  /// Gets current user
-  ///
-  /// Note: This method returns the HTTP [Response].
-  Future<Response> currentUserGetWithHttpInfo() async {
-    // ignore: prefer_const_declarations
-    final path = r'/v1/me';
-
-    // ignore: prefer_final_locals
-    Object? postBody;
-
-    final queryParams = <QueryParam>[];
-    final headerParams = <String, String>{};
-    final formParams = <String, String>{};
-
-    const contentTypes = <String>[];
-
-
-    return apiClient.invokeAPI(
-      path,
-      'GET',
-      queryParams,
-      postBody,
-      headerParams,
-      formParams,
-      contentTypes.isEmpty ? null : contentTypes.first,
-    );
-  }
-
-  /// Gets current user
-  Future<MeRsp?> currentUserGet() async {
-    final response = await currentUserGetWithHttpInfo();
-    if (response.statusCode >= HttpStatus.badRequest) {
-      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
-    }
-    // When a remote server returns no body with a status of 204, we shall not decode it.
-    // At the time of writing this, `dart:convert` will throw an "Unexpected end of input"
-    // FormatException when trying to decode an empty string.
-    if (response.body.isNotEmpty && response.statusCode != HttpStatus.noContent) {
-      return await apiClient.deserializeAsync(await _decodeBodyBytes(response), 'MeRsp',) as MeRsp;
-    
-    }
-    return null;
-  }
-
-  /// Delete current user's passkeys
-  ///
-  /// Note: This method returns the HTTP [Response].
-  ///
-  /// Parameters:
-  ///
-  /// * [String] credentialID (required):
-  ///   Credential ID from passkeys
-  Future<Response> currentUserPassKeyDeleteWithHttpInfo(String credentialID,) async {
-    // ignore: prefer_const_declarations
-    final path = r'/v1/me/passkeys/{credentialID}'
-      .replaceAll('{credentialID}', credentialID);
-
-    // ignore: prefer_final_locals
-    Object? postBody;
-
-    final queryParams = <QueryParam>[];
-    final headerParams = <String, String>{};
-    final formParams = <String, String>{};
-
-    const contentTypes = <String>[];
-
-
-    return apiClient.invokeAPI(
-      path,
-      'DELETE',
-      queryParams,
-      postBody,
-      headerParams,
-      formParams,
-      contentTypes.isEmpty ? null : contentTypes.first,
-    );
-  }
-
-  /// Delete current user's passkeys
-  ///
-  /// Parameters:
-  ///
-  /// * [String] credentialID (required):
-  ///   Credential ID from passkeys
-  Future<GenericRsp?> currentUserPassKeyDelete(String credentialID,) async {
-    final response = await currentUserPassKeyDeleteWithHttpInfo(credentialID,);
-    if (response.statusCode >= HttpStatus.badRequest) {
-      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
-    }
-    // When a remote server returns no body with a status of 204, we shall not decode it.
-    // At the time of writing this, `dart:convert` will throw an "Unexpected end of input"
-    // FormatException when trying to decode an empty string.
-    if (response.body.isNotEmpty && response.statusCode != HttpStatus.noContent) {
-      return await apiClient.deserializeAsync(await _decodeBodyBytes(response), 'GenericRsp',) as GenericRsp;
-    
-    }
-    return null;
-  }
-
-  /// Gets current user's passkeys
-  ///
-  /// Note: This method returns the HTTP [Response].
-  Future<Response> currentUserPassKeyGetWithHttpInfo() async {
-    // ignore: prefer_const_declarations
-    final path = r'/v1/me/passkeys';
-
-    // ignore: prefer_final_locals
-    Object? postBody;
-
-    final queryParams = <QueryParam>[];
-    final headerParams = <String, String>{};
-    final formParams = <String, String>{};
-
-    const contentTypes = <String>[];
-
-
-    return apiClient.invokeAPI(
-      path,
-      'GET',
-      queryParams,
-      postBody,
-      headerParams,
-      formParams,
-      contentTypes.isEmpty ? null : contentTypes.first,
-    );
-  }
-
-  /// Gets current user's passkeys
-  Future<MePassKeyRsp?> currentUserPassKeyGet() async {
-    final response = await currentUserPassKeyGetWithHttpInfo();
-    if (response.statusCode >= HttpStatus.badRequest) {
-      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
-    }
-    // When a remote server returns no body with a status of 204, we shall not decode it.
-    // At the time of writing this, `dart:convert` will throw an "Unexpected end of input"
-    // FormatException when trying to decode an empty string.
-    if (response.body.isNotEmpty && response.statusCode != HttpStatus.noContent) {
-      return await apiClient.deserializeAsync(await _decodeBodyBytes(response), 'MePassKeyRsp',) as MePassKeyRsp;
-    
-    }
-    return null;
-  }
-
-  /// Performs email OTP register confirm
-  ///
-  /// Note: This method returns the HTTP [Response].
-  ///
-  /// Parameters:
-  ///
-  /// * [EmailCodeConfirmReq] emailCodeConfirmReq (required):
-  Future<Response> emailCodeConfirmWithHttpInfo(EmailCodeConfirmReq emailCodeConfirmReq,) async {
-    // ignore: prefer_const_declarations
-    final path = r'/v1/users/emailcodes/confirm';
-
-    // ignore: prefer_final_locals
-    Object? postBody = emailCodeConfirmReq;
-
-    final queryParams = <QueryParam>[];
-    final headerParams = <String, String>{};
-    final formParams = <String, String>{};
-
-    const contentTypes = <String>['application/json'];
-
-
-    return apiClient.invokeAPI(
-      path,
-      'POST',
-      queryParams,
-      postBody,
-      headerParams,
-      formParams,
-      contentTypes.isEmpty ? null : contentTypes.first,
-    );
-  }
-
-  /// Performs email OTP register confirm
-  ///
-  /// Parameters:
-  ///
-  /// * [EmailCodeConfirmReq] emailCodeConfirmReq (required):
-  Future<EmailCodeConfirmRsp?> emailCodeConfirm(EmailCodeConfirmReq emailCodeConfirmReq,) async {
-    final response = await emailCodeConfirmWithHttpInfo(emailCodeConfirmReq,);
-    if (response.statusCode >= HttpStatus.badRequest) {
-      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
-    }
-    // When a remote server returns no body with a status of 204, we shall not decode it.
-    // At the time of writing this, `dart:convert` will throw an "Unexpected end of input"
-    // FormatException when trying to decode an empty string.
-    if (response.body.isNotEmpty && response.statusCode != HttpStatus.noContent) {
-      return await apiClient.deserializeAsync(await _decodeBodyBytes(response), 'EmailCodeConfirmRsp',) as EmailCodeConfirmRsp;
-    
-    }
-    return null;
-  }
-
-  /// Performs email OTP login start
-  ///
-  /// Note: This method returns the HTTP [Response].
-  ///
-  /// Parameters:
-  ///
-  /// * [EmailCodeLoginStartReq] emailCodeLoginStartReq (required):
-  Future<Response> emailCodeLoginStartWithHttpInfo(EmailCodeLoginStartReq emailCodeLoginStartReq,) async {
-    // ignore: prefer_const_declarations
-    final path = r'/v1/users/emailcodes/login/start';
-
-    // ignore: prefer_final_locals
-    Object? postBody = emailCodeLoginStartReq;
-
-    final queryParams = <QueryParam>[];
-    final headerParams = <String, String>{};
-    final formParams = <String, String>{};
-
-    const contentTypes = <String>['application/json'];
-
-
-    return apiClient.invokeAPI(
-      path,
-      'POST',
-      queryParams,
-      postBody,
-      headerParams,
-      formParams,
-      contentTypes.isEmpty ? null : contentTypes.first,
-    );
-  }
-
-  /// Performs email OTP login start
-  ///
-  /// Parameters:
-  ///
-  /// * [EmailCodeLoginStartReq] emailCodeLoginStartReq (required):
-  Future<EmailCodeLoginStartRsp?> emailCodeLoginStart(EmailCodeLoginStartReq emailCodeLoginStartReq,) async {
-    final response = await emailCodeLoginStartWithHttpInfo(emailCodeLoginStartReq,);
-    if (response.statusCode >= HttpStatus.badRequest) {
-      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
-    }
-    // When a remote server returns no body with a status of 204, we shall not decode it.
-    // At the time of writing this, `dart:convert` will throw an "Unexpected end of input"
-    // FormatException when trying to decode an empty string.
-    if (response.body.isNotEmpty && response.statusCode != HttpStatus.noContent) {
-      return await apiClient.deserializeAsync(await _decodeBodyBytes(response), 'EmailCodeLoginStartRsp',) as EmailCodeLoginStartRsp;
-    
-    }
-    return null;
-  }
-
-  /// Performs email OTP register start
-  ///
-  /// Note: This method returns the HTTP [Response].
-  ///
-  /// Parameters:
-  ///
-  /// * [EmailCodeRegisterStartReq] emailCodeRegisterStartReq (required):
-  Future<Response> emailCodeRegisterStartWithHttpInfo(EmailCodeRegisterStartReq emailCodeRegisterStartReq,) async {
-    // ignore: prefer_const_declarations
-    final path = r'/v1/users/emailcodes/register/start';
-
-    // ignore: prefer_final_locals
-    Object? postBody = emailCodeRegisterStartReq;
-
-    final queryParams = <QueryParam>[];
-    final headerParams = <String, String>{};
-    final formParams = <String, String>{};
-
-    const contentTypes = <String>['application/json'];
-
-
-    return apiClient.invokeAPI(
-      path,
-      'POST',
-      queryParams,
-      postBody,
-      headerParams,
-      formParams,
-      contentTypes.isEmpty ? null : contentTypes.first,
-    );
-  }
-
-  /// Performs email OTP register start
-  ///
-  /// Parameters:
-  ///
-  /// * [EmailCodeRegisterStartReq] emailCodeRegisterStartReq (required):
-  Future<EmailCodeRegisterStartRsp?> emailCodeRegisterStart(EmailCodeRegisterStartReq emailCodeRegisterStartReq,) async {
-    final response = await emailCodeRegisterStartWithHttpInfo(emailCodeRegisterStartReq,);
-    if (response.statusCode >= HttpStatus.badRequest) {
-      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
-    }
-    // When a remote server returns no body with a status of 204, we shall not decode it.
-    // At the time of writing this, `dart:convert` will throw an "Unexpected end of input"
-    // FormatException when trying to decode an empty string.
-    if (response.body.isNotEmpty && response.statusCode != HttpStatus.noContent) {
-      return await apiClient.deserializeAsync(await _decodeBodyBytes(response), 'EmailCodeRegisterStartRsp',) as EmailCodeRegisterStartRsp;
-    
-    }
-    return null;
-  }
-
-  /// Performs email OTP login status check
-  ///
-  /// Note: This method returns the HTTP [Response].
-  ///
-  /// Parameters:
-  ///
-  /// * [EmailCodeStatusReq] emailCodeStatusReq (required):
-  Future<Response> emailCodeStatusWithHttpInfo(EmailCodeStatusReq emailCodeStatusReq,) async {
-    // ignore: prefer_const_declarations
-    final path = r'/v1/users/emailcodes/status';
-
-    // ignore: prefer_final_locals
-    Object? postBody = emailCodeStatusReq;
-
-    final queryParams = <QueryParam>[];
-    final headerParams = <String, String>{};
-    final formParams = <String, String>{};
-
-    const contentTypes = <String>['application/json'];
-
-
-    return apiClient.invokeAPI(
-      path,
-      'POST',
-      queryParams,
-      postBody,
-      headerParams,
-      formParams,
-      contentTypes.isEmpty ? null : contentTypes.first,
-    );
-  }
-
-  /// Performs email OTP login status check
-  ///
-  /// Parameters:
-  ///
-  /// * [EmailCodeStatusReq] emailCodeStatusReq (required):
-  Future<EmailCodeStatusRsp?> emailCodeStatus(EmailCodeStatusReq emailCodeStatusReq,) async {
-    final response = await emailCodeStatusWithHttpInfo(emailCodeStatusReq,);
-    if (response.statusCode >= HttpStatus.badRequest) {
-      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
-    }
-    // When a remote server returns no body with a status of 204, we shall not decode it.
-    // At the time of writing this, `dart:convert` will throw an "Unexpected end of input"
-    // FormatException when trying to decode an empty string.
-    if (response.body.isNotEmpty && response.statusCode != HttpStatus.noContent) {
-      return await apiClient.deserializeAsync(await _decodeBodyBytes(response), 'EmailCodeStatusRsp',) as EmailCodeStatusRsp;
-    
-    }
-    return null;
-  }
-
-  /// Performs email link register confirm
-  ///
-  /// Note: This method returns the HTTP [Response].
-  ///
-  /// Parameters:
-  ///
-  /// * [EmailLinkConfirmReq] emailLinkConfirmReq (required):
-  Future<Response> emailLinkConfirmWithHttpInfo(EmailLinkConfirmReq emailLinkConfirmReq,) async {
-    // ignore: prefer_const_declarations
-    final path = r'/v1/users/emaillinks/confirm';
-
-    // ignore: prefer_final_locals
-    Object? postBody = emailLinkConfirmReq;
-
-    final queryParams = <QueryParam>[];
-    final headerParams = <String, String>{};
-    final formParams = <String, String>{};
-
-    const contentTypes = <String>['application/json'];
-
-
-    return apiClient.invokeAPI(
-      path,
-      'POST',
-      queryParams,
-      postBody,
-      headerParams,
-      formParams,
-      contentTypes.isEmpty ? null : contentTypes.first,
-    );
-  }
-
-  /// Performs email link register confirm
-  ///
-  /// Parameters:
-  ///
-  /// * [EmailLinkConfirmReq] emailLinkConfirmReq (required):
-  Future<EmailLinkConfirmRsp?> emailLinkConfirm(EmailLinkConfirmReq emailLinkConfirmReq,) async {
-    final response = await emailLinkConfirmWithHttpInfo(emailLinkConfirmReq,);
-    if (response.statusCode >= HttpStatus.badRequest) {
-      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
-    }
-    // When a remote server returns no body with a status of 204, we shall not decode it.
-    // At the time of writing this, `dart:convert` will throw an "Unexpected end of input"
-    // FormatException when trying to decode an empty string.
-    if (response.body.isNotEmpty && response.statusCode != HttpStatus.noContent) {
-      return await apiClient.deserializeAsync(await _decodeBodyBytes(response), 'EmailLinkConfirmRsp',) as EmailLinkConfirmRsp;
-    
-    }
-    return null;
-  }
-
-  /// Performs email link login start
-  ///
-  /// Note: This method returns the HTTP [Response].
-  ///
-  /// Parameters:
-  ///
-  /// * [EmailLinkLoginStartReq] emailLinkLoginStartReq (required):
-  Future<Response> emailLinkLoginStartWithHttpInfo(EmailLinkLoginStartReq emailLinkLoginStartReq,) async {
-    // ignore: prefer_const_declarations
-    final path = r'/v1/users/emaillinks/login/start';
-
-    // ignore: prefer_final_locals
-    Object? postBody = emailLinkLoginStartReq;
-
-    final queryParams = <QueryParam>[];
-    final headerParams = <String, String>{};
-    final formParams = <String, String>{};
-
-    const contentTypes = <String>['application/json'];
-
-
-    return apiClient.invokeAPI(
-      path,
-      'POST',
-      queryParams,
-      postBody,
-      headerParams,
-      formParams,
-      contentTypes.isEmpty ? null : contentTypes.first,
-    );
-  }
-
-  /// Performs email link login start
-  ///
-  /// Parameters:
-  ///
-  /// * [EmailLinkLoginStartReq] emailLinkLoginStartReq (required):
-  Future<EmailLinkLoginStartRsp?> emailLinkLoginStart(EmailLinkLoginStartReq emailLinkLoginStartReq,) async {
-    final response = await emailLinkLoginStartWithHttpInfo(emailLinkLoginStartReq,);
-    if (response.statusCode >= HttpStatus.badRequest) {
-      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
-    }
-    // When a remote server returns no body with a status of 204, we shall not decode it.
-    // At the time of writing this, `dart:convert` will throw an "Unexpected end of input"
-    // FormatException when trying to decode an empty string.
-    if (response.body.isNotEmpty && response.statusCode != HttpStatus.noContent) {
-      return await apiClient.deserializeAsync(await _decodeBodyBytes(response), 'EmailLinkLoginStartRsp',) as EmailLinkLoginStartRsp;
-    
-    }
-    return null;
-  }
-
-  /// Performs email link register start
-  ///
-  /// Note: This method returns the HTTP [Response].
-  ///
-  /// Parameters:
-  ///
-  /// * [EmailLinkRegisterStartReq] emailLinkRegisterStartReq (required):
-  Future<Response> emailLinkRegisterStartWithHttpInfo(EmailLinkRegisterStartReq emailLinkRegisterStartReq,) async {
-    // ignore: prefer_const_declarations
-    final path = r'/v1/users/emaillinks/register/start';
-
-    // ignore: prefer_final_locals
-    Object? postBody = emailLinkRegisterStartReq;
-
-    final queryParams = <QueryParam>[];
-    final headerParams = <String, String>{};
-    final formParams = <String, String>{};
-
-    const contentTypes = <String>['application/json'];
-
-
-    return apiClient.invokeAPI(
-      path,
-      'POST',
-      queryParams,
-      postBody,
-      headerParams,
-      formParams,
-      contentTypes.isEmpty ? null : contentTypes.first,
-    );
-  }
-
-  /// Performs email link register start
-  ///
-  /// Parameters:
-  ///
-  /// * [EmailLinkRegisterStartReq] emailLinkRegisterStartReq (required):
-  Future<EmailLinkRegisterStartRsp?> emailLinkRegisterStart(EmailLinkRegisterStartReq emailLinkRegisterStartReq,) async {
-    final response = await emailLinkRegisterStartWithHttpInfo(emailLinkRegisterStartReq,);
-    if (response.statusCode >= HttpStatus.badRequest) {
-      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
-    }
-    // When a remote server returns no body with a status of 204, we shall not decode it.
-    // At the time of writing this, `dart:convert` will throw an "Unexpected end of input"
-    // FormatException when trying to decode an empty string.
-    if (response.body.isNotEmpty && response.statusCode != HttpStatus.noContent) {
-      return await apiClient.deserializeAsync(await _decodeBodyBytes(response), 'EmailLinkRegisterStartRsp',) as EmailLinkRegisterStartRsp;
-    
-    }
-    return null;
-  }
-
-  /// Performs email link login status check
-  ///
-  /// Note: This method returns the HTTP [Response].
-  ///
-  /// Parameters:
-  ///
-  /// * [EmailLinkStatusReq] emailLinkStatusReq (required):
-  Future<Response> emailLinkStatusWithHttpInfo(EmailLinkStatusReq emailLinkStatusReq,) async {
-    // ignore: prefer_const_declarations
-    final path = r'/v1/users/emaillinks/status';
-
-    // ignore: prefer_final_locals
-    Object? postBody = emailLinkStatusReq;
-
-    final queryParams = <QueryParam>[];
-    final headerParams = <String, String>{};
-    final formParams = <String, String>{};
-
-    const contentTypes = <String>['application/json'];
-
-
-    return apiClient.invokeAPI(
-      path,
-      'POST',
-      queryParams,
-      postBody,
-      headerParams,
-      formParams,
-      contentTypes.isEmpty ? null : contentTypes.first,
-    );
-  }
-
-  /// Performs email link login status check
-  ///
-  /// Parameters:
-  ///
-  /// * [EmailLinkStatusReq] emailLinkStatusReq (required):
-  Future<EmailLinkStatusRsp?> emailLinkStatus(EmailLinkStatusReq emailLinkStatusReq,) async {
-    final response = await emailLinkStatusWithHttpInfo(emailLinkStatusReq,);
-    if (response.statusCode >= HttpStatus.badRequest) {
-      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
-    }
-    // When a remote server returns no body with a status of 204, we shall not decode it.
-    // At the time of writing this, `dart:convert` will throw an "Unexpected end of input"
-    // FormatException when trying to decode an empty string.
-    if (response.body.isNotEmpty && response.statusCode != HttpStatus.noContent) {
-      return await apiClient.deserializeAsync(await _decodeBodyBytes(response), 'EmailLinkStatusRsp',) as EmailLinkStatusRsp;
-    
-    }
-    return null;
-  }
-
-  /// Performs login for given token
-  ///
-  /// Note: This method returns the HTTP [Response].
-  ///
-  /// Parameters:
-  ///
-  /// * [LoginTokenReq] loginTokenReq (required):
-  Future<Response> loginTokenWithHttpInfo(LoginTokenReq loginTokenReq,) async {
-    // ignore: prefer_const_declarations
-    final path = r'/v1/users/logintoken';
-
-    // ignore: prefer_final_locals
-    Object? postBody = loginTokenReq;
-
-    final queryParams = <QueryParam>[];
-    final headerParams = <String, String>{};
-    final formParams = <String, String>{};
-
-    const contentTypes = <String>['application/json'];
-
-
-    return apiClient.invokeAPI(
-      path,
-      'POST',
-      queryParams,
-      postBody,
-      headerParams,
-      formParams,
-      contentTypes.isEmpty ? null : contentTypes.first,
-    );
-  }
-
-  /// Performs login for given token
-  ///
-  /// Parameters:
-  ///
-  /// * [LoginTokenReq] loginTokenReq (required):
-  Future<LoginTokenRsp?> loginToken(LoginTokenReq loginTokenReq,) async {
-    final response = await loginTokenWithHttpInfo(loginTokenReq,);
-    if (response.statusCode >= HttpStatus.badRequest) {
-      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
-    }
-    // When a remote server returns no body with a status of 204, we shall not decode it.
-    // At the time of writing this, `dart:convert` will throw an "Unexpected end of input"
-    // FormatException when trying to decode an empty string.
-    if (response.body.isNotEmpty && response.statusCode != HttpStatus.noContent) {
-      return await apiClient.deserializeAsync(await _decodeBodyBytes(response), 'LoginTokenRsp',) as LoginTokenRsp;
-    
-    }
-    return null;
-  }
-
-  /// Performs passkey append finish
-  ///
-  /// Note: This method returns the HTTP [Response].
-  ///
-  /// Parameters:
-  ///
-  /// * [PassKeyFinishReq] passKeyFinishReq (required):
-  Future<Response> passKeyAppendFinishWithHttpInfo(PassKeyFinishReq passKeyFinishReq,) async {
-    // ignore: prefer_const_declarations
-    final path = r'/v1/users/passkey/append/finish';
-
-    // ignore: prefer_final_locals
-    Object? postBody = passKeyFinishReq;
-
-    final queryParams = <QueryParam>[];
-    final headerParams = <String, String>{};
-    final formParams = <String, String>{};
-
-    const contentTypes = <String>['application/json'];
-
-
-    return apiClient.invokeAPI(
-      path,
-      'POST',
-      queryParams,
-      postBody,
-      headerParams,
-      formParams,
-      contentTypes.isEmpty ? null : contentTypes.first,
-    );
-  }
-
-  /// Performs passkey append finish
-  ///
-  /// Parameters:
-  ///
-  /// * [PassKeyFinishReq] passKeyFinishReq (required):
-  Future<PassKeyAppendFinishRsp?> passKeyAppendFinish(PassKeyFinishReq passKeyFinishReq,) async {
-    final response = await passKeyAppendFinishWithHttpInfo(passKeyFinishReq,);
-    if (response.statusCode >= HttpStatus.badRequest) {
-      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
-    }
-    // When a remote server returns no body with a status of 204, we shall not decode it.
-    // At the time of writing this, `dart:convert` will throw an "Unexpected end of input"
-    // FormatException when trying to decode an empty string.
-    if (response.body.isNotEmpty && response.statusCode != HttpStatus.noContent) {
-      return await apiClient.deserializeAsync(await _decodeBodyBytes(response), 'PassKeyAppendFinishRsp',) as PassKeyAppendFinishRsp;
-    
-    }
-    return null;
-  }
-
-  /// Performs passkey append start
-  ///
-  /// Note: This method returns the HTTP [Response].
-  ///
-  /// Parameters:
-  ///
-  /// * [EmptyReq] emptyReq (required):
-  Future<Response> passKeyAppendStartWithHttpInfo(EmptyReq emptyReq,) async {
-    // ignore: prefer_const_declarations
-    final path = r'/v1/users/passkey/append/start';
-
-    // ignore: prefer_final_locals
-    Object? postBody = emptyReq;
-
-    final queryParams = <QueryParam>[];
-    final headerParams = <String, String>{};
-    final formParams = <String, String>{};
-
-    const contentTypes = <String>['application/json'];
-
-
-    return apiClient.invokeAPI(
-      path,
-      'POST',
-      queryParams,
-      postBody,
-      headerParams,
-      formParams,
-      contentTypes.isEmpty ? null : contentTypes.first,
-    );
-  }
-
-  /// Performs passkey append start
-  ///
-  /// Parameters:
-  ///
-  /// * [EmptyReq] emptyReq (required):
-  Future<PassKeyStartRsp?> passKeyAppendStart(EmptyReq emptyReq,) async {
-    final response = await passKeyAppendStartWithHttpInfo(emptyReq,);
-    if (response.statusCode >= HttpStatus.badRequest) {
-      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
-    }
-    // When a remote server returns no body with a status of 204, we shall not decode it.
-    // At the time of writing this, `dart:convert` will throw an "Unexpected end of input"
-    // FormatException when trying to decode an empty string.
-    if (response.body.isNotEmpty && response.statusCode != HttpStatus.noContent) {
-      return await apiClient.deserializeAsync(await _decodeBodyBytes(response), 'PassKeyStartRsp',) as PassKeyStartRsp;
-    
-    }
-    return null;
-  }
-
-  /// Performs passkey associate start
-  ///
-  /// Note: This method returns the HTTP [Response].
-  ///
-  /// Parameters:
-  ///
-  /// * [PassKeyAssociateStartReq] passKeyAssociateStartReq (required):
-  Future<Response> passKeyAssociateStartWithHttpInfo(PassKeyAssociateStartReq passKeyAssociateStartReq,) async {
-    // ignore: prefer_const_declarations
-    final path = r'/v1/users/passkey/associate/start';
-
-    // ignore: prefer_final_locals
-    Object? postBody = passKeyAssociateStartReq;
-
-    final queryParams = <QueryParam>[];
-    final headerParams = <String, String>{};
-    final formParams = <String, String>{};
-
-    const contentTypes = <String>['application/json'];
-
-
-    return apiClient.invokeAPI(
-      path,
-      'POST',
-      queryParams,
-      postBody,
-      headerParams,
-      formParams,
-      contentTypes.isEmpty ? null : contentTypes.first,
-    );
-  }
-
-  /// Performs passkey associate start
-  ///
-  /// Parameters:
-  ///
-  /// * [PassKeyAssociateStartReq] passKeyAssociateStartReq (required):
-  Future<PassKeyStartRsp?> passKeyAssociateStart(PassKeyAssociateStartReq passKeyAssociateStartReq,) async {
-    final response = await passKeyAssociateStartWithHttpInfo(passKeyAssociateStartReq,);
-    if (response.statusCode >= HttpStatus.badRequest) {
-      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
-    }
-    // When a remote server returns no body with a status of 204, we shall not decode it.
-    // At the time of writing this, `dart:convert` will throw an "Unexpected end of input"
-    // FormatException when trying to decode an empty string.
-    if (response.body.isNotEmpty && response.statusCode != HttpStatus.noContent) {
-      return await apiClient.deserializeAsync(await _decodeBodyBytes(response), 'PassKeyStartRsp',) as PassKeyStartRsp;
-    
-    }
-    return null;
-  }
-
-  /// Checks if active passkey credential exists for provided user and device
-  ///
-  /// Note: This method returns the HTTP [Response].
-  ///
-  /// Parameters:
-  ///
-  /// * [PassKeyCredentialExistsReq] passKeyCredentialExistsReq (required):
-  Future<Response> passKeyCredentialExistsWithHttpInfo(PassKeyCredentialExistsReq passKeyCredentialExistsReq,) async {
-    // ignore: prefer_const_declarations
-    final path = r'/v1/users/device/passkey';
-
-    // ignore: prefer_final_locals
-    Object? postBody = passKeyCredentialExistsReq;
-
-    final queryParams = <QueryParam>[];
-    final headerParams = <String, String>{};
-    final formParams = <String, String>{};
-
-    const contentTypes = <String>['application/json'];
-
-
-    return apiClient.invokeAPI(
-      path,
-      'POST',
-      queryParams,
-      postBody,
-      headerParams,
-      formParams,
-      contentTypes.isEmpty ? null : contentTypes.first,
-    );
-  }
-
-  /// Checks if active passkey credential exists for provided user and device
-  ///
-  /// Parameters:
-  ///
-  /// * [PassKeyCredentialExistsReq] passKeyCredentialExistsReq (required):
-  Future<PassKeyCredentialExistsRsp?> passKeyCredentialExists(PassKeyCredentialExistsReq passKeyCredentialExistsReq,) async {
-    final response = await passKeyCredentialExistsWithHttpInfo(passKeyCredentialExistsReq,);
-    if (response.statusCode >= HttpStatus.badRequest) {
-      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
-    }
-    // When a remote server returns no body with a status of 204, we shall not decode it.
-    // At the time of writing this, `dart:convert` will throw an "Unexpected end of input"
-    // FormatException when trying to decode an empty string.
-    if (response.body.isNotEmpty && response.statusCode != HttpStatus.noContent) {
-      return await apiClient.deserializeAsync(await _decodeBodyBytes(response), 'PassKeyCredentialExistsRsp',) as PassKeyCredentialExistsRsp;
-    
-    }
-    return null;
-  }
-
-  /// Performs passkey login finish
-  ///
-  /// Note: This method returns the HTTP [Response].
-  ///
-  /// Parameters:
-  ///
-  /// * [PassKeyFinishReq] passKeyFinishReq (required):
-  Future<Response> passKeyLoginFinishWithHttpInfo(PassKeyFinishReq passKeyFinishReq,) async {
-    // ignore: prefer_const_declarations
-    final path = r'/v1/users/passkey/login/finish';
-
-    // ignore: prefer_final_locals
-    Object? postBody = passKeyFinishReq;
-
-    final queryParams = <QueryParam>[];
-    final headerParams = <String, String>{};
-    final formParams = <String, String>{};
-
-    const contentTypes = <String>['application/json'];
-
-
-    return apiClient.invokeAPI(
-      path,
-      'POST',
-      queryParams,
-      postBody,
-      headerParams,
-      formParams,
-      contentTypes.isEmpty ? null : contentTypes.first,
-    );
-  }
-
-  /// Performs passkey login finish
-  ///
-  /// Parameters:
-  ///
-  /// * [PassKeyFinishReq] passKeyFinishReq (required):
-  Future<PassKeyLoginFinishRsp?> passKeyLoginFinish(PassKeyFinishReq passKeyFinishReq,) async {
-    final response = await passKeyLoginFinishWithHttpInfo(passKeyFinishReq,);
-    if (response.statusCode >= HttpStatus.badRequest) {
-      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
-    }
-    // When a remote server returns no body with a status of 204, we shall not decode it.
-    // At the time of writing this, `dart:convert` will throw an "Unexpected end of input"
-    // FormatException when trying to decode an empty string.
-    if (response.body.isNotEmpty && response.statusCode != HttpStatus.noContent) {
-      return await apiClient.deserializeAsync(await _decodeBodyBytes(response), 'PassKeyLoginFinishRsp',) as PassKeyLoginFinishRsp;
-    
-    }
-    return null;
-  }
-
-  /// Performs passkey login start
-  ///
-  /// Note: This method returns the HTTP [Response].
-  ///
-  /// Parameters:
-  ///
-  /// * [PassKeyLoginStartReq] passKeyLoginStartReq (required):
-  Future<Response> passKeyLoginStartWithHttpInfo(PassKeyLoginStartReq passKeyLoginStartReq,) async {
-    // ignore: prefer_const_declarations
-    final path = r'/v1/users/passkey/login/start';
-
-    // ignore: prefer_final_locals
-    Object? postBody = passKeyLoginStartReq;
-
-    final queryParams = <QueryParam>[];
-    final headerParams = <String, String>{};
-    final formParams = <String, String>{};
-
-    const contentTypes = <String>['application/json'];
-
-
-    return apiClient.invokeAPI(
-      path,
-      'POST',
-      queryParams,
-      postBody,
-      headerParams,
-      formParams,
-      contentTypes.isEmpty ? null : contentTypes.first,
-    );
-  }
-
-  /// Performs passkey login start
-  ///
-  /// Parameters:
-  ///
-  /// * [PassKeyLoginStartReq] passKeyLoginStartReq (required):
-  Future<PassKeyStartRsp?> passKeyLoginStart(PassKeyLoginStartReq passKeyLoginStartReq,) async {
-    final response = await passKeyLoginStartWithHttpInfo(passKeyLoginStartReq,);
-    if (response.statusCode >= HttpStatus.badRequest) {
-      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
-    }
-    // When a remote server returns no body with a status of 204, we shall not decode it.
-    // At the time of writing this, `dart:convert` will throw an "Unexpected end of input"
-    // FormatException when trying to decode an empty string.
-    if (response.body.isNotEmpty && response.statusCode != HttpStatus.noContent) {
-      return await apiClient.deserializeAsync(await _decodeBodyBytes(response), 'PassKeyStartRsp',) as PassKeyStartRsp;
-    
-    }
-    return null;
-  }
-
-  /// Performs passkey mediation start
-  ///
-  /// Note: This method returns the HTTP [Response].
-  ///
-  /// Parameters:
-  ///
-  /// * [PassKeyMediationStartReq] passKeyMediationStartReq (required):
-  Future<Response> passKeyMediationStartWithHttpInfo(PassKeyMediationStartReq passKeyMediationStartReq,) async {
-    // ignore: prefer_const_declarations
-    final path = r'/v1/users/passkey/mediation/start';
-
-    // ignore: prefer_final_locals
-    Object? postBody = passKeyMediationStartReq;
-
-    final queryParams = <QueryParam>[];
-    final headerParams = <String, String>{};
-    final formParams = <String, String>{};
-
-    const contentTypes = <String>['application/json'];
-
-
-    return apiClient.invokeAPI(
-      path,
-      'POST',
-      queryParams,
-      postBody,
-      headerParams,
-      formParams,
-      contentTypes.isEmpty ? null : contentTypes.first,
-    );
-  }
-
-  /// Performs passkey mediation start
-  ///
-  /// Parameters:
-  ///
-  /// * [PassKeyMediationStartReq] passKeyMediationStartReq (required):
-  Future<PassKeyMediationStartRsp?> passKeyMediationStart(PassKeyMediationStartReq passKeyMediationStartReq,) async {
-    final response = await passKeyMediationStartWithHttpInfo(passKeyMediationStartReq,);
-    if (response.statusCode >= HttpStatus.badRequest) {
-      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
-    }
-    // When a remote server returns no body with a status of 204, we shall not decode it.
-    // At the time of writing this, `dart:convert` will throw an "Unexpected end of input"
-    // FormatException when trying to decode an empty string.
-    if (response.body.isNotEmpty && response.statusCode != HttpStatus.noContent) {
-      return await apiClient.deserializeAsync(await _decodeBodyBytes(response), 'PassKeyMediationStartRsp',) as PassKeyMediationStartRsp;
-    
-    }
-    return null;
-  }
-
-  /// Performs passkey register finish
-  ///
-  /// Note: This method returns the HTTP [Response].
-  ///
-  /// Parameters:
-  ///
-  /// * [PassKeyFinishReq] passKeyFinishReq (required):
-  Future<Response> passKeyRegisterFinishWithHttpInfo(PassKeyFinishReq passKeyFinishReq,) async {
-    // ignore: prefer_const_declarations
-    final path = r'/v1/users/passkey/register/finish';
-
-    // ignore: prefer_final_locals
-    Object? postBody = passKeyFinishReq;
-
-    final queryParams = <QueryParam>[];
-    final headerParams = <String, String>{};
-    final formParams = <String, String>{};
-
-    const contentTypes = <String>['application/json'];
-
-
-    return apiClient.invokeAPI(
-      path,
-      'POST',
-      queryParams,
-      postBody,
-      headerParams,
-      formParams,
-      contentTypes.isEmpty ? null : contentTypes.first,
-    );
-  }
-
-  /// Performs passkey register finish
-  ///
-  /// Parameters:
-  ///
-  /// * [PassKeyFinishReq] passKeyFinishReq (required):
-  Future<PassKeyRegisterFinishRsp?> passKeyRegisterFinish(PassKeyFinishReq passKeyFinishReq,) async {
-    final response = await passKeyRegisterFinishWithHttpInfo(passKeyFinishReq,);
-    if (response.statusCode >= HttpStatus.badRequest) {
-      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
-    }
-    // When a remote server returns no body with a status of 204, we shall not decode it.
-    // At the time of writing this, `dart:convert` will throw an "Unexpected end of input"
-    // FormatException when trying to decode an empty string.
-    if (response.body.isNotEmpty && response.statusCode != HttpStatus.noContent) {
-      return await apiClient.deserializeAsync(await _decodeBodyBytes(response), 'PassKeyRegisterFinishRsp',) as PassKeyRegisterFinishRsp;
-    
-    }
-    return null;
-  }
-
-  /// Performs passkey register start
-  ///
-  /// Note: This method returns the HTTP [Response].
-  ///
-  /// Parameters:
-  ///
-  /// * [PassKeyRegisterStartReq] passKeyRegisterStartReq (required):
-  Future<Response> passKeyRegisterStartWithHttpInfo(PassKeyRegisterStartReq passKeyRegisterStartReq,) async {
-    // ignore: prefer_const_declarations
-    final path = r'/v1/users/passkey/register/start';
-
-    // ignore: prefer_final_locals
-    Object? postBody = passKeyRegisterStartReq;
-
-    final queryParams = <QueryParam>[];
-    final headerParams = <String, String>{};
-    final formParams = <String, String>{};
-
-    const contentTypes = <String>['application/json'];
-
-
-    return apiClient.invokeAPI(
-      path,
-      'POST',
-      queryParams,
-      postBody,
-      headerParams,
-      formParams,
-      contentTypes.isEmpty ? null : contentTypes.first,
-    );
-  }
-
-  /// Performs passkey register start
-  ///
-  /// Parameters:
-  ///
-  /// * [PassKeyRegisterStartReq] passKeyRegisterStartReq (required):
-  Future<PassKeyStartRsp?> passKeyRegisterStart(PassKeyRegisterStartReq passKeyRegisterStartReq,) async {
-    final response = await passKeyRegisterStartWithHttpInfo(passKeyRegisterStartReq,);
-    if (response.statusCode >= HttpStatus.badRequest) {
-      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
-    }
-    // When a remote server returns no body with a status of 204, we shall not decode it.
-    // At the time of writing this, `dart:convert` will throw an "Unexpected end of input"
-    // FormatException when trying to decode an empty string.
-    if (response.body.isNotEmpty && response.statusCode != HttpStatus.noContent) {
-      return await apiClient.deserializeAsync(await _decodeBodyBytes(response), 'PassKeyStartRsp',) as PassKeyStartRsp;
-    
-    }
-    return null;
-  }
-
-  /// Performs password verify
-  ///
-  /// Note: This method returns the HTTP [Response].
-  ///
-  /// Parameters:
-  ///
-  /// * [PasswordVerifyReq] passwordVerifyReq (required):
-  Future<Response> passwordWithHttpInfo(PasswordVerifyReq passwordVerifyReq,) async {
-    // ignore: prefer_const_declarations
-    final path = r'/v1/users/password/verify';
-
-    // ignore: prefer_final_locals
-    Object? postBody = passwordVerifyReq;
-
-    final queryParams = <QueryParam>[];
-    final headerParams = <String, String>{};
-    final formParams = <String, String>{};
-
-    const contentTypes = <String>['application/json'];
-
-
-    return apiClient.invokeAPI(
-      path,
-      'POST',
-      queryParams,
-      postBody,
-      headerParams,
-      formParams,
-      contentTypes.isEmpty ? null : contentTypes.first,
-    );
-  }
-
-  /// Performs password verify
-  ///
-  /// Parameters:
-  ///
-  /// * [PasswordVerifyReq] passwordVerifyReq (required):
-  Future<PasswordVerifyRsp?> password(PasswordVerifyReq passwordVerifyReq,) async {
-    final response = await passwordWithHttpInfo(passwordVerifyReq,);
-    if (response.statusCode >= HttpStatus.badRequest) {
-      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
-    }
-    // When a remote server returns no body with a status of 204, we shall not decode it.
-    // At the time of writing this, `dart:convert` will throw an "Unexpected end of input"
-    // FormatException when trying to decode an empty string.
-    if (response.body.isNotEmpty && response.statusCode != HttpStatus.noContent) {
-      return await apiClient.deserializeAsync(await _decodeBodyBytes(response), 'PasswordVerifyRsp',) as PasswordVerifyRsp;
-    
-    }
-    return null;
-  }
-}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/api_client.dart b/packages/corbado_api_client/lib/frontendapi/lib/api_client.dart
deleted file mode 100644
index b58edb2..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/api_client.dart
+++ /dev/null
@@ -1,424 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class ApiClient {
-  ApiClient({this.basePath = 'https://<project ID>.frontendapi.corbado.io', this.authentication,});
-
-  final String basePath;
-  final Authentication? authentication;
-
-  var _client = Client();
-  final _defaultHeaderMap = <String, String>{};
-
-  /// Returns the current HTTP [Client] instance to use in this class.
-  ///
-  /// The return value is guaranteed to never be null.
-  Client get client => _client;
-
-  /// Requests to use a new HTTP [Client] in this class.
-  set client(Client newClient) {
-    _client = newClient;
-  }
-
-  Map<String, String> get defaultHeaderMap => _defaultHeaderMap;
-
-  void addDefaultHeader(String key, String value) {
-     _defaultHeaderMap[key] = value;
-  }
-
-  // We don't use a Map<String, String> for queryParams.
-  // If collectionFormat is 'multi', a key might appear multiple times.
-  Future<Response> invokeAPI(
-    String path,
-    String method,
-    List<QueryParam> queryParams,
-    Object? body,
-    Map<String, String> headerParams,
-    Map<String, String> formParams,
-    String? contentType,
-  ) async {
-    await authentication?.applyToParams(queryParams, headerParams);
-
-    headerParams.addAll(_defaultHeaderMap);
-    if (contentType != null) {
-      headerParams['Content-Type'] = contentType;
-    }
-
-    final urlEncodedQueryParams = queryParams.map((param) => '$param');
-    final queryString = urlEncodedQueryParams.isNotEmpty ? '?${urlEncodedQueryParams.join('&')}' : '';
-    final uri = Uri.parse('$basePath$path$queryString');
-
-    try {
-      // Special case for uploading a single file which isn't a 'multipart/form-data'.
-      if (
-        body is MultipartFile && (contentType == null ||
-        !contentType.toLowerCase().startsWith('multipart/form-data'))
-      ) {
-        final request = StreamedRequest(method, uri);
-        request.headers.addAll(headerParams);
-        request.contentLength = body.length;
-        body.finalize().listen(
-          request.sink.add,
-          onDone: request.sink.close,
-          // ignore: avoid_types_on_closure_parameters
-          onError: (Object error, StackTrace trace) => request.sink.close(),
-          cancelOnError: true,
-        );
-        final response = await _client.send(request);
-        return Response.fromStream(response);
-      }
-
-      if (body is MultipartRequest) {
-        final request = MultipartRequest(method, uri);
-        request.fields.addAll(body.fields);
-        request.files.addAll(body.files);
-        request.headers.addAll(body.headers);
-        request.headers.addAll(headerParams);
-        final response = await _client.send(request);
-        return Response.fromStream(response);
-      }
-
-      final msgBody = contentType == 'application/x-www-form-urlencoded'
-        ? formParams
-        : await serializeAsync(body);
-      final nullableHeaderParams = headerParams.isEmpty ? null : headerParams;
-
-      switch(method) {
-        case 'POST': return await _client.post(uri, headers: nullableHeaderParams, body: msgBody,);
-        case 'PUT': return await _client.put(uri, headers: nullableHeaderParams, body: msgBody,);
-        case 'DELETE': return await _client.delete(uri, headers: nullableHeaderParams, body: msgBody,);
-        case 'PATCH': return await _client.patch(uri, headers: nullableHeaderParams, body: msgBody,);
-        case 'HEAD': return await _client.head(uri, headers: nullableHeaderParams,);
-        case 'GET': return await _client.get(uri, headers: nullableHeaderParams,);
-      }
-    } on SocketException catch (error, trace) {
-      throw ApiException.withInner(
-        HttpStatus.badRequest,
-        'Socket operation failed: $method $path',
-        error,
-        trace,
-      );
-    } on TlsException catch (error, trace) {
-      throw ApiException.withInner(
-        HttpStatus.badRequest,
-        'TLS/SSL communication failed: $method $path',
-        error,
-        trace,
-      );
-    } on IOException catch (error, trace) {
-      throw ApiException.withInner(
-        HttpStatus.badRequest,
-        'I/O operation failed: $method $path',
-        error,
-        trace,
-      );
-    } on ClientException catch (error, trace) {
-      throw ApiException.withInner(
-        HttpStatus.badRequest,
-        'HTTP connection failed: $method $path',
-        error,
-        trace,
-      );
-    } on Exception catch (error, trace) {
-      throw ApiException.withInner(
-        HttpStatus.badRequest,
-        'Exception occurred: $method $path',
-        error,
-        trace,
-      );
-    }
-
-    throw ApiException(
-      HttpStatus.badRequest,
-      'Invalid HTTP operation: $method $path',
-    );
-  }
-
-  Future<dynamic> deserializeAsync(String json, String targetType, {bool growable = false,}) async =>
-    // ignore: deprecated_member_use_from_same_package
-    deserialize(json, targetType, growable: growable);
-
-  @Deprecated('Scheduled for removal in OpenAPI Generator 6.x. Use deserializeAsync() instead.')
-  dynamic deserialize(String json, String targetType, {bool growable = false,}) {
-    // Remove all spaces. Necessary for regular expressions as well.
-    targetType = targetType.replaceAll(' ', ''); // ignore: parameter_assignments
-
-    // If the expected target type is String, nothing to do...
-    return targetType == 'String'
-      ? json
-      : _deserialize(jsonDecode(json), targetType, growable: growable);
-  }
-
-  // ignore: deprecated_member_use_from_same_package
-  Future<String> serializeAsync(Object? value) async => serialize(value);
-
-  @Deprecated('Scheduled for removal in OpenAPI Generator 6.x. Use serializeAsync() instead.')
-  String serialize(Object? value) => value == null ? '' : json.encode(value);
-
-  static dynamic _deserialize(dynamic value, String targetType, {bool growable = false}) {
-    try {
-      switch (targetType) {
-        case 'String':
-          return value is String ? value : value.toString();
-        case 'int':
-          return value is int ? value : int.parse('$value');
-        case 'double':
-          return value is double ? value : double.parse('$value');
-        case 'bool':
-          if (value is bool) {
-            return value;
-          }
-          final valueString = '$value'.toLowerCase();
-          return valueString == 'true' || valueString == '1';
-        case 'DateTime':
-          return value is DateTime ? value : DateTime.tryParse(value);
-        case 'AppleAppSiteAssociationRsp':
-          return AppleAppSiteAssociationRsp.fromJson(value);
-        case 'AppleAppSiteAssociationRspApplinks':
-          return AppleAppSiteAssociationRspApplinks.fromJson(value);
-        case 'AppleAppSiteAssociationRspApplinksDetailsInner':
-          return AppleAppSiteAssociationRspApplinksDetailsInner.fromJson(value);
-        case 'AppleAppSiteAssociationRspWebcredentials':
-          return AppleAppSiteAssociationRspWebcredentials.fromJson(value);
-        case 'AssetLink':
-          return AssetLink.fromJson(value);
-        case 'AssetLinkTarget':
-          return AssetLinkTarget.fromJson(value);
-        case 'AuthMethod':
-          return AuthMethodTypeTransformer().decode(value);
-        case 'AuthMethodsListReq':
-          return AuthMethodsListReq.fromJson(value);
-        case 'AuthMethodsListRsp':
-          return AuthMethodsListRsp.fromJson(value);
-        case 'AuthMethodsListRspAllOf':
-          return AuthMethodsListRspAllOf.fromJson(value);
-        case 'AuthMethodsListRspAllOfData':
-          return AuthMethodsListRspAllOfData.fromJson(value);
-        case 'AuthenticationRsp':
-          return AuthenticationRsp.fromJson(value);
-        case 'EmailCodeConfirmReq':
-          return EmailCodeConfirmReq.fromJson(value);
-        case 'EmailCodeConfirmRsp':
-          return EmailCodeConfirmRsp.fromJson(value);
-        case 'EmailCodeLoginStartReq':
-          return EmailCodeLoginStartReq.fromJson(value);
-        case 'EmailCodeLoginStartRsp':
-          return EmailCodeLoginStartRsp.fromJson(value);
-        case 'EmailCodeRegisterStartReq':
-          return EmailCodeRegisterStartReq.fromJson(value);
-        case 'EmailCodeRegisterStartRsp':
-          return EmailCodeRegisterStartRsp.fromJson(value);
-        case 'EmailCodeRegisterStartRspAllOf':
-          return EmailCodeRegisterStartRspAllOf.fromJson(value);
-        case 'EmailCodeRegisterStartRspAllOfData':
-          return EmailCodeRegisterStartRspAllOfData.fromJson(value);
-        case 'EmailCodeStatusReq':
-          return EmailCodeStatusReq.fromJson(value);
-        case 'EmailCodeStatusRsp':
-          return EmailCodeStatusRsp.fromJson(value);
-        case 'EmailLinkConfirmReq':
-          return EmailLinkConfirmReq.fromJson(value);
-        case 'EmailLinkConfirmRsp':
-          return EmailLinkConfirmRsp.fromJson(value);
-        case 'EmailLinkConfirmRspAllOf':
-          return EmailLinkConfirmRspAllOf.fromJson(value);
-        case 'EmailLinkConfirmRspAllOfData':
-          return EmailLinkConfirmRspAllOfData.fromJson(value);
-        case 'EmailLinkConfirmRspAllOfDataAllOf':
-          return EmailLinkConfirmRspAllOfDataAllOf.fromJson(value);
-        case 'EmailLinkLoginStartReq':
-          return EmailLinkLoginStartReq.fromJson(value);
-        case 'EmailLinkLoginStartRsp':
-          return EmailLinkLoginStartRsp.fromJson(value);
-        case 'EmailLinkRegisterStartReq':
-          return EmailLinkRegisterStartReq.fromJson(value);
-        case 'EmailLinkRegisterStartRsp':
-          return EmailLinkRegisterStartRsp.fromJson(value);
-        case 'EmailLinkRegisterStartRspAllOf':
-          return EmailLinkRegisterStartRspAllOf.fromJson(value);
-        case 'EmailLinkRegisterStartRspAllOfData':
-          return EmailLinkRegisterStartRspAllOfData.fromJson(value);
-        case 'EmailLinkStatusReq':
-          return EmailLinkStatusReq.fromJson(value);
-        case 'EmailLinkStatusRsp':
-          return EmailLinkStatusRsp.fromJson(value);
-        case 'EmptyReq':
-          return EmptyReq.fromJson(value);
-        case 'ErrorRsp':
-          return ErrorRsp.fromJson(value);
-        case 'ErrorRspAllOf':
-          return ErrorRspAllOf.fromJson(value);
-        case 'ErrorRspAllOfError':
-          return ErrorRspAllOfError.fromJson(value);
-        case 'ErrorRspAllOfErrorValidation':
-          return ErrorRspAllOfErrorValidation.fromJson(value);
-        case 'FullUser':
-          return FullUser.fromJson(value);
-        case 'GenericRsp':
-          return GenericRsp.fromJson(value);
-        case 'Jwk':
-          return Jwk.fromJson(value);
-        case 'LoginIdentifierType':
-          return LoginIdentifierTypeTypeTransformer().decode(value);
-        case 'LoginTokenReq':
-          return LoginTokenReq.fromJson(value);
-        case 'LoginTokenRsp':
-          return LoginTokenRsp.fromJson(value);
-        case 'LogoutRsp':
-          return LogoutRsp.fromJson(value);
-        case 'LogoutRspAllOf':
-          return LogoutRspAllOf.fromJson(value);
-        case 'MePassKeyRsp':
-          return MePassKeyRsp.fromJson(value);
-        case 'MePassKeyRspAllOf':
-          return MePassKeyRspAllOf.fromJson(value);
-        case 'MeRsp':
-          return MeRsp.fromJson(value);
-        case 'MeRspAllOf':
-          return MeRspAllOf.fromJson(value);
-        case 'Paging':
-          return Paging.fromJson(value);
-        case 'PassKeyAppendFinishRsp':
-          return PassKeyAppendFinishRsp.fromJson(value);
-        case 'PassKeyAppendFinishRspAllOf':
-          return PassKeyAppendFinishRspAllOf.fromJson(value);
-        case 'PassKeyAppendFinishRspAllOfData':
-          return PassKeyAppendFinishRspAllOfData.fromJson(value);
-        case 'PassKeyAssociateStartReq':
-          return PassKeyAssociateStartReq.fromJson(value);
-        case 'PassKeyCredentialExistsReq':
-          return PassKeyCredentialExistsReq.fromJson(value);
-        case 'PassKeyCredentialExistsRsp':
-          return PassKeyCredentialExistsRsp.fromJson(value);
-        case 'PassKeyCredentialExistsRspAllOf':
-          return PassKeyCredentialExistsRspAllOf.fromJson(value);
-        case 'PassKeyFinishReq':
-          return PassKeyFinishReq.fromJson(value);
-        case 'PassKeyItem':
-          return PassKeyItem.fromJson(value);
-        case 'PassKeyList':
-          return PassKeyList.fromJson(value);
-        case 'PassKeyLoginFinishRsp':
-          return PassKeyLoginFinishRsp.fromJson(value);
-        case 'PassKeyLoginFinishRspAllOf':
-          return PassKeyLoginFinishRspAllOf.fromJson(value);
-        case 'PassKeyLoginFinishRspAllOfData':
-          return PassKeyLoginFinishRspAllOfData.fromJson(value);
-        case 'PassKeyLoginFinishRspAllOfDataAllOf':
-          return PassKeyLoginFinishRspAllOfDataAllOf.fromJson(value);
-        case 'PassKeyLoginStartReq':
-          return PassKeyLoginStartReq.fromJson(value);
-        case 'PassKeyMediationStartReq':
-          return PassKeyMediationStartReq.fromJson(value);
-        case 'PassKeyMediationStartRsp':
-          return PassKeyMediationStartRsp.fromJson(value);
-        case 'PassKeyMediationStartRspAllOf':
-          return PassKeyMediationStartRspAllOf.fromJson(value);
-        case 'PassKeyMediationStartRspAllOfData':
-          return PassKeyMediationStartRspAllOfData.fromJson(value);
-        case 'PassKeyRegisterFinishRsp':
-          return PassKeyRegisterFinishRsp.fromJson(value);
-        case 'PassKeyRegisterFinishRspAllOf':
-          return PassKeyRegisterFinishRspAllOf.fromJson(value);
-        case 'PassKeyRegisterStartReq':
-          return PassKeyRegisterStartReq.fromJson(value);
-        case 'PassKeyStartRsp':
-          return PassKeyStartRsp.fromJson(value);
-        case 'PassKeyStartRspAllOf':
-          return PassKeyStartRspAllOf.fromJson(value);
-        case 'PassKeyStartRspAllOfData':
-          return PassKeyStartRspAllOfData.fromJson(value);
-        case 'PasswordVerifyReq':
-          return PasswordVerifyReq.fromJson(value);
-        case 'PasswordVerifyRsp':
-          return PasswordVerifyRsp.fromJson(value);
-        case 'ProjectConfigRsp':
-          return ProjectConfigRsp.fromJson(value);
-        case 'ProjectConfigRspAllOf':
-          return ProjectConfigRspAllOf.fromJson(value);
-        case 'ProjectConfigRspAllOfData':
-          return ProjectConfigRspAllOfData.fromJson(value);
-        case 'RequestData':
-          return RequestData.fromJson(value);
-        case 'SessionRefreshRsp':
-          return SessionRefreshRsp.fromJson(value);
-        case 'ShortSession':
-          return ShortSession.fromJson(value);
-        case 'Status':
-          return StatusTypeTransformer().decode(value);
-        case 'UserEmail':
-          return UserEmail.fromJson(value);
-        case 'UserPhoneNumber':
-          return UserPhoneNumber.fromJson(value);
-        case 'WellKnownJWKSListRsp':
-          return WellKnownJWKSListRsp.fromJson(value);
-        default:
-          dynamic match;
-          if (value is List && (match = _regList.firstMatch(targetType)?.group(1)) != null) {
-            return value
-              .map<dynamic>((dynamic v) => _deserialize(v, match, growable: growable,))
-              .toList(growable: growable);
-          }
-          if (value is Set && (match = _regSet.firstMatch(targetType)?.group(1)) != null) {
-            return value
-              .map<dynamic>((dynamic v) => _deserialize(v, match, growable: growable,))
-              .toSet();
-          }
-          if (value is Map && (match = _regMap.firstMatch(targetType)?.group(1)) != null) {
-            return Map<String, dynamic>.fromIterables(
-              value.keys.cast<String>(),
-              value.values.map<dynamic>((dynamic v) => _deserialize(v, match, growable: growable,)),
-            );
-          }
-      }
-    } on Exception catch (error, trace) {
-      throw ApiException.withInner(HttpStatus.internalServerError, 'Exception during deserialization.', error, trace,);
-    }
-    throw ApiException(HttpStatus.internalServerError, 'Could not find a suitable class for deserialization',);
-  }
-}
-
-/// Primarily intended for use in an isolate.
-class DeserializationMessage {
-  const DeserializationMessage({
-    required this.json,
-    required this.targetType,
-    this.growable = false,
-  });
-
-  /// The JSON value to deserialize.
-  final String json;
-
-  /// Target type to deserialize to.
-  final String targetType;
-
-  /// Whether to make deserialized lists or maps growable.
-  final bool growable;
-}
-
-/// Primarily intended for use in an isolate.
-Future<dynamic> deserializeAsync(DeserializationMessage message) async {
-  // Remove all spaces. Necessary for regular expressions as well.
-  final targetType = message.targetType.replaceAll(' ', '');
-
-  // If the expected target type is String, nothing to do...
-  return targetType == 'String'
-    ? message.json
-    : ApiClient._deserialize(
-        jsonDecode(message.json),
-        targetType,
-        growable: message.growable,
-      );
-}
-
-/// Primarily intended for use in an isolate.
-Future<String> serializeAsync(Object? value) async => value == null ? '' : json.encode(value);
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/api_exception.dart b/packages/corbado_api_client/lib/frontendapi/lib/api_exception.dart
deleted file mode 100644
index 796f7f7..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/api_exception.dart
+++ /dev/null
@@ -1,33 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class ApiException implements Exception {
-  ApiException(this.code, this.message);
-
-  ApiException.withInner(this.code, this.message, this.innerException, this.stackTrace);
-
-  int code = 0;
-  String? message;
-  Exception? innerException;
-  StackTrace? stackTrace;
-
-  @override
-  String toString() {
-    if (message == null) {
-      return 'ApiException';
-    }
-    if (innerException == null) {
-      return 'ApiException $code: $message';
-    }
-    return 'ApiException $code: $message (Inner exception: $innerException)\n\n$stackTrace';
-  }
-}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/api_helper.dart b/packages/corbado_api_client/lib/frontendapi/lib/api_helper.dart
deleted file mode 100644
index 65641c9..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/api_helper.dart
+++ /dev/null
@@ -1,110 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class QueryParam {
-  const QueryParam(this.name, this.value);
-
-  final String name;
-  final String value;
-
-  @override
-  String toString() => '${Uri.encodeQueryComponent(name)}=${Uri.encodeQueryComponent(value)}';
-}
-
-// Ported from the Java version.
-Iterable<QueryParam> _queryParams(String collectionFormat, String name, dynamic value,) {
-  // Assertions to run in debug mode only.
-  assert(name.isNotEmpty, 'Parameter cannot be an empty string.');
-
-  final params = <QueryParam>[];
-
-  if (value is List) {
-    if (collectionFormat == 'multi') {
-      return value.map((dynamic v) => QueryParam(name, parameterToString(v)),);
-    }
-
-    // Default collection format is 'csv'.
-    if (collectionFormat.isEmpty) {
-      collectionFormat = 'csv'; // ignore: parameter_assignments
-    }
-
-    final delimiter = _delimiters[collectionFormat] ?? ',';
-
-    params.add(QueryParam(name, value.map<dynamic>(parameterToString).join(delimiter),));
-  } else if (value != null) {
-    params.add(QueryParam(name, parameterToString(value)));
-  }
-
-  return params;
-}
-
-/// Format the given parameter object into a [String].
-String parameterToString(dynamic value) {
-  if (value == null) {
-    return '';
-  }
-  if (value is DateTime) {
-    return value.toUtc().toIso8601String();
-  }
-  if (value is AuthMethod) {
-    return AuthMethodTypeTransformer().encode(value).toString();
-  }
-  if (value is LoginIdentifierType) {
-    return LoginIdentifierTypeTypeTransformer().encode(value).toString();
-  }
-  if (value is Status) {
-    return StatusTypeTransformer().encode(value).toString();
-  }
-  return value.toString();
-}
-
-/// Returns the decoded body as UTF-8 if the given headers indicate an 'application/json'
-/// content type. Otherwise, returns the decoded body as decoded by dart:http package.
-Future<String> _decodeBodyBytes(Response response) async {
-  final contentType = response.headers['content-type'];
-  return contentType != null && contentType.toLowerCase().startsWith('application/json')
-    ? response.bodyBytes.isEmpty ? '' : utf8.decode(response.bodyBytes)
-    : response.body;
-}
-
-/// Returns a valid [T] value found at the specified Map [key], null otherwise.
-T? mapValueOfType<T>(dynamic map, String key) {
-  final dynamic value = map is Map ? map[key] : null;
-  return value is T ? value : null;
-}
-
-/// Returns a valid Map<K, V> found at the specified Map [key], null otherwise.
-Map<K, V>? mapCastOfType<K, V>(dynamic map, String key) {
-  final dynamic value = map is Map ? map[key] : null;
-  return value is Map ? value.cast<K, V>() : null;
-}
-
-/// Returns a valid [DateTime] found at the specified Map [key], null otherwise.
-DateTime? mapDateTime(dynamic map, String key, [String? pattern]) {
-  final dynamic value = map is Map ? map[key] : null;
-  if (value != null) {
-    int? millis;
-    if (value is int) {
-      millis = value;
-    } else if (value is String) {
-      if (pattern == _dateEpochMarker) {
-        millis = int.tryParse(value);
-      } else {
-        return DateTime.tryParse(value);
-      }
-    }
-    if (millis != null) {
-      return DateTime.fromMillisecondsSinceEpoch(millis, isUtc: true);
-    }
-  }
-  return null;
-}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/auth/api_key_auth.dart b/packages/corbado_api_client/lib/frontendapi/lib/auth/api_key_auth.dart
deleted file mode 100644
index 84dc295..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/auth/api_key_auth.dart
+++ /dev/null
@@ -1,40 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class ApiKeyAuth implements Authentication {
-  ApiKeyAuth(this.location, this.paramName);
-
-  final String location;
-  final String paramName;
-
-  String apiKeyPrefix = '';
-  String apiKey = '';
-
-  @override
-  Future<void> applyToParams(List<QueryParam> queryParams, Map<String, String> headerParams,) async {
-    final paramValue = apiKeyPrefix.isEmpty ? apiKey : '$apiKeyPrefix $apiKey';
-
-    if (paramValue.isNotEmpty) {
-      if (location == 'query') {
-        queryParams.add(QueryParam(paramName, paramValue));
-      } else if (location == 'header') {
-        headerParams[paramName] = paramValue;
-      } else if (location == 'cookie') {
-        headerParams.update(
-          'Cookie',
-          (existingCookie) => '$existingCookie; $paramName=$paramValue',
-          ifAbsent: () => '$paramName=$paramValue',
-        );
-      }
-    }
-  }
-}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/auth/authentication.dart b/packages/corbado_api_client/lib/frontendapi/lib/auth/authentication.dart
deleted file mode 100644
index 1b1b8ae..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/auth/authentication.dart
+++ /dev/null
@@ -1,17 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-// ignore: one_member_abstracts
-abstract class Authentication {
-  /// Apply authentication settings to header and query params.
-  Future<void> applyToParams(List<QueryParam> queryParams, Map<String, String> headerParams);
-}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/auth/http_basic_auth.dart b/packages/corbado_api_client/lib/frontendapi/lib/auth/http_basic_auth.dart
deleted file mode 100644
index dfedaa5..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/auth/http_basic_auth.dart
+++ /dev/null
@@ -1,26 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class HttpBasicAuth implements Authentication {
-  HttpBasicAuth({this.username = '', this.password = ''});
-
-  String username;
-  String password;
-
-  @override
-  Future<void> applyToParams(List<QueryParam> queryParams, Map<String, String> headerParams,) async {
-    if (username.isNotEmpty && password.isNotEmpty) {
-      final credentials = '$username:$password';
-      headerParams['Authorization'] = 'Basic ${base64.encode(utf8.encode(credentials))}';
-    }
-  }
-}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/auth/http_bearer_auth.dart b/packages/corbado_api_client/lib/frontendapi/lib/auth/http_bearer_auth.dart
deleted file mode 100644
index eddf3a5..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/auth/http_bearer_auth.dart
+++ /dev/null
@@ -1,49 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-typedef HttpBearerAuthProvider = String Function();
-
-class HttpBearerAuth implements Authentication {
-  HttpBearerAuth();
-
-  dynamic _accessToken;
-
-  dynamic get accessToken => _accessToken;
-
-  set accessToken(dynamic accessToken) {
-    if (accessToken is! String && accessToken is! HttpBearerAuthProvider) {
-      throw ArgumentError('accessToken value must be either a String or a String Function().');
-    }
-    _accessToken = accessToken;
-  }
-
-  @override
-  Future<void> applyToParams(List<QueryParam> queryParams, Map<String, String> headerParams,) async {
-    if (_accessToken == null) {
-      return;
-    }
-
-    String accessToken;
-
-    if (_accessToken is String) {
-      accessToken = _accessToken;
-    } else if (_accessToken is HttpBearerAuthProvider) {
-      accessToken = _accessToken!();
-    } else {
-      return;
-    }
-
-    if (accessToken.isNotEmpty) {
-      headerParams['Authorization'] = 'Bearer $accessToken';
-    }
-  }
-}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/auth/oauth.dart b/packages/corbado_api_client/lib/frontendapi/lib/auth/oauth.dart
deleted file mode 100644
index e9e7d78..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/auth/oauth.dart
+++ /dev/null
@@ -1,24 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class OAuth implements Authentication {
-  OAuth({this.accessToken = ''});
-
-  String accessToken;
-
-  @override
-  Future<void> applyToParams(List<QueryParam> queryParams, Map<String, String> headerParams,) async {
-    if (accessToken.isNotEmpty) {
-      headerParams['Authorization'] = 'Bearer $accessToken';
-    }
-  }
-}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/corbado_frontend_api_client.dart b/packages/corbado_api_client/lib/frontendapi/lib/corbado_frontend_api_client.dart
new file mode 100644
index 0000000..a22dee6
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/corbado_frontend_api_client.dart
@@ -0,0 +1,103 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+export 'package:corbado_frontend_api_client/src/api.dart';
+export 'package:corbado_frontend_api_client/src/auth/api_key_auth.dart';
+export 'package:corbado_frontend_api_client/src/auth/basic_auth.dart';
+export 'package:corbado_frontend_api_client/src/auth/oauth.dart';
+export 'package:corbado_frontend_api_client/src/serializers.dart';
+export 'package:corbado_frontend_api_client/src/model/date.dart';
+
+export 'package:corbado_frontend_api_client/src/api/auth_api.dart';
+export 'package:corbado_frontend_api_client/src/api/configs_api.dart';
+export 'package:corbado_frontend_api_client/src/api/corbado_connect_api.dart';
+export 'package:corbado_frontend_api_client/src/api/users_api.dart';
+
+export 'package:corbado_frontend_api_client/src/model/auth_type.dart';
+export 'package:corbado_frontend_api_client/src/model/block_body.dart';
+export 'package:corbado_frontend_api_client/src/model/block_body_data.dart';
+export 'package:corbado_frontend_api_client/src/model/block_type.dart';
+export 'package:corbado_frontend_api_client/src/model/client_capabilities.dart';
+export 'package:corbado_frontend_api_client/src/model/client_information.dart';
+export 'package:corbado_frontend_api_client/src/model/connect_append_finish_req.dart';
+export 'package:corbado_frontend_api_client/src/model/connect_append_finish_rsp.dart';
+export 'package:corbado_frontend_api_client/src/model/connect_append_init_req.dart';
+export 'package:corbado_frontend_api_client/src/model/connect_append_init_rsp.dart';
+export 'package:corbado_frontend_api_client/src/model/connect_append_start_req.dart';
+export 'package:corbado_frontend_api_client/src/model/connect_append_start_rsp.dart';
+export 'package:corbado_frontend_api_client/src/model/connect_event_create_req.dart';
+export 'package:corbado_frontend_api_client/src/model/connect_login_finish_req.dart';
+export 'package:corbado_frontend_api_client/src/model/connect_login_finish_rsp.dart';
+export 'package:corbado_frontend_api_client/src/model/connect_login_init_req.dart';
+export 'package:corbado_frontend_api_client/src/model/connect_login_init_rsp.dart';
+export 'package:corbado_frontend_api_client/src/model/connect_login_start_req.dart';
+export 'package:corbado_frontend_api_client/src/model/connect_login_start_rsp.dart';
+export 'package:corbado_frontend_api_client/src/model/connect_manage_delete_req.dart';
+export 'package:corbado_frontend_api_client/src/model/connect_manage_delete_rsp.dart';
+export 'package:corbado_frontend_api_client/src/model/connect_manage_init_req.dart';
+export 'package:corbado_frontend_api_client/src/model/connect_manage_init_rsp.dart';
+export 'package:corbado_frontend_api_client/src/model/connect_manage_list_req.dart';
+export 'package:corbado_frontend_api_client/src/model/connect_manage_list_rsp.dart';
+export 'package:corbado_frontend_api_client/src/model/continue_on_other_device.dart';
+export 'package:corbado_frontend_api_client/src/model/event_create_req.dart';
+export 'package:corbado_frontend_api_client/src/model/full_name_with_error.dart';
+export 'package:corbado_frontend_api_client/src/model/general_block_completed.dart';
+export 'package:corbado_frontend_api_client/src/model/general_block_login_init.dart';
+export 'package:corbado_frontend_api_client/src/model/general_block_passkey_append.dart';
+export 'package:corbado_frontend_api_client/src/model/general_block_passkey_appended.dart';
+export 'package:corbado_frontend_api_client/src/model/general_block_passkey_verify.dart';
+export 'package:corbado_frontend_api_client/src/model/general_block_post_signup_email_verify.dart';
+export 'package:corbado_frontend_api_client/src/model/general_block_signup_init.dart';
+export 'package:corbado_frontend_api_client/src/model/general_block_verify_identifier.dart';
+export 'package:corbado_frontend_api_client/src/model/general_block_verify_identifier_alternative_verification_methods_inner.dart';
+export 'package:corbado_frontend_api_client/src/model/generic_rsp.dart';
+export 'package:corbado_frontend_api_client/src/model/identifier.dart';
+export 'package:corbado_frontend_api_client/src/model/identifier_update_req.dart';
+export 'package:corbado_frontend_api_client/src/model/identifier_verify_finish_req.dart';
+export 'package:corbado_frontend_api_client/src/model/identifier_verify_start_req.dart';
+export 'package:corbado_frontend_api_client/src/model/java_script_high_entropy.dart';
+export 'package:corbado_frontend_api_client/src/model/login_identifier.dart';
+export 'package:corbado_frontend_api_client/src/model/login_identifier_config.dart';
+export 'package:corbado_frontend_api_client/src/model/login_identifier_type.dart';
+export 'package:corbado_frontend_api_client/src/model/login_identifier_with_error.dart';
+export 'package:corbado_frontend_api_client/src/model/login_init_req.dart';
+export 'package:corbado_frontend_api_client/src/model/me_identifier_create_req.dart';
+export 'package:corbado_frontend_api_client/src/model/me_identifier_delete_req.dart';
+export 'package:corbado_frontend_api_client/src/model/me_identifier_update_req.dart';
+export 'package:corbado_frontend_api_client/src/model/me_identifier_verify_finish_req.dart';
+export 'package:corbado_frontend_api_client/src/model/me_identifier_verify_start_req.dart';
+export 'package:corbado_frontend_api_client/src/model/me_passkey_delete_rsp.dart';
+export 'package:corbado_frontend_api_client/src/model/me_passkey_rsp.dart';
+export 'package:corbado_frontend_api_client/src/model/me_passkeys_append_finish_req.dart';
+export 'package:corbado_frontend_api_client/src/model/me_passkeys_append_start_req.dart';
+export 'package:corbado_frontend_api_client/src/model/me_passkeys_append_start_rsp.dart';
+export 'package:corbado_frontend_api_client/src/model/me_refresh_rsp.dart';
+export 'package:corbado_frontend_api_client/src/model/me_rsp.dart';
+export 'package:corbado_frontend_api_client/src/model/me_update_req.dart';
+export 'package:corbado_frontend_api_client/src/model/paging.dart';
+export 'package:corbado_frontend_api_client/src/model/passkey.dart';
+export 'package:corbado_frontend_api_client/src/model/passkey_append_finish_req.dart';
+export 'package:corbado_frontend_api_client/src/model/passkey_append_start_req.dart';
+export 'package:corbado_frontend_api_client/src/model/passkey_event_type.dart';
+export 'package:corbado_frontend_api_client/src/model/passkey_icon_set.dart';
+export 'package:corbado_frontend_api_client/src/model/passkey_login_finish_req.dart';
+export 'package:corbado_frontend_api_client/src/model/passkey_login_start_req.dart';
+export 'package:corbado_frontend_api_client/src/model/passkey_mediation_finish_req.dart';
+export 'package:corbado_frontend_api_client/src/model/passkey_operation.dart';
+export 'package:corbado_frontend_api_client/src/model/process_common.dart';
+export 'package:corbado_frontend_api_client/src/model/process_init_req.dart';
+export 'package:corbado_frontend_api_client/src/model/process_init_rsp.dart';
+export 'package:corbado_frontend_api_client/src/model/process_response.dart';
+export 'package:corbado_frontend_api_client/src/model/process_static_info.dart';
+export 'package:corbado_frontend_api_client/src/model/request_data.dart';
+export 'package:corbado_frontend_api_client/src/model/request_error.dart';
+export 'package:corbado_frontend_api_client/src/model/session_config_rsp.dart';
+export 'package:corbado_frontend_api_client/src/model/short_session_cookie_config.dart';
+export 'package:corbado_frontend_api_client/src/model/signup_init_req.dart';
+export 'package:corbado_frontend_api_client/src/model/social_account.dart';
+export 'package:corbado_frontend_api_client/src/model/social_data.dart';
+export 'package:corbado_frontend_api_client/src/model/social_provider_type.dart';
+export 'package:corbado_frontend_api_client/src/model/social_verify_start_req.dart';
+export 'package:corbado_frontend_api_client/src/model/user_details_config_rsp.dart';
+export 'package:corbado_frontend_api_client/src/model/verification_method.dart';
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/apple_app_site_association_rsp.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/apple_app_site_association_rsp.dart
deleted file mode 100644
index b6915dc..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/apple_app_site_association_rsp.dart
+++ /dev/null
@@ -1,125 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class AppleAppSiteAssociationRsp {
-  /// Returns a new [AppleAppSiteAssociationRsp] instance.
-  AppleAppSiteAssociationRsp({
-    required this.applinks,
-    required this.webcredentials,
-    required this.appclips,
-  });
-
-  AppleAppSiteAssociationRspApplinks applinks;
-
-  AppleAppSiteAssociationRspWebcredentials webcredentials;
-
-  AppleAppSiteAssociationRspWebcredentials appclips;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is AppleAppSiteAssociationRsp &&
-     other.applinks == applinks &&
-     other.webcredentials == webcredentials &&
-     other.appclips == appclips;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (applinks.hashCode) +
-    (webcredentials.hashCode) +
-    (appclips.hashCode);
-
-  @override
-  String toString() => 'AppleAppSiteAssociationRsp[applinks=$applinks, webcredentials=$webcredentials, appclips=$appclips]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'applinks'] = this.applinks;
-      json[r'webcredentials'] = this.webcredentials;
-      json[r'appclips'] = this.appclips;
-    return json;
-  }
-
-  /// Returns a new [AppleAppSiteAssociationRsp] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static AppleAppSiteAssociationRsp? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "AppleAppSiteAssociationRsp[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "AppleAppSiteAssociationRsp[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return AppleAppSiteAssociationRsp(
-        applinks: AppleAppSiteAssociationRspApplinks.fromJson(json[r'applinks'])!,
-        webcredentials: AppleAppSiteAssociationRspWebcredentials.fromJson(json[r'webcredentials'])!,
-        appclips: AppleAppSiteAssociationRspWebcredentials.fromJson(json[r'appclips'])!,
-      );
-    }
-    return null;
-  }
-
-  static List<AppleAppSiteAssociationRsp> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <AppleAppSiteAssociationRsp>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = AppleAppSiteAssociationRsp.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, AppleAppSiteAssociationRsp> mapFromJson(dynamic json) {
-    final map = <String, AppleAppSiteAssociationRsp>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = AppleAppSiteAssociationRsp.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of AppleAppSiteAssociationRsp-objects as value to a dart map
-  static Map<String, List<AppleAppSiteAssociationRsp>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<AppleAppSiteAssociationRsp>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = AppleAppSiteAssociationRsp.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'applinks',
-    'webcredentials',
-    'appclips',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/apple_app_site_association_rsp_applinks.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/apple_app_site_association_rsp_applinks.dart
deleted file mode 100644
index c4e864f..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/apple_app_site_association_rsp_applinks.dart
+++ /dev/null
@@ -1,109 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class AppleAppSiteAssociationRspApplinks {
-  /// Returns a new [AppleAppSiteAssociationRspApplinks] instance.
-  AppleAppSiteAssociationRspApplinks({
-    this.details = const [],
-  });
-
-  List<AppleAppSiteAssociationRspApplinksDetailsInner> details;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is AppleAppSiteAssociationRspApplinks &&
-     other.details == details;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (details.hashCode);
-
-  @override
-  String toString() => 'AppleAppSiteAssociationRspApplinks[details=$details]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'details'] = this.details;
-    return json;
-  }
-
-  /// Returns a new [AppleAppSiteAssociationRspApplinks] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static AppleAppSiteAssociationRspApplinks? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "AppleAppSiteAssociationRspApplinks[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "AppleAppSiteAssociationRspApplinks[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return AppleAppSiteAssociationRspApplinks(
-        details: AppleAppSiteAssociationRspApplinksDetailsInner.listFromJson(json[r'details']),
-      );
-    }
-    return null;
-  }
-
-  static List<AppleAppSiteAssociationRspApplinks> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <AppleAppSiteAssociationRspApplinks>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = AppleAppSiteAssociationRspApplinks.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, AppleAppSiteAssociationRspApplinks> mapFromJson(dynamic json) {
-    final map = <String, AppleAppSiteAssociationRspApplinks>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = AppleAppSiteAssociationRspApplinks.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of AppleAppSiteAssociationRspApplinks-objects as value to a dart map
-  static Map<String, List<AppleAppSiteAssociationRspApplinks>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<AppleAppSiteAssociationRspApplinks>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = AppleAppSiteAssociationRspApplinks.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'details',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/apple_app_site_association_rsp_applinks_details_inner.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/apple_app_site_association_rsp_applinks_details_inner.dart
deleted file mode 100644
index 7fd8a1d..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/apple_app_site_association_rsp_applinks_details_inner.dart
+++ /dev/null
@@ -1,119 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class AppleAppSiteAssociationRspApplinksDetailsInner {
-  /// Returns a new [AppleAppSiteAssociationRspApplinksDetailsInner] instance.
-  AppleAppSiteAssociationRspApplinksDetailsInner({
-    required this.appID,
-    this.paths = const [],
-  });
-
-  String appID;
-
-  List<String> paths;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is AppleAppSiteAssociationRspApplinksDetailsInner &&
-     other.appID == appID &&
-     other.paths == paths;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (appID.hashCode) +
-    (paths.hashCode);
-
-  @override
-  String toString() => 'AppleAppSiteAssociationRspApplinksDetailsInner[appID=$appID, paths=$paths]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'appID'] = this.appID;
-      json[r'paths'] = this.paths;
-    return json;
-  }
-
-  /// Returns a new [AppleAppSiteAssociationRspApplinksDetailsInner] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static AppleAppSiteAssociationRspApplinksDetailsInner? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "AppleAppSiteAssociationRspApplinksDetailsInner[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "AppleAppSiteAssociationRspApplinksDetailsInner[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return AppleAppSiteAssociationRspApplinksDetailsInner(
-        appID: mapValueOfType<String>(json, r'appID')!,
-        paths: json[r'paths'] is List
-            ? (json[r'paths'] as List).cast<String>()
-            : const [],
-      );
-    }
-    return null;
-  }
-
-  static List<AppleAppSiteAssociationRspApplinksDetailsInner> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <AppleAppSiteAssociationRspApplinksDetailsInner>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = AppleAppSiteAssociationRspApplinksDetailsInner.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, AppleAppSiteAssociationRspApplinksDetailsInner> mapFromJson(dynamic json) {
-    final map = <String, AppleAppSiteAssociationRspApplinksDetailsInner>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = AppleAppSiteAssociationRspApplinksDetailsInner.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of AppleAppSiteAssociationRspApplinksDetailsInner-objects as value to a dart map
-  static Map<String, List<AppleAppSiteAssociationRspApplinksDetailsInner>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<AppleAppSiteAssociationRspApplinksDetailsInner>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = AppleAppSiteAssociationRspApplinksDetailsInner.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'appID',
-    'paths',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/apple_app_site_association_rsp_webcredentials.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/apple_app_site_association_rsp_webcredentials.dart
deleted file mode 100644
index 11def9f..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/apple_app_site_association_rsp_webcredentials.dart
+++ /dev/null
@@ -1,111 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class AppleAppSiteAssociationRspWebcredentials {
-  /// Returns a new [AppleAppSiteAssociationRspWebcredentials] instance.
-  AppleAppSiteAssociationRspWebcredentials({
-    this.apps = const [],
-  });
-
-  List<String> apps;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is AppleAppSiteAssociationRspWebcredentials &&
-     other.apps == apps;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (apps.hashCode);
-
-  @override
-  String toString() => 'AppleAppSiteAssociationRspWebcredentials[apps=$apps]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'apps'] = this.apps;
-    return json;
-  }
-
-  /// Returns a new [AppleAppSiteAssociationRspWebcredentials] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static AppleAppSiteAssociationRspWebcredentials? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "AppleAppSiteAssociationRspWebcredentials[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "AppleAppSiteAssociationRspWebcredentials[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return AppleAppSiteAssociationRspWebcredentials(
-        apps: json[r'apps'] is List
-            ? (json[r'apps'] as List).cast<String>()
-            : const [],
-      );
-    }
-    return null;
-  }
-
-  static List<AppleAppSiteAssociationRspWebcredentials> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <AppleAppSiteAssociationRspWebcredentials>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = AppleAppSiteAssociationRspWebcredentials.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, AppleAppSiteAssociationRspWebcredentials> mapFromJson(dynamic json) {
-    final map = <String, AppleAppSiteAssociationRspWebcredentials>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = AppleAppSiteAssociationRspWebcredentials.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of AppleAppSiteAssociationRspWebcredentials-objects as value to a dart map
-  static Map<String, List<AppleAppSiteAssociationRspWebcredentials>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<AppleAppSiteAssociationRspWebcredentials>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = AppleAppSiteAssociationRspWebcredentials.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'apps',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/asset_link.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/asset_link.dart
deleted file mode 100644
index 513dfc7..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/asset_link.dart
+++ /dev/null
@@ -1,119 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class AssetLink {
-  /// Returns a new [AssetLink] instance.
-  AssetLink({
-    this.relation = const [],
-    required this.target,
-  });
-
-  List<String> relation;
-
-  AssetLinkTarget target;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is AssetLink &&
-     other.relation == relation &&
-     other.target == target;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (relation.hashCode) +
-    (target.hashCode);
-
-  @override
-  String toString() => 'AssetLink[relation=$relation, target=$target]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'relation'] = this.relation;
-      json[r'target'] = this.target;
-    return json;
-  }
-
-  /// Returns a new [AssetLink] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static AssetLink? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "AssetLink[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "AssetLink[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return AssetLink(
-        relation: json[r'relation'] is List
-            ? (json[r'relation'] as List).cast<String>()
-            : const [],
-        target: AssetLinkTarget.fromJson(json[r'target'])!,
-      );
-    }
-    return null;
-  }
-
-  static List<AssetLink> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <AssetLink>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = AssetLink.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, AssetLink> mapFromJson(dynamic json) {
-    final map = <String, AssetLink>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = AssetLink.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of AssetLink-objects as value to a dart map
-  static Map<String, List<AssetLink>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<AssetLink>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = AssetLink.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'relation',
-    'target',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/asset_link_target.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/asset_link_target.dart
deleted file mode 100644
index 0ca8d6d..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/asset_link_target.dart
+++ /dev/null
@@ -1,152 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class AssetLinkTarget {
-  /// Returns a new [AssetLinkTarget] instance.
-  AssetLinkTarget({
-    required this.namespace,
-    this.packageName,
-    this.site,
-    this.sha256CertFingerprints = const [],
-  });
-
-  String namespace;
-
-  ///
-  /// Please note: This property should have been non-nullable! Since the specification file
-  /// does not include a default value (using the "default:" property), however, the generated
-  /// source code must fall back to having a nullable type.
-  /// Consider adding a "default:" property in the specification file to hide this note.
-  ///
-  String? packageName;
-
-  ///
-  /// Please note: This property should have been non-nullable! Since the specification file
-  /// does not include a default value (using the "default:" property), however, the generated
-  /// source code must fall back to having a nullable type.
-  /// Consider adding a "default:" property in the specification file to hide this note.
-  ///
-  String? site;
-
-  List<String> sha256CertFingerprints;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is AssetLinkTarget &&
-     other.namespace == namespace &&
-     other.packageName == packageName &&
-     other.site == site &&
-     other.sha256CertFingerprints == sha256CertFingerprints;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (namespace.hashCode) +
-    (packageName == null ? 0 : packageName!.hashCode) +
-    (site == null ? 0 : site!.hashCode) +
-    (sha256CertFingerprints.hashCode);
-
-  @override
-  String toString() => 'AssetLinkTarget[namespace=$namespace, packageName=$packageName, site=$site, sha256CertFingerprints=$sha256CertFingerprints]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'namespace'] = this.namespace;
-    if (this.packageName != null) {
-      json[r'package_name'] = this.packageName;
-    } else {
-      json[r'package_name'] = null;
-    }
-    if (this.site != null) {
-      json[r'site'] = this.site;
-    } else {
-      json[r'site'] = null;
-    }
-      json[r'sha256_cert_fingerprints'] = this.sha256CertFingerprints;
-    return json;
-  }
-
-  /// Returns a new [AssetLinkTarget] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static AssetLinkTarget? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "AssetLinkTarget[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "AssetLinkTarget[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return AssetLinkTarget(
-        namespace: mapValueOfType<String>(json, r'namespace')!,
-        packageName: mapValueOfType<String>(json, r'package_name'),
-        site: mapValueOfType<String>(json, r'site'),
-        sha256CertFingerprints: json[r'sha256_cert_fingerprints'] is List
-            ? (json[r'sha256_cert_fingerprints'] as List).cast<String>()
-            : const [],
-      );
-    }
-    return null;
-  }
-
-  static List<AssetLinkTarget> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <AssetLinkTarget>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = AssetLinkTarget.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, AssetLinkTarget> mapFromJson(dynamic json) {
-    final map = <String, AssetLinkTarget>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = AssetLinkTarget.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of AssetLinkTarget-objects as value to a dart map
-  static Map<String, List<AssetLinkTarget>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<AssetLinkTarget>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = AssetLinkTarget.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'namespace',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/auth_method.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/auth_method.dart
deleted file mode 100644
index 6c9789b..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/auth_method.dart
+++ /dev/null
@@ -1,91 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-/// Authentication methods
-class AuthMethod {
-  /// Instantiate a new enum with the provided [value].
-  const AuthMethod._(this.value);
-
-  /// The underlying value of this enum member.
-  final String value;
-
-  @override
-  String toString() => value;
-
-  String toJson() => value;
-
-  static const email = AuthMethod._(r'email');
-  static const phoneNumber = AuthMethod._(r'phone_number');
-  static const webauthn = AuthMethod._(r'webauthn');
-  static const password = AuthMethod._(r'password');
-
-  /// List of all possible values in this [enum][AuthMethod].
-  static const values = <AuthMethod>[
-    email,
-    phoneNumber,
-    webauthn,
-    password,
-  ];
-
-  static AuthMethod? fromJson(dynamic value) => AuthMethodTypeTransformer().decode(value);
-
-  static List<AuthMethod> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <AuthMethod>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = AuthMethod.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-}
-
-/// Transformation class that can [encode] an instance of [AuthMethod] to String,
-/// and [decode] dynamic data back to [AuthMethod].
-class AuthMethodTypeTransformer {
-  factory AuthMethodTypeTransformer() => _instance ??= const AuthMethodTypeTransformer._();
-
-  const AuthMethodTypeTransformer._();
-
-  String encode(AuthMethod data) => data.value;
-
-  /// Decodes a [dynamic value][data] to a AuthMethod.
-  ///
-  /// If [allowNull] is true and the [dynamic value][data] cannot be decoded successfully,
-  /// then null is returned. However, if [allowNull] is false and the [dynamic value][data]
-  /// cannot be decoded successfully, then an [UnimplementedError] is thrown.
-  ///
-  /// The [allowNull] is very handy when an API changes and a new enum value is added or removed,
-  /// and users are still using an old app with the old code.
-  AuthMethod? decode(dynamic data, {bool allowNull = true}) {
-    if (data != null) {
-      switch (data) {
-        case r'email': return AuthMethod.email;
-        case r'phone_number': return AuthMethod.phoneNumber;
-        case r'webauthn': return AuthMethod.webauthn;
-        case r'password': return AuthMethod.password;
-        default:
-          if (!allowNull) {
-            throw ArgumentError('Unknown enum value to decode: $data');
-          }
-      }
-    }
-    return null;
-  }
-
-  /// Singleton [AuthMethodTypeTransformer] instance.
-  static AuthMethodTypeTransformer? _instance;
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/auth_methods_list_req.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/auth_methods_list_req.dart
deleted file mode 100644
index d9dad29..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/auth_methods_list_req.dart
+++ /dev/null
@@ -1,128 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class AuthMethodsListReq {
-  /// Returns a new [AuthMethodsListReq] instance.
-  AuthMethodsListReq({
-    required this.username,
-    this.requestID,
-  });
-
-  /// Users login name
-  String username;
-
-  /// Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side
-  ///
-  /// Please note: This property should have been non-nullable! Since the specification file
-  /// does not include a default value (using the "default:" property), however, the generated
-  /// source code must fall back to having a nullable type.
-  /// Consider adding a "default:" property in the specification file to hide this note.
-  ///
-  String? requestID;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is AuthMethodsListReq &&
-     other.username == username &&
-     other.requestID == requestID;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (username.hashCode) +
-    (requestID == null ? 0 : requestID!.hashCode);
-
-  @override
-  String toString() => 'AuthMethodsListReq[username=$username, requestID=$requestID]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'username'] = this.username;
-    if (this.requestID != null) {
-      json[r'requestID'] = this.requestID;
-    } else {
-      json[r'requestID'] = null;
-    }
-    return json;
-  }
-
-  /// Returns a new [AuthMethodsListReq] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static AuthMethodsListReq? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "AuthMethodsListReq[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "AuthMethodsListReq[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return AuthMethodsListReq(
-        username: mapValueOfType<String>(json, r'username')!,
-        requestID: mapValueOfType<String>(json, r'requestID'),
-      );
-    }
-    return null;
-  }
-
-  static List<AuthMethodsListReq> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <AuthMethodsListReq>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = AuthMethodsListReq.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, AuthMethodsListReq> mapFromJson(dynamic json) {
-    final map = <String, AuthMethodsListReq>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = AuthMethodsListReq.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of AuthMethodsListReq-objects as value to a dart map
-  static Map<String, List<AuthMethodsListReq>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<AuthMethodsListReq>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = AuthMethodsListReq.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'username',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/auth_methods_list_rsp.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/auth_methods_list_rsp.dart
deleted file mode 100644
index 5db0093..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/auth_methods_list_rsp.dart
+++ /dev/null
@@ -1,146 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class AuthMethodsListRsp {
-  /// Returns a new [AuthMethodsListRsp] instance.
-  AuthMethodsListRsp({
-    required this.httpStatusCode,
-    required this.message,
-    required this.requestData,
-    required this.runtime,
-    required this.data,
-  });
-
-  /// HTTP status code of operation
-  ///
-  /// Minimum value: 200
-  /// Maximum value: 599
-  int httpStatusCode;
-
-  String message;
-
-  RequestData requestData;
-
-  /// Runtime in seconds for this request
-  double runtime;
-
-  AuthMethodsListRspAllOfData data;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is AuthMethodsListRsp &&
-     other.httpStatusCode == httpStatusCode &&
-     other.message == message &&
-     other.requestData == requestData &&
-     other.runtime == runtime &&
-     other.data == data;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (httpStatusCode.hashCode) +
-    (message.hashCode) +
-    (requestData.hashCode) +
-    (runtime.hashCode) +
-    (data.hashCode);
-
-  @override
-  String toString() => 'AuthMethodsListRsp[httpStatusCode=$httpStatusCode, message=$message, requestData=$requestData, runtime=$runtime, data=$data]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'httpStatusCode'] = this.httpStatusCode;
-      json[r'message'] = this.message;
-      json[r'requestData'] = this.requestData;
-      json[r'runtime'] = this.runtime;
-      json[r'data'] = this.data;
-    return json;
-  }
-
-  /// Returns a new [AuthMethodsListRsp] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static AuthMethodsListRsp? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "AuthMethodsListRsp[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "AuthMethodsListRsp[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return AuthMethodsListRsp(
-        httpStatusCode: mapValueOfType<int>(json, r'httpStatusCode')!,
-        message: mapValueOfType<String>(json, r'message')!,
-        requestData: RequestData.fromJson(json[r'requestData'])!,
-        runtime: mapValueOfType<double>(json, r'runtime')!,
-        data: AuthMethodsListRspAllOfData.fromJson(json[r'data'])!,
-      );
-    }
-    return null;
-  }
-
-  static List<AuthMethodsListRsp> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <AuthMethodsListRsp>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = AuthMethodsListRsp.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, AuthMethodsListRsp> mapFromJson(dynamic json) {
-    final map = <String, AuthMethodsListRsp>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = AuthMethodsListRsp.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of AuthMethodsListRsp-objects as value to a dart map
-  static Map<String, List<AuthMethodsListRsp>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<AuthMethodsListRsp>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = AuthMethodsListRsp.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'httpStatusCode',
-    'message',
-    'requestData',
-    'runtime',
-    'data',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/auth_methods_list_rsp_all_of.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/auth_methods_list_rsp_all_of.dart
deleted file mode 100644
index cd734ca..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/auth_methods_list_rsp_all_of.dart
+++ /dev/null
@@ -1,109 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class AuthMethodsListRspAllOf {
-  /// Returns a new [AuthMethodsListRspAllOf] instance.
-  AuthMethodsListRspAllOf({
-    required this.data,
-  });
-
-  AuthMethodsListRspAllOfData data;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is AuthMethodsListRspAllOf &&
-     other.data == data;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (data.hashCode);
-
-  @override
-  String toString() => 'AuthMethodsListRspAllOf[data=$data]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'data'] = this.data;
-    return json;
-  }
-
-  /// Returns a new [AuthMethodsListRspAllOf] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static AuthMethodsListRspAllOf? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "AuthMethodsListRspAllOf[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "AuthMethodsListRspAllOf[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return AuthMethodsListRspAllOf(
-        data: AuthMethodsListRspAllOfData.fromJson(json[r'data'])!,
-      );
-    }
-    return null;
-  }
-
-  static List<AuthMethodsListRspAllOf> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <AuthMethodsListRspAllOf>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = AuthMethodsListRspAllOf.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, AuthMethodsListRspAllOf> mapFromJson(dynamic json) {
-    final map = <String, AuthMethodsListRspAllOf>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = AuthMethodsListRspAllOf.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of AuthMethodsListRspAllOf-objects as value to a dart map
-  static Map<String, List<AuthMethodsListRspAllOf>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<AuthMethodsListRspAllOf>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = AuthMethodsListRspAllOf.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'data',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/auth_methods_list_rsp_all_of_data.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/auth_methods_list_rsp_all_of_data.dart
deleted file mode 100644
index 3341cc5..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/auth_methods_list_rsp_all_of_data.dart
+++ /dev/null
@@ -1,117 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class AuthMethodsListRspAllOfData {
-  /// Returns a new [AuthMethodsListRspAllOfData] instance.
-  AuthMethodsListRspAllOfData({
-    this.selectedMethods = const [],
-    this.possibleMethods = const [],
-  });
-
-  List<AuthMethod> selectedMethods;
-
-  List<AuthMethod> possibleMethods;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is AuthMethodsListRspAllOfData &&
-     other.selectedMethods == selectedMethods &&
-     other.possibleMethods == possibleMethods;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (selectedMethods.hashCode) +
-    (possibleMethods.hashCode);
-
-  @override
-  String toString() => 'AuthMethodsListRspAllOfData[selectedMethods=$selectedMethods, possibleMethods=$possibleMethods]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'selectedMethods'] = this.selectedMethods;
-      json[r'possibleMethods'] = this.possibleMethods;
-    return json;
-  }
-
-  /// Returns a new [AuthMethodsListRspAllOfData] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static AuthMethodsListRspAllOfData? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "AuthMethodsListRspAllOfData[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "AuthMethodsListRspAllOfData[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return AuthMethodsListRspAllOfData(
-        selectedMethods: AuthMethod.listFromJson(json[r'selectedMethods']),
-        possibleMethods: AuthMethod.listFromJson(json[r'possibleMethods']),
-      );
-    }
-    return null;
-  }
-
-  static List<AuthMethodsListRspAllOfData> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <AuthMethodsListRspAllOfData>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = AuthMethodsListRspAllOfData.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, AuthMethodsListRspAllOfData> mapFromJson(dynamic json) {
-    final map = <String, AuthMethodsListRspAllOfData>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = AuthMethodsListRspAllOfData.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of AuthMethodsListRspAllOfData-objects as value to a dart map
-  static Map<String, List<AuthMethodsListRspAllOfData>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<AuthMethodsListRspAllOfData>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = AuthMethodsListRspAllOfData.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'selectedMethods',
-    'possibleMethods',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/authentication_rsp.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/authentication_rsp.dart
deleted file mode 100644
index 3f7e6d4..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/authentication_rsp.dart
+++ /dev/null
@@ -1,162 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class AuthenticationRsp {
-  /// Returns a new [AuthenticationRsp] instance.
-  AuthenticationRsp({
-    required this.redirectURL,
-    this.sessionToken,
-    this.longSession,
-    this.shortSession,
-  });
-
-  String redirectURL;
-
-  /// Only given when using session v1
-  ///
-  /// Please note: This property should have been non-nullable! Since the specification file
-  /// does not include a default value (using the "default:" property), however, the generated
-  /// source code must fall back to having a nullable type.
-  /// Consider adding a "default:" property in the specification file to hide this note.
-  ///
-  String? sessionToken;
-
-  /// Only given when project environment is dev
-  ///
-  /// Please note: This property should have been non-nullable! Since the specification file
-  /// does not include a default value (using the "default:" property), however, the generated
-  /// source code must fall back to having a nullable type.
-  /// Consider adding a "default:" property in the specification file to hide this note.
-  ///
-  String? longSession;
-
-  ///
-  /// Please note: This property should have been non-nullable! Since the specification file
-  /// does not include a default value (using the "default:" property), however, the generated
-  /// source code must fall back to having a nullable type.
-  /// Consider adding a "default:" property in the specification file to hide this note.
-  ///
-  ShortSession? shortSession;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is AuthenticationRsp &&
-     other.redirectURL == redirectURL &&
-     other.sessionToken == sessionToken &&
-     other.longSession == longSession &&
-     other.shortSession == shortSession;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (redirectURL.hashCode) +
-    (sessionToken == null ? 0 : sessionToken!.hashCode) +
-    (longSession == null ? 0 : longSession!.hashCode) +
-    (shortSession == null ? 0 : shortSession!.hashCode);
-
-  @override
-  String toString() => 'AuthenticationRsp[redirectURL=$redirectURL, sessionToken=$sessionToken, longSession=$longSession, shortSession=$shortSession]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'redirectURL'] = this.redirectURL;
-    if (this.sessionToken != null) {
-      json[r'sessionToken'] = this.sessionToken;
-    } else {
-      json[r'sessionToken'] = null;
-    }
-    if (this.longSession != null) {
-      json[r'longSession'] = this.longSession;
-    } else {
-      json[r'longSession'] = null;
-    }
-    if (this.shortSession != null) {
-      json[r'shortSession'] = this.shortSession;
-    } else {
-      json[r'shortSession'] = null;
-    }
-    return json;
-  }
-
-  /// Returns a new [AuthenticationRsp] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static AuthenticationRsp? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "AuthenticationRsp[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "AuthenticationRsp[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return AuthenticationRsp(
-        redirectURL: mapValueOfType<String>(json, r'redirectURL')!,
-        sessionToken: mapValueOfType<String>(json, r'sessionToken'),
-        longSession: mapValueOfType<String>(json, r'longSession'),
-        shortSession: ShortSession.fromJson(json[r'shortSession']),
-      );
-    }
-    return null;
-  }
-
-  static List<AuthenticationRsp> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <AuthenticationRsp>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = AuthenticationRsp.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, AuthenticationRsp> mapFromJson(dynamic json) {
-    final map = <String, AuthenticationRsp>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = AuthenticationRsp.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of AuthenticationRsp-objects as value to a dart map
-  static Map<String, List<AuthenticationRsp>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<AuthenticationRsp>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = AuthenticationRsp.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'redirectURL',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/email_code_confirm_req.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/email_code_confirm_req.dart
deleted file mode 100644
index 197de67..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/email_code_confirm_req.dart
+++ /dev/null
@@ -1,135 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class EmailCodeConfirmReq {
-  /// Returns a new [EmailCodeConfirmReq] instance.
-  EmailCodeConfirmReq({
-    required this.emailCodeID,
-    required this.code,
-    this.requestID,
-  });
-
-  String emailCodeID;
-
-  String code;
-
-  /// Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side
-  ///
-  /// Please note: This property should have been non-nullable! Since the specification file
-  /// does not include a default value (using the "default:" property), however, the generated
-  /// source code must fall back to having a nullable type.
-  /// Consider adding a "default:" property in the specification file to hide this note.
-  ///
-  String? requestID;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is EmailCodeConfirmReq &&
-     other.emailCodeID == emailCodeID &&
-     other.code == code &&
-     other.requestID == requestID;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (emailCodeID.hashCode) +
-    (code.hashCode) +
-    (requestID == null ? 0 : requestID!.hashCode);
-
-  @override
-  String toString() => 'EmailCodeConfirmReq[emailCodeID=$emailCodeID, code=$code, requestID=$requestID]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'emailCodeID'] = this.emailCodeID;
-      json[r'code'] = this.code;
-    if (this.requestID != null) {
-      json[r'requestID'] = this.requestID;
-    } else {
-      json[r'requestID'] = null;
-    }
-    return json;
-  }
-
-  /// Returns a new [EmailCodeConfirmReq] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static EmailCodeConfirmReq? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "EmailCodeConfirmReq[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "EmailCodeConfirmReq[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return EmailCodeConfirmReq(
-        emailCodeID: mapValueOfType<String>(json, r'emailCodeID')!,
-        code: mapValueOfType<String>(json, r'code')!,
-        requestID: mapValueOfType<String>(json, r'requestID'),
-      );
-    }
-    return null;
-  }
-
-  static List<EmailCodeConfirmReq> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <EmailCodeConfirmReq>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = EmailCodeConfirmReq.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, EmailCodeConfirmReq> mapFromJson(dynamic json) {
-    final map = <String, EmailCodeConfirmReq>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = EmailCodeConfirmReq.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of EmailCodeConfirmReq-objects as value to a dart map
-  static Map<String, List<EmailCodeConfirmReq>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<EmailCodeConfirmReq>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = EmailCodeConfirmReq.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'emailCodeID',
-    'code',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/email_code_confirm_rsp.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/email_code_confirm_rsp.dart
deleted file mode 100644
index d1262c9..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/email_code_confirm_rsp.dart
+++ /dev/null
@@ -1,146 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class EmailCodeConfirmRsp {
-  /// Returns a new [EmailCodeConfirmRsp] instance.
-  EmailCodeConfirmRsp({
-    required this.httpStatusCode,
-    required this.message,
-    required this.requestData,
-    required this.runtime,
-    required this.data,
-  });
-
-  /// HTTP status code of operation
-  ///
-  /// Minimum value: 200
-  /// Maximum value: 599
-  int httpStatusCode;
-
-  String message;
-
-  RequestData requestData;
-
-  /// Runtime in seconds for this request
-  double runtime;
-
-  EmailLinkConfirmRspAllOfData data;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is EmailCodeConfirmRsp &&
-     other.httpStatusCode == httpStatusCode &&
-     other.message == message &&
-     other.requestData == requestData &&
-     other.runtime == runtime &&
-     other.data == data;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (httpStatusCode.hashCode) +
-    (message.hashCode) +
-    (requestData.hashCode) +
-    (runtime.hashCode) +
-    (data.hashCode);
-
-  @override
-  String toString() => 'EmailCodeConfirmRsp[httpStatusCode=$httpStatusCode, message=$message, requestData=$requestData, runtime=$runtime, data=$data]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'httpStatusCode'] = this.httpStatusCode;
-      json[r'message'] = this.message;
-      json[r'requestData'] = this.requestData;
-      json[r'runtime'] = this.runtime;
-      json[r'data'] = this.data;
-    return json;
-  }
-
-  /// Returns a new [EmailCodeConfirmRsp] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static EmailCodeConfirmRsp? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "EmailCodeConfirmRsp[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "EmailCodeConfirmRsp[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return EmailCodeConfirmRsp(
-        httpStatusCode: mapValueOfType<int>(json, r'httpStatusCode')!,
-        message: mapValueOfType<String>(json, r'message')!,
-        requestData: RequestData.fromJson(json[r'requestData'])!,
-        runtime: mapValueOfType<double>(json, r'runtime')!,
-        data: EmailLinkConfirmRspAllOfData.fromJson(json[r'data'])!,
-      );
-    }
-    return null;
-  }
-
-  static List<EmailCodeConfirmRsp> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <EmailCodeConfirmRsp>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = EmailCodeConfirmRsp.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, EmailCodeConfirmRsp> mapFromJson(dynamic json) {
-    final map = <String, EmailCodeConfirmRsp>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = EmailCodeConfirmRsp.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of EmailCodeConfirmRsp-objects as value to a dart map
-  static Map<String, List<EmailCodeConfirmRsp>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<EmailCodeConfirmRsp>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = EmailCodeConfirmRsp.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'httpStatusCode',
-    'message',
-    'requestData',
-    'runtime',
-    'data',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/email_code_login_start_req.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/email_code_login_start_req.dart
deleted file mode 100644
index bef555e..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/email_code_login_start_req.dart
+++ /dev/null
@@ -1,127 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class EmailCodeLoginStartReq {
-  /// Returns a new [EmailCodeLoginStartReq] instance.
-  EmailCodeLoginStartReq({
-    required this.username,
-    this.requestID,
-  });
-
-  String username;
-
-  /// Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side
-  ///
-  /// Please note: This property should have been non-nullable! Since the specification file
-  /// does not include a default value (using the "default:" property), however, the generated
-  /// source code must fall back to having a nullable type.
-  /// Consider adding a "default:" property in the specification file to hide this note.
-  ///
-  String? requestID;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is EmailCodeLoginStartReq &&
-     other.username == username &&
-     other.requestID == requestID;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (username.hashCode) +
-    (requestID == null ? 0 : requestID!.hashCode);
-
-  @override
-  String toString() => 'EmailCodeLoginStartReq[username=$username, requestID=$requestID]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'username'] = this.username;
-    if (this.requestID != null) {
-      json[r'requestID'] = this.requestID;
-    } else {
-      json[r'requestID'] = null;
-    }
-    return json;
-  }
-
-  /// Returns a new [EmailCodeLoginStartReq] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static EmailCodeLoginStartReq? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "EmailCodeLoginStartReq[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "EmailCodeLoginStartReq[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return EmailCodeLoginStartReq(
-        username: mapValueOfType<String>(json, r'username')!,
-        requestID: mapValueOfType<String>(json, r'requestID'),
-      );
-    }
-    return null;
-  }
-
-  static List<EmailCodeLoginStartReq> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <EmailCodeLoginStartReq>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = EmailCodeLoginStartReq.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, EmailCodeLoginStartReq> mapFromJson(dynamic json) {
-    final map = <String, EmailCodeLoginStartReq>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = EmailCodeLoginStartReq.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of EmailCodeLoginStartReq-objects as value to a dart map
-  static Map<String, List<EmailCodeLoginStartReq>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<EmailCodeLoginStartReq>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = EmailCodeLoginStartReq.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'username',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/email_code_login_start_rsp.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/email_code_login_start_rsp.dart
deleted file mode 100644
index 109a29f..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/email_code_login_start_rsp.dart
+++ /dev/null
@@ -1,146 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class EmailCodeLoginStartRsp {
-  /// Returns a new [EmailCodeLoginStartRsp] instance.
-  EmailCodeLoginStartRsp({
-    required this.httpStatusCode,
-    required this.message,
-    required this.requestData,
-    required this.runtime,
-    required this.data,
-  });
-
-  /// HTTP status code of operation
-  ///
-  /// Minimum value: 200
-  /// Maximum value: 599
-  int httpStatusCode;
-
-  String message;
-
-  RequestData requestData;
-
-  /// Runtime in seconds for this request
-  double runtime;
-
-  EmailCodeRegisterStartRspAllOfData data;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is EmailCodeLoginStartRsp &&
-     other.httpStatusCode == httpStatusCode &&
-     other.message == message &&
-     other.requestData == requestData &&
-     other.runtime == runtime &&
-     other.data == data;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (httpStatusCode.hashCode) +
-    (message.hashCode) +
-    (requestData.hashCode) +
-    (runtime.hashCode) +
-    (data.hashCode);
-
-  @override
-  String toString() => 'EmailCodeLoginStartRsp[httpStatusCode=$httpStatusCode, message=$message, requestData=$requestData, runtime=$runtime, data=$data]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'httpStatusCode'] = this.httpStatusCode;
-      json[r'message'] = this.message;
-      json[r'requestData'] = this.requestData;
-      json[r'runtime'] = this.runtime;
-      json[r'data'] = this.data;
-    return json;
-  }
-
-  /// Returns a new [EmailCodeLoginStartRsp] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static EmailCodeLoginStartRsp? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "EmailCodeLoginStartRsp[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "EmailCodeLoginStartRsp[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return EmailCodeLoginStartRsp(
-        httpStatusCode: mapValueOfType<int>(json, r'httpStatusCode')!,
-        message: mapValueOfType<String>(json, r'message')!,
-        requestData: RequestData.fromJson(json[r'requestData'])!,
-        runtime: mapValueOfType<double>(json, r'runtime')!,
-        data: EmailCodeRegisterStartRspAllOfData.fromJson(json[r'data'])!,
-      );
-    }
-    return null;
-  }
-
-  static List<EmailCodeLoginStartRsp> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <EmailCodeLoginStartRsp>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = EmailCodeLoginStartRsp.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, EmailCodeLoginStartRsp> mapFromJson(dynamic json) {
-    final map = <String, EmailCodeLoginStartRsp>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = EmailCodeLoginStartRsp.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of EmailCodeLoginStartRsp-objects as value to a dart map
-  static Map<String, List<EmailCodeLoginStartRsp>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<EmailCodeLoginStartRsp>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = EmailCodeLoginStartRsp.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'httpStatusCode',
-    'message',
-    'requestData',
-    'runtime',
-    'data',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/email_code_register_start_req.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/email_code_register_start_req.dart
deleted file mode 100644
index 0d51f60..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/email_code_register_start_req.dart
+++ /dev/null
@@ -1,144 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class EmailCodeRegisterStartReq {
-  /// Returns a new [EmailCodeRegisterStartReq] instance.
-  EmailCodeRegisterStartReq({
-    this.username,
-    required this.email,
-    this.requestID,
-  });
-
-  ///
-  /// Please note: This property should have been non-nullable! Since the specification file
-  /// does not include a default value (using the "default:" property), however, the generated
-  /// source code must fall back to having a nullable type.
-  /// Consider adding a "default:" property in the specification file to hide this note.
-  ///
-  String? username;
-
-  String email;
-
-  /// Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side
-  ///
-  /// Please note: This property should have been non-nullable! Since the specification file
-  /// does not include a default value (using the "default:" property), however, the generated
-  /// source code must fall back to having a nullable type.
-  /// Consider adding a "default:" property in the specification file to hide this note.
-  ///
-  String? requestID;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is EmailCodeRegisterStartReq &&
-     other.username == username &&
-     other.email == email &&
-     other.requestID == requestID;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (username == null ? 0 : username!.hashCode) +
-    (email.hashCode) +
-    (requestID == null ? 0 : requestID!.hashCode);
-
-  @override
-  String toString() => 'EmailCodeRegisterStartReq[username=$username, email=$email, requestID=$requestID]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-    if (this.username != null) {
-      json[r'username'] = this.username;
-    } else {
-      json[r'username'] = null;
-    }
-      json[r'email'] = this.email;
-    if (this.requestID != null) {
-      json[r'requestID'] = this.requestID;
-    } else {
-      json[r'requestID'] = null;
-    }
-    return json;
-  }
-
-  /// Returns a new [EmailCodeRegisterStartReq] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static EmailCodeRegisterStartReq? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "EmailCodeRegisterStartReq[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "EmailCodeRegisterStartReq[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return EmailCodeRegisterStartReq(
-        username: mapValueOfType<String>(json, r'username'),
-        email: mapValueOfType<String>(json, r'email')!,
-        requestID: mapValueOfType<String>(json, r'requestID'),
-      );
-    }
-    return null;
-  }
-
-  static List<EmailCodeRegisterStartReq> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <EmailCodeRegisterStartReq>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = EmailCodeRegisterStartReq.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, EmailCodeRegisterStartReq> mapFromJson(dynamic json) {
-    final map = <String, EmailCodeRegisterStartReq>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = EmailCodeRegisterStartReq.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of EmailCodeRegisterStartReq-objects as value to a dart map
-  static Map<String, List<EmailCodeRegisterStartReq>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<EmailCodeRegisterStartReq>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = EmailCodeRegisterStartReq.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'email',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/email_code_register_start_rsp.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/email_code_register_start_rsp.dart
deleted file mode 100644
index 38ced36..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/email_code_register_start_rsp.dart
+++ /dev/null
@@ -1,146 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class EmailCodeRegisterStartRsp {
-  /// Returns a new [EmailCodeRegisterStartRsp] instance.
-  EmailCodeRegisterStartRsp({
-    required this.httpStatusCode,
-    required this.message,
-    required this.requestData,
-    required this.runtime,
-    required this.data,
-  });
-
-  /// HTTP status code of operation
-  ///
-  /// Minimum value: 200
-  /// Maximum value: 599
-  int httpStatusCode;
-
-  String message;
-
-  RequestData requestData;
-
-  /// Runtime in seconds for this request
-  double runtime;
-
-  EmailCodeRegisterStartRspAllOfData data;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is EmailCodeRegisterStartRsp &&
-     other.httpStatusCode == httpStatusCode &&
-     other.message == message &&
-     other.requestData == requestData &&
-     other.runtime == runtime &&
-     other.data == data;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (httpStatusCode.hashCode) +
-    (message.hashCode) +
-    (requestData.hashCode) +
-    (runtime.hashCode) +
-    (data.hashCode);
-
-  @override
-  String toString() => 'EmailCodeRegisterStartRsp[httpStatusCode=$httpStatusCode, message=$message, requestData=$requestData, runtime=$runtime, data=$data]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'httpStatusCode'] = this.httpStatusCode;
-      json[r'message'] = this.message;
-      json[r'requestData'] = this.requestData;
-      json[r'runtime'] = this.runtime;
-      json[r'data'] = this.data;
-    return json;
-  }
-
-  /// Returns a new [EmailCodeRegisterStartRsp] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static EmailCodeRegisterStartRsp? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "EmailCodeRegisterStartRsp[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "EmailCodeRegisterStartRsp[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return EmailCodeRegisterStartRsp(
-        httpStatusCode: mapValueOfType<int>(json, r'httpStatusCode')!,
-        message: mapValueOfType<String>(json, r'message')!,
-        requestData: RequestData.fromJson(json[r'requestData'])!,
-        runtime: mapValueOfType<double>(json, r'runtime')!,
-        data: EmailCodeRegisterStartRspAllOfData.fromJson(json[r'data'])!,
-      );
-    }
-    return null;
-  }
-
-  static List<EmailCodeRegisterStartRsp> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <EmailCodeRegisterStartRsp>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = EmailCodeRegisterStartRsp.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, EmailCodeRegisterStartRsp> mapFromJson(dynamic json) {
-    final map = <String, EmailCodeRegisterStartRsp>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = EmailCodeRegisterStartRsp.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of EmailCodeRegisterStartRsp-objects as value to a dart map
-  static Map<String, List<EmailCodeRegisterStartRsp>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<EmailCodeRegisterStartRsp>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = EmailCodeRegisterStartRsp.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'httpStatusCode',
-    'message',
-    'requestData',
-    'runtime',
-    'data',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/email_code_register_start_rsp_all_of.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/email_code_register_start_rsp_all_of.dart
deleted file mode 100644
index a2abf70..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/email_code_register_start_rsp_all_of.dart
+++ /dev/null
@@ -1,109 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class EmailCodeRegisterStartRspAllOf {
-  /// Returns a new [EmailCodeRegisterStartRspAllOf] instance.
-  EmailCodeRegisterStartRspAllOf({
-    required this.data,
-  });
-
-  EmailCodeRegisterStartRspAllOfData data;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is EmailCodeRegisterStartRspAllOf &&
-     other.data == data;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (data.hashCode);
-
-  @override
-  String toString() => 'EmailCodeRegisterStartRspAllOf[data=$data]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'data'] = this.data;
-    return json;
-  }
-
-  /// Returns a new [EmailCodeRegisterStartRspAllOf] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static EmailCodeRegisterStartRspAllOf? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "EmailCodeRegisterStartRspAllOf[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "EmailCodeRegisterStartRspAllOf[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return EmailCodeRegisterStartRspAllOf(
-        data: EmailCodeRegisterStartRspAllOfData.fromJson(json[r'data'])!,
-      );
-    }
-    return null;
-  }
-
-  static List<EmailCodeRegisterStartRspAllOf> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <EmailCodeRegisterStartRspAllOf>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = EmailCodeRegisterStartRspAllOf.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, EmailCodeRegisterStartRspAllOf> mapFromJson(dynamic json) {
-    final map = <String, EmailCodeRegisterStartRspAllOf>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = EmailCodeRegisterStartRspAllOf.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of EmailCodeRegisterStartRspAllOf-objects as value to a dart map
-  static Map<String, List<EmailCodeRegisterStartRspAllOf>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<EmailCodeRegisterStartRspAllOf>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = EmailCodeRegisterStartRspAllOf.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'data',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/email_code_register_start_rsp_all_of_data.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/email_code_register_start_rsp_all_of_data.dart
deleted file mode 100644
index 7c6cd0d..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/email_code_register_start_rsp_all_of_data.dart
+++ /dev/null
@@ -1,109 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class EmailCodeRegisterStartRspAllOfData {
-  /// Returns a new [EmailCodeRegisterStartRspAllOfData] instance.
-  EmailCodeRegisterStartRspAllOfData({
-    required this.emailCodeID,
-  });
-
-  String emailCodeID;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is EmailCodeRegisterStartRspAllOfData &&
-     other.emailCodeID == emailCodeID;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (emailCodeID.hashCode);
-
-  @override
-  String toString() => 'EmailCodeRegisterStartRspAllOfData[emailCodeID=$emailCodeID]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'emailCodeID'] = this.emailCodeID;
-    return json;
-  }
-
-  /// Returns a new [EmailCodeRegisterStartRspAllOfData] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static EmailCodeRegisterStartRspAllOfData? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "EmailCodeRegisterStartRspAllOfData[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "EmailCodeRegisterStartRspAllOfData[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return EmailCodeRegisterStartRspAllOfData(
-        emailCodeID: mapValueOfType<String>(json, r'emailCodeID')!,
-      );
-    }
-    return null;
-  }
-
-  static List<EmailCodeRegisterStartRspAllOfData> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <EmailCodeRegisterStartRspAllOfData>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = EmailCodeRegisterStartRspAllOfData.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, EmailCodeRegisterStartRspAllOfData> mapFromJson(dynamic json) {
-    final map = <String, EmailCodeRegisterStartRspAllOfData>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = EmailCodeRegisterStartRspAllOfData.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of EmailCodeRegisterStartRspAllOfData-objects as value to a dart map
-  static Map<String, List<EmailCodeRegisterStartRspAllOfData>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<EmailCodeRegisterStartRspAllOfData>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = EmailCodeRegisterStartRspAllOfData.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'emailCodeID',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/email_code_status_req.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/email_code_status_req.dart
deleted file mode 100644
index bd9eff4..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/email_code_status_req.dart
+++ /dev/null
@@ -1,127 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class EmailCodeStatusReq {
-  /// Returns a new [EmailCodeStatusReq] instance.
-  EmailCodeStatusReq({
-    required this.emailCodeID,
-    this.requestID,
-  });
-
-  String emailCodeID;
-
-  /// Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side
-  ///
-  /// Please note: This property should have been non-nullable! Since the specification file
-  /// does not include a default value (using the "default:" property), however, the generated
-  /// source code must fall back to having a nullable type.
-  /// Consider adding a "default:" property in the specification file to hide this note.
-  ///
-  String? requestID;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is EmailCodeStatusReq &&
-     other.emailCodeID == emailCodeID &&
-     other.requestID == requestID;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (emailCodeID.hashCode) +
-    (requestID == null ? 0 : requestID!.hashCode);
-
-  @override
-  String toString() => 'EmailCodeStatusReq[emailCodeID=$emailCodeID, requestID=$requestID]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'emailCodeID'] = this.emailCodeID;
-    if (this.requestID != null) {
-      json[r'requestID'] = this.requestID;
-    } else {
-      json[r'requestID'] = null;
-    }
-    return json;
-  }
-
-  /// Returns a new [EmailCodeStatusReq] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static EmailCodeStatusReq? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "EmailCodeStatusReq[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "EmailCodeStatusReq[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return EmailCodeStatusReq(
-        emailCodeID: mapValueOfType<String>(json, r'emailCodeID')!,
-        requestID: mapValueOfType<String>(json, r'requestID'),
-      );
-    }
-    return null;
-  }
-
-  static List<EmailCodeStatusReq> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <EmailCodeStatusReq>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = EmailCodeStatusReq.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, EmailCodeStatusReq> mapFromJson(dynamic json) {
-    final map = <String, EmailCodeStatusReq>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = EmailCodeStatusReq.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of EmailCodeStatusReq-objects as value to a dart map
-  static Map<String, List<EmailCodeStatusReq>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<EmailCodeStatusReq>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = EmailCodeStatusReq.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'emailCodeID',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/email_code_status_rsp.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/email_code_status_rsp.dart
deleted file mode 100644
index 8444a20..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/email_code_status_rsp.dart
+++ /dev/null
@@ -1,146 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class EmailCodeStatusRsp {
-  /// Returns a new [EmailCodeStatusRsp] instance.
-  EmailCodeStatusRsp({
-    required this.httpStatusCode,
-    required this.message,
-    required this.requestData,
-    required this.runtime,
-    required this.data,
-  });
-
-  /// HTTP status code of operation
-  ///
-  /// Minimum value: 200
-  /// Maximum value: 599
-  int httpStatusCode;
-
-  String message;
-
-  RequestData requestData;
-
-  /// Runtime in seconds for this request
-  double runtime;
-
-  AuthenticationRsp data;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is EmailCodeStatusRsp &&
-     other.httpStatusCode == httpStatusCode &&
-     other.message == message &&
-     other.requestData == requestData &&
-     other.runtime == runtime &&
-     other.data == data;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (httpStatusCode.hashCode) +
-    (message.hashCode) +
-    (requestData.hashCode) +
-    (runtime.hashCode) +
-    (data.hashCode);
-
-  @override
-  String toString() => 'EmailCodeStatusRsp[httpStatusCode=$httpStatusCode, message=$message, requestData=$requestData, runtime=$runtime, data=$data]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'httpStatusCode'] = this.httpStatusCode;
-      json[r'message'] = this.message;
-      json[r'requestData'] = this.requestData;
-      json[r'runtime'] = this.runtime;
-      json[r'data'] = this.data;
-    return json;
-  }
-
-  /// Returns a new [EmailCodeStatusRsp] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static EmailCodeStatusRsp? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "EmailCodeStatusRsp[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "EmailCodeStatusRsp[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return EmailCodeStatusRsp(
-        httpStatusCode: mapValueOfType<int>(json, r'httpStatusCode')!,
-        message: mapValueOfType<String>(json, r'message')!,
-        requestData: RequestData.fromJson(json[r'requestData'])!,
-        runtime: mapValueOfType<double>(json, r'runtime')!,
-        data: AuthenticationRsp.fromJson(json[r'data'])!,
-      );
-    }
-    return null;
-  }
-
-  static List<EmailCodeStatusRsp> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <EmailCodeStatusRsp>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = EmailCodeStatusRsp.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, EmailCodeStatusRsp> mapFromJson(dynamic json) {
-    final map = <String, EmailCodeStatusRsp>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = EmailCodeStatusRsp.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of EmailCodeStatusRsp-objects as value to a dart map
-  static Map<String, List<EmailCodeStatusRsp>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<EmailCodeStatusRsp>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = EmailCodeStatusRsp.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'httpStatusCode',
-    'message',
-    'requestData',
-    'runtime',
-    'data',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/email_link_confirm_req.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/email_link_confirm_req.dart
deleted file mode 100644
index 4087107..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/email_link_confirm_req.dart
+++ /dev/null
@@ -1,135 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class EmailLinkConfirmReq {
-  /// Returns a new [EmailLinkConfirmReq] instance.
-  EmailLinkConfirmReq({
-    required this.emailLinkID,
-    required this.token,
-    this.requestID,
-  });
-
-  String emailLinkID;
-
-  String token;
-
-  /// Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side
-  ///
-  /// Please note: This property should have been non-nullable! Since the specification file
-  /// does not include a default value (using the "default:" property), however, the generated
-  /// source code must fall back to having a nullable type.
-  /// Consider adding a "default:" property in the specification file to hide this note.
-  ///
-  String? requestID;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is EmailLinkConfirmReq &&
-     other.emailLinkID == emailLinkID &&
-     other.token == token &&
-     other.requestID == requestID;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (emailLinkID.hashCode) +
-    (token.hashCode) +
-    (requestID == null ? 0 : requestID!.hashCode);
-
-  @override
-  String toString() => 'EmailLinkConfirmReq[emailLinkID=$emailLinkID, token=$token, requestID=$requestID]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'emailLinkID'] = this.emailLinkID;
-      json[r'token'] = this.token;
-    if (this.requestID != null) {
-      json[r'requestID'] = this.requestID;
-    } else {
-      json[r'requestID'] = null;
-    }
-    return json;
-  }
-
-  /// Returns a new [EmailLinkConfirmReq] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static EmailLinkConfirmReq? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "EmailLinkConfirmReq[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "EmailLinkConfirmReq[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return EmailLinkConfirmReq(
-        emailLinkID: mapValueOfType<String>(json, r'emailLinkID')!,
-        token: mapValueOfType<String>(json, r'token')!,
-        requestID: mapValueOfType<String>(json, r'requestID'),
-      );
-    }
-    return null;
-  }
-
-  static List<EmailLinkConfirmReq> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <EmailLinkConfirmReq>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = EmailLinkConfirmReq.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, EmailLinkConfirmReq> mapFromJson(dynamic json) {
-    final map = <String, EmailLinkConfirmReq>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = EmailLinkConfirmReq.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of EmailLinkConfirmReq-objects as value to a dart map
-  static Map<String, List<EmailLinkConfirmReq>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<EmailLinkConfirmReq>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = EmailLinkConfirmReq.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'emailLinkID',
-    'token',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/email_link_confirm_rsp.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/email_link_confirm_rsp.dart
deleted file mode 100644
index 7fd0978..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/email_link_confirm_rsp.dart
+++ /dev/null
@@ -1,146 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class EmailLinkConfirmRsp {
-  /// Returns a new [EmailLinkConfirmRsp] instance.
-  EmailLinkConfirmRsp({
-    required this.httpStatusCode,
-    required this.message,
-    required this.requestData,
-    required this.runtime,
-    required this.data,
-  });
-
-  /// HTTP status code of operation
-  ///
-  /// Minimum value: 200
-  /// Maximum value: 599
-  int httpStatusCode;
-
-  String message;
-
-  RequestData requestData;
-
-  /// Runtime in seconds for this request
-  double runtime;
-
-  EmailLinkConfirmRspAllOfData data;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is EmailLinkConfirmRsp &&
-     other.httpStatusCode == httpStatusCode &&
-     other.message == message &&
-     other.requestData == requestData &&
-     other.runtime == runtime &&
-     other.data == data;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (httpStatusCode.hashCode) +
-    (message.hashCode) +
-    (requestData.hashCode) +
-    (runtime.hashCode) +
-    (data.hashCode);
-
-  @override
-  String toString() => 'EmailLinkConfirmRsp[httpStatusCode=$httpStatusCode, message=$message, requestData=$requestData, runtime=$runtime, data=$data]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'httpStatusCode'] = this.httpStatusCode;
-      json[r'message'] = this.message;
-      json[r'requestData'] = this.requestData;
-      json[r'runtime'] = this.runtime;
-      json[r'data'] = this.data;
-    return json;
-  }
-
-  /// Returns a new [EmailLinkConfirmRsp] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static EmailLinkConfirmRsp? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "EmailLinkConfirmRsp[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "EmailLinkConfirmRsp[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return EmailLinkConfirmRsp(
-        httpStatusCode: mapValueOfType<int>(json, r'httpStatusCode')!,
-        message: mapValueOfType<String>(json, r'message')!,
-        requestData: RequestData.fromJson(json[r'requestData'])!,
-        runtime: mapValueOfType<double>(json, r'runtime')!,
-        data: EmailLinkConfirmRspAllOfData.fromJson(json[r'data'])!,
-      );
-    }
-    return null;
-  }
-
-  static List<EmailLinkConfirmRsp> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <EmailLinkConfirmRsp>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = EmailLinkConfirmRsp.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, EmailLinkConfirmRsp> mapFromJson(dynamic json) {
-    final map = <String, EmailLinkConfirmRsp>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = EmailLinkConfirmRsp.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of EmailLinkConfirmRsp-objects as value to a dart map
-  static Map<String, List<EmailLinkConfirmRsp>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<EmailLinkConfirmRsp>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = EmailLinkConfirmRsp.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'httpStatusCode',
-    'message',
-    'requestData',
-    'runtime',
-    'data',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/email_link_confirm_rsp_all_of.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/email_link_confirm_rsp_all_of.dart
deleted file mode 100644
index 8871ddc..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/email_link_confirm_rsp_all_of.dart
+++ /dev/null
@@ -1,109 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class EmailLinkConfirmRspAllOf {
-  /// Returns a new [EmailLinkConfirmRspAllOf] instance.
-  EmailLinkConfirmRspAllOf({
-    required this.data,
-  });
-
-  EmailLinkConfirmRspAllOfData data;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is EmailLinkConfirmRspAllOf &&
-     other.data == data;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (data.hashCode);
-
-  @override
-  String toString() => 'EmailLinkConfirmRspAllOf[data=$data]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'data'] = this.data;
-    return json;
-  }
-
-  /// Returns a new [EmailLinkConfirmRspAllOf] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static EmailLinkConfirmRspAllOf? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "EmailLinkConfirmRspAllOf[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "EmailLinkConfirmRspAllOf[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return EmailLinkConfirmRspAllOf(
-        data: EmailLinkConfirmRspAllOfData.fromJson(json[r'data'])!,
-      );
-    }
-    return null;
-  }
-
-  static List<EmailLinkConfirmRspAllOf> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <EmailLinkConfirmRspAllOf>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = EmailLinkConfirmRspAllOf.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, EmailLinkConfirmRspAllOf> mapFromJson(dynamic json) {
-    final map = <String, EmailLinkConfirmRspAllOf>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = EmailLinkConfirmRspAllOf.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of EmailLinkConfirmRspAllOf-objects as value to a dart map
-  static Map<String, List<EmailLinkConfirmRspAllOf>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<EmailLinkConfirmRspAllOf>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = EmailLinkConfirmRspAllOf.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'data',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/email_link_confirm_rsp_all_of_data.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/email_link_confirm_rsp_all_of_data.dart
deleted file mode 100644
index 4dc7ee2..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/email_link_confirm_rsp_all_of_data.dart
+++ /dev/null
@@ -1,170 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class EmailLinkConfirmRspAllOfData {
-  /// Returns a new [EmailLinkConfirmRspAllOfData] instance.
-  EmailLinkConfirmRspAllOfData({
-    this.authMethods = const [],
-    required this.redirectURL,
-    this.sessionToken,
-    this.longSession,
-    this.shortSession,
-  });
-
-  List<AuthMethod> authMethods;
-
-  String redirectURL;
-
-  /// Only given when using session v1
-  ///
-  /// Please note: This property should have been non-nullable! Since the specification file
-  /// does not include a default value (using the "default:" property), however, the generated
-  /// source code must fall back to having a nullable type.
-  /// Consider adding a "default:" property in the specification file to hide this note.
-  ///
-  String? sessionToken;
-
-  /// Only given when project environment is dev
-  ///
-  /// Please note: This property should have been non-nullable! Since the specification file
-  /// does not include a default value (using the "default:" property), however, the generated
-  /// source code must fall back to having a nullable type.
-  /// Consider adding a "default:" property in the specification file to hide this note.
-  ///
-  String? longSession;
-
-  ///
-  /// Please note: This property should have been non-nullable! Since the specification file
-  /// does not include a default value (using the "default:" property), however, the generated
-  /// source code must fall back to having a nullable type.
-  /// Consider adding a "default:" property in the specification file to hide this note.
-  ///
-  ShortSession? shortSession;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is EmailLinkConfirmRspAllOfData &&
-     other.authMethods == authMethods &&
-     other.redirectURL == redirectURL &&
-     other.sessionToken == sessionToken &&
-     other.longSession == longSession &&
-     other.shortSession == shortSession;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (authMethods.hashCode) +
-    (redirectURL.hashCode) +
-    (sessionToken == null ? 0 : sessionToken!.hashCode) +
-    (longSession == null ? 0 : longSession!.hashCode) +
-    (shortSession == null ? 0 : shortSession!.hashCode);
-
-  @override
-  String toString() => 'EmailLinkConfirmRspAllOfData[authMethods=$authMethods, redirectURL=$redirectURL, sessionToken=$sessionToken, longSession=$longSession, shortSession=$shortSession]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'authMethods'] = this.authMethods;
-      json[r'redirectURL'] = this.redirectURL;
-    if (this.sessionToken != null) {
-      json[r'sessionToken'] = this.sessionToken;
-    } else {
-      json[r'sessionToken'] = null;
-    }
-    if (this.longSession != null) {
-      json[r'longSession'] = this.longSession;
-    } else {
-      json[r'longSession'] = null;
-    }
-    if (this.shortSession != null) {
-      json[r'shortSession'] = this.shortSession;
-    } else {
-      json[r'shortSession'] = null;
-    }
-    return json;
-  }
-
-  /// Returns a new [EmailLinkConfirmRspAllOfData] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static EmailLinkConfirmRspAllOfData? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "EmailLinkConfirmRspAllOfData[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "EmailLinkConfirmRspAllOfData[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return EmailLinkConfirmRspAllOfData(
-        authMethods: AuthMethod.listFromJson(json[r'authMethods']),
-        redirectURL: mapValueOfType<String>(json, r'redirectURL')!,
-        sessionToken: mapValueOfType<String>(json, r'sessionToken'),
-        longSession: mapValueOfType<String>(json, r'longSession'),
-        shortSession: ShortSession.fromJson(json[r'shortSession']),
-      );
-    }
-    return null;
-  }
-
-  static List<EmailLinkConfirmRspAllOfData> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <EmailLinkConfirmRspAllOfData>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = EmailLinkConfirmRspAllOfData.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, EmailLinkConfirmRspAllOfData> mapFromJson(dynamic json) {
-    final map = <String, EmailLinkConfirmRspAllOfData>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = EmailLinkConfirmRspAllOfData.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of EmailLinkConfirmRspAllOfData-objects as value to a dart map
-  static Map<String, List<EmailLinkConfirmRspAllOfData>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<EmailLinkConfirmRspAllOfData>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = EmailLinkConfirmRspAllOfData.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'authMethods',
-    'redirectURL',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/email_link_confirm_rsp_all_of_data_all_of.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/email_link_confirm_rsp_all_of_data_all_of.dart
deleted file mode 100644
index 7441f3c..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/email_link_confirm_rsp_all_of_data_all_of.dart
+++ /dev/null
@@ -1,109 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class EmailLinkConfirmRspAllOfDataAllOf {
-  /// Returns a new [EmailLinkConfirmRspAllOfDataAllOf] instance.
-  EmailLinkConfirmRspAllOfDataAllOf({
-    this.authMethods = const [],
-  });
-
-  List<AuthMethod> authMethods;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is EmailLinkConfirmRspAllOfDataAllOf &&
-     other.authMethods == authMethods;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (authMethods.hashCode);
-
-  @override
-  String toString() => 'EmailLinkConfirmRspAllOfDataAllOf[authMethods=$authMethods]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'authMethods'] = this.authMethods;
-    return json;
-  }
-
-  /// Returns a new [EmailLinkConfirmRspAllOfDataAllOf] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static EmailLinkConfirmRspAllOfDataAllOf? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "EmailLinkConfirmRspAllOfDataAllOf[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "EmailLinkConfirmRspAllOfDataAllOf[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return EmailLinkConfirmRspAllOfDataAllOf(
-        authMethods: AuthMethod.listFromJson(json[r'authMethods']),
-      );
-    }
-    return null;
-  }
-
-  static List<EmailLinkConfirmRspAllOfDataAllOf> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <EmailLinkConfirmRspAllOfDataAllOf>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = EmailLinkConfirmRspAllOfDataAllOf.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, EmailLinkConfirmRspAllOfDataAllOf> mapFromJson(dynamic json) {
-    final map = <String, EmailLinkConfirmRspAllOfDataAllOf>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = EmailLinkConfirmRspAllOfDataAllOf.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of EmailLinkConfirmRspAllOfDataAllOf-objects as value to a dart map
-  static Map<String, List<EmailLinkConfirmRspAllOfDataAllOf>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<EmailLinkConfirmRspAllOfDataAllOf>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = EmailLinkConfirmRspAllOfDataAllOf.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'authMethods',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/email_link_login_start_req.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/email_link_login_start_req.dart
deleted file mode 100644
index f84c8d5..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/email_link_login_start_req.dart
+++ /dev/null
@@ -1,127 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class EmailLinkLoginStartReq {
-  /// Returns a new [EmailLinkLoginStartReq] instance.
-  EmailLinkLoginStartReq({
-    required this.username,
-    this.requestID,
-  });
-
-  String username;
-
-  /// Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side
-  ///
-  /// Please note: This property should have been non-nullable! Since the specification file
-  /// does not include a default value (using the "default:" property), however, the generated
-  /// source code must fall back to having a nullable type.
-  /// Consider adding a "default:" property in the specification file to hide this note.
-  ///
-  String? requestID;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is EmailLinkLoginStartReq &&
-     other.username == username &&
-     other.requestID == requestID;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (username.hashCode) +
-    (requestID == null ? 0 : requestID!.hashCode);
-
-  @override
-  String toString() => 'EmailLinkLoginStartReq[username=$username, requestID=$requestID]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'username'] = this.username;
-    if (this.requestID != null) {
-      json[r'requestID'] = this.requestID;
-    } else {
-      json[r'requestID'] = null;
-    }
-    return json;
-  }
-
-  /// Returns a new [EmailLinkLoginStartReq] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static EmailLinkLoginStartReq? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "EmailLinkLoginStartReq[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "EmailLinkLoginStartReq[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return EmailLinkLoginStartReq(
-        username: mapValueOfType<String>(json, r'username')!,
-        requestID: mapValueOfType<String>(json, r'requestID'),
-      );
-    }
-    return null;
-  }
-
-  static List<EmailLinkLoginStartReq> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <EmailLinkLoginStartReq>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = EmailLinkLoginStartReq.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, EmailLinkLoginStartReq> mapFromJson(dynamic json) {
-    final map = <String, EmailLinkLoginStartReq>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = EmailLinkLoginStartReq.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of EmailLinkLoginStartReq-objects as value to a dart map
-  static Map<String, List<EmailLinkLoginStartReq>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<EmailLinkLoginStartReq>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = EmailLinkLoginStartReq.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'username',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/email_link_login_start_rsp.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/email_link_login_start_rsp.dart
deleted file mode 100644
index 5dc0cdf..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/email_link_login_start_rsp.dart
+++ /dev/null
@@ -1,146 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class EmailLinkLoginStartRsp {
-  /// Returns a new [EmailLinkLoginStartRsp] instance.
-  EmailLinkLoginStartRsp({
-    required this.httpStatusCode,
-    required this.message,
-    required this.requestData,
-    required this.runtime,
-    required this.data,
-  });
-
-  /// HTTP status code of operation
-  ///
-  /// Minimum value: 200
-  /// Maximum value: 599
-  int httpStatusCode;
-
-  String message;
-
-  RequestData requestData;
-
-  /// Runtime in seconds for this request
-  double runtime;
-
-  EmailLinkRegisterStartRspAllOfData data;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is EmailLinkLoginStartRsp &&
-     other.httpStatusCode == httpStatusCode &&
-     other.message == message &&
-     other.requestData == requestData &&
-     other.runtime == runtime &&
-     other.data == data;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (httpStatusCode.hashCode) +
-    (message.hashCode) +
-    (requestData.hashCode) +
-    (runtime.hashCode) +
-    (data.hashCode);
-
-  @override
-  String toString() => 'EmailLinkLoginStartRsp[httpStatusCode=$httpStatusCode, message=$message, requestData=$requestData, runtime=$runtime, data=$data]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'httpStatusCode'] = this.httpStatusCode;
-      json[r'message'] = this.message;
-      json[r'requestData'] = this.requestData;
-      json[r'runtime'] = this.runtime;
-      json[r'data'] = this.data;
-    return json;
-  }
-
-  /// Returns a new [EmailLinkLoginStartRsp] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static EmailLinkLoginStartRsp? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "EmailLinkLoginStartRsp[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "EmailLinkLoginStartRsp[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return EmailLinkLoginStartRsp(
-        httpStatusCode: mapValueOfType<int>(json, r'httpStatusCode')!,
-        message: mapValueOfType<String>(json, r'message')!,
-        requestData: RequestData.fromJson(json[r'requestData'])!,
-        runtime: mapValueOfType<double>(json, r'runtime')!,
-        data: EmailLinkRegisterStartRspAllOfData.fromJson(json[r'data'])!,
-      );
-    }
-    return null;
-  }
-
-  static List<EmailLinkLoginStartRsp> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <EmailLinkLoginStartRsp>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = EmailLinkLoginStartRsp.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, EmailLinkLoginStartRsp> mapFromJson(dynamic json) {
-    final map = <String, EmailLinkLoginStartRsp>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = EmailLinkLoginStartRsp.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of EmailLinkLoginStartRsp-objects as value to a dart map
-  static Map<String, List<EmailLinkLoginStartRsp>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<EmailLinkLoginStartRsp>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = EmailLinkLoginStartRsp.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'httpStatusCode',
-    'message',
-    'requestData',
-    'runtime',
-    'data',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/email_link_register_start_req.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/email_link_register_start_req.dart
deleted file mode 100644
index ccf614e..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/email_link_register_start_req.dart
+++ /dev/null
@@ -1,144 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class EmailLinkRegisterStartReq {
-  /// Returns a new [EmailLinkRegisterStartReq] instance.
-  EmailLinkRegisterStartReq({
-    this.username,
-    required this.email,
-    this.requestID,
-  });
-
-  ///
-  /// Please note: This property should have been non-nullable! Since the specification file
-  /// does not include a default value (using the "default:" property), however, the generated
-  /// source code must fall back to having a nullable type.
-  /// Consider adding a "default:" property in the specification file to hide this note.
-  ///
-  String? username;
-
-  String email;
-
-  /// Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side
-  ///
-  /// Please note: This property should have been non-nullable! Since the specification file
-  /// does not include a default value (using the "default:" property), however, the generated
-  /// source code must fall back to having a nullable type.
-  /// Consider adding a "default:" property in the specification file to hide this note.
-  ///
-  String? requestID;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is EmailLinkRegisterStartReq &&
-     other.username == username &&
-     other.email == email &&
-     other.requestID == requestID;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (username == null ? 0 : username!.hashCode) +
-    (email.hashCode) +
-    (requestID == null ? 0 : requestID!.hashCode);
-
-  @override
-  String toString() => 'EmailLinkRegisterStartReq[username=$username, email=$email, requestID=$requestID]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-    if (this.username != null) {
-      json[r'username'] = this.username;
-    } else {
-      json[r'username'] = null;
-    }
-      json[r'email'] = this.email;
-    if (this.requestID != null) {
-      json[r'requestID'] = this.requestID;
-    } else {
-      json[r'requestID'] = null;
-    }
-    return json;
-  }
-
-  /// Returns a new [EmailLinkRegisterStartReq] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static EmailLinkRegisterStartReq? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "EmailLinkRegisterStartReq[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "EmailLinkRegisterStartReq[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return EmailLinkRegisterStartReq(
-        username: mapValueOfType<String>(json, r'username'),
-        email: mapValueOfType<String>(json, r'email')!,
-        requestID: mapValueOfType<String>(json, r'requestID'),
-      );
-    }
-    return null;
-  }
-
-  static List<EmailLinkRegisterStartReq> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <EmailLinkRegisterStartReq>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = EmailLinkRegisterStartReq.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, EmailLinkRegisterStartReq> mapFromJson(dynamic json) {
-    final map = <String, EmailLinkRegisterStartReq>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = EmailLinkRegisterStartReq.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of EmailLinkRegisterStartReq-objects as value to a dart map
-  static Map<String, List<EmailLinkRegisterStartReq>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<EmailLinkRegisterStartReq>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = EmailLinkRegisterStartReq.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'email',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/email_link_register_start_rsp.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/email_link_register_start_rsp.dart
deleted file mode 100644
index 6c1bc88..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/email_link_register_start_rsp.dart
+++ /dev/null
@@ -1,146 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class EmailLinkRegisterStartRsp {
-  /// Returns a new [EmailLinkRegisterStartRsp] instance.
-  EmailLinkRegisterStartRsp({
-    required this.httpStatusCode,
-    required this.message,
-    required this.requestData,
-    required this.runtime,
-    required this.data,
-  });
-
-  /// HTTP status code of operation
-  ///
-  /// Minimum value: 200
-  /// Maximum value: 599
-  int httpStatusCode;
-
-  String message;
-
-  RequestData requestData;
-
-  /// Runtime in seconds for this request
-  double runtime;
-
-  EmailLinkRegisterStartRspAllOfData data;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is EmailLinkRegisterStartRsp &&
-     other.httpStatusCode == httpStatusCode &&
-     other.message == message &&
-     other.requestData == requestData &&
-     other.runtime == runtime &&
-     other.data == data;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (httpStatusCode.hashCode) +
-    (message.hashCode) +
-    (requestData.hashCode) +
-    (runtime.hashCode) +
-    (data.hashCode);
-
-  @override
-  String toString() => 'EmailLinkRegisterStartRsp[httpStatusCode=$httpStatusCode, message=$message, requestData=$requestData, runtime=$runtime, data=$data]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'httpStatusCode'] = this.httpStatusCode;
-      json[r'message'] = this.message;
-      json[r'requestData'] = this.requestData;
-      json[r'runtime'] = this.runtime;
-      json[r'data'] = this.data;
-    return json;
-  }
-
-  /// Returns a new [EmailLinkRegisterStartRsp] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static EmailLinkRegisterStartRsp? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "EmailLinkRegisterStartRsp[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "EmailLinkRegisterStartRsp[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return EmailLinkRegisterStartRsp(
-        httpStatusCode: mapValueOfType<int>(json, r'httpStatusCode')!,
-        message: mapValueOfType<String>(json, r'message')!,
-        requestData: RequestData.fromJson(json[r'requestData'])!,
-        runtime: mapValueOfType<double>(json, r'runtime')!,
-        data: EmailLinkRegisterStartRspAllOfData.fromJson(json[r'data'])!,
-      );
-    }
-    return null;
-  }
-
-  static List<EmailLinkRegisterStartRsp> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <EmailLinkRegisterStartRsp>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = EmailLinkRegisterStartRsp.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, EmailLinkRegisterStartRsp> mapFromJson(dynamic json) {
-    final map = <String, EmailLinkRegisterStartRsp>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = EmailLinkRegisterStartRsp.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of EmailLinkRegisterStartRsp-objects as value to a dart map
-  static Map<String, List<EmailLinkRegisterStartRsp>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<EmailLinkRegisterStartRsp>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = EmailLinkRegisterStartRsp.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'httpStatusCode',
-    'message',
-    'requestData',
-    'runtime',
-    'data',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/email_link_register_start_rsp_all_of.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/email_link_register_start_rsp_all_of.dart
deleted file mode 100644
index 12e95b9..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/email_link_register_start_rsp_all_of.dart
+++ /dev/null
@@ -1,109 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class EmailLinkRegisterStartRspAllOf {
-  /// Returns a new [EmailLinkRegisterStartRspAllOf] instance.
-  EmailLinkRegisterStartRspAllOf({
-    required this.data,
-  });
-
-  EmailLinkRegisterStartRspAllOfData data;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is EmailLinkRegisterStartRspAllOf &&
-     other.data == data;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (data.hashCode);
-
-  @override
-  String toString() => 'EmailLinkRegisterStartRspAllOf[data=$data]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'data'] = this.data;
-    return json;
-  }
-
-  /// Returns a new [EmailLinkRegisterStartRspAllOf] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static EmailLinkRegisterStartRspAllOf? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "EmailLinkRegisterStartRspAllOf[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "EmailLinkRegisterStartRspAllOf[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return EmailLinkRegisterStartRspAllOf(
-        data: EmailLinkRegisterStartRspAllOfData.fromJson(json[r'data'])!,
-      );
-    }
-    return null;
-  }
-
-  static List<EmailLinkRegisterStartRspAllOf> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <EmailLinkRegisterStartRspAllOf>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = EmailLinkRegisterStartRspAllOf.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, EmailLinkRegisterStartRspAllOf> mapFromJson(dynamic json) {
-    final map = <String, EmailLinkRegisterStartRspAllOf>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = EmailLinkRegisterStartRspAllOf.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of EmailLinkRegisterStartRspAllOf-objects as value to a dart map
-  static Map<String, List<EmailLinkRegisterStartRspAllOf>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<EmailLinkRegisterStartRspAllOf>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = EmailLinkRegisterStartRspAllOf.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'data',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/email_link_register_start_rsp_all_of_data.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/email_link_register_start_rsp_all_of_data.dart
deleted file mode 100644
index 37d72c0..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/email_link_register_start_rsp_all_of_data.dart
+++ /dev/null
@@ -1,109 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class EmailLinkRegisterStartRspAllOfData {
-  /// Returns a new [EmailLinkRegisterStartRspAllOfData] instance.
-  EmailLinkRegisterStartRspAllOfData({
-    required this.emailLinkID,
-  });
-
-  String emailLinkID;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is EmailLinkRegisterStartRspAllOfData &&
-     other.emailLinkID == emailLinkID;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (emailLinkID.hashCode);
-
-  @override
-  String toString() => 'EmailLinkRegisterStartRspAllOfData[emailLinkID=$emailLinkID]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'emailLinkID'] = this.emailLinkID;
-    return json;
-  }
-
-  /// Returns a new [EmailLinkRegisterStartRspAllOfData] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static EmailLinkRegisterStartRspAllOfData? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "EmailLinkRegisterStartRspAllOfData[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "EmailLinkRegisterStartRspAllOfData[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return EmailLinkRegisterStartRspAllOfData(
-        emailLinkID: mapValueOfType<String>(json, r'emailLinkID')!,
-      );
-    }
-    return null;
-  }
-
-  static List<EmailLinkRegisterStartRspAllOfData> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <EmailLinkRegisterStartRspAllOfData>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = EmailLinkRegisterStartRspAllOfData.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, EmailLinkRegisterStartRspAllOfData> mapFromJson(dynamic json) {
-    final map = <String, EmailLinkRegisterStartRspAllOfData>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = EmailLinkRegisterStartRspAllOfData.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of EmailLinkRegisterStartRspAllOfData-objects as value to a dart map
-  static Map<String, List<EmailLinkRegisterStartRspAllOfData>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<EmailLinkRegisterStartRspAllOfData>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = EmailLinkRegisterStartRspAllOfData.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'emailLinkID',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/email_link_status_req.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/email_link_status_req.dart
deleted file mode 100644
index 19da0be..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/email_link_status_req.dart
+++ /dev/null
@@ -1,127 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class EmailLinkStatusReq {
-  /// Returns a new [EmailLinkStatusReq] instance.
-  EmailLinkStatusReq({
-    required this.emailLinkID,
-    this.requestID,
-  });
-
-  String emailLinkID;
-
-  /// Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side
-  ///
-  /// Please note: This property should have been non-nullable! Since the specification file
-  /// does not include a default value (using the "default:" property), however, the generated
-  /// source code must fall back to having a nullable type.
-  /// Consider adding a "default:" property in the specification file to hide this note.
-  ///
-  String? requestID;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is EmailLinkStatusReq &&
-     other.emailLinkID == emailLinkID &&
-     other.requestID == requestID;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (emailLinkID.hashCode) +
-    (requestID == null ? 0 : requestID!.hashCode);
-
-  @override
-  String toString() => 'EmailLinkStatusReq[emailLinkID=$emailLinkID, requestID=$requestID]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'emailLinkID'] = this.emailLinkID;
-    if (this.requestID != null) {
-      json[r'requestID'] = this.requestID;
-    } else {
-      json[r'requestID'] = null;
-    }
-    return json;
-  }
-
-  /// Returns a new [EmailLinkStatusReq] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static EmailLinkStatusReq? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "EmailLinkStatusReq[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "EmailLinkStatusReq[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return EmailLinkStatusReq(
-        emailLinkID: mapValueOfType<String>(json, r'emailLinkID')!,
-        requestID: mapValueOfType<String>(json, r'requestID'),
-      );
-    }
-    return null;
-  }
-
-  static List<EmailLinkStatusReq> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <EmailLinkStatusReq>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = EmailLinkStatusReq.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, EmailLinkStatusReq> mapFromJson(dynamic json) {
-    final map = <String, EmailLinkStatusReq>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = EmailLinkStatusReq.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of EmailLinkStatusReq-objects as value to a dart map
-  static Map<String, List<EmailLinkStatusReq>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<EmailLinkStatusReq>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = EmailLinkStatusReq.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'emailLinkID',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/email_link_status_rsp.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/email_link_status_rsp.dart
deleted file mode 100644
index 3a628cf..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/email_link_status_rsp.dart
+++ /dev/null
@@ -1,146 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class EmailLinkStatusRsp {
-  /// Returns a new [EmailLinkStatusRsp] instance.
-  EmailLinkStatusRsp({
-    required this.httpStatusCode,
-    required this.message,
-    required this.requestData,
-    required this.runtime,
-    required this.data,
-  });
-
-  /// HTTP status code of operation
-  ///
-  /// Minimum value: 200
-  /// Maximum value: 599
-  int httpStatusCode;
-
-  String message;
-
-  RequestData requestData;
-
-  /// Runtime in seconds for this request
-  double runtime;
-
-  AuthenticationRsp data;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is EmailLinkStatusRsp &&
-     other.httpStatusCode == httpStatusCode &&
-     other.message == message &&
-     other.requestData == requestData &&
-     other.runtime == runtime &&
-     other.data == data;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (httpStatusCode.hashCode) +
-    (message.hashCode) +
-    (requestData.hashCode) +
-    (runtime.hashCode) +
-    (data.hashCode);
-
-  @override
-  String toString() => 'EmailLinkStatusRsp[httpStatusCode=$httpStatusCode, message=$message, requestData=$requestData, runtime=$runtime, data=$data]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'httpStatusCode'] = this.httpStatusCode;
-      json[r'message'] = this.message;
-      json[r'requestData'] = this.requestData;
-      json[r'runtime'] = this.runtime;
-      json[r'data'] = this.data;
-    return json;
-  }
-
-  /// Returns a new [EmailLinkStatusRsp] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static EmailLinkStatusRsp? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "EmailLinkStatusRsp[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "EmailLinkStatusRsp[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return EmailLinkStatusRsp(
-        httpStatusCode: mapValueOfType<int>(json, r'httpStatusCode')!,
-        message: mapValueOfType<String>(json, r'message')!,
-        requestData: RequestData.fromJson(json[r'requestData'])!,
-        runtime: mapValueOfType<double>(json, r'runtime')!,
-        data: AuthenticationRsp.fromJson(json[r'data'])!,
-      );
-    }
-    return null;
-  }
-
-  static List<EmailLinkStatusRsp> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <EmailLinkStatusRsp>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = EmailLinkStatusRsp.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, EmailLinkStatusRsp> mapFromJson(dynamic json) {
-    final map = <String, EmailLinkStatusRsp>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = EmailLinkStatusRsp.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of EmailLinkStatusRsp-objects as value to a dart map
-  static Map<String, List<EmailLinkStatusRsp>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<EmailLinkStatusRsp>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = EmailLinkStatusRsp.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'httpStatusCode',
-    'message',
-    'requestData',
-    'runtime',
-    'data',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/empty_req.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/empty_req.dart
deleted file mode 100644
index de62f96..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/empty_req.dart
+++ /dev/null
@@ -1,119 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class EmptyReq {
-  /// Returns a new [EmptyReq] instance.
-  EmptyReq({
-    this.requestID,
-  });
-
-  /// Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side
-  ///
-  /// Please note: This property should have been non-nullable! Since the specification file
-  /// does not include a default value (using the "default:" property), however, the generated
-  /// source code must fall back to having a nullable type.
-  /// Consider adding a "default:" property in the specification file to hide this note.
-  ///
-  String? requestID;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is EmptyReq &&
-     other.requestID == requestID;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (requestID == null ? 0 : requestID!.hashCode);
-
-  @override
-  String toString() => 'EmptyReq[requestID=$requestID]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-    if (this.requestID != null) {
-      json[r'requestID'] = this.requestID;
-    } else {
-      json[r'requestID'] = null;
-    }
-    return json;
-  }
-
-  /// Returns a new [EmptyReq] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static EmptyReq? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "EmptyReq[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "EmptyReq[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return EmptyReq(
-        requestID: mapValueOfType<String>(json, r'requestID'),
-      );
-    }
-    return null;
-  }
-
-  static List<EmptyReq> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <EmptyReq>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = EmptyReq.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, EmptyReq> mapFromJson(dynamic json) {
-    final map = <String, EmptyReq>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = EmptyReq.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of EmptyReq-objects as value to a dart map
-  static Map<String, List<EmptyReq>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<EmptyReq>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = EmptyReq.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/error_rsp.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/error_rsp.dart
deleted file mode 100644
index 8fd1cd8..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/error_rsp.dart
+++ /dev/null
@@ -1,146 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class ErrorRsp {
-  /// Returns a new [ErrorRsp] instance.
-  ErrorRsp({
-    required this.httpStatusCode,
-    required this.message,
-    required this.requestData,
-    required this.runtime,
-    required this.error,
-  });
-
-  /// HTTP status code of operation
-  ///
-  /// Minimum value: 200
-  /// Maximum value: 599
-  int httpStatusCode;
-
-  String message;
-
-  RequestData requestData;
-
-  /// Runtime in seconds for this request
-  double runtime;
-
-  ErrorRspAllOfError error;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is ErrorRsp &&
-     other.httpStatusCode == httpStatusCode &&
-     other.message == message &&
-     other.requestData == requestData &&
-     other.runtime == runtime &&
-     other.error == error;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (httpStatusCode.hashCode) +
-    (message.hashCode) +
-    (requestData.hashCode) +
-    (runtime.hashCode) +
-    (error.hashCode);
-
-  @override
-  String toString() => 'ErrorRsp[httpStatusCode=$httpStatusCode, message=$message, requestData=$requestData, runtime=$runtime, error=$error]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'httpStatusCode'] = this.httpStatusCode;
-      json[r'message'] = this.message;
-      json[r'requestData'] = this.requestData;
-      json[r'runtime'] = this.runtime;
-      json[r'error'] = this.error;
-    return json;
-  }
-
-  /// Returns a new [ErrorRsp] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static ErrorRsp? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "ErrorRsp[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "ErrorRsp[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return ErrorRsp(
-        httpStatusCode: mapValueOfType<int>(json, r'httpStatusCode')!,
-        message: mapValueOfType<String>(json, r'message')!,
-        requestData: RequestData.fromJson(json[r'requestData'])!,
-        runtime: mapValueOfType<double>(json, r'runtime')!,
-        error: ErrorRspAllOfError.fromJson(json[r'error'])!,
-      );
-    }
-    return null;
-  }
-
-  static List<ErrorRsp> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <ErrorRsp>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = ErrorRsp.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, ErrorRsp> mapFromJson(dynamic json) {
-    final map = <String, ErrorRsp>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = ErrorRsp.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of ErrorRsp-objects as value to a dart map
-  static Map<String, List<ErrorRsp>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<ErrorRsp>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = ErrorRsp.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'httpStatusCode',
-    'message',
-    'requestData',
-    'runtime',
-    'error',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/error_rsp_all_of.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/error_rsp_all_of.dart
deleted file mode 100644
index fe6d5eb..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/error_rsp_all_of.dart
+++ /dev/null
@@ -1,109 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class ErrorRspAllOf {
-  /// Returns a new [ErrorRspAllOf] instance.
-  ErrorRspAllOf({
-    required this.error,
-  });
-
-  ErrorRspAllOfError error;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is ErrorRspAllOf &&
-     other.error == error;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (error.hashCode);
-
-  @override
-  String toString() => 'ErrorRspAllOf[error=$error]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'error'] = this.error;
-    return json;
-  }
-
-  /// Returns a new [ErrorRspAllOf] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static ErrorRspAllOf? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "ErrorRspAllOf[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "ErrorRspAllOf[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return ErrorRspAllOf(
-        error: ErrorRspAllOfError.fromJson(json[r'error'])!,
-      );
-    }
-    return null;
-  }
-
-  static List<ErrorRspAllOf> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <ErrorRspAllOf>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = ErrorRspAllOf.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, ErrorRspAllOf> mapFromJson(dynamic json) {
-    final map = <String, ErrorRspAllOf>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = ErrorRspAllOf.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of ErrorRspAllOf-objects as value to a dart map
-  static Map<String, List<ErrorRspAllOf>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<ErrorRspAllOf>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = ErrorRspAllOf.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'error',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/error_rsp_all_of_error.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/error_rsp_all_of_error.dart
deleted file mode 100644
index 2f5ad50..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/error_rsp_all_of_error.dart
+++ /dev/null
@@ -1,147 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class ErrorRspAllOfError {
-  /// Returns a new [ErrorRspAllOfError] instance.
-  ErrorRspAllOfError({
-    required this.type,
-    this.details,
-    this.validation = const [],
-    this.links = const [],
-  });
-
-  /// Type of error
-  String type;
-
-  /// Details of error
-  ///
-  /// Please note: This property should have been non-nullable! Since the specification file
-  /// does not include a default value (using the "default:" property), however, the generated
-  /// source code must fall back to having a nullable type.
-  /// Consider adding a "default:" property in the specification file to hide this note.
-  ///
-  String? details;
-
-  /// Validation errors per field
-  List<ErrorRspAllOfErrorValidation> validation;
-
-  /// Additional links to help understand the error
-  List<String> links;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is ErrorRspAllOfError &&
-     other.type == type &&
-     other.details == details &&
-     other.validation == validation &&
-     other.links == links;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (type.hashCode) +
-    (details == null ? 0 : details!.hashCode) +
-    (validation.hashCode) +
-    (links.hashCode);
-
-  @override
-  String toString() => 'ErrorRspAllOfError[type=$type, details=$details, validation=$validation, links=$links]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'type'] = this.type;
-    if (this.details != null) {
-      json[r'details'] = this.details;
-    } else {
-      json[r'details'] = null;
-    }
-      json[r'validation'] = this.validation;
-      json[r'links'] = this.links;
-    return json;
-  }
-
-  /// Returns a new [ErrorRspAllOfError] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static ErrorRspAllOfError? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "ErrorRspAllOfError[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "ErrorRspAllOfError[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return ErrorRspAllOfError(
-        type: mapValueOfType<String>(json, r'type')!,
-        details: mapValueOfType<String>(json, r'details'),
-        validation: ErrorRspAllOfErrorValidation.listFromJson(json[r'validation']),
-        links: json[r'links'] is List
-            ? (json[r'links'] as List).cast<String>()
-            : const [],
-      );
-    }
-    return null;
-  }
-
-  static List<ErrorRspAllOfError> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <ErrorRspAllOfError>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = ErrorRspAllOfError.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, ErrorRspAllOfError> mapFromJson(dynamic json) {
-    final map = <String, ErrorRspAllOfError>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = ErrorRspAllOfError.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of ErrorRspAllOfError-objects as value to a dart map
-  static Map<String, List<ErrorRspAllOfError>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<ErrorRspAllOfError>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = ErrorRspAllOfError.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'type',
-    'links',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/error_rsp_all_of_error_validation.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/error_rsp_all_of_error_validation.dart
deleted file mode 100644
index 0d71378..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/error_rsp_all_of_error_validation.dart
+++ /dev/null
@@ -1,117 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class ErrorRspAllOfErrorValidation {
-  /// Returns a new [ErrorRspAllOfErrorValidation] instance.
-  ErrorRspAllOfErrorValidation({
-    required this.field,
-    required this.message,
-  });
-
-  String field;
-
-  String message;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is ErrorRspAllOfErrorValidation &&
-     other.field == field &&
-     other.message == message;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (field.hashCode) +
-    (message.hashCode);
-
-  @override
-  String toString() => 'ErrorRspAllOfErrorValidation[field=$field, message=$message]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'field'] = this.field;
-      json[r'message'] = this.message;
-    return json;
-  }
-
-  /// Returns a new [ErrorRspAllOfErrorValidation] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static ErrorRspAllOfErrorValidation? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "ErrorRspAllOfErrorValidation[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "ErrorRspAllOfErrorValidation[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return ErrorRspAllOfErrorValidation(
-        field: mapValueOfType<String>(json, r'field')!,
-        message: mapValueOfType<String>(json, r'message')!,
-      );
-    }
-    return null;
-  }
-
-  static List<ErrorRspAllOfErrorValidation> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <ErrorRspAllOfErrorValidation>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = ErrorRspAllOfErrorValidation.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, ErrorRspAllOfErrorValidation> mapFromJson(dynamic json) {
-    final map = <String, ErrorRspAllOfErrorValidation>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = ErrorRspAllOfErrorValidation.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of ErrorRspAllOfErrorValidation-objects as value to a dart map
-  static Map<String, List<ErrorRspAllOfErrorValidation>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<ErrorRspAllOfErrorValidation>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = ErrorRspAllOfErrorValidation.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'field',
-    'message',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/full_user.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/full_user.dart
deleted file mode 100644
index 78c0dca..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/full_user.dart
+++ /dev/null
@@ -1,168 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class FullUser {
-  /// Returns a new [FullUser] instance.
-  FullUser({
-    required this.ID,
-    required this.name,
-    required this.fullName,
-    required this.created,
-    required this.updated,
-    required this.status,
-    this.emails = const [],
-    this.phoneNumbers = const [],
-  });
-
-  /// ID of the user
-  String ID;
-
-  String name;
-
-  String fullName;
-
-  /// Timestamp of when the entity was created in yyyy-MM-dd'T'HH:mm:ss format
-  String created;
-
-  /// Timestamp of when the entity was last updated in yyyy-MM-dd'T'HH:mm:ss format
-  String updated;
-
-  Status status;
-
-  List<UserEmail> emails;
-
-  List<UserPhoneNumber> phoneNumbers;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is FullUser &&
-     other.ID == ID &&
-     other.name == name &&
-     other.fullName == fullName &&
-     other.created == created &&
-     other.updated == updated &&
-     other.status == status &&
-     other.emails == emails &&
-     other.phoneNumbers == phoneNumbers;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (ID.hashCode) +
-    (name.hashCode) +
-    (fullName.hashCode) +
-    (created.hashCode) +
-    (updated.hashCode) +
-    (status.hashCode) +
-    (emails.hashCode) +
-    (phoneNumbers.hashCode);
-
-  @override
-  String toString() => 'FullUser[ID=$ID, name=$name, fullName=$fullName, created=$created, updated=$updated, status=$status, emails=$emails, phoneNumbers=$phoneNumbers]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'ID'] = this.ID;
-      json[r'name'] = this.name;
-      json[r'fullName'] = this.fullName;
-      json[r'created'] = this.created;
-      json[r'updated'] = this.updated;
-      json[r'status'] = this.status;
-      json[r'emails'] = this.emails;
-      json[r'phoneNumbers'] = this.phoneNumbers;
-    return json;
-  }
-
-  /// Returns a new [FullUser] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static FullUser? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "FullUser[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "FullUser[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return FullUser(
-        ID: mapValueOfType<String>(json, r'ID')!,
-        name: mapValueOfType<String>(json, r'name')!,
-        fullName: mapValueOfType<String>(json, r'fullName')!,
-        created: mapValueOfType<String>(json, r'created')!,
-        updated: mapValueOfType<String>(json, r'updated')!,
-        status: Status.fromJson(json[r'status'])!,
-        emails: UserEmail.listFromJson(json[r'emails']),
-        phoneNumbers: UserPhoneNumber.listFromJson(json[r'phoneNumbers']),
-      );
-    }
-    return null;
-  }
-
-  static List<FullUser> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <FullUser>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = FullUser.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, FullUser> mapFromJson(dynamic json) {
-    final map = <String, FullUser>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = FullUser.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of FullUser-objects as value to a dart map
-  static Map<String, List<FullUser>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<FullUser>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = FullUser.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'ID',
-    'name',
-    'fullName',
-    'created',
-    'updated',
-    'status',
-    'emails',
-    'phoneNumbers',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/generic_rsp.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/generic_rsp.dart
deleted file mode 100644
index 458e874..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/generic_rsp.dart
+++ /dev/null
@@ -1,138 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class GenericRsp {
-  /// Returns a new [GenericRsp] instance.
-  GenericRsp({
-    required this.httpStatusCode,
-    required this.message,
-    required this.requestData,
-    required this.runtime,
-  });
-
-  /// HTTP status code of operation
-  ///
-  /// Minimum value: 200
-  /// Maximum value: 599
-  int httpStatusCode;
-
-  String message;
-
-  RequestData requestData;
-
-  /// Runtime in seconds for this request
-  double runtime;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is GenericRsp &&
-     other.httpStatusCode == httpStatusCode &&
-     other.message == message &&
-     other.requestData == requestData &&
-     other.runtime == runtime;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (httpStatusCode.hashCode) +
-    (message.hashCode) +
-    (requestData.hashCode) +
-    (runtime.hashCode);
-
-  @override
-  String toString() => 'GenericRsp[httpStatusCode=$httpStatusCode, message=$message, requestData=$requestData, runtime=$runtime]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'httpStatusCode'] = this.httpStatusCode;
-      json[r'message'] = this.message;
-      json[r'requestData'] = this.requestData;
-      json[r'runtime'] = this.runtime;
-    return json;
-  }
-
-  /// Returns a new [GenericRsp] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static GenericRsp? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "GenericRsp[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "GenericRsp[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return GenericRsp(
-        httpStatusCode: mapValueOfType<int>(json, r'httpStatusCode')!,
-        message: mapValueOfType<String>(json, r'message')!,
-        requestData: RequestData.fromJson(json[r'requestData'])!,
-        runtime: mapValueOfType<double>(json, r'runtime')!,
-      );
-    }
-    return null;
-  }
-
-  static List<GenericRsp> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <GenericRsp>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = GenericRsp.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, GenericRsp> mapFromJson(dynamic json) {
-    final map = <String, GenericRsp>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = GenericRsp.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of GenericRsp-objects as value to a dart map
-  static Map<String, List<GenericRsp>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<GenericRsp>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = GenericRsp.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'httpStatusCode',
-    'message',
-    'requestData',
-    'runtime',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/jwk.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/jwk.dart
deleted file mode 100644
index f15f4ef..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/jwk.dart
+++ /dev/null
@@ -1,155 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class Jwk {
-  /// Returns a new [Jwk] instance.
-  Jwk({
-    required this.alg,
-    required this.kty,
-    required this.use,
-    required this.n,
-    required this.e,
-    required this.kid,
-  });
-
-  /// The specific cryptographic algorithm used with the key
-  String alg;
-
-  /// The family of cryptographic algorithms used with the key
-  String kty;
-
-  /// How the key was meant to be used; sig represents the signature
-  String use;
-
-  /// The modulus for the RSA public key
-  String n;
-
-  /// The exponent for the RSA public key
-  String e;
-
-  /// The unique identifier for the key
-  String kid;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is Jwk &&
-     other.alg == alg &&
-     other.kty == kty &&
-     other.use == use &&
-     other.n == n &&
-     other.e == e &&
-     other.kid == kid;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (alg.hashCode) +
-    (kty.hashCode) +
-    (use.hashCode) +
-    (n.hashCode) +
-    (e.hashCode) +
-    (kid.hashCode);
-
-  @override
-  String toString() => 'Jwk[alg=$alg, kty=$kty, use=$use, n=$n, e=$e, kid=$kid]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'alg'] = this.alg;
-      json[r'kty'] = this.kty;
-      json[r'use'] = this.use;
-      json[r'n'] = this.n;
-      json[r'e'] = this.e;
-      json[r'kid'] = this.kid;
-    return json;
-  }
-
-  /// Returns a new [Jwk] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static Jwk? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "Jwk[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "Jwk[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return Jwk(
-        alg: mapValueOfType<String>(json, r'alg')!,
-        kty: mapValueOfType<String>(json, r'kty')!,
-        use: mapValueOfType<String>(json, r'use')!,
-        n: mapValueOfType<String>(json, r'n')!,
-        e: mapValueOfType<String>(json, r'e')!,
-        kid: mapValueOfType<String>(json, r'kid')!,
-      );
-    }
-    return null;
-  }
-
-  static List<Jwk> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <Jwk>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = Jwk.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, Jwk> mapFromJson(dynamic json) {
-    final map = <String, Jwk>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = Jwk.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of Jwk-objects as value to a dart map
-  static Map<String, List<Jwk>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<Jwk>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = Jwk.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'alg',
-    'kty',
-    'use',
-    'n',
-    'e',
-    'kid',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/login_identifier_type.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/login_identifier_type.dart
deleted file mode 100644
index bb03bec..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/login_identifier_type.dart
+++ /dev/null
@@ -1,88 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-/// Login Identifier type
-class LoginIdentifierType {
-  /// Instantiate a new enum with the provided [value].
-  const LoginIdentifierType._(this.value);
-
-  /// The underlying value of this enum member.
-  final String value;
-
-  @override
-  String toString() => value;
-
-  String toJson() => value;
-
-  static const email = LoginIdentifierType._(r'email');
-  static const phoneNumber = LoginIdentifierType._(r'phone_number');
-  static const custom = LoginIdentifierType._(r'custom');
-
-  /// List of all possible values in this [enum][LoginIdentifierType].
-  static const values = <LoginIdentifierType>[
-    email,
-    phoneNumber,
-    custom,
-  ];
-
-  static LoginIdentifierType? fromJson(dynamic value) => LoginIdentifierTypeTypeTransformer().decode(value);
-
-  static List<LoginIdentifierType> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <LoginIdentifierType>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = LoginIdentifierType.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-}
-
-/// Transformation class that can [encode] an instance of [LoginIdentifierType] to String,
-/// and [decode] dynamic data back to [LoginIdentifierType].
-class LoginIdentifierTypeTypeTransformer {
-  factory LoginIdentifierTypeTypeTransformer() => _instance ??= const LoginIdentifierTypeTypeTransformer._();
-
-  const LoginIdentifierTypeTypeTransformer._();
-
-  String encode(LoginIdentifierType data) => data.value;
-
-  /// Decodes a [dynamic value][data] to a LoginIdentifierType.
-  ///
-  /// If [allowNull] is true and the [dynamic value][data] cannot be decoded successfully,
-  /// then null is returned. However, if [allowNull] is false and the [dynamic value][data]
-  /// cannot be decoded successfully, then an [UnimplementedError] is thrown.
-  ///
-  /// The [allowNull] is very handy when an API changes and a new enum value is added or removed,
-  /// and users are still using an old app with the old code.
-  LoginIdentifierType? decode(dynamic data, {bool allowNull = true}) {
-    if (data != null) {
-      switch (data) {
-        case r'email': return LoginIdentifierType.email;
-        case r'phone_number': return LoginIdentifierType.phoneNumber;
-        case r'custom': return LoginIdentifierType.custom;
-        default:
-          if (!allowNull) {
-            throw ArgumentError('Unknown enum value to decode: $data');
-          }
-      }
-    }
-    return null;
-  }
-
-  /// Singleton [LoginIdentifierTypeTypeTransformer] instance.
-  static LoginIdentifierTypeTypeTransformer? _instance;
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/login_token_req.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/login_token_req.dart
deleted file mode 100644
index 2ee6692..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/login_token_req.dart
+++ /dev/null
@@ -1,127 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class LoginTokenReq {
-  /// Returns a new [LoginTokenReq] instance.
-  LoginTokenReq({
-    required this.token,
-    this.requestID,
-  });
-
-  String token;
-
-  /// Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side
-  ///
-  /// Please note: This property should have been non-nullable! Since the specification file
-  /// does not include a default value (using the "default:" property), however, the generated
-  /// source code must fall back to having a nullable type.
-  /// Consider adding a "default:" property in the specification file to hide this note.
-  ///
-  String? requestID;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is LoginTokenReq &&
-     other.token == token &&
-     other.requestID == requestID;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (token.hashCode) +
-    (requestID == null ? 0 : requestID!.hashCode);
-
-  @override
-  String toString() => 'LoginTokenReq[token=$token, requestID=$requestID]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'token'] = this.token;
-    if (this.requestID != null) {
-      json[r'requestID'] = this.requestID;
-    } else {
-      json[r'requestID'] = null;
-    }
-    return json;
-  }
-
-  /// Returns a new [LoginTokenReq] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static LoginTokenReq? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "LoginTokenReq[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "LoginTokenReq[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return LoginTokenReq(
-        token: mapValueOfType<String>(json, r'token')!,
-        requestID: mapValueOfType<String>(json, r'requestID'),
-      );
-    }
-    return null;
-  }
-
-  static List<LoginTokenReq> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <LoginTokenReq>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = LoginTokenReq.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, LoginTokenReq> mapFromJson(dynamic json) {
-    final map = <String, LoginTokenReq>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = LoginTokenReq.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of LoginTokenReq-objects as value to a dart map
-  static Map<String, List<LoginTokenReq>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<LoginTokenReq>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = LoginTokenReq.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'token',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/login_token_rsp.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/login_token_rsp.dart
deleted file mode 100644
index 7d1458e..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/login_token_rsp.dart
+++ /dev/null
@@ -1,146 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class LoginTokenRsp {
-  /// Returns a new [LoginTokenRsp] instance.
-  LoginTokenRsp({
-    required this.httpStatusCode,
-    required this.message,
-    required this.requestData,
-    required this.runtime,
-    required this.data,
-  });
-
-  /// HTTP status code of operation
-  ///
-  /// Minimum value: 200
-  /// Maximum value: 599
-  int httpStatusCode;
-
-  String message;
-
-  RequestData requestData;
-
-  /// Runtime in seconds for this request
-  double runtime;
-
-  AuthenticationRsp data;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is LoginTokenRsp &&
-     other.httpStatusCode == httpStatusCode &&
-     other.message == message &&
-     other.requestData == requestData &&
-     other.runtime == runtime &&
-     other.data == data;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (httpStatusCode.hashCode) +
-    (message.hashCode) +
-    (requestData.hashCode) +
-    (runtime.hashCode) +
-    (data.hashCode);
-
-  @override
-  String toString() => 'LoginTokenRsp[httpStatusCode=$httpStatusCode, message=$message, requestData=$requestData, runtime=$runtime, data=$data]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'httpStatusCode'] = this.httpStatusCode;
-      json[r'message'] = this.message;
-      json[r'requestData'] = this.requestData;
-      json[r'runtime'] = this.runtime;
-      json[r'data'] = this.data;
-    return json;
-  }
-
-  /// Returns a new [LoginTokenRsp] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static LoginTokenRsp? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "LoginTokenRsp[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "LoginTokenRsp[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return LoginTokenRsp(
-        httpStatusCode: mapValueOfType<int>(json, r'httpStatusCode')!,
-        message: mapValueOfType<String>(json, r'message')!,
-        requestData: RequestData.fromJson(json[r'requestData'])!,
-        runtime: mapValueOfType<double>(json, r'runtime')!,
-        data: AuthenticationRsp.fromJson(json[r'data'])!,
-      );
-    }
-    return null;
-  }
-
-  static List<LoginTokenRsp> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <LoginTokenRsp>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = LoginTokenRsp.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, LoginTokenRsp> mapFromJson(dynamic json) {
-    final map = <String, LoginTokenRsp>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = LoginTokenRsp.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of LoginTokenRsp-objects as value to a dart map
-  static Map<String, List<LoginTokenRsp>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<LoginTokenRsp>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = LoginTokenRsp.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'httpStatusCode',
-    'message',
-    'requestData',
-    'runtime',
-    'data',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/logout_rsp.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/logout_rsp.dart
deleted file mode 100644
index 84a4a8d..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/logout_rsp.dart
+++ /dev/null
@@ -1,155 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class LogoutRsp {
-  /// Returns a new [LogoutRsp] instance.
-  LogoutRsp({
-    required this.httpStatusCode,
-    required this.message,
-    required this.requestData,
-    required this.runtime,
-    this.shortSession,
-  });
-
-  /// HTTP status code of operation
-  ///
-  /// Minimum value: 200
-  /// Maximum value: 599
-  int httpStatusCode;
-
-  String message;
-
-  RequestData requestData;
-
-  /// Runtime in seconds for this request
-  double runtime;
-
-  ///
-  /// Please note: This property should have been non-nullable! Since the specification file
-  /// does not include a default value (using the "default:" property), however, the generated
-  /// source code must fall back to having a nullable type.
-  /// Consider adding a "default:" property in the specification file to hide this note.
-  ///
-  ShortSession? shortSession;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is LogoutRsp &&
-     other.httpStatusCode == httpStatusCode &&
-     other.message == message &&
-     other.requestData == requestData &&
-     other.runtime == runtime &&
-     other.shortSession == shortSession;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (httpStatusCode.hashCode) +
-    (message.hashCode) +
-    (requestData.hashCode) +
-    (runtime.hashCode) +
-    (shortSession == null ? 0 : shortSession!.hashCode);
-
-  @override
-  String toString() => 'LogoutRsp[httpStatusCode=$httpStatusCode, message=$message, requestData=$requestData, runtime=$runtime, shortSession=$shortSession]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'httpStatusCode'] = this.httpStatusCode;
-      json[r'message'] = this.message;
-      json[r'requestData'] = this.requestData;
-      json[r'runtime'] = this.runtime;
-    if (this.shortSession != null) {
-      json[r'shortSession'] = this.shortSession;
-    } else {
-      json[r'shortSession'] = null;
-    }
-    return json;
-  }
-
-  /// Returns a new [LogoutRsp] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static LogoutRsp? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "LogoutRsp[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "LogoutRsp[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return LogoutRsp(
-        httpStatusCode: mapValueOfType<int>(json, r'httpStatusCode')!,
-        message: mapValueOfType<String>(json, r'message')!,
-        requestData: RequestData.fromJson(json[r'requestData'])!,
-        runtime: mapValueOfType<double>(json, r'runtime')!,
-        shortSession: ShortSession.fromJson(json[r'shortSession']),
-      );
-    }
-    return null;
-  }
-
-  static List<LogoutRsp> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <LogoutRsp>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = LogoutRsp.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, LogoutRsp> mapFromJson(dynamic json) {
-    final map = <String, LogoutRsp>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = LogoutRsp.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of LogoutRsp-objects as value to a dart map
-  static Map<String, List<LogoutRsp>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<LogoutRsp>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = LogoutRsp.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'httpStatusCode',
-    'message',
-    'requestData',
-    'runtime',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/logout_rsp_all_of.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/logout_rsp_all_of.dart
deleted file mode 100644
index b8f973f..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/logout_rsp_all_of.dart
+++ /dev/null
@@ -1,118 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class LogoutRspAllOf {
-  /// Returns a new [LogoutRspAllOf] instance.
-  LogoutRspAllOf({
-    this.shortSession,
-  });
-
-  ///
-  /// Please note: This property should have been non-nullable! Since the specification file
-  /// does not include a default value (using the "default:" property), however, the generated
-  /// source code must fall back to having a nullable type.
-  /// Consider adding a "default:" property in the specification file to hide this note.
-  ///
-  ShortSession? shortSession;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is LogoutRspAllOf &&
-     other.shortSession == shortSession;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (shortSession == null ? 0 : shortSession!.hashCode);
-
-  @override
-  String toString() => 'LogoutRspAllOf[shortSession=$shortSession]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-    if (this.shortSession != null) {
-      json[r'shortSession'] = this.shortSession;
-    } else {
-      json[r'shortSession'] = null;
-    }
-    return json;
-  }
-
-  /// Returns a new [LogoutRspAllOf] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static LogoutRspAllOf? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "LogoutRspAllOf[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "LogoutRspAllOf[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return LogoutRspAllOf(
-        shortSession: ShortSession.fromJson(json[r'shortSession']),
-      );
-    }
-    return null;
-  }
-
-  static List<LogoutRspAllOf> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <LogoutRspAllOf>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = LogoutRspAllOf.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, LogoutRspAllOf> mapFromJson(dynamic json) {
-    final map = <String, LogoutRspAllOf>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = LogoutRspAllOf.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of LogoutRspAllOf-objects as value to a dart map
-  static Map<String, List<LogoutRspAllOf>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<LogoutRspAllOf>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = LogoutRspAllOf.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/me_pass_key_rsp.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/me_pass_key_rsp.dart
deleted file mode 100644
index 0746e53..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/me_pass_key_rsp.dart
+++ /dev/null
@@ -1,146 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class MePassKeyRsp {
-  /// Returns a new [MePassKeyRsp] instance.
-  MePassKeyRsp({
-    required this.httpStatusCode,
-    required this.message,
-    required this.requestData,
-    required this.runtime,
-    required this.data,
-  });
-
-  /// HTTP status code of operation
-  ///
-  /// Minimum value: 200
-  /// Maximum value: 599
-  int httpStatusCode;
-
-  String message;
-
-  RequestData requestData;
-
-  /// Runtime in seconds for this request
-  double runtime;
-
-  PassKeyList data;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is MePassKeyRsp &&
-     other.httpStatusCode == httpStatusCode &&
-     other.message == message &&
-     other.requestData == requestData &&
-     other.runtime == runtime &&
-     other.data == data;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (httpStatusCode.hashCode) +
-    (message.hashCode) +
-    (requestData.hashCode) +
-    (runtime.hashCode) +
-    (data.hashCode);
-
-  @override
-  String toString() => 'MePassKeyRsp[httpStatusCode=$httpStatusCode, message=$message, requestData=$requestData, runtime=$runtime, data=$data]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'httpStatusCode'] = this.httpStatusCode;
-      json[r'message'] = this.message;
-      json[r'requestData'] = this.requestData;
-      json[r'runtime'] = this.runtime;
-      json[r'data'] = this.data;
-    return json;
-  }
-
-  /// Returns a new [MePassKeyRsp] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static MePassKeyRsp? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "MePassKeyRsp[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "MePassKeyRsp[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return MePassKeyRsp(
-        httpStatusCode: mapValueOfType<int>(json, r'httpStatusCode')!,
-        message: mapValueOfType<String>(json, r'message')!,
-        requestData: RequestData.fromJson(json[r'requestData'])!,
-        runtime: mapValueOfType<double>(json, r'runtime')!,
-        data: PassKeyList.fromJson(json[r'data'])!,
-      );
-    }
-    return null;
-  }
-
-  static List<MePassKeyRsp> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <MePassKeyRsp>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = MePassKeyRsp.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, MePassKeyRsp> mapFromJson(dynamic json) {
-    final map = <String, MePassKeyRsp>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = MePassKeyRsp.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of MePassKeyRsp-objects as value to a dart map
-  static Map<String, List<MePassKeyRsp>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<MePassKeyRsp>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = MePassKeyRsp.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'httpStatusCode',
-    'message',
-    'requestData',
-    'runtime',
-    'data',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/me_pass_key_rsp_all_of.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/me_pass_key_rsp_all_of.dart
deleted file mode 100644
index 4048c32..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/me_pass_key_rsp_all_of.dart
+++ /dev/null
@@ -1,109 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class MePassKeyRspAllOf {
-  /// Returns a new [MePassKeyRspAllOf] instance.
-  MePassKeyRspAllOf({
-    required this.data,
-  });
-
-  PassKeyList data;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is MePassKeyRspAllOf &&
-     other.data == data;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (data.hashCode);
-
-  @override
-  String toString() => 'MePassKeyRspAllOf[data=$data]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'data'] = this.data;
-    return json;
-  }
-
-  /// Returns a new [MePassKeyRspAllOf] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static MePassKeyRspAllOf? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "MePassKeyRspAllOf[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "MePassKeyRspAllOf[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return MePassKeyRspAllOf(
-        data: PassKeyList.fromJson(json[r'data'])!,
-      );
-    }
-    return null;
-  }
-
-  static List<MePassKeyRspAllOf> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <MePassKeyRspAllOf>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = MePassKeyRspAllOf.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, MePassKeyRspAllOf> mapFromJson(dynamic json) {
-    final map = <String, MePassKeyRspAllOf>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = MePassKeyRspAllOf.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of MePassKeyRspAllOf-objects as value to a dart map
-  static Map<String, List<MePassKeyRspAllOf>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<MePassKeyRspAllOf>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = MePassKeyRspAllOf.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'data',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/me_rsp.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/me_rsp.dart
deleted file mode 100644
index 4da2fb0..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/me_rsp.dart
+++ /dev/null
@@ -1,146 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class MeRsp {
-  /// Returns a new [MeRsp] instance.
-  MeRsp({
-    required this.httpStatusCode,
-    required this.message,
-    required this.requestData,
-    required this.runtime,
-    required this.data,
-  });
-
-  /// HTTP status code of operation
-  ///
-  /// Minimum value: 200
-  /// Maximum value: 599
-  int httpStatusCode;
-
-  String message;
-
-  RequestData requestData;
-
-  /// Runtime in seconds for this request
-  double runtime;
-
-  FullUser data;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is MeRsp &&
-     other.httpStatusCode == httpStatusCode &&
-     other.message == message &&
-     other.requestData == requestData &&
-     other.runtime == runtime &&
-     other.data == data;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (httpStatusCode.hashCode) +
-    (message.hashCode) +
-    (requestData.hashCode) +
-    (runtime.hashCode) +
-    (data.hashCode);
-
-  @override
-  String toString() => 'MeRsp[httpStatusCode=$httpStatusCode, message=$message, requestData=$requestData, runtime=$runtime, data=$data]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'httpStatusCode'] = this.httpStatusCode;
-      json[r'message'] = this.message;
-      json[r'requestData'] = this.requestData;
-      json[r'runtime'] = this.runtime;
-      json[r'data'] = this.data;
-    return json;
-  }
-
-  /// Returns a new [MeRsp] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static MeRsp? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "MeRsp[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "MeRsp[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return MeRsp(
-        httpStatusCode: mapValueOfType<int>(json, r'httpStatusCode')!,
-        message: mapValueOfType<String>(json, r'message')!,
-        requestData: RequestData.fromJson(json[r'requestData'])!,
-        runtime: mapValueOfType<double>(json, r'runtime')!,
-        data: FullUser.fromJson(json[r'data'])!,
-      );
-    }
-    return null;
-  }
-
-  static List<MeRsp> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <MeRsp>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = MeRsp.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, MeRsp> mapFromJson(dynamic json) {
-    final map = <String, MeRsp>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = MeRsp.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of MeRsp-objects as value to a dart map
-  static Map<String, List<MeRsp>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<MeRsp>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = MeRsp.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'httpStatusCode',
-    'message',
-    'requestData',
-    'runtime',
-    'data',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/me_rsp_all_of.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/me_rsp_all_of.dart
deleted file mode 100644
index a0d7985..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/me_rsp_all_of.dart
+++ /dev/null
@@ -1,109 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class MeRspAllOf {
-  /// Returns a new [MeRspAllOf] instance.
-  MeRspAllOf({
-    required this.data,
-  });
-
-  FullUser data;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is MeRspAllOf &&
-     other.data == data;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (data.hashCode);
-
-  @override
-  String toString() => 'MeRspAllOf[data=$data]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'data'] = this.data;
-    return json;
-  }
-
-  /// Returns a new [MeRspAllOf] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static MeRspAllOf? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "MeRspAllOf[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "MeRspAllOf[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return MeRspAllOf(
-        data: FullUser.fromJson(json[r'data'])!,
-      );
-    }
-    return null;
-  }
-
-  static List<MeRspAllOf> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <MeRspAllOf>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = MeRspAllOf.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, MeRspAllOf> mapFromJson(dynamic json) {
-    final map = <String, MeRspAllOf>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = MeRspAllOf.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of MeRspAllOf-objects as value to a dart map
-  static Map<String, List<MeRspAllOf>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<MeRspAllOf>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = MeRspAllOf.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'data',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/paging.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/paging.dart
deleted file mode 100644
index 78b0cce..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/paging.dart
+++ /dev/null
@@ -1,128 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class Paging {
-  /// Returns a new [Paging] instance.
-  Paging({
-    this.page = 1,
-    required this.totalPages,
-    required this.totalItems,
-  });
-
-  /// current page returned in response
-  int page;
-
-  /// total number of pages available
-  int totalPages;
-
-  /// total number of items available
-  int totalItems;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is Paging &&
-     other.page == page &&
-     other.totalPages == totalPages &&
-     other.totalItems == totalItems;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (page.hashCode) +
-    (totalPages.hashCode) +
-    (totalItems.hashCode);
-
-  @override
-  String toString() => 'Paging[page=$page, totalPages=$totalPages, totalItems=$totalItems]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'page'] = this.page;
-      json[r'totalPages'] = this.totalPages;
-      json[r'totalItems'] = this.totalItems;
-    return json;
-  }
-
-  /// Returns a new [Paging] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static Paging? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "Paging[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "Paging[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return Paging(
-        page: mapValueOfType<int>(json, r'page')!,
-        totalPages: mapValueOfType<int>(json, r'totalPages')!,
-        totalItems: mapValueOfType<int>(json, r'totalItems')!,
-      );
-    }
-    return null;
-  }
-
-  static List<Paging> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <Paging>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = Paging.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, Paging> mapFromJson(dynamic json) {
-    final map = <String, Paging>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = Paging.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of Paging-objects as value to a dart map
-  static Map<String, List<Paging>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<Paging>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = Paging.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'page',
-    'totalPages',
-    'totalItems',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_append_finish_rsp.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_append_finish_rsp.dart
deleted file mode 100644
index 272275c..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_append_finish_rsp.dart
+++ /dev/null
@@ -1,146 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class PassKeyAppendFinishRsp {
-  /// Returns a new [PassKeyAppendFinishRsp] instance.
-  PassKeyAppendFinishRsp({
-    required this.httpStatusCode,
-    required this.message,
-    required this.requestData,
-    required this.runtime,
-    required this.data,
-  });
-
-  /// HTTP status code of operation
-  ///
-  /// Minimum value: 200
-  /// Maximum value: 599
-  int httpStatusCode;
-
-  String message;
-
-  RequestData requestData;
-
-  /// Runtime in seconds for this request
-  double runtime;
-
-  PassKeyAppendFinishRspAllOfData data;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is PassKeyAppendFinishRsp &&
-     other.httpStatusCode == httpStatusCode &&
-     other.message == message &&
-     other.requestData == requestData &&
-     other.runtime == runtime &&
-     other.data == data;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (httpStatusCode.hashCode) +
-    (message.hashCode) +
-    (requestData.hashCode) +
-    (runtime.hashCode) +
-    (data.hashCode);
-
-  @override
-  String toString() => 'PassKeyAppendFinishRsp[httpStatusCode=$httpStatusCode, message=$message, requestData=$requestData, runtime=$runtime, data=$data]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'httpStatusCode'] = this.httpStatusCode;
-      json[r'message'] = this.message;
-      json[r'requestData'] = this.requestData;
-      json[r'runtime'] = this.runtime;
-      json[r'data'] = this.data;
-    return json;
-  }
-
-  /// Returns a new [PassKeyAppendFinishRsp] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static PassKeyAppendFinishRsp? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "PassKeyAppendFinishRsp[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "PassKeyAppendFinishRsp[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return PassKeyAppendFinishRsp(
-        httpStatusCode: mapValueOfType<int>(json, r'httpStatusCode')!,
-        message: mapValueOfType<String>(json, r'message')!,
-        requestData: RequestData.fromJson(json[r'requestData'])!,
-        runtime: mapValueOfType<double>(json, r'runtime')!,
-        data: PassKeyAppendFinishRspAllOfData.fromJson(json[r'data'])!,
-      );
-    }
-    return null;
-  }
-
-  static List<PassKeyAppendFinishRsp> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <PassKeyAppendFinishRsp>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = PassKeyAppendFinishRsp.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, PassKeyAppendFinishRsp> mapFromJson(dynamic json) {
-    final map = <String, PassKeyAppendFinishRsp>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = PassKeyAppendFinishRsp.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of PassKeyAppendFinishRsp-objects as value to a dart map
-  static Map<String, List<PassKeyAppendFinishRsp>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<PassKeyAppendFinishRsp>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = PassKeyAppendFinishRsp.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'httpStatusCode',
-    'message',
-    'requestData',
-    'runtime',
-    'data',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_append_finish_rsp_all_of.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_append_finish_rsp_all_of.dart
deleted file mode 100644
index 492e60a..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_append_finish_rsp_all_of.dart
+++ /dev/null
@@ -1,109 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class PassKeyAppendFinishRspAllOf {
-  /// Returns a new [PassKeyAppendFinishRspAllOf] instance.
-  PassKeyAppendFinishRspAllOf({
-    required this.data,
-  });
-
-  PassKeyAppendFinishRspAllOfData data;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is PassKeyAppendFinishRspAllOf &&
-     other.data == data;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (data.hashCode);
-
-  @override
-  String toString() => 'PassKeyAppendFinishRspAllOf[data=$data]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'data'] = this.data;
-    return json;
-  }
-
-  /// Returns a new [PassKeyAppendFinishRspAllOf] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static PassKeyAppendFinishRspAllOf? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "PassKeyAppendFinishRspAllOf[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "PassKeyAppendFinishRspAllOf[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return PassKeyAppendFinishRspAllOf(
-        data: PassKeyAppendFinishRspAllOfData.fromJson(json[r'data'])!,
-      );
-    }
-    return null;
-  }
-
-  static List<PassKeyAppendFinishRspAllOf> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <PassKeyAppendFinishRspAllOf>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = PassKeyAppendFinishRspAllOf.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, PassKeyAppendFinishRspAllOf> mapFromJson(dynamic json) {
-    final map = <String, PassKeyAppendFinishRspAllOf>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = PassKeyAppendFinishRspAllOf.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of PassKeyAppendFinishRspAllOf-objects as value to a dart map
-  static Map<String, List<PassKeyAppendFinishRspAllOf>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<PassKeyAppendFinishRspAllOf>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = PassKeyAppendFinishRspAllOf.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'data',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_append_finish_rsp_all_of_data.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_append_finish_rsp_all_of_data.dart
deleted file mode 100644
index 3b62f51..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_append_finish_rsp_all_of_data.dart
+++ /dev/null
@@ -1,109 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class PassKeyAppendFinishRspAllOfData {
-  /// Returns a new [PassKeyAppendFinishRspAllOfData] instance.
-  PassKeyAppendFinishRspAllOfData({
-    required this.redirectURL,
-  });
-
-  String redirectURL;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is PassKeyAppendFinishRspAllOfData &&
-     other.redirectURL == redirectURL;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (redirectURL.hashCode);
-
-  @override
-  String toString() => 'PassKeyAppendFinishRspAllOfData[redirectURL=$redirectURL]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'redirectURL'] = this.redirectURL;
-    return json;
-  }
-
-  /// Returns a new [PassKeyAppendFinishRspAllOfData] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static PassKeyAppendFinishRspAllOfData? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "PassKeyAppendFinishRspAllOfData[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "PassKeyAppendFinishRspAllOfData[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return PassKeyAppendFinishRspAllOfData(
-        redirectURL: mapValueOfType<String>(json, r'redirectURL')!,
-      );
-    }
-    return null;
-  }
-
-  static List<PassKeyAppendFinishRspAllOfData> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <PassKeyAppendFinishRspAllOfData>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = PassKeyAppendFinishRspAllOfData.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, PassKeyAppendFinishRspAllOfData> mapFromJson(dynamic json) {
-    final map = <String, PassKeyAppendFinishRspAllOfData>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = PassKeyAppendFinishRspAllOfData.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of PassKeyAppendFinishRspAllOfData-objects as value to a dart map
-  static Map<String, List<PassKeyAppendFinishRspAllOfData>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<PassKeyAppendFinishRspAllOfData>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = PassKeyAppendFinishRspAllOfData.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'redirectURL',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_associate_start_req.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_associate_start_req.dart
deleted file mode 100644
index 0bdacef..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_associate_start_req.dart
+++ /dev/null
@@ -1,127 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class PassKeyAssociateStartReq {
-  /// Returns a new [PassKeyAssociateStartReq] instance.
-  PassKeyAssociateStartReq({
-    required this.associationToken,
-    this.requestID,
-  });
-
-  String associationToken;
-
-  /// Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side
-  ///
-  /// Please note: This property should have been non-nullable! Since the specification file
-  /// does not include a default value (using the "default:" property), however, the generated
-  /// source code must fall back to having a nullable type.
-  /// Consider adding a "default:" property in the specification file to hide this note.
-  ///
-  String? requestID;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is PassKeyAssociateStartReq &&
-     other.associationToken == associationToken &&
-     other.requestID == requestID;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (associationToken.hashCode) +
-    (requestID == null ? 0 : requestID!.hashCode);
-
-  @override
-  String toString() => 'PassKeyAssociateStartReq[associationToken=$associationToken, requestID=$requestID]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'associationToken'] = this.associationToken;
-    if (this.requestID != null) {
-      json[r'requestID'] = this.requestID;
-    } else {
-      json[r'requestID'] = null;
-    }
-    return json;
-  }
-
-  /// Returns a new [PassKeyAssociateStartReq] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static PassKeyAssociateStartReq? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "PassKeyAssociateStartReq[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "PassKeyAssociateStartReq[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return PassKeyAssociateStartReq(
-        associationToken: mapValueOfType<String>(json, r'associationToken')!,
-        requestID: mapValueOfType<String>(json, r'requestID'),
-      );
-    }
-    return null;
-  }
-
-  static List<PassKeyAssociateStartReq> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <PassKeyAssociateStartReq>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = PassKeyAssociateStartReq.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, PassKeyAssociateStartReq> mapFromJson(dynamic json) {
-    final map = <String, PassKeyAssociateStartReq>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = PassKeyAssociateStartReq.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of PassKeyAssociateStartReq-objects as value to a dart map
-  static Map<String, List<PassKeyAssociateStartReq>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<PassKeyAssociateStartReq>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = PassKeyAssociateStartReq.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'associationToken',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_credential_exists_req.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_credential_exists_req.dart
deleted file mode 100644
index 5deb2d1..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_credential_exists_req.dart
+++ /dev/null
@@ -1,135 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class PassKeyCredentialExistsReq {
-  /// Returns a new [PassKeyCredentialExistsReq] instance.
-  PassKeyCredentialExistsReq({
-    required this.loginIdentifier,
-    required this.loginIdentifierType,
-    this.requestID,
-  });
-
-  String loginIdentifier;
-
-  LoginIdentifierType loginIdentifierType;
-
-  /// Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side
-  ///
-  /// Please note: This property should have been non-nullable! Since the specification file
-  /// does not include a default value (using the "default:" property), however, the generated
-  /// source code must fall back to having a nullable type.
-  /// Consider adding a "default:" property in the specification file to hide this note.
-  ///
-  String? requestID;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is PassKeyCredentialExistsReq &&
-     other.loginIdentifier == loginIdentifier &&
-     other.loginIdentifierType == loginIdentifierType &&
-     other.requestID == requestID;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (loginIdentifier.hashCode) +
-    (loginIdentifierType.hashCode) +
-    (requestID == null ? 0 : requestID!.hashCode);
-
-  @override
-  String toString() => 'PassKeyCredentialExistsReq[loginIdentifier=$loginIdentifier, loginIdentifierType=$loginIdentifierType, requestID=$requestID]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'loginIdentifier'] = this.loginIdentifier;
-      json[r'loginIdentifierType'] = this.loginIdentifierType;
-    if (this.requestID != null) {
-      json[r'requestID'] = this.requestID;
-    } else {
-      json[r'requestID'] = null;
-    }
-    return json;
-  }
-
-  /// Returns a new [PassKeyCredentialExistsReq] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static PassKeyCredentialExistsReq? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "PassKeyCredentialExistsReq[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "PassKeyCredentialExistsReq[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return PassKeyCredentialExistsReq(
-        loginIdentifier: mapValueOfType<String>(json, r'loginIdentifier')!,
-        loginIdentifierType: LoginIdentifierType.fromJson(json[r'loginIdentifierType'])!,
-        requestID: mapValueOfType<String>(json, r'requestID'),
-      );
-    }
-    return null;
-  }
-
-  static List<PassKeyCredentialExistsReq> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <PassKeyCredentialExistsReq>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = PassKeyCredentialExistsReq.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, PassKeyCredentialExistsReq> mapFromJson(dynamic json) {
-    final map = <String, PassKeyCredentialExistsReq>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = PassKeyCredentialExistsReq.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of PassKeyCredentialExistsReq-objects as value to a dart map
-  static Map<String, List<PassKeyCredentialExistsReq>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<PassKeyCredentialExistsReq>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = PassKeyCredentialExistsReq.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'loginIdentifier',
-    'loginIdentifierType',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_credential_exists_rsp.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_credential_exists_rsp.dart
deleted file mode 100644
index 46dcc80..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_credential_exists_rsp.dart
+++ /dev/null
@@ -1,146 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class PassKeyCredentialExistsRsp {
-  /// Returns a new [PassKeyCredentialExistsRsp] instance.
-  PassKeyCredentialExistsRsp({
-    required this.httpStatusCode,
-    required this.message,
-    required this.requestData,
-    required this.runtime,
-    required this.exists,
-  });
-
-  /// HTTP status code of operation
-  ///
-  /// Minimum value: 200
-  /// Maximum value: 599
-  int httpStatusCode;
-
-  String message;
-
-  RequestData requestData;
-
-  /// Runtime in seconds for this request
-  double runtime;
-
-  bool exists;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is PassKeyCredentialExistsRsp &&
-     other.httpStatusCode == httpStatusCode &&
-     other.message == message &&
-     other.requestData == requestData &&
-     other.runtime == runtime &&
-     other.exists == exists;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (httpStatusCode.hashCode) +
-    (message.hashCode) +
-    (requestData.hashCode) +
-    (runtime.hashCode) +
-    (exists.hashCode);
-
-  @override
-  String toString() => 'PassKeyCredentialExistsRsp[httpStatusCode=$httpStatusCode, message=$message, requestData=$requestData, runtime=$runtime, exists=$exists]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'httpStatusCode'] = this.httpStatusCode;
-      json[r'message'] = this.message;
-      json[r'requestData'] = this.requestData;
-      json[r'runtime'] = this.runtime;
-      json[r'exists'] = this.exists;
-    return json;
-  }
-
-  /// Returns a new [PassKeyCredentialExistsRsp] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static PassKeyCredentialExistsRsp? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "PassKeyCredentialExistsRsp[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "PassKeyCredentialExistsRsp[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return PassKeyCredentialExistsRsp(
-        httpStatusCode: mapValueOfType<int>(json, r'httpStatusCode')!,
-        message: mapValueOfType<String>(json, r'message')!,
-        requestData: RequestData.fromJson(json[r'requestData'])!,
-        runtime: mapValueOfType<double>(json, r'runtime')!,
-        exists: mapValueOfType<bool>(json, r'exists')!,
-      );
-    }
-    return null;
-  }
-
-  static List<PassKeyCredentialExistsRsp> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <PassKeyCredentialExistsRsp>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = PassKeyCredentialExistsRsp.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, PassKeyCredentialExistsRsp> mapFromJson(dynamic json) {
-    final map = <String, PassKeyCredentialExistsRsp>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = PassKeyCredentialExistsRsp.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of PassKeyCredentialExistsRsp-objects as value to a dart map
-  static Map<String, List<PassKeyCredentialExistsRsp>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<PassKeyCredentialExistsRsp>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = PassKeyCredentialExistsRsp.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'httpStatusCode',
-    'message',
-    'requestData',
-    'runtime',
-    'exists',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_credential_exists_rsp_all_of.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_credential_exists_rsp_all_of.dart
deleted file mode 100644
index 5ee6c61..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_credential_exists_rsp_all_of.dart
+++ /dev/null
@@ -1,109 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class PassKeyCredentialExistsRspAllOf {
-  /// Returns a new [PassKeyCredentialExistsRspAllOf] instance.
-  PassKeyCredentialExistsRspAllOf({
-    required this.exists,
-  });
-
-  bool exists;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is PassKeyCredentialExistsRspAllOf &&
-     other.exists == exists;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (exists.hashCode);
-
-  @override
-  String toString() => 'PassKeyCredentialExistsRspAllOf[exists=$exists]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'exists'] = this.exists;
-    return json;
-  }
-
-  /// Returns a new [PassKeyCredentialExistsRspAllOf] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static PassKeyCredentialExistsRspAllOf? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "PassKeyCredentialExistsRspAllOf[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "PassKeyCredentialExistsRspAllOf[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return PassKeyCredentialExistsRspAllOf(
-        exists: mapValueOfType<bool>(json, r'exists')!,
-      );
-    }
-    return null;
-  }
-
-  static List<PassKeyCredentialExistsRspAllOf> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <PassKeyCredentialExistsRspAllOf>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = PassKeyCredentialExistsRspAllOf.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, PassKeyCredentialExistsRspAllOf> mapFromJson(dynamic json) {
-    final map = <String, PassKeyCredentialExistsRspAllOf>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = PassKeyCredentialExistsRspAllOf.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of PassKeyCredentialExistsRspAllOf-objects as value to a dart map
-  static Map<String, List<PassKeyCredentialExistsRspAllOf>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<PassKeyCredentialExistsRspAllOf>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = PassKeyCredentialExistsRspAllOf.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'exists',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_finish_req.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_finish_req.dart
deleted file mode 100644
index 0848145..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_finish_req.dart
+++ /dev/null
@@ -1,127 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class PassKeyFinishReq {
-  /// Returns a new [PassKeyFinishReq] instance.
-  PassKeyFinishReq({
-    required this.signedChallenge,
-    this.requestID,
-  });
-
-  String signedChallenge;
-
-  /// Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side
-  ///
-  /// Please note: This property should have been non-nullable! Since the specification file
-  /// does not include a default value (using the "default:" property), however, the generated
-  /// source code must fall back to having a nullable type.
-  /// Consider adding a "default:" property in the specification file to hide this note.
-  ///
-  String? requestID;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is PassKeyFinishReq &&
-     other.signedChallenge == signedChallenge &&
-     other.requestID == requestID;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (signedChallenge.hashCode) +
-    (requestID == null ? 0 : requestID!.hashCode);
-
-  @override
-  String toString() => 'PassKeyFinishReq[signedChallenge=$signedChallenge, requestID=$requestID]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'signedChallenge'] = this.signedChallenge;
-    if (this.requestID != null) {
-      json[r'requestID'] = this.requestID;
-    } else {
-      json[r'requestID'] = null;
-    }
-    return json;
-  }
-
-  /// Returns a new [PassKeyFinishReq] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static PassKeyFinishReq? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "PassKeyFinishReq[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "PassKeyFinishReq[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return PassKeyFinishReq(
-        signedChallenge: mapValueOfType<String>(json, r'signedChallenge')!,
-        requestID: mapValueOfType<String>(json, r'requestID'),
-      );
-    }
-    return null;
-  }
-
-  static List<PassKeyFinishReq> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <PassKeyFinishReq>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = PassKeyFinishReq.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, PassKeyFinishReq> mapFromJson(dynamic json) {
-    final map = <String, PassKeyFinishReq>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = PassKeyFinishReq.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of PassKeyFinishReq-objects as value to a dart map
-  static Map<String, List<PassKeyFinishReq>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<PassKeyFinishReq>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = PassKeyFinishReq.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'signedChallenge',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_item.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_item.dart
deleted file mode 100644
index 334eb0a..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_item.dart
+++ /dev/null
@@ -1,251 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class PassKeyItem {
-  /// Returns a new [PassKeyItem] instance.
-  PassKeyItem({
-    required this.id,
-    required this.aaguid,
-    required this.userAgent,
-    required this.attestationType,
-    this.transport = const [],
-    required this.backupEligible,
-    required this.backupState,
-    required this.status,
-    required this.created,
-  });
-
-  String id;
-
-  String aaguid;
-
-  String userAgent;
-
-  String attestationType;
-
-  List<String> transport;
-
-  bool backupEligible;
-
-  bool backupState;
-
-  /// Status
-  PassKeyItemStatusEnum status;
-
-  /// Timestamp of when the entity was created in yyyy-MM-dd'T'HH:mm:ss format
-  String created;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is PassKeyItem &&
-     other.id == id &&
-     other.aaguid == aaguid &&
-     other.userAgent == userAgent &&
-     other.attestationType == attestationType &&
-     other.transport == transport &&
-     other.backupEligible == backupEligible &&
-     other.backupState == backupState &&
-     other.status == status &&
-     other.created == created;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (id.hashCode) +
-    (aaguid.hashCode) +
-    (userAgent.hashCode) +
-    (attestationType.hashCode) +
-    (transport.hashCode) +
-    (backupEligible.hashCode) +
-    (backupState.hashCode) +
-    (status.hashCode) +
-    (created.hashCode);
-
-  @override
-  String toString() => 'PassKeyItem[id=$id, aaguid=$aaguid, userAgent=$userAgent, attestationType=$attestationType, transport=$transport, backupEligible=$backupEligible, backupState=$backupState, status=$status, created=$created]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'id'] = this.id;
-      json[r'aaguid'] = this.aaguid;
-      json[r'userAgent'] = this.userAgent;
-      json[r'attestationType'] = this.attestationType;
-      json[r'transport'] = this.transport;
-      json[r'backupEligible'] = this.backupEligible;
-      json[r'backupState'] = this.backupState;
-      json[r'status'] = this.status;
-      json[r'created'] = this.created;
-    return json;
-  }
-
-  /// Returns a new [PassKeyItem] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static PassKeyItem? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "PassKeyItem[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "PassKeyItem[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return PassKeyItem(
-        id: mapValueOfType<String>(json, r'id')!,
-        aaguid: mapValueOfType<String>(json, r'aaguid')!,
-        userAgent: mapValueOfType<String>(json, r'userAgent')!,
-        attestationType: mapValueOfType<String>(json, r'attestationType')!,
-        transport: json[r'transport'] is List
-            ? (json[r'transport'] as List).cast<String>()
-            : const [],
-        backupEligible: mapValueOfType<bool>(json, r'backupEligible')!,
-        backupState: mapValueOfType<bool>(json, r'backupState')!,
-        status: PassKeyItemStatusEnum.fromJson(json[r'status'])!,
-        created: mapValueOfType<String>(json, r'created')!,
-      );
-    }
-    return null;
-  }
-
-  static List<PassKeyItem> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <PassKeyItem>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = PassKeyItem.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, PassKeyItem> mapFromJson(dynamic json) {
-    final map = <String, PassKeyItem>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = PassKeyItem.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of PassKeyItem-objects as value to a dart map
-  static Map<String, List<PassKeyItem>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<PassKeyItem>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = PassKeyItem.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'id',
-    'aaguid',
-    'userAgent',
-    'attestationType',
-    'transport',
-    'backupEligible',
-    'backupState',
-    'status',
-    'created',
-  };
-}
-
-/// Status
-class PassKeyItemStatusEnum {
-  /// Instantiate a new enum with the provided [value].
-  const PassKeyItemStatusEnum._(this.value);
-
-  /// The underlying value of this enum member.
-  final String value;
-
-  @override
-  String toString() => value;
-
-  String toJson() => value;
-
-  static const pending = PassKeyItemStatusEnum._(r'pending');
-  static const active = PassKeyItemStatusEnum._(r'active');
-
-  /// List of all possible values in this [enum][PassKeyItemStatusEnum].
-  static const values = <PassKeyItemStatusEnum>[
-    pending,
-    active,
-  ];
-
-  static PassKeyItemStatusEnum? fromJson(dynamic value) => PassKeyItemStatusEnumTypeTransformer().decode(value);
-
-  static List<PassKeyItemStatusEnum> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <PassKeyItemStatusEnum>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = PassKeyItemStatusEnum.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-}
-
-/// Transformation class that can [encode] an instance of [PassKeyItemStatusEnum] to String,
-/// and [decode] dynamic data back to [PassKeyItemStatusEnum].
-class PassKeyItemStatusEnumTypeTransformer {
-  factory PassKeyItemStatusEnumTypeTransformer() => _instance ??= const PassKeyItemStatusEnumTypeTransformer._();
-
-  const PassKeyItemStatusEnumTypeTransformer._();
-
-  String encode(PassKeyItemStatusEnum data) => data.value;
-
-  /// Decodes a [dynamic value][data] to a PassKeyItemStatusEnum.
-  ///
-  /// If [allowNull] is true and the [dynamic value][data] cannot be decoded successfully,
-  /// then null is returned. However, if [allowNull] is false and the [dynamic value][data]
-  /// cannot be decoded successfully, then an [UnimplementedError] is thrown.
-  ///
-  /// The [allowNull] is very handy when an API changes and a new enum value is added or removed,
-  /// and users are still using an old app with the old code.
-  PassKeyItemStatusEnum? decode(dynamic data, {bool allowNull = true}) {
-    if (data != null) {
-      switch (data) {
-        case r'pending': return PassKeyItemStatusEnum.pending;
-        case r'active': return PassKeyItemStatusEnum.active;
-        default:
-          if (!allowNull) {
-            throw ArgumentError('Unknown enum value to decode: $data');
-          }
-      }
-    }
-    return null;
-  }
-
-  /// Singleton [PassKeyItemStatusEnumTypeTransformer] instance.
-  static PassKeyItemStatusEnumTypeTransformer? _instance;
-}
-
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_list.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_list.dart
deleted file mode 100644
index 978340c..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_list.dart
+++ /dev/null
@@ -1,126 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class PassKeyList {
-  /// Returns a new [PassKeyList] instance.
-  PassKeyList({
-    this.passkeys = const [],
-    this.paging,
-  });
-
-  List<PassKeyItem> passkeys;
-
-  ///
-  /// Please note: This property should have been non-nullable! Since the specification file
-  /// does not include a default value (using the "default:" property), however, the generated
-  /// source code must fall back to having a nullable type.
-  /// Consider adding a "default:" property in the specification file to hide this note.
-  ///
-  Paging? paging;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is PassKeyList &&
-     other.passkeys == passkeys &&
-     other.paging == paging;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (passkeys.hashCode) +
-    (paging == null ? 0 : paging!.hashCode);
-
-  @override
-  String toString() => 'PassKeyList[passkeys=$passkeys, paging=$paging]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'passkeys'] = this.passkeys;
-    if (this.paging != null) {
-      json[r'paging'] = this.paging;
-    } else {
-      json[r'paging'] = null;
-    }
-    return json;
-  }
-
-  /// Returns a new [PassKeyList] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static PassKeyList? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "PassKeyList[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "PassKeyList[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return PassKeyList(
-        passkeys: PassKeyItem.listFromJson(json[r'passkeys']),
-        paging: Paging.fromJson(json[r'paging']),
-      );
-    }
-    return null;
-  }
-
-  static List<PassKeyList> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <PassKeyList>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = PassKeyList.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, PassKeyList> mapFromJson(dynamic json) {
-    final map = <String, PassKeyList>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = PassKeyList.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of PassKeyList-objects as value to a dart map
-  static Map<String, List<PassKeyList>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<PassKeyList>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = PassKeyList.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'passkeys',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_login_finish_rsp.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_login_finish_rsp.dart
deleted file mode 100644
index c16278d..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_login_finish_rsp.dart
+++ /dev/null
@@ -1,146 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class PassKeyLoginFinishRsp {
-  /// Returns a new [PassKeyLoginFinishRsp] instance.
-  PassKeyLoginFinishRsp({
-    required this.httpStatusCode,
-    required this.message,
-    required this.requestData,
-    required this.runtime,
-    required this.data,
-  });
-
-  /// HTTP status code of operation
-  ///
-  /// Minimum value: 200
-  /// Maximum value: 599
-  int httpStatusCode;
-
-  String message;
-
-  RequestData requestData;
-
-  /// Runtime in seconds for this request
-  double runtime;
-
-  PassKeyLoginFinishRspAllOfData data;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is PassKeyLoginFinishRsp &&
-     other.httpStatusCode == httpStatusCode &&
-     other.message == message &&
-     other.requestData == requestData &&
-     other.runtime == runtime &&
-     other.data == data;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (httpStatusCode.hashCode) +
-    (message.hashCode) +
-    (requestData.hashCode) +
-    (runtime.hashCode) +
-    (data.hashCode);
-
-  @override
-  String toString() => 'PassKeyLoginFinishRsp[httpStatusCode=$httpStatusCode, message=$message, requestData=$requestData, runtime=$runtime, data=$data]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'httpStatusCode'] = this.httpStatusCode;
-      json[r'message'] = this.message;
-      json[r'requestData'] = this.requestData;
-      json[r'runtime'] = this.runtime;
-      json[r'data'] = this.data;
-    return json;
-  }
-
-  /// Returns a new [PassKeyLoginFinishRsp] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static PassKeyLoginFinishRsp? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "PassKeyLoginFinishRsp[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "PassKeyLoginFinishRsp[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return PassKeyLoginFinishRsp(
-        httpStatusCode: mapValueOfType<int>(json, r'httpStatusCode')!,
-        message: mapValueOfType<String>(json, r'message')!,
-        requestData: RequestData.fromJson(json[r'requestData'])!,
-        runtime: mapValueOfType<double>(json, r'runtime')!,
-        data: PassKeyLoginFinishRspAllOfData.fromJson(json[r'data'])!,
-      );
-    }
-    return null;
-  }
-
-  static List<PassKeyLoginFinishRsp> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <PassKeyLoginFinishRsp>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = PassKeyLoginFinishRsp.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, PassKeyLoginFinishRsp> mapFromJson(dynamic json) {
-    final map = <String, PassKeyLoginFinishRsp>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = PassKeyLoginFinishRsp.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of PassKeyLoginFinishRsp-objects as value to a dart map
-  static Map<String, List<PassKeyLoginFinishRsp>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<PassKeyLoginFinishRsp>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = PassKeyLoginFinishRsp.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'httpStatusCode',
-    'message',
-    'requestData',
-    'runtime',
-    'data',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_login_finish_rsp_all_of.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_login_finish_rsp_all_of.dart
deleted file mode 100644
index 5086456..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_login_finish_rsp_all_of.dart
+++ /dev/null
@@ -1,109 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class PassKeyLoginFinishRspAllOf {
-  /// Returns a new [PassKeyLoginFinishRspAllOf] instance.
-  PassKeyLoginFinishRspAllOf({
-    required this.data,
-  });
-
-  PassKeyLoginFinishRspAllOfData data;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is PassKeyLoginFinishRspAllOf &&
-     other.data == data;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (data.hashCode);
-
-  @override
-  String toString() => 'PassKeyLoginFinishRspAllOf[data=$data]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'data'] = this.data;
-    return json;
-  }
-
-  /// Returns a new [PassKeyLoginFinishRspAllOf] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static PassKeyLoginFinishRspAllOf? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "PassKeyLoginFinishRspAllOf[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "PassKeyLoginFinishRspAllOf[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return PassKeyLoginFinishRspAllOf(
-        data: PassKeyLoginFinishRspAllOfData.fromJson(json[r'data'])!,
-      );
-    }
-    return null;
-  }
-
-  static List<PassKeyLoginFinishRspAllOf> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <PassKeyLoginFinishRspAllOf>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = PassKeyLoginFinishRspAllOf.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, PassKeyLoginFinishRspAllOf> mapFromJson(dynamic json) {
-    final map = <String, PassKeyLoginFinishRspAllOf>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = PassKeyLoginFinishRspAllOf.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of PassKeyLoginFinishRspAllOf-objects as value to a dart map
-  static Map<String, List<PassKeyLoginFinishRspAllOf>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<PassKeyLoginFinishRspAllOf>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = PassKeyLoginFinishRspAllOf.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'data',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_login_finish_rsp_all_of_data.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_login_finish_rsp_all_of_data.dart
deleted file mode 100644
index dd1a174..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_login_finish_rsp_all_of_data.dart
+++ /dev/null
@@ -1,178 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class PassKeyLoginFinishRspAllOfData {
-  /// Returns a new [PassKeyLoginFinishRspAllOfData] instance.
-  PassKeyLoginFinishRspAllOfData({
-    required this.username,
-    required this.confirmedCredential,
-    required this.redirectURL,
-    this.sessionToken,
-    this.longSession,
-    this.shortSession,
-  });
-
-  String username;
-
-  bool confirmedCredential;
-
-  String redirectURL;
-
-  /// Only given when using session v1
-  ///
-  /// Please note: This property should have been non-nullable! Since the specification file
-  /// does not include a default value (using the "default:" property), however, the generated
-  /// source code must fall back to having a nullable type.
-  /// Consider adding a "default:" property in the specification file to hide this note.
-  ///
-  String? sessionToken;
-
-  /// Only given when project environment is dev
-  ///
-  /// Please note: This property should have been non-nullable! Since the specification file
-  /// does not include a default value (using the "default:" property), however, the generated
-  /// source code must fall back to having a nullable type.
-  /// Consider adding a "default:" property in the specification file to hide this note.
-  ///
-  String? longSession;
-
-  ///
-  /// Please note: This property should have been non-nullable! Since the specification file
-  /// does not include a default value (using the "default:" property), however, the generated
-  /// source code must fall back to having a nullable type.
-  /// Consider adding a "default:" property in the specification file to hide this note.
-  ///
-  ShortSession? shortSession;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is PassKeyLoginFinishRspAllOfData &&
-     other.username == username &&
-     other.confirmedCredential == confirmedCredential &&
-     other.redirectURL == redirectURL &&
-     other.sessionToken == sessionToken &&
-     other.longSession == longSession &&
-     other.shortSession == shortSession;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (username.hashCode) +
-    (confirmedCredential.hashCode) +
-    (redirectURL.hashCode) +
-    (sessionToken == null ? 0 : sessionToken!.hashCode) +
-    (longSession == null ? 0 : longSession!.hashCode) +
-    (shortSession == null ? 0 : shortSession!.hashCode);
-
-  @override
-  String toString() => 'PassKeyLoginFinishRspAllOfData[username=$username, confirmedCredential=$confirmedCredential, redirectURL=$redirectURL, sessionToken=$sessionToken, longSession=$longSession, shortSession=$shortSession]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'username'] = this.username;
-      json[r'confirmedCredential'] = this.confirmedCredential;
-      json[r'redirectURL'] = this.redirectURL;
-    if (this.sessionToken != null) {
-      json[r'sessionToken'] = this.sessionToken;
-    } else {
-      json[r'sessionToken'] = null;
-    }
-    if (this.longSession != null) {
-      json[r'longSession'] = this.longSession;
-    } else {
-      json[r'longSession'] = null;
-    }
-    if (this.shortSession != null) {
-      json[r'shortSession'] = this.shortSession;
-    } else {
-      json[r'shortSession'] = null;
-    }
-    return json;
-  }
-
-  /// Returns a new [PassKeyLoginFinishRspAllOfData] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static PassKeyLoginFinishRspAllOfData? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "PassKeyLoginFinishRspAllOfData[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "PassKeyLoginFinishRspAllOfData[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return PassKeyLoginFinishRspAllOfData(
-        username: mapValueOfType<String>(json, r'username')!,
-        confirmedCredential: mapValueOfType<bool>(json, r'confirmedCredential')!,
-        redirectURL: mapValueOfType<String>(json, r'redirectURL')!,
-        sessionToken: mapValueOfType<String>(json, r'sessionToken'),
-        longSession: mapValueOfType<String>(json, r'longSession'),
-        shortSession: ShortSession.fromJson(json[r'shortSession']),
-      );
-    }
-    return null;
-  }
-
-  static List<PassKeyLoginFinishRspAllOfData> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <PassKeyLoginFinishRspAllOfData>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = PassKeyLoginFinishRspAllOfData.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, PassKeyLoginFinishRspAllOfData> mapFromJson(dynamic json) {
-    final map = <String, PassKeyLoginFinishRspAllOfData>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = PassKeyLoginFinishRspAllOfData.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of PassKeyLoginFinishRspAllOfData-objects as value to a dart map
-  static Map<String, List<PassKeyLoginFinishRspAllOfData>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<PassKeyLoginFinishRspAllOfData>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = PassKeyLoginFinishRspAllOfData.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'username',
-    'confirmedCredential',
-    'redirectURL',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_login_finish_rsp_all_of_data_all_of.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_login_finish_rsp_all_of_data_all_of.dart
deleted file mode 100644
index c70134d..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_login_finish_rsp_all_of_data_all_of.dart
+++ /dev/null
@@ -1,117 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class PassKeyLoginFinishRspAllOfDataAllOf {
-  /// Returns a new [PassKeyLoginFinishRspAllOfDataAllOf] instance.
-  PassKeyLoginFinishRspAllOfDataAllOf({
-    required this.username,
-    required this.confirmedCredential,
-  });
-
-  String username;
-
-  bool confirmedCredential;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is PassKeyLoginFinishRspAllOfDataAllOf &&
-     other.username == username &&
-     other.confirmedCredential == confirmedCredential;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (username.hashCode) +
-    (confirmedCredential.hashCode);
-
-  @override
-  String toString() => 'PassKeyLoginFinishRspAllOfDataAllOf[username=$username, confirmedCredential=$confirmedCredential]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'username'] = this.username;
-      json[r'confirmedCredential'] = this.confirmedCredential;
-    return json;
-  }
-
-  /// Returns a new [PassKeyLoginFinishRspAllOfDataAllOf] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static PassKeyLoginFinishRspAllOfDataAllOf? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "PassKeyLoginFinishRspAllOfDataAllOf[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "PassKeyLoginFinishRspAllOfDataAllOf[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return PassKeyLoginFinishRspAllOfDataAllOf(
-        username: mapValueOfType<String>(json, r'username')!,
-        confirmedCredential: mapValueOfType<bool>(json, r'confirmedCredential')!,
-      );
-    }
-    return null;
-  }
-
-  static List<PassKeyLoginFinishRspAllOfDataAllOf> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <PassKeyLoginFinishRspAllOfDataAllOf>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = PassKeyLoginFinishRspAllOfDataAllOf.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, PassKeyLoginFinishRspAllOfDataAllOf> mapFromJson(dynamic json) {
-    final map = <String, PassKeyLoginFinishRspAllOfDataAllOf>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = PassKeyLoginFinishRspAllOfDataAllOf.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of PassKeyLoginFinishRspAllOfDataAllOf-objects as value to a dart map
-  static Map<String, List<PassKeyLoginFinishRspAllOfDataAllOf>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<PassKeyLoginFinishRspAllOfDataAllOf>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = PassKeyLoginFinishRspAllOfDataAllOf.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'username',
-    'confirmedCredential',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_login_start_req.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_login_start_req.dart
deleted file mode 100644
index 0ee3bec..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_login_start_req.dart
+++ /dev/null
@@ -1,128 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class PassKeyLoginStartReq {
-  /// Returns a new [PassKeyLoginStartReq] instance.
-  PassKeyLoginStartReq({
-    required this.username,
-    this.requestID,
-  });
-
-  /// Users login name
-  String username;
-
-  /// Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side
-  ///
-  /// Please note: This property should have been non-nullable! Since the specification file
-  /// does not include a default value (using the "default:" property), however, the generated
-  /// source code must fall back to having a nullable type.
-  /// Consider adding a "default:" property in the specification file to hide this note.
-  ///
-  String? requestID;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is PassKeyLoginStartReq &&
-     other.username == username &&
-     other.requestID == requestID;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (username.hashCode) +
-    (requestID == null ? 0 : requestID!.hashCode);
-
-  @override
-  String toString() => 'PassKeyLoginStartReq[username=$username, requestID=$requestID]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'username'] = this.username;
-    if (this.requestID != null) {
-      json[r'requestID'] = this.requestID;
-    } else {
-      json[r'requestID'] = null;
-    }
-    return json;
-  }
-
-  /// Returns a new [PassKeyLoginStartReq] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static PassKeyLoginStartReq? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "PassKeyLoginStartReq[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "PassKeyLoginStartReq[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return PassKeyLoginStartReq(
-        username: mapValueOfType<String>(json, r'username')!,
-        requestID: mapValueOfType<String>(json, r'requestID'),
-      );
-    }
-    return null;
-  }
-
-  static List<PassKeyLoginStartReq> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <PassKeyLoginStartReq>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = PassKeyLoginStartReq.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, PassKeyLoginStartReq> mapFromJson(dynamic json) {
-    final map = <String, PassKeyLoginStartReq>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = PassKeyLoginStartReq.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of PassKeyLoginStartReq-objects as value to a dart map
-  static Map<String, List<PassKeyLoginStartReq>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<PassKeyLoginStartReq>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = PassKeyLoginStartReq.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'username',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_mediation_start_req.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_mediation_start_req.dart
deleted file mode 100644
index 12f73c1..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_mediation_start_req.dart
+++ /dev/null
@@ -1,136 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class PassKeyMediationStartReq {
-  /// Returns a new [PassKeyMediationStartReq] instance.
-  PassKeyMediationStartReq({
-    this.requestID,
-    this.username,
-  });
-
-  /// Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side
-  ///
-  /// Please note: This property should have been non-nullable! Since the specification file
-  /// does not include a default value (using the "default:" property), however, the generated
-  /// source code must fall back to having a nullable type.
-  /// Consider adding a "default:" property in the specification file to hide this note.
-  ///
-  String? requestID;
-
-  ///
-  /// Please note: This property should have been non-nullable! Since the specification file
-  /// does not include a default value (using the "default:" property), however, the generated
-  /// source code must fall back to having a nullable type.
-  /// Consider adding a "default:" property in the specification file to hide this note.
-  ///
-  String? username;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is PassKeyMediationStartReq &&
-     other.requestID == requestID &&
-     other.username == username;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (requestID == null ? 0 : requestID!.hashCode) +
-    (username == null ? 0 : username!.hashCode);
-
-  @override
-  String toString() => 'PassKeyMediationStartReq[requestID=$requestID, username=$username]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-    if (this.requestID != null) {
-      json[r'requestID'] = this.requestID;
-    } else {
-      json[r'requestID'] = null;
-    }
-    if (this.username != null) {
-      json[r'username'] = this.username;
-    } else {
-      json[r'username'] = null;
-    }
-    return json;
-  }
-
-  /// Returns a new [PassKeyMediationStartReq] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static PassKeyMediationStartReq? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "PassKeyMediationStartReq[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "PassKeyMediationStartReq[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return PassKeyMediationStartReq(
-        requestID: mapValueOfType<String>(json, r'requestID'),
-        username: mapValueOfType<String>(json, r'username'),
-      );
-    }
-    return null;
-  }
-
-  static List<PassKeyMediationStartReq> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <PassKeyMediationStartReq>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = PassKeyMediationStartReq.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, PassKeyMediationStartReq> mapFromJson(dynamic json) {
-    final map = <String, PassKeyMediationStartReq>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = PassKeyMediationStartReq.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of PassKeyMediationStartReq-objects as value to a dart map
-  static Map<String, List<PassKeyMediationStartReq>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<PassKeyMediationStartReq>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = PassKeyMediationStartReq.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_mediation_start_rsp.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_mediation_start_rsp.dart
deleted file mode 100644
index b1c3784..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_mediation_start_rsp.dart
+++ /dev/null
@@ -1,146 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class PassKeyMediationStartRsp {
-  /// Returns a new [PassKeyMediationStartRsp] instance.
-  PassKeyMediationStartRsp({
-    required this.httpStatusCode,
-    required this.message,
-    required this.requestData,
-    required this.runtime,
-    required this.data,
-  });
-
-  /// HTTP status code of operation
-  ///
-  /// Minimum value: 200
-  /// Maximum value: 599
-  int httpStatusCode;
-
-  String message;
-
-  RequestData requestData;
-
-  /// Runtime in seconds for this request
-  double runtime;
-
-  PassKeyMediationStartRspAllOfData data;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is PassKeyMediationStartRsp &&
-     other.httpStatusCode == httpStatusCode &&
-     other.message == message &&
-     other.requestData == requestData &&
-     other.runtime == runtime &&
-     other.data == data;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (httpStatusCode.hashCode) +
-    (message.hashCode) +
-    (requestData.hashCode) +
-    (runtime.hashCode) +
-    (data.hashCode);
-
-  @override
-  String toString() => 'PassKeyMediationStartRsp[httpStatusCode=$httpStatusCode, message=$message, requestData=$requestData, runtime=$runtime, data=$data]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'httpStatusCode'] = this.httpStatusCode;
-      json[r'message'] = this.message;
-      json[r'requestData'] = this.requestData;
-      json[r'runtime'] = this.runtime;
-      json[r'data'] = this.data;
-    return json;
-  }
-
-  /// Returns a new [PassKeyMediationStartRsp] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static PassKeyMediationStartRsp? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "PassKeyMediationStartRsp[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "PassKeyMediationStartRsp[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return PassKeyMediationStartRsp(
-        httpStatusCode: mapValueOfType<int>(json, r'httpStatusCode')!,
-        message: mapValueOfType<String>(json, r'message')!,
-        requestData: RequestData.fromJson(json[r'requestData'])!,
-        runtime: mapValueOfType<double>(json, r'runtime')!,
-        data: PassKeyMediationStartRspAllOfData.fromJson(json[r'data'])!,
-      );
-    }
-    return null;
-  }
-
-  static List<PassKeyMediationStartRsp> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <PassKeyMediationStartRsp>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = PassKeyMediationStartRsp.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, PassKeyMediationStartRsp> mapFromJson(dynamic json) {
-    final map = <String, PassKeyMediationStartRsp>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = PassKeyMediationStartRsp.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of PassKeyMediationStartRsp-objects as value to a dart map
-  static Map<String, List<PassKeyMediationStartRsp>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<PassKeyMediationStartRsp>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = PassKeyMediationStartRsp.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'httpStatusCode',
-    'message',
-    'requestData',
-    'runtime',
-    'data',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_mediation_start_rsp_all_of.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_mediation_start_rsp_all_of.dart
deleted file mode 100644
index 58916a1..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_mediation_start_rsp_all_of.dart
+++ /dev/null
@@ -1,109 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class PassKeyMediationStartRspAllOf {
-  /// Returns a new [PassKeyMediationStartRspAllOf] instance.
-  PassKeyMediationStartRspAllOf({
-    required this.data,
-  });
-
-  PassKeyMediationStartRspAllOfData data;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is PassKeyMediationStartRspAllOf &&
-     other.data == data;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (data.hashCode);
-
-  @override
-  String toString() => 'PassKeyMediationStartRspAllOf[data=$data]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'data'] = this.data;
-    return json;
-  }
-
-  /// Returns a new [PassKeyMediationStartRspAllOf] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static PassKeyMediationStartRspAllOf? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "PassKeyMediationStartRspAllOf[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "PassKeyMediationStartRspAllOf[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return PassKeyMediationStartRspAllOf(
-        data: PassKeyMediationStartRspAllOfData.fromJson(json[r'data'])!,
-      );
-    }
-    return null;
-  }
-
-  static List<PassKeyMediationStartRspAllOf> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <PassKeyMediationStartRspAllOf>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = PassKeyMediationStartRspAllOf.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, PassKeyMediationStartRspAllOf> mapFromJson(dynamic json) {
-    final map = <String, PassKeyMediationStartRspAllOf>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = PassKeyMediationStartRspAllOf.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of PassKeyMediationStartRspAllOf-objects as value to a dart map
-  static Map<String, List<PassKeyMediationStartRspAllOf>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<PassKeyMediationStartRspAllOf>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = PassKeyMediationStartRspAllOf.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'data',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_mediation_start_rsp_all_of_data.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_mediation_start_rsp_all_of_data.dart
deleted file mode 100644
index a570608..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_mediation_start_rsp_all_of_data.dart
+++ /dev/null
@@ -1,110 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class PassKeyMediationStartRspAllOfData {
-  /// Returns a new [PassKeyMediationStartRspAllOfData] instance.
-  PassKeyMediationStartRspAllOfData({
-    required this.challenge,
-  });
-
-  /// Contains json payload data for start webauthn mediation challenge
-  String challenge;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is PassKeyMediationStartRspAllOfData &&
-     other.challenge == challenge;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (challenge.hashCode);
-
-  @override
-  String toString() => 'PassKeyMediationStartRspAllOfData[challenge=$challenge]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'challenge'] = this.challenge;
-    return json;
-  }
-
-  /// Returns a new [PassKeyMediationStartRspAllOfData] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static PassKeyMediationStartRspAllOfData? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "PassKeyMediationStartRspAllOfData[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "PassKeyMediationStartRspAllOfData[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return PassKeyMediationStartRspAllOfData(
-        challenge: mapValueOfType<String>(json, r'challenge')!,
-      );
-    }
-    return null;
-  }
-
-  static List<PassKeyMediationStartRspAllOfData> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <PassKeyMediationStartRspAllOfData>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = PassKeyMediationStartRspAllOfData.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, PassKeyMediationStartRspAllOfData> mapFromJson(dynamic json) {
-    final map = <String, PassKeyMediationStartRspAllOfData>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = PassKeyMediationStartRspAllOfData.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of PassKeyMediationStartRspAllOfData-objects as value to a dart map
-  static Map<String, List<PassKeyMediationStartRspAllOfData>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<PassKeyMediationStartRspAllOfData>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = PassKeyMediationStartRspAllOfData.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'challenge',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_register_finish_rsp.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_register_finish_rsp.dart
deleted file mode 100644
index c5f4fb5..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_register_finish_rsp.dart
+++ /dev/null
@@ -1,146 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class PassKeyRegisterFinishRsp {
-  /// Returns a new [PassKeyRegisterFinishRsp] instance.
-  PassKeyRegisterFinishRsp({
-    required this.httpStatusCode,
-    required this.message,
-    required this.requestData,
-    required this.runtime,
-    required this.data,
-  });
-
-  /// HTTP status code of operation
-  ///
-  /// Minimum value: 200
-  /// Maximum value: 599
-  int httpStatusCode;
-
-  String message;
-
-  RequestData requestData;
-
-  /// Runtime in seconds for this request
-  double runtime;
-
-  AuthenticationRsp data;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is PassKeyRegisterFinishRsp &&
-     other.httpStatusCode == httpStatusCode &&
-     other.message == message &&
-     other.requestData == requestData &&
-     other.runtime == runtime &&
-     other.data == data;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (httpStatusCode.hashCode) +
-    (message.hashCode) +
-    (requestData.hashCode) +
-    (runtime.hashCode) +
-    (data.hashCode);
-
-  @override
-  String toString() => 'PassKeyRegisterFinishRsp[httpStatusCode=$httpStatusCode, message=$message, requestData=$requestData, runtime=$runtime, data=$data]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'httpStatusCode'] = this.httpStatusCode;
-      json[r'message'] = this.message;
-      json[r'requestData'] = this.requestData;
-      json[r'runtime'] = this.runtime;
-      json[r'data'] = this.data;
-    return json;
-  }
-
-  /// Returns a new [PassKeyRegisterFinishRsp] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static PassKeyRegisterFinishRsp? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "PassKeyRegisterFinishRsp[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "PassKeyRegisterFinishRsp[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return PassKeyRegisterFinishRsp(
-        httpStatusCode: mapValueOfType<int>(json, r'httpStatusCode')!,
-        message: mapValueOfType<String>(json, r'message')!,
-        requestData: RequestData.fromJson(json[r'requestData'])!,
-        runtime: mapValueOfType<double>(json, r'runtime')!,
-        data: AuthenticationRsp.fromJson(json[r'data'])!,
-      );
-    }
-    return null;
-  }
-
-  static List<PassKeyRegisterFinishRsp> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <PassKeyRegisterFinishRsp>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = PassKeyRegisterFinishRsp.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, PassKeyRegisterFinishRsp> mapFromJson(dynamic json) {
-    final map = <String, PassKeyRegisterFinishRsp>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = PassKeyRegisterFinishRsp.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of PassKeyRegisterFinishRsp-objects as value to a dart map
-  static Map<String, List<PassKeyRegisterFinishRsp>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<PassKeyRegisterFinishRsp>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = PassKeyRegisterFinishRsp.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'httpStatusCode',
-    'message',
-    'requestData',
-    'runtime',
-    'data',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_register_finish_rsp_all_of.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_register_finish_rsp_all_of.dart
deleted file mode 100644
index 58999cd..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_register_finish_rsp_all_of.dart
+++ /dev/null
@@ -1,109 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class PassKeyRegisterFinishRspAllOf {
-  /// Returns a new [PassKeyRegisterFinishRspAllOf] instance.
-  PassKeyRegisterFinishRspAllOf({
-    required this.data,
-  });
-
-  AuthenticationRsp data;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is PassKeyRegisterFinishRspAllOf &&
-     other.data == data;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (data.hashCode);
-
-  @override
-  String toString() => 'PassKeyRegisterFinishRspAllOf[data=$data]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'data'] = this.data;
-    return json;
-  }
-
-  /// Returns a new [PassKeyRegisterFinishRspAllOf] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static PassKeyRegisterFinishRspAllOf? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "PassKeyRegisterFinishRspAllOf[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "PassKeyRegisterFinishRspAllOf[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return PassKeyRegisterFinishRspAllOf(
-        data: AuthenticationRsp.fromJson(json[r'data'])!,
-      );
-    }
-    return null;
-  }
-
-  static List<PassKeyRegisterFinishRspAllOf> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <PassKeyRegisterFinishRspAllOf>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = PassKeyRegisterFinishRspAllOf.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, PassKeyRegisterFinishRspAllOf> mapFromJson(dynamic json) {
-    final map = <String, PassKeyRegisterFinishRspAllOf>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = PassKeyRegisterFinishRspAllOf.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of PassKeyRegisterFinishRspAllOf-objects as value to a dart map
-  static Map<String, List<PassKeyRegisterFinishRspAllOf>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<PassKeyRegisterFinishRspAllOf>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = PassKeyRegisterFinishRspAllOf.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'data',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_register_start_req.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_register_start_req.dart
deleted file mode 100644
index b5149cb..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_register_start_req.dart
+++ /dev/null
@@ -1,146 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class PassKeyRegisterStartReq {
-  /// Returns a new [PassKeyRegisterStartReq] instance.
-  PassKeyRegisterStartReq({
-    required this.username,
-    this.fullName,
-    this.requestID,
-  });
-
-  /// Users login name
-  String username;
-
-  /// Users full name
-  ///
-  /// Please note: This property should have been non-nullable! Since the specification file
-  /// does not include a default value (using the "default:" property), however, the generated
-  /// source code must fall back to having a nullable type.
-  /// Consider adding a "default:" property in the specification file to hide this note.
-  ///
-  String? fullName;
-
-  /// Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side
-  ///
-  /// Please note: This property should have been non-nullable! Since the specification file
-  /// does not include a default value (using the "default:" property), however, the generated
-  /// source code must fall back to having a nullable type.
-  /// Consider adding a "default:" property in the specification file to hide this note.
-  ///
-  String? requestID;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is PassKeyRegisterStartReq &&
-     other.username == username &&
-     other.fullName == fullName &&
-     other.requestID == requestID;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (username.hashCode) +
-    (fullName == null ? 0 : fullName!.hashCode) +
-    (requestID == null ? 0 : requestID!.hashCode);
-
-  @override
-  String toString() => 'PassKeyRegisterStartReq[username=$username, fullName=$fullName, requestID=$requestID]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'username'] = this.username;
-    if (this.fullName != null) {
-      json[r'fullName'] = this.fullName;
-    } else {
-      json[r'fullName'] = null;
-    }
-    if (this.requestID != null) {
-      json[r'requestID'] = this.requestID;
-    } else {
-      json[r'requestID'] = null;
-    }
-    return json;
-  }
-
-  /// Returns a new [PassKeyRegisterStartReq] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static PassKeyRegisterStartReq? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "PassKeyRegisterStartReq[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "PassKeyRegisterStartReq[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return PassKeyRegisterStartReq(
-        username: mapValueOfType<String>(json, r'username')!,
-        fullName: mapValueOfType<String>(json, r'fullName'),
-        requestID: mapValueOfType<String>(json, r'requestID'),
-      );
-    }
-    return null;
-  }
-
-  static List<PassKeyRegisterStartReq> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <PassKeyRegisterStartReq>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = PassKeyRegisterStartReq.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, PassKeyRegisterStartReq> mapFromJson(dynamic json) {
-    final map = <String, PassKeyRegisterStartReq>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = PassKeyRegisterStartReq.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of PassKeyRegisterStartReq-objects as value to a dart map
-  static Map<String, List<PassKeyRegisterStartReq>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<PassKeyRegisterStartReq>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = PassKeyRegisterStartReq.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'username',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_start_rsp.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_start_rsp.dart
deleted file mode 100644
index e3702a6..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_start_rsp.dart
+++ /dev/null
@@ -1,146 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class PassKeyStartRsp {
-  /// Returns a new [PassKeyStartRsp] instance.
-  PassKeyStartRsp({
-    required this.httpStatusCode,
-    required this.message,
-    required this.requestData,
-    required this.runtime,
-    required this.data,
-  });
-
-  /// HTTP status code of operation
-  ///
-  /// Minimum value: 200
-  /// Maximum value: 599
-  int httpStatusCode;
-
-  String message;
-
-  RequestData requestData;
-
-  /// Runtime in seconds for this request
-  double runtime;
-
-  PassKeyStartRspAllOfData data;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is PassKeyStartRsp &&
-     other.httpStatusCode == httpStatusCode &&
-     other.message == message &&
-     other.requestData == requestData &&
-     other.runtime == runtime &&
-     other.data == data;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (httpStatusCode.hashCode) +
-    (message.hashCode) +
-    (requestData.hashCode) +
-    (runtime.hashCode) +
-    (data.hashCode);
-
-  @override
-  String toString() => 'PassKeyStartRsp[httpStatusCode=$httpStatusCode, message=$message, requestData=$requestData, runtime=$runtime, data=$data]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'httpStatusCode'] = this.httpStatusCode;
-      json[r'message'] = this.message;
-      json[r'requestData'] = this.requestData;
-      json[r'runtime'] = this.runtime;
-      json[r'data'] = this.data;
-    return json;
-  }
-
-  /// Returns a new [PassKeyStartRsp] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static PassKeyStartRsp? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "PassKeyStartRsp[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "PassKeyStartRsp[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return PassKeyStartRsp(
-        httpStatusCode: mapValueOfType<int>(json, r'httpStatusCode')!,
-        message: mapValueOfType<String>(json, r'message')!,
-        requestData: RequestData.fromJson(json[r'requestData'])!,
-        runtime: mapValueOfType<double>(json, r'runtime')!,
-        data: PassKeyStartRspAllOfData.fromJson(json[r'data'])!,
-      );
-    }
-    return null;
-  }
-
-  static List<PassKeyStartRsp> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <PassKeyStartRsp>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = PassKeyStartRsp.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, PassKeyStartRsp> mapFromJson(dynamic json) {
-    final map = <String, PassKeyStartRsp>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = PassKeyStartRsp.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of PassKeyStartRsp-objects as value to a dart map
-  static Map<String, List<PassKeyStartRsp>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<PassKeyStartRsp>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = PassKeyStartRsp.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'httpStatusCode',
-    'message',
-    'requestData',
-    'runtime',
-    'data',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_start_rsp_all_of.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_start_rsp_all_of.dart
deleted file mode 100644
index a0cf3cd..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_start_rsp_all_of.dart
+++ /dev/null
@@ -1,109 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class PassKeyStartRspAllOf {
-  /// Returns a new [PassKeyStartRspAllOf] instance.
-  PassKeyStartRspAllOf({
-    required this.data,
-  });
-
-  PassKeyStartRspAllOfData data;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is PassKeyStartRspAllOf &&
-     other.data == data;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (data.hashCode);
-
-  @override
-  String toString() => 'PassKeyStartRspAllOf[data=$data]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'data'] = this.data;
-    return json;
-  }
-
-  /// Returns a new [PassKeyStartRspAllOf] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static PassKeyStartRspAllOf? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "PassKeyStartRspAllOf[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "PassKeyStartRspAllOf[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return PassKeyStartRspAllOf(
-        data: PassKeyStartRspAllOfData.fromJson(json[r'data'])!,
-      );
-    }
-    return null;
-  }
-
-  static List<PassKeyStartRspAllOf> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <PassKeyStartRspAllOf>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = PassKeyStartRspAllOf.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, PassKeyStartRspAllOf> mapFromJson(dynamic json) {
-    final map = <String, PassKeyStartRspAllOf>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = PassKeyStartRspAllOf.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of PassKeyStartRspAllOf-objects as value to a dart map
-  static Map<String, List<PassKeyStartRspAllOf>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<PassKeyStartRspAllOf>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = PassKeyStartRspAllOf.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'data',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_start_rsp_all_of_data.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_start_rsp_all_of_data.dart
deleted file mode 100644
index 9a5d0c1..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/pass_key_start_rsp_all_of_data.dart
+++ /dev/null
@@ -1,110 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class PassKeyStartRspAllOfData {
-  /// Returns a new [PassKeyStartRspAllOfData] instance.
-  PassKeyStartRspAllOfData({
-    required this.challenge,
-  });
-
-  /// Contains json payload data for start webauthn login challenge
-  String challenge;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is PassKeyStartRspAllOfData &&
-     other.challenge == challenge;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (challenge.hashCode);
-
-  @override
-  String toString() => 'PassKeyStartRspAllOfData[challenge=$challenge]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'challenge'] = this.challenge;
-    return json;
-  }
-
-  /// Returns a new [PassKeyStartRspAllOfData] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static PassKeyStartRspAllOfData? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "PassKeyStartRspAllOfData[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "PassKeyStartRspAllOfData[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return PassKeyStartRspAllOfData(
-        challenge: mapValueOfType<String>(json, r'challenge')!,
-      );
-    }
-    return null;
-  }
-
-  static List<PassKeyStartRspAllOfData> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <PassKeyStartRspAllOfData>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = PassKeyStartRspAllOfData.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, PassKeyStartRspAllOfData> mapFromJson(dynamic json) {
-    final map = <String, PassKeyStartRspAllOfData>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = PassKeyStartRspAllOfData.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of PassKeyStartRspAllOfData-objects as value to a dart map
-  static Map<String, List<PassKeyStartRspAllOfData>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<PassKeyStartRspAllOfData>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = PassKeyStartRspAllOfData.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'challenge',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/password_verify_req.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/password_verify_req.dart
deleted file mode 100644
index e8f6558..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/password_verify_req.dart
+++ /dev/null
@@ -1,135 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class PasswordVerifyReq {
-  /// Returns a new [PasswordVerifyReq] instance.
-  PasswordVerifyReq({
-    required this.username,
-    required this.password,
-    this.requestID,
-  });
-
-  String username;
-
-  String password;
-
-  /// Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side
-  ///
-  /// Please note: This property should have been non-nullable! Since the specification file
-  /// does not include a default value (using the "default:" property), however, the generated
-  /// source code must fall back to having a nullable type.
-  /// Consider adding a "default:" property in the specification file to hide this note.
-  ///
-  String? requestID;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is PasswordVerifyReq &&
-     other.username == username &&
-     other.password == password &&
-     other.requestID == requestID;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (username.hashCode) +
-    (password.hashCode) +
-    (requestID == null ? 0 : requestID!.hashCode);
-
-  @override
-  String toString() => 'PasswordVerifyReq[username=$username, password=$password, requestID=$requestID]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'username'] = this.username;
-      json[r'password'] = this.password;
-    if (this.requestID != null) {
-      json[r'requestID'] = this.requestID;
-    } else {
-      json[r'requestID'] = null;
-    }
-    return json;
-  }
-
-  /// Returns a new [PasswordVerifyReq] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static PasswordVerifyReq? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "PasswordVerifyReq[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "PasswordVerifyReq[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return PasswordVerifyReq(
-        username: mapValueOfType<String>(json, r'username')!,
-        password: mapValueOfType<String>(json, r'password')!,
-        requestID: mapValueOfType<String>(json, r'requestID'),
-      );
-    }
-    return null;
-  }
-
-  static List<PasswordVerifyReq> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <PasswordVerifyReq>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = PasswordVerifyReq.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, PasswordVerifyReq> mapFromJson(dynamic json) {
-    final map = <String, PasswordVerifyReq>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = PasswordVerifyReq.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of PasswordVerifyReq-objects as value to a dart map
-  static Map<String, List<PasswordVerifyReq>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<PasswordVerifyReq>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = PasswordVerifyReq.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'username',
-    'password',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/password_verify_rsp.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/password_verify_rsp.dart
deleted file mode 100644
index 9ba8b83..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/password_verify_rsp.dart
+++ /dev/null
@@ -1,146 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class PasswordVerifyRsp {
-  /// Returns a new [PasswordVerifyRsp] instance.
-  PasswordVerifyRsp({
-    required this.httpStatusCode,
-    required this.message,
-    required this.requestData,
-    required this.runtime,
-    required this.data,
-  });
-
-  /// HTTP status code of operation
-  ///
-  /// Minimum value: 200
-  /// Maximum value: 599
-  int httpStatusCode;
-
-  String message;
-
-  RequestData requestData;
-
-  /// Runtime in seconds for this request
-  double runtime;
-
-  AuthenticationRsp data;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is PasswordVerifyRsp &&
-     other.httpStatusCode == httpStatusCode &&
-     other.message == message &&
-     other.requestData == requestData &&
-     other.runtime == runtime &&
-     other.data == data;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (httpStatusCode.hashCode) +
-    (message.hashCode) +
-    (requestData.hashCode) +
-    (runtime.hashCode) +
-    (data.hashCode);
-
-  @override
-  String toString() => 'PasswordVerifyRsp[httpStatusCode=$httpStatusCode, message=$message, requestData=$requestData, runtime=$runtime, data=$data]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'httpStatusCode'] = this.httpStatusCode;
-      json[r'message'] = this.message;
-      json[r'requestData'] = this.requestData;
-      json[r'runtime'] = this.runtime;
-      json[r'data'] = this.data;
-    return json;
-  }
-
-  /// Returns a new [PasswordVerifyRsp] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static PasswordVerifyRsp? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "PasswordVerifyRsp[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "PasswordVerifyRsp[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return PasswordVerifyRsp(
-        httpStatusCode: mapValueOfType<int>(json, r'httpStatusCode')!,
-        message: mapValueOfType<String>(json, r'message')!,
-        requestData: RequestData.fromJson(json[r'requestData'])!,
-        runtime: mapValueOfType<double>(json, r'runtime')!,
-        data: AuthenticationRsp.fromJson(json[r'data'])!,
-      );
-    }
-    return null;
-  }
-
-  static List<PasswordVerifyRsp> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <PasswordVerifyRsp>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = PasswordVerifyRsp.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, PasswordVerifyRsp> mapFromJson(dynamic json) {
-    final map = <String, PasswordVerifyRsp>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = PasswordVerifyRsp.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of PasswordVerifyRsp-objects as value to a dart map
-  static Map<String, List<PasswordVerifyRsp>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<PasswordVerifyRsp>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = PasswordVerifyRsp.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'httpStatusCode',
-    'message',
-    'requestData',
-    'runtime',
-    'data',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/project_config_rsp.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/project_config_rsp.dart
deleted file mode 100644
index e966dcc..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/project_config_rsp.dart
+++ /dev/null
@@ -1,146 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class ProjectConfigRsp {
-  /// Returns a new [ProjectConfigRsp] instance.
-  ProjectConfigRsp({
-    required this.httpStatusCode,
-    required this.message,
-    required this.requestData,
-    required this.runtime,
-    required this.data,
-  });
-
-  /// HTTP status code of operation
-  ///
-  /// Minimum value: 200
-  /// Maximum value: 599
-  int httpStatusCode;
-
-  String message;
-
-  RequestData requestData;
-
-  /// Runtime in seconds for this request
-  double runtime;
-
-  ProjectConfigRspAllOfData data;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is ProjectConfigRsp &&
-     other.httpStatusCode == httpStatusCode &&
-     other.message == message &&
-     other.requestData == requestData &&
-     other.runtime == runtime &&
-     other.data == data;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (httpStatusCode.hashCode) +
-    (message.hashCode) +
-    (requestData.hashCode) +
-    (runtime.hashCode) +
-    (data.hashCode);
-
-  @override
-  String toString() => 'ProjectConfigRsp[httpStatusCode=$httpStatusCode, message=$message, requestData=$requestData, runtime=$runtime, data=$data]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'httpStatusCode'] = this.httpStatusCode;
-      json[r'message'] = this.message;
-      json[r'requestData'] = this.requestData;
-      json[r'runtime'] = this.runtime;
-      json[r'data'] = this.data;
-    return json;
-  }
-
-  /// Returns a new [ProjectConfigRsp] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static ProjectConfigRsp? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "ProjectConfigRsp[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "ProjectConfigRsp[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return ProjectConfigRsp(
-        httpStatusCode: mapValueOfType<int>(json, r'httpStatusCode')!,
-        message: mapValueOfType<String>(json, r'message')!,
-        requestData: RequestData.fromJson(json[r'requestData'])!,
-        runtime: mapValueOfType<double>(json, r'runtime')!,
-        data: ProjectConfigRspAllOfData.fromJson(json[r'data'])!,
-      );
-    }
-    return null;
-  }
-
-  static List<ProjectConfigRsp> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <ProjectConfigRsp>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = ProjectConfigRsp.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, ProjectConfigRsp> mapFromJson(dynamic json) {
-    final map = <String, ProjectConfigRsp>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = ProjectConfigRsp.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of ProjectConfigRsp-objects as value to a dart map
-  static Map<String, List<ProjectConfigRsp>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<ProjectConfigRsp>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = ProjectConfigRsp.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'httpStatusCode',
-    'message',
-    'requestData',
-    'runtime',
-    'data',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/project_config_rsp_all_of.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/project_config_rsp_all_of.dart
deleted file mode 100644
index 25171f6..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/project_config_rsp_all_of.dart
+++ /dev/null
@@ -1,109 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class ProjectConfigRspAllOf {
-  /// Returns a new [ProjectConfigRspAllOf] instance.
-  ProjectConfigRspAllOf({
-    required this.data,
-  });
-
-  ProjectConfigRspAllOfData data;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is ProjectConfigRspAllOf &&
-     other.data == data;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (data.hashCode);
-
-  @override
-  String toString() => 'ProjectConfigRspAllOf[data=$data]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'data'] = this.data;
-    return json;
-  }
-
-  /// Returns a new [ProjectConfigRspAllOf] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static ProjectConfigRspAllOf? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "ProjectConfigRspAllOf[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "ProjectConfigRspAllOf[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return ProjectConfigRspAllOf(
-        data: ProjectConfigRspAllOfData.fromJson(json[r'data'])!,
-      );
-    }
-    return null;
-  }
-
-  static List<ProjectConfigRspAllOf> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <ProjectConfigRspAllOf>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = ProjectConfigRspAllOf.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, ProjectConfigRspAllOf> mapFromJson(dynamic json) {
-    final map = <String, ProjectConfigRspAllOf>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = ProjectConfigRspAllOf.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of ProjectConfigRspAllOf-objects as value to a dart map
-  static Map<String, List<ProjectConfigRspAllOf>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<ProjectConfigRspAllOf>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = ProjectConfigRspAllOf.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'data',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/project_config_rsp_all_of_data.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/project_config_rsp_all_of_data.dart
deleted file mode 100644
index 2f3b98a..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/project_config_rsp_all_of_data.dart
+++ /dev/null
@@ -1,149 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class ProjectConfigRspAllOfData {
-  /// Returns a new [ProjectConfigRspAllOfData] instance.
-  ProjectConfigRspAllOfData({
-    required this.allowUserRegistration,
-    required this.passkeyAppendInterval,
-    required this.fallbackLanguage,
-    required this.autoDetectLanguage,
-    required this.userFullNameRequired,
-    required this.webComponentDebug,
-  });
-
-  bool allowUserRegistration;
-
-  String passkeyAppendInterval;
-
-  String fallbackLanguage;
-
-  bool autoDetectLanguage;
-
-  bool userFullNameRequired;
-
-  bool webComponentDebug;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is ProjectConfigRspAllOfData &&
-     other.allowUserRegistration == allowUserRegistration &&
-     other.passkeyAppendInterval == passkeyAppendInterval &&
-     other.fallbackLanguage == fallbackLanguage &&
-     other.autoDetectLanguage == autoDetectLanguage &&
-     other.userFullNameRequired == userFullNameRequired &&
-     other.webComponentDebug == webComponentDebug;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (allowUserRegistration.hashCode) +
-    (passkeyAppendInterval.hashCode) +
-    (fallbackLanguage.hashCode) +
-    (autoDetectLanguage.hashCode) +
-    (userFullNameRequired.hashCode) +
-    (webComponentDebug.hashCode);
-
-  @override
-  String toString() => 'ProjectConfigRspAllOfData[allowUserRegistration=$allowUserRegistration, passkeyAppendInterval=$passkeyAppendInterval, fallbackLanguage=$fallbackLanguage, autoDetectLanguage=$autoDetectLanguage, userFullNameRequired=$userFullNameRequired, webComponentDebug=$webComponentDebug]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'allowUserRegistration'] = this.allowUserRegistration;
-      json[r'passkeyAppendInterval'] = this.passkeyAppendInterval;
-      json[r'fallbackLanguage'] = this.fallbackLanguage;
-      json[r'autoDetectLanguage'] = this.autoDetectLanguage;
-      json[r'userFullNameRequired'] = this.userFullNameRequired;
-      json[r'webComponentDebug'] = this.webComponentDebug;
-    return json;
-  }
-
-  /// Returns a new [ProjectConfigRspAllOfData] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static ProjectConfigRspAllOfData? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "ProjectConfigRspAllOfData[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "ProjectConfigRspAllOfData[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return ProjectConfigRspAllOfData(
-        allowUserRegistration: mapValueOfType<bool>(json, r'allowUserRegistration')!,
-        passkeyAppendInterval: mapValueOfType<String>(json, r'passkeyAppendInterval')!,
-        fallbackLanguage: mapValueOfType<String>(json, r'fallbackLanguage')!,
-        autoDetectLanguage: mapValueOfType<bool>(json, r'autoDetectLanguage')!,
-        userFullNameRequired: mapValueOfType<bool>(json, r'userFullNameRequired')!,
-        webComponentDebug: mapValueOfType<bool>(json, r'webComponentDebug')!,
-      );
-    }
-    return null;
-  }
-
-  static List<ProjectConfigRspAllOfData> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <ProjectConfigRspAllOfData>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = ProjectConfigRspAllOfData.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, ProjectConfigRspAllOfData> mapFromJson(dynamic json) {
-    final map = <String, ProjectConfigRspAllOfData>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = ProjectConfigRspAllOfData.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of ProjectConfigRspAllOfData-objects as value to a dart map
-  static Map<String, List<ProjectConfigRspAllOfData>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<ProjectConfigRspAllOfData>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = ProjectConfigRspAllOfData.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'allowUserRegistration',
-    'passkeyAppendInterval',
-    'fallbackLanguage',
-    'autoDetectLanguage',
-    'userFullNameRequired',
-    'webComponentDebug',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/request_data.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/request_data.dart
deleted file mode 100644
index 311b74d..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/request_data.dart
+++ /dev/null
@@ -1,119 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class RequestData {
-  /// Returns a new [RequestData] instance.
-  RequestData({
-    required this.requestID,
-    required this.link,
-  });
-
-  /// Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side
-  String requestID;
-
-  /// Link to dashboard with details about request
-  String link;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is RequestData &&
-     other.requestID == requestID &&
-     other.link == link;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (requestID.hashCode) +
-    (link.hashCode);
-
-  @override
-  String toString() => 'RequestData[requestID=$requestID, link=$link]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'requestID'] = this.requestID;
-      json[r'link'] = this.link;
-    return json;
-  }
-
-  /// Returns a new [RequestData] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static RequestData? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "RequestData[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "RequestData[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return RequestData(
-        requestID: mapValueOfType<String>(json, r'requestID')!,
-        link: mapValueOfType<String>(json, r'link')!,
-      );
-    }
-    return null;
-  }
-
-  static List<RequestData> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <RequestData>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = RequestData.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, RequestData> mapFromJson(dynamic json) {
-    final map = <String, RequestData>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = RequestData.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of RequestData-objects as value to a dart map
-  static Map<String, List<RequestData>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<RequestData>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = RequestData.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'requestID',
-    'link',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/session_refresh_rsp.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/session_refresh_rsp.dart
deleted file mode 100644
index 24d6ed2..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/session_refresh_rsp.dart
+++ /dev/null
@@ -1,199 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class SessionRefreshRsp {
-  /// Returns a new [SessionRefreshRsp] instance.
-  SessionRefreshRsp({
-    required this.httpStatusCode,
-    required this.message,
-    required this.requestData,
-    required this.runtime,
-    required this.redirectURL,
-    this.sessionToken,
-    this.longSession,
-    this.shortSession,
-  });
-
-  /// HTTP status code of operation
-  ///
-  /// Minimum value: 200
-  /// Maximum value: 599
-  int httpStatusCode;
-
-  String message;
-
-  RequestData requestData;
-
-  /// Runtime in seconds for this request
-  double runtime;
-
-  String redirectURL;
-
-  /// Only given when using session v1
-  ///
-  /// Please note: This property should have been non-nullable! Since the specification file
-  /// does not include a default value (using the "default:" property), however, the generated
-  /// source code must fall back to having a nullable type.
-  /// Consider adding a "default:" property in the specification file to hide this note.
-  ///
-  String? sessionToken;
-
-  /// Only given when project environment is dev
-  ///
-  /// Please note: This property should have been non-nullable! Since the specification file
-  /// does not include a default value (using the "default:" property), however, the generated
-  /// source code must fall back to having a nullable type.
-  /// Consider adding a "default:" property in the specification file to hide this note.
-  ///
-  String? longSession;
-
-  ///
-  /// Please note: This property should have been non-nullable! Since the specification file
-  /// does not include a default value (using the "default:" property), however, the generated
-  /// source code must fall back to having a nullable type.
-  /// Consider adding a "default:" property in the specification file to hide this note.
-  ///
-  ShortSession? shortSession;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is SessionRefreshRsp &&
-     other.httpStatusCode == httpStatusCode &&
-     other.message == message &&
-     other.requestData == requestData &&
-     other.runtime == runtime &&
-     other.redirectURL == redirectURL &&
-     other.sessionToken == sessionToken &&
-     other.longSession == longSession &&
-     other.shortSession == shortSession;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (httpStatusCode.hashCode) +
-    (message.hashCode) +
-    (requestData.hashCode) +
-    (runtime.hashCode) +
-    (redirectURL.hashCode) +
-    (sessionToken == null ? 0 : sessionToken!.hashCode) +
-    (longSession == null ? 0 : longSession!.hashCode) +
-    (shortSession == null ? 0 : shortSession!.hashCode);
-
-  @override
-  String toString() => 'SessionRefreshRsp[httpStatusCode=$httpStatusCode, message=$message, requestData=$requestData, runtime=$runtime, redirectURL=$redirectURL, sessionToken=$sessionToken, longSession=$longSession, shortSession=$shortSession]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'httpStatusCode'] = this.httpStatusCode;
-      json[r'message'] = this.message;
-      json[r'requestData'] = this.requestData;
-      json[r'runtime'] = this.runtime;
-      json[r'redirectURL'] = this.redirectURL;
-    if (this.sessionToken != null) {
-      json[r'sessionToken'] = this.sessionToken;
-    } else {
-      json[r'sessionToken'] = null;
-    }
-    if (this.longSession != null) {
-      json[r'longSession'] = this.longSession;
-    } else {
-      json[r'longSession'] = null;
-    }
-    if (this.shortSession != null) {
-      json[r'shortSession'] = this.shortSession;
-    } else {
-      json[r'shortSession'] = null;
-    }
-    return json;
-  }
-
-  /// Returns a new [SessionRefreshRsp] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static SessionRefreshRsp? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "SessionRefreshRsp[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "SessionRefreshRsp[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return SessionRefreshRsp(
-        httpStatusCode: mapValueOfType<int>(json, r'httpStatusCode')!,
-        message: mapValueOfType<String>(json, r'message')!,
-        requestData: RequestData.fromJson(json[r'requestData'])!,
-        runtime: mapValueOfType<double>(json, r'runtime')!,
-        redirectURL: mapValueOfType<String>(json, r'redirectURL')!,
-        sessionToken: mapValueOfType<String>(json, r'sessionToken'),
-        longSession: mapValueOfType<String>(json, r'longSession'),
-        shortSession: ShortSession.fromJson(json[r'shortSession']),
-      );
-    }
-    return null;
-  }
-
-  static List<SessionRefreshRsp> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <SessionRefreshRsp>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = SessionRefreshRsp.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, SessionRefreshRsp> mapFromJson(dynamic json) {
-    final map = <String, SessionRefreshRsp>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = SessionRefreshRsp.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of SessionRefreshRsp-objects as value to a dart map
-  static Map<String, List<SessionRefreshRsp>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<SessionRefreshRsp>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = SessionRefreshRsp.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'httpStatusCode',
-    'message',
-    'requestData',
-    'runtime',
-    'redirectURL',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/short_session.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/short_session.dart
deleted file mode 100644
index 1bb7716..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/short_session.dart
+++ /dev/null
@@ -1,157 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class ShortSession {
-  /// Returns a new [ShortSession] instance.
-  ShortSession({
-    required this.key,
-    required this.value,
-    required this.domain,
-    required this.path,
-    required this.secure,
-    required this.expires,
-    required this.sameSite,
-  });
-
-  String key;
-
-  String value;
-
-  String domain;
-
-  String path;
-
-  bool secure;
-
-  String expires;
-
-  String sameSite;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is ShortSession &&
-     other.key == key &&
-     other.value == value &&
-     other.domain == domain &&
-     other.path == path &&
-     other.secure == secure &&
-     other.expires == expires &&
-     other.sameSite == sameSite;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (key.hashCode) +
-    (value.hashCode) +
-    (domain.hashCode) +
-    (path.hashCode) +
-    (secure.hashCode) +
-    (expires.hashCode) +
-    (sameSite.hashCode);
-
-  @override
-  String toString() => 'ShortSession[key=$key, value=$value, domain=$domain, path=$path, secure=$secure, expires=$expires, sameSite=$sameSite]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'key'] = this.key;
-      json[r'value'] = this.value;
-      json[r'domain'] = this.domain;
-      json[r'path'] = this.path;
-      json[r'secure'] = this.secure;
-      json[r'expires'] = this.expires;
-      json[r'sameSite'] = this.sameSite;
-    return json;
-  }
-
-  /// Returns a new [ShortSession] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static ShortSession? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "ShortSession[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "ShortSession[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return ShortSession(
-        key: mapValueOfType<String>(json, r'key')!,
-        value: mapValueOfType<String>(json, r'value')!,
-        domain: mapValueOfType<String>(json, r'domain')!,
-        path: mapValueOfType<String>(json, r'path')!,
-        secure: mapValueOfType<bool>(json, r'secure')!,
-        expires: mapValueOfType<String>(json, r'expires')!,
-        sameSite: mapValueOfType<String>(json, r'sameSite')!,
-      );
-    }
-    return null;
-  }
-
-  static List<ShortSession> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <ShortSession>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = ShortSession.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, ShortSession> mapFromJson(dynamic json) {
-    final map = <String, ShortSession>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = ShortSession.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of ShortSession-objects as value to a dart map
-  static Map<String, List<ShortSession>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<ShortSession>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = ShortSession.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'key',
-    'value',
-    'domain',
-    'path',
-    'secure',
-    'expires',
-    'sameSite',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/status.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/status.dart
deleted file mode 100644
index ee694e4..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/status.dart
+++ /dev/null
@@ -1,88 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-/// Generic status that can describe Corbado entities
-class Status {
-  /// Instantiate a new enum with the provided [value].
-  const Status._(this.value);
-
-  /// The underlying value of this enum member.
-  final String value;
-
-  @override
-  String toString() => value;
-
-  String toJson() => value;
-
-  static const active = Status._(r'active');
-  static const pending = Status._(r'pending');
-  static const deleted = Status._(r'deleted');
-
-  /// List of all possible values in this [enum][Status].
-  static const values = <Status>[
-    active,
-    pending,
-    deleted,
-  ];
-
-  static Status? fromJson(dynamic value) => StatusTypeTransformer().decode(value);
-
-  static List<Status> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <Status>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = Status.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-}
-
-/// Transformation class that can [encode] an instance of [Status] to String,
-/// and [decode] dynamic data back to [Status].
-class StatusTypeTransformer {
-  factory StatusTypeTransformer() => _instance ??= const StatusTypeTransformer._();
-
-  const StatusTypeTransformer._();
-
-  String encode(Status data) => data.value;
-
-  /// Decodes a [dynamic value][data] to a Status.
-  ///
-  /// If [allowNull] is true and the [dynamic value][data] cannot be decoded successfully,
-  /// then null is returned. However, if [allowNull] is false and the [dynamic value][data]
-  /// cannot be decoded successfully, then an [UnimplementedError] is thrown.
-  ///
-  /// The [allowNull] is very handy when an API changes and a new enum value is added or removed,
-  /// and users are still using an old app with the old code.
-  Status? decode(dynamic data, {bool allowNull = true}) {
-    if (data != null) {
-      switch (data) {
-        case r'active': return Status.active;
-        case r'pending': return Status.pending;
-        case r'deleted': return Status.deleted;
-        default:
-          if (!allowNull) {
-            throw ArgumentError('Unknown enum value to decode: $data');
-          }
-      }
-    }
-    return null;
-  }
-
-  /// Singleton [StatusTypeTransformer] instance.
-  static StatusTypeTransformer? _instance;
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/user_email.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/user_email.dart
deleted file mode 100644
index 879a05b..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/user_email.dart
+++ /dev/null
@@ -1,144 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class UserEmail {
-  /// Returns a new [UserEmail] instance.
-  UserEmail({
-    required this.ID,
-    required this.email,
-    required this.created,
-    required this.updated,
-    required this.status,
-  });
-
-  /// generic ID
-  String ID;
-
-  String email;
-
-  /// Timestamp of when the entity was created in yyyy-MM-dd'T'HH:mm:ss format
-  String created;
-
-  /// Timestamp of when the entity was last updated in yyyy-MM-dd'T'HH:mm:ss format
-  String updated;
-
-  Status status;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is UserEmail &&
-     other.ID == ID &&
-     other.email == email &&
-     other.created == created &&
-     other.updated == updated &&
-     other.status == status;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (ID.hashCode) +
-    (email.hashCode) +
-    (created.hashCode) +
-    (updated.hashCode) +
-    (status.hashCode);
-
-  @override
-  String toString() => 'UserEmail[ID=$ID, email=$email, created=$created, updated=$updated, status=$status]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'ID'] = this.ID;
-      json[r'email'] = this.email;
-      json[r'created'] = this.created;
-      json[r'updated'] = this.updated;
-      json[r'status'] = this.status;
-    return json;
-  }
-
-  /// Returns a new [UserEmail] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static UserEmail? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "UserEmail[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "UserEmail[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return UserEmail(
-        ID: mapValueOfType<String>(json, r'ID')!,
-        email: mapValueOfType<String>(json, r'email')!,
-        created: mapValueOfType<String>(json, r'created')!,
-        updated: mapValueOfType<String>(json, r'updated')!,
-        status: Status.fromJson(json[r'status'])!,
-      );
-    }
-    return null;
-  }
-
-  static List<UserEmail> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <UserEmail>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = UserEmail.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, UserEmail> mapFromJson(dynamic json) {
-    final map = <String, UserEmail>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = UserEmail.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of UserEmail-objects as value to a dart map
-  static Map<String, List<UserEmail>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<UserEmail>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = UserEmail.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'ID',
-    'email',
-    'created',
-    'updated',
-    'status',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/user_phone_number.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/user_phone_number.dart
deleted file mode 100644
index c7d5782..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/user_phone_number.dart
+++ /dev/null
@@ -1,144 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class UserPhoneNumber {
-  /// Returns a new [UserPhoneNumber] instance.
-  UserPhoneNumber({
-    required this.ID,
-    required this.phoneNumber,
-    required this.created,
-    required this.updated,
-    required this.status,
-  });
-
-  /// generic ID
-  String ID;
-
-  String phoneNumber;
-
-  /// Timestamp of when the entity was created in yyyy-MM-dd'T'HH:mm:ss format
-  String created;
-
-  /// Timestamp of when the entity was last updated in yyyy-MM-dd'T'HH:mm:ss format
-  String updated;
-
-  Status status;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is UserPhoneNumber &&
-     other.ID == ID &&
-     other.phoneNumber == phoneNumber &&
-     other.created == created &&
-     other.updated == updated &&
-     other.status == status;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (ID.hashCode) +
-    (phoneNumber.hashCode) +
-    (created.hashCode) +
-    (updated.hashCode) +
-    (status.hashCode);
-
-  @override
-  String toString() => 'UserPhoneNumber[ID=$ID, phoneNumber=$phoneNumber, created=$created, updated=$updated, status=$status]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'ID'] = this.ID;
-      json[r'phoneNumber'] = this.phoneNumber;
-      json[r'created'] = this.created;
-      json[r'updated'] = this.updated;
-      json[r'status'] = this.status;
-    return json;
-  }
-
-  /// Returns a new [UserPhoneNumber] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static UserPhoneNumber? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "UserPhoneNumber[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "UserPhoneNumber[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return UserPhoneNumber(
-        ID: mapValueOfType<String>(json, r'ID')!,
-        phoneNumber: mapValueOfType<String>(json, r'phoneNumber')!,
-        created: mapValueOfType<String>(json, r'created')!,
-        updated: mapValueOfType<String>(json, r'updated')!,
-        status: Status.fromJson(json[r'status'])!,
-      );
-    }
-    return null;
-  }
-
-  static List<UserPhoneNumber> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <UserPhoneNumber>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = UserPhoneNumber.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, UserPhoneNumber> mapFromJson(dynamic json) {
-    final map = <String, UserPhoneNumber>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = UserPhoneNumber.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of UserPhoneNumber-objects as value to a dart map
-  static Map<String, List<UserPhoneNumber>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<UserPhoneNumber>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = UserPhoneNumber.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'ID',
-    'phoneNumber',
-    'created',
-    'updated',
-    'status',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/model/well_known_jwks_list_rsp.dart b/packages/corbado_api_client/lib/frontendapi/lib/model/well_known_jwks_list_rsp.dart
deleted file mode 100644
index 70cc642..0000000
--- a/packages/corbado_api_client/lib/frontendapi/lib/model/well_known_jwks_list_rsp.dart
+++ /dev/null
@@ -1,109 +0,0 @@
-//
-// AUTO-GENERATED FILE, DO NOT MODIFY!
-//
-// @dart=2.12
-
-// ignore_for_file: unused_element, unused_import
-// ignore_for_file: always_put_required_named_parameters_first
-// ignore_for_file: constant_identifier_names
-// ignore_for_file: lines_longer_than_80_chars
-
-part of openapi.api;
-
-class WellKnownJWKSListRsp {
-  /// Returns a new [WellKnownJWKSListRsp] instance.
-  WellKnownJWKSListRsp({
-    this.keys = const [],
-  });
-
-  List<Jwk> keys;
-
-  @override
-  bool operator ==(Object other) => identical(this, other) || other is WellKnownJWKSListRsp &&
-     other.keys == keys;
-
-  @override
-  int get hashCode =>
-    // ignore: unnecessary_parenthesis
-    (keys.hashCode);
-
-  @override
-  String toString() => 'WellKnownJWKSListRsp[keys=$keys]';
-
-  Map<String, dynamic> toJson() {
-    final json = <String, dynamic>{};
-      json[r'keys'] = this.keys;
-    return json;
-  }
-
-  /// Returns a new [WellKnownJWKSListRsp] instance and imports its values from
-  /// [value] if it's a [Map], null otherwise.
-  // ignore: prefer_constructors_over_static_methods
-  static WellKnownJWKSListRsp? fromJson(dynamic value) {
-    if (value is Map) {
-      final json = value.cast<String, dynamic>();
-
-      // Ensure that the map contains the required keys.
-      // Note 1: the values aren't checked for validity beyond being non-null.
-      // Note 2: this code is stripped in release mode!
-      assert(() {
-        requiredKeys.forEach((key) {
-          assert(json.containsKey(key), 'Required key "WellKnownJWKSListRsp[$key]" is missing from JSON.');
-          assert(json[key] != null, 'Required key "WellKnownJWKSListRsp[$key]" has a null value in JSON.');
-        });
-        return true;
-      }());
-
-      return WellKnownJWKSListRsp(
-        keys: Jwk.listFromJson(json[r'keys']),
-      );
-    }
-    return null;
-  }
-
-  static List<WellKnownJWKSListRsp> listFromJson(dynamic json, {bool growable = false,}) {
-    final result = <WellKnownJWKSListRsp>[];
-    if (json is List && json.isNotEmpty) {
-      for (final row in json) {
-        final value = WellKnownJWKSListRsp.fromJson(row);
-        if (value != null) {
-          result.add(value);
-        }
-      }
-    }
-    return result.toList(growable: growable);
-  }
-
-  static Map<String, WellKnownJWKSListRsp> mapFromJson(dynamic json) {
-    final map = <String, WellKnownJWKSListRsp>{};
-    if (json is Map && json.isNotEmpty) {
-      json = json.cast<String, dynamic>(); // ignore: parameter_assignments
-      for (final entry in json.entries) {
-        final value = WellKnownJWKSListRsp.fromJson(entry.value);
-        if (value != null) {
-          map[entry.key] = value;
-        }
-      }
-    }
-    return map;
-  }
-
-  // maps a json object with a list of WellKnownJWKSListRsp-objects as value to a dart map
-  static Map<String, List<WellKnownJWKSListRsp>> mapListFromJson(dynamic json, {bool growable = false,}) {
-    final map = <String, List<WellKnownJWKSListRsp>>{};
-    if (json is Map && json.isNotEmpty) {
-      // ignore: parameter_assignments
-      json = json.cast<String, dynamic>();
-      for (final entry in json.entries) {
-        map[entry.key] = WellKnownJWKSListRsp.listFromJson(entry.value, growable: growable,);
-      }
-    }
-    return map;
-  }
-
-  /// The list of required keys that must be present in a JSON.
-  static const requiredKeys = <String>{
-    'keys',
-  };
-}
-
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/api.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/api.dart
new file mode 100644
index 0000000..8fe457b
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/api.dart
@@ -0,0 +1,117 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+import 'dart:convert';
+import 'dart:io';
+
+import 'package:dio/dio.dart';
+import 'package:built_value/serializer.dart';
+import 'package:corbado_frontend_api_client/src/serializers.dart';
+import 'package:corbado_frontend_api_client/src/auth/api_key_auth.dart';
+import 'package:corbado_frontend_api_client/src/auth/basic_auth.dart';
+import 'package:corbado_frontend_api_client/src/auth/bearer_auth.dart';
+import 'package:corbado_frontend_api_client/src/auth/oauth.dart';
+import 'package:corbado_frontend_api_client/src/api/auth_api.dart';
+import 'package:corbado_frontend_api_client/src/api/configs_api.dart';
+import 'package:corbado_frontend_api_client/src/api/corbado_connect_api.dart';
+import 'package:corbado_frontend_api_client/src/api/users_api.dart';
+
+class CorbadoFrontendApiClient {
+  static const String basePath = r'https://<project ID>.frontendapi.corbado.io';
+
+  final Dio dio;
+  final Serializers serializers;
+
+  CorbadoFrontendApiClient({
+    Dio? dio,
+    Serializers? serializers,
+    String? basePathOverride,
+    List<Interceptor>? interceptors,
+    String? sdkVersion,
+    String? languageVersion,
+  })  : this.serializers = serializers ?? standardSerializers,
+        this.dio = dio ??
+            Dio(BaseOptions(
+              baseUrl: basePathOverride ?? basePath,
+              connectTimeout: const Duration(milliseconds: 5000),
+              receiveTimeout: const Duration(milliseconds: 3000),
+              headers: {
+                "X-Corbado-SDK": jsonEncode({
+                  "name": "Flutter SDK",
+                  "sdkVersion": sdkVersion ?? "1.0.0",
+                  "languageVersion": languageVersion ?? "1.0.0",
+                })
+              },
+            )) {
+    if (interceptors == null) {
+      this.dio.interceptors.addAll([
+        OAuthInterceptor(),
+        BasicAuthInterceptor(),
+        BearerAuthInterceptor(),
+        ApiKeyAuthInterceptor(),
+      ]);
+    } else {
+      this.dio.interceptors.addAll(interceptors);
+    }
+  }
+
+  void setOAuthToken(String name, String token) {
+    if (this.dio.interceptors.any((i) => i is OAuthInterceptor)) {
+      (this.dio.interceptors.firstWhere((i) => i is OAuthInterceptor)
+              as OAuthInterceptor)
+          .tokens[name] = token;
+    }
+  }
+
+  void setBearerAuth(String name, String token) {
+    if (this.dio.interceptors.any((i) => i is BearerAuthInterceptor)) {
+      (this.dio.interceptors.firstWhere((i) => i is BearerAuthInterceptor)
+              as BearerAuthInterceptor)
+          .tokens[name] = token;
+    }
+  }
+
+  void setBasicAuth(String name, String username, String password) {
+    if (this.dio.interceptors.any((i) => i is BasicAuthInterceptor)) {
+      (this.dio.interceptors.firstWhere((i) => i is BasicAuthInterceptor)
+              as BasicAuthInterceptor)
+          .authInfo[name] = BasicAuthInfo(username, password);
+    }
+  }
+
+  void setApiKey(String name, String apiKey) {
+    if (this.dio.interceptors.any((i) => i is ApiKeyAuthInterceptor)) {
+      (this
+                  .dio
+                  .interceptors
+                  .firstWhere((element) => element is ApiKeyAuthInterceptor)
+              as ApiKeyAuthInterceptor)
+          .apiKeys[name] = apiKey;
+    }
+  }
+
+  /// Get AuthApi instance, base route and serializer can be overridden by a given but be careful,
+  /// by doing that all interceptors will not be executed
+  AuthApi getAuthApi() {
+    return AuthApi(dio, serializers);
+  }
+
+  /// Get ConfigsApi instance, base route and serializer can be overridden by a given but be careful,
+  /// by doing that all interceptors will not be executed
+  ConfigsApi getConfigsApi() {
+    return ConfigsApi(dio, serializers);
+  }
+
+  /// Get CorbadoConnectApi instance, base route and serializer can be overridden by a given but be careful,
+  /// by doing that all interceptors will not be executed
+  CorbadoConnectApi getCorbadoConnectApi() {
+    return CorbadoConnectApi(dio, serializers);
+  }
+
+  /// Get UsersApi instance, base route and serializer can be overridden by a given but be careful,
+  /// by doing that all interceptors will not be executed
+  UsersApi getUsersApi() {
+    return UsersApi(dio, serializers);
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/api/auth_api.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/api/auth_api.dart
new file mode 100644
index 0000000..193d877
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/api/auth_api.dart
@@ -0,0 +1,2008 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+import 'dart:async';
+
+import 'package:built_value/serializer.dart';
+import 'package:dio/dio.dart';
+
+import 'package:built_value/json_object.dart';
+import 'package:corbado_frontend_api_client/src/api_util.dart';
+import 'package:corbado_frontend_api_client/src/model/block_type.dart';
+import 'package:corbado_frontend_api_client/src/model/event_create_req.dart';
+import 'package:corbado_frontend_api_client/src/model/identifier_update_req.dart';
+import 'package:corbado_frontend_api_client/src/model/identifier_verify_finish_req.dart';
+import 'package:corbado_frontend_api_client/src/model/identifier_verify_start_req.dart';
+import 'package:corbado_frontend_api_client/src/model/login_init_req.dart';
+import 'package:corbado_frontend_api_client/src/model/passkey_append_finish_req.dart';
+import 'package:corbado_frontend_api_client/src/model/passkey_append_start_req.dart';
+import 'package:corbado_frontend_api_client/src/model/passkey_login_finish_req.dart';
+import 'package:corbado_frontend_api_client/src/model/passkey_login_start_req.dart';
+import 'package:corbado_frontend_api_client/src/model/passkey_mediation_finish_req.dart';
+import 'package:corbado_frontend_api_client/src/model/process_init_req.dart';
+import 'package:corbado_frontend_api_client/src/model/process_init_rsp.dart';
+import 'package:corbado_frontend_api_client/src/model/process_response.dart';
+import 'package:corbado_frontend_api_client/src/model/signup_init_req.dart';
+import 'package:corbado_frontend_api_client/src/model/social_verify_start_req.dart';
+
+class AuthApi {
+  final Dio _dio;
+
+  final Serializers _serializers;
+
+  const AuthApi(this._dio, this._serializers);
+
+  /// blockSkip
+  /// tbd
+  ///
+  /// Parameters:
+  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
+  /// * [headers] - Can be used to add additional headers to the request
+  /// * [extras] - Can be used to add flags to the request
+  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
+  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
+  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
+  ///
+  /// Returns a [Future] containing a [Response] with a [ProcessResponse] as data
+  /// Throws [DioException] if API call or serialization fails
+  Future<Response<ProcessResponse>> blockSkip({
+    CancelToken? cancelToken,
+    Map<String, dynamic>? headers,
+    Map<String, dynamic>? extra,
+    ValidateStatus? validateStatus,
+    ProgressCallback? onSendProgress,
+    ProgressCallback? onReceiveProgress,
+  }) async {
+    final _path = r'/v2/auth/block/skip';
+    final _options = Options(
+      method: r'POST',
+      headers: <String, dynamic>{
+        ...?headers,
+      },
+      extra: <String, dynamic>{
+        'secure': <Map<String, String>>[
+          {
+            'type': 'http',
+            'scheme': 'bearer',
+            'name': 'bearerAuth',
+          },
+          {
+            'type': 'apiKey',
+            'name': 'projectID',
+            'keyName': 'X-Corbado-ProjectID',
+            'where': 'header',
+          },
+        ],
+        ...?extra,
+      },
+      validateStatus: validateStatus,
+    );
+
+    final _response = await _dio.request<Object>(
+      _path,
+      options: _options,
+      cancelToken: cancelToken,
+      onSendProgress: onSendProgress,
+      onReceiveProgress: onReceiveProgress,
+    );
+
+    ProcessResponse? _responseData;
+
+    try {
+      final rawResponse = _response.data;
+      _responseData = rawResponse == null
+          ? null
+          : _serializers.deserialize(
+              rawResponse,
+              specifiedType: const FullType(ProcessResponse),
+            ) as ProcessResponse;
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _response.requestOptions,
+        response: _response,
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    return Response<ProcessResponse>(
+      data: _responseData,
+      headers: _response.headers,
+      isRedirect: _response.isRedirect,
+      requestOptions: _response.requestOptions,
+      redirects: _response.redirects,
+      statusCode: _response.statusCode,
+      statusMessage: _response.statusMessage,
+      extra: _response.extra,
+    );
+  }
+
+  /// eventCreate
+  /// Creates a new user generated complete event.
+  ///
+  /// Parameters:
+  /// * [eventCreateReq]
+  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
+  /// * [headers] - Can be used to add additional headers to the request
+  /// * [extras] - Can be used to add flags to the request
+  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
+  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
+  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
+  ///
+  /// Returns a [Future]
+  /// Throws [DioException] if API call or serialization fails
+  Future<Response<void>> eventCreate({
+    required EventCreateReq eventCreateReq,
+    CancelToken? cancelToken,
+    Map<String, dynamic>? headers,
+    Map<String, dynamic>? extra,
+    ValidateStatus? validateStatus,
+    ProgressCallback? onSendProgress,
+    ProgressCallback? onReceiveProgress,
+  }) async {
+    final _path = r'/v2/auth/events';
+    final _options = Options(
+      method: r'POST',
+      headers: <String, dynamic>{
+        ...?headers,
+      },
+      extra: <String, dynamic>{
+        'secure': <Map<String, String>>[
+          {
+            'type': 'http',
+            'scheme': 'bearer',
+            'name': 'bearerAuth',
+          },
+          {
+            'type': 'apiKey',
+            'name': 'projectID',
+            'keyName': 'X-Corbado-ProjectID',
+            'where': 'header',
+          },
+        ],
+        ...?extra,
+      },
+      contentType: 'application/json',
+      validateStatus: validateStatus,
+    );
+
+    dynamic _bodyData;
+
+    try {
+      const _type = FullType(EventCreateReq);
+      _bodyData = _serializers.serialize(eventCreateReq, specifiedType: _type);
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _options.compose(
+          _dio.options,
+          _path,
+        ),
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    final _response = await _dio.request<Object>(
+      _path,
+      data: _bodyData,
+      options: _options,
+      cancelToken: cancelToken,
+      onSendProgress: onSendProgress,
+      onReceiveProgress: onReceiveProgress,
+    );
+
+    return _response;
+  }
+
+  /// identifierUpdate
+  /// tbd
+  ///
+  /// Parameters:
+  /// * [identifierUpdateReq]
+  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
+  /// * [headers] - Can be used to add additional headers to the request
+  /// * [extras] - Can be used to add flags to the request
+  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
+  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
+  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
+  ///
+  /// Returns a [Future] containing a [Response] with a [ProcessResponse] as data
+  /// Throws [DioException] if API call or serialization fails
+  Future<Response<ProcessResponse>> identifierUpdate({
+    required IdentifierUpdateReq identifierUpdateReq,
+    CancelToken? cancelToken,
+    Map<String, dynamic>? headers,
+    Map<String, dynamic>? extra,
+    ValidateStatus? validateStatus,
+    ProgressCallback? onSendProgress,
+    ProgressCallback? onReceiveProgress,
+  }) async {
+    final _path = r'/v2/auth/identifier/update';
+    final _options = Options(
+      method: r'POST',
+      headers: <String, dynamic>{
+        ...?headers,
+      },
+      extra: <String, dynamic>{
+        'secure': <Map<String, String>>[
+          {
+            'type': 'http',
+            'scheme': 'bearer',
+            'name': 'bearerAuth',
+          },
+          {
+            'type': 'apiKey',
+            'name': 'projectID',
+            'keyName': 'X-Corbado-ProjectID',
+            'where': 'header',
+          },
+        ],
+        ...?extra,
+      },
+      contentType: 'application/json',
+      validateStatus: validateStatus,
+    );
+
+    dynamic _bodyData;
+
+    try {
+      const _type = FullType(IdentifierUpdateReq);
+      _bodyData =
+          _serializers.serialize(identifierUpdateReq, specifiedType: _type);
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _options.compose(
+          _dio.options,
+          _path,
+        ),
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    final _response = await _dio.request<Object>(
+      _path,
+      data: _bodyData,
+      options: _options,
+      cancelToken: cancelToken,
+      onSendProgress: onSendProgress,
+      onReceiveProgress: onReceiveProgress,
+    );
+
+    ProcessResponse? _responseData;
+
+    try {
+      final rawResponse = _response.data;
+      _responseData = rawResponse == null
+          ? null
+          : _serializers.deserialize(
+              rawResponse,
+              specifiedType: const FullType(ProcessResponse),
+            ) as ProcessResponse;
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _response.requestOptions,
+        response: _response,
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    return Response<ProcessResponse>(
+      data: _responseData,
+      headers: _response.headers,
+      isRedirect: _response.isRedirect,
+      requestOptions: _response.requestOptions,
+      redirects: _response.redirects,
+      statusCode: _response.statusCode,
+      statusMessage: _response.statusMessage,
+      extra: _response.extra,
+    );
+  }
+
+  /// identifierVerifyFinish
+  /// tbd
+  ///
+  /// Parameters:
+  /// * [identifierVerifyFinishReq]
+  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
+  /// * [headers] - Can be used to add additional headers to the request
+  /// * [extras] - Can be used to add flags to the request
+  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
+  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
+  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
+  ///
+  /// Returns a [Future] containing a [Response] with a [ProcessResponse] as data
+  /// Throws [DioException] if API call or serialization fails
+  Future<Response<ProcessResponse>> identifierVerifyFinish({
+    required IdentifierVerifyFinishReq identifierVerifyFinishReq,
+    CancelToken? cancelToken,
+    Map<String, dynamic>? headers,
+    Map<String, dynamic>? extra,
+    ValidateStatus? validateStatus,
+    ProgressCallback? onSendProgress,
+    ProgressCallback? onReceiveProgress,
+  }) async {
+    final _path = r'/v2/auth/identifier/verify/finish';
+    final _options = Options(
+      method: r'POST',
+      headers: <String, dynamic>{
+        ...?headers,
+      },
+      extra: <String, dynamic>{
+        'secure': <Map<String, String>>[
+          {
+            'type': 'http',
+            'scheme': 'bearer',
+            'name': 'bearerAuth',
+          },
+          {
+            'type': 'apiKey',
+            'name': 'projectID',
+            'keyName': 'X-Corbado-ProjectID',
+            'where': 'header',
+          },
+        ],
+        ...?extra,
+      },
+      contentType: 'application/json',
+      validateStatus: validateStatus,
+    );
+
+    dynamic _bodyData;
+
+    try {
+      const _type = FullType(IdentifierVerifyFinishReq);
+      _bodyData = _serializers.serialize(identifierVerifyFinishReq,
+          specifiedType: _type);
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _options.compose(
+          _dio.options,
+          _path,
+        ),
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    final _response = await _dio.request<Object>(
+      _path,
+      data: _bodyData,
+      options: _options,
+      cancelToken: cancelToken,
+      onSendProgress: onSendProgress,
+      onReceiveProgress: onReceiveProgress,
+    );
+
+    ProcessResponse? _responseData;
+
+    try {
+      final rawResponse = _response.data;
+      _responseData = rawResponse == null
+          ? null
+          : _serializers.deserialize(
+              rawResponse,
+              specifiedType: const FullType(ProcessResponse),
+            ) as ProcessResponse;
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _response.requestOptions,
+        response: _response,
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    return Response<ProcessResponse>(
+      data: _responseData,
+      headers: _response.headers,
+      isRedirect: _response.isRedirect,
+      requestOptions: _response.requestOptions,
+      redirects: _response.redirects,
+      statusCode: _response.statusCode,
+      statusMessage: _response.statusMessage,
+      extra: _response.extra,
+    );
+  }
+
+  /// identifierVerifyStart
+  /// tbd
+  ///
+  /// Parameters:
+  /// * [identifierVerifyStartReq]
+  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
+  /// * [headers] - Can be used to add additional headers to the request
+  /// * [extras] - Can be used to add flags to the request
+  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
+  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
+  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
+  ///
+  /// Returns a [Future] containing a [Response] with a [ProcessResponse] as data
+  /// Throws [DioException] if API call or serialization fails
+  Future<Response<ProcessResponse>> identifierVerifyStart({
+    required IdentifierVerifyStartReq identifierVerifyStartReq,
+    CancelToken? cancelToken,
+    Map<String, dynamic>? headers,
+    Map<String, dynamic>? extra,
+    ValidateStatus? validateStatus,
+    ProgressCallback? onSendProgress,
+    ProgressCallback? onReceiveProgress,
+  }) async {
+    final _path = r'/v2/auth/identifier/verify/start';
+    final _options = Options(
+      method: r'POST',
+      headers: <String, dynamic>{
+        ...?headers,
+      },
+      extra: <String, dynamic>{
+        'secure': <Map<String, String>>[
+          {
+            'type': 'http',
+            'scheme': 'bearer',
+            'name': 'bearerAuth',
+          },
+          {
+            'type': 'apiKey',
+            'name': 'projectID',
+            'keyName': 'X-Corbado-ProjectID',
+            'where': 'header',
+          },
+        ],
+        ...?extra,
+      },
+      contentType: 'application/json',
+      validateStatus: validateStatus,
+    );
+
+    dynamic _bodyData;
+
+    try {
+      const _type = FullType(IdentifierVerifyStartReq);
+      _bodyData = _serializers.serialize(identifierVerifyStartReq,
+          specifiedType: _type);
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _options.compose(
+          _dio.options,
+          _path,
+        ),
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    final _response = await _dio.request<Object>(
+      _path,
+      data: _bodyData,
+      options: _options,
+      cancelToken: cancelToken,
+      onSendProgress: onSendProgress,
+      onReceiveProgress: onReceiveProgress,
+    );
+
+    ProcessResponse? _responseData;
+
+    try {
+      final rawResponse = _response.data;
+      _responseData = rawResponse == null
+          ? null
+          : _serializers.deserialize(
+              rawResponse,
+              specifiedType: const FullType(ProcessResponse),
+            ) as ProcessResponse;
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _response.requestOptions,
+        response: _response,
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    return Response<ProcessResponse>(
+      data: _responseData,
+      headers: _response.headers,
+      isRedirect: _response.isRedirect,
+      requestOptions: _response.requestOptions,
+      redirects: _response.redirects,
+      statusCode: _response.statusCode,
+      statusMessage: _response.statusMessage,
+      extra: _response.extra,
+    );
+  }
+
+  /// identifierVerifyStatus
+  /// tbd
+  ///
+  /// Parameters:
+  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
+  /// * [headers] - Can be used to add additional headers to the request
+  /// * [extras] - Can be used to add flags to the request
+  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
+  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
+  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
+  ///
+  /// Returns a [Future] containing a [Response] with a [ProcessResponse] as data
+  /// Throws [DioException] if API call or serialization fails
+  Future<Response<ProcessResponse>> identifierVerifyStatus({
+    CancelToken? cancelToken,
+    Map<String, dynamic>? headers,
+    Map<String, dynamic>? extra,
+    ValidateStatus? validateStatus,
+    ProgressCallback? onSendProgress,
+    ProgressCallback? onReceiveProgress,
+  }) async {
+    final _path = r'/v2/auth/identifier/verify/status';
+    final _options = Options(
+      method: r'GET',
+      headers: <String, dynamic>{
+        ...?headers,
+      },
+      extra: <String, dynamic>{
+        'secure': <Map<String, String>>[
+          {
+            'type': 'http',
+            'scheme': 'bearer',
+            'name': 'bearerAuth',
+          },
+          {
+            'type': 'apiKey',
+            'name': 'projectID',
+            'keyName': 'X-Corbado-ProjectID',
+            'where': 'header',
+          },
+        ],
+        ...?extra,
+      },
+      validateStatus: validateStatus,
+    );
+
+    final _response = await _dio.request<Object>(
+      _path,
+      options: _options,
+      cancelToken: cancelToken,
+      onSendProgress: onSendProgress,
+      onReceiveProgress: onReceiveProgress,
+    );
+
+    ProcessResponse? _responseData;
+
+    try {
+      final rawResponse = _response.data;
+      _responseData = rawResponse == null
+          ? null
+          : _serializers.deserialize(
+              rawResponse,
+              specifiedType: const FullType(ProcessResponse),
+            ) as ProcessResponse;
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _response.requestOptions,
+        response: _response,
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    return Response<ProcessResponse>(
+      data: _responseData,
+      headers: _response.headers,
+      isRedirect: _response.isRedirect,
+      requestOptions: _response.requestOptions,
+      redirects: _response.redirects,
+      statusCode: _response.statusCode,
+      statusMessage: _response.statusMessage,
+      extra: _response.extra,
+    );
+  }
+
+  /// loginInit
+  /// tbd
+  ///
+  /// Parameters:
+  /// * [loginInitReq]
+  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
+  /// * [headers] - Can be used to add additional headers to the request
+  /// * [extras] - Can be used to add flags to the request
+  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
+  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
+  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
+  ///
+  /// Returns a [Future] containing a [Response] with a [ProcessResponse] as data
+  /// Throws [DioException] if API call or serialization fails
+  Future<Response<ProcessResponse>> loginInit({
+    required LoginInitReq loginInitReq,
+    CancelToken? cancelToken,
+    Map<String, dynamic>? headers,
+    Map<String, dynamic>? extra,
+    ValidateStatus? validateStatus,
+    ProgressCallback? onSendProgress,
+    ProgressCallback? onReceiveProgress,
+  }) async {
+    final _path = r'/v2/auth/login/init';
+    final _options = Options(
+      method: r'POST',
+      headers: <String, dynamic>{
+        ...?headers,
+      },
+      extra: <String, dynamic>{
+        'secure': <Map<String, String>>[
+          {
+            'type': 'http',
+            'scheme': 'bearer',
+            'name': 'bearerAuth',
+          },
+          {
+            'type': 'apiKey',
+            'name': 'projectID',
+            'keyName': 'X-Corbado-ProjectID',
+            'where': 'header',
+          },
+        ],
+        ...?extra,
+      },
+      contentType: 'application/json',
+      validateStatus: validateStatus,
+    );
+
+    dynamic _bodyData;
+
+    try {
+      const _type = FullType(LoginInitReq);
+      _bodyData = _serializers.serialize(loginInitReq, specifiedType: _type);
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _options.compose(
+          _dio.options,
+          _path,
+        ),
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    final _response = await _dio.request<Object>(
+      _path,
+      data: _bodyData,
+      options: _options,
+      cancelToken: cancelToken,
+      onSendProgress: onSendProgress,
+      onReceiveProgress: onReceiveProgress,
+    );
+
+    ProcessResponse? _responseData;
+
+    try {
+      final rawResponse = _response.data;
+      _responseData = rawResponse == null
+          ? null
+          : _serializers.deserialize(
+              rawResponse,
+              specifiedType: const FullType(ProcessResponse),
+            ) as ProcessResponse;
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _response.requestOptions,
+        response: _response,
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    return Response<ProcessResponse>(
+      data: _responseData,
+      headers: _response.headers,
+      isRedirect: _response.isRedirect,
+      requestOptions: _response.requestOptions,
+      redirects: _response.redirects,
+      statusCode: _response.statusCode,
+      statusMessage: _response.statusMessage,
+      extra: _response.extra,
+    );
+  }
+
+  /// passkeyAppendFinish
+  /// tbd
+  ///
+  /// Parameters:
+  /// * [passkeyAppendFinishReq]
+  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
+  /// * [headers] - Can be used to add additional headers to the request
+  /// * [extras] - Can be used to add flags to the request
+  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
+  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
+  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
+  ///
+  /// Returns a [Future] containing a [Response] with a [ProcessResponse] as data
+  /// Throws [DioException] if API call or serialization fails
+  Future<Response<ProcessResponse>> passkeyAppendFinish({
+    required PasskeyAppendFinishReq passkeyAppendFinishReq,
+    CancelToken? cancelToken,
+    Map<String, dynamic>? headers,
+    Map<String, dynamic>? extra,
+    ValidateStatus? validateStatus,
+    ProgressCallback? onSendProgress,
+    ProgressCallback? onReceiveProgress,
+  }) async {
+    final _path = r'/v2/auth/passkey/append/finish';
+    final _options = Options(
+      method: r'POST',
+      headers: <String, dynamic>{
+        ...?headers,
+      },
+      extra: <String, dynamic>{
+        'secure': <Map<String, String>>[
+          {
+            'type': 'http',
+            'scheme': 'bearer',
+            'name': 'bearerAuth',
+          },
+          {
+            'type': 'apiKey',
+            'name': 'projectID',
+            'keyName': 'X-Corbado-ProjectID',
+            'where': 'header',
+          },
+        ],
+        ...?extra,
+      },
+      contentType: 'application/json',
+      validateStatus: validateStatus,
+    );
+
+    dynamic _bodyData;
+
+    try {
+      const _type = FullType(PasskeyAppendFinishReq);
+      _bodyData =
+          _serializers.serialize(passkeyAppendFinishReq, specifiedType: _type);
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _options.compose(
+          _dio.options,
+          _path,
+        ),
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    final _response = await _dio.request<Object>(
+      _path,
+      data: _bodyData,
+      options: _options,
+      cancelToken: cancelToken,
+      onSendProgress: onSendProgress,
+      onReceiveProgress: onReceiveProgress,
+    );
+
+    ProcessResponse? _responseData;
+
+    try {
+      final rawResponse = _response.data;
+      _responseData = rawResponse == null
+          ? null
+          : _serializers.deserialize(
+              rawResponse,
+              specifiedType: const FullType(ProcessResponse),
+            ) as ProcessResponse;
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _response.requestOptions,
+        response: _response,
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    return Response<ProcessResponse>(
+      data: _responseData,
+      headers: _response.headers,
+      isRedirect: _response.isRedirect,
+      requestOptions: _response.requestOptions,
+      redirects: _response.redirects,
+      statusCode: _response.statusCode,
+      statusMessage: _response.statusMessage,
+      extra: _response.extra,
+    );
+  }
+
+  /// passkeyAppendStart
+  /// tbd
+  ///
+  /// Parameters:
+  /// * [passkeyAppendStartReq]
+  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
+  /// * [headers] - Can be used to add additional headers to the request
+  /// * [extras] - Can be used to add flags to the request
+  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
+  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
+  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
+  ///
+  /// Returns a [Future] containing a [Response] with a [ProcessResponse] as data
+  /// Throws [DioException] if API call or serialization fails
+  Future<Response<ProcessResponse>> passkeyAppendStart({
+    required PasskeyAppendStartReq passkeyAppendStartReq,
+    CancelToken? cancelToken,
+    Map<String, dynamic>? headers,
+    Map<String, dynamic>? extra,
+    ValidateStatus? validateStatus,
+    ProgressCallback? onSendProgress,
+    ProgressCallback? onReceiveProgress,
+  }) async {
+    final _path = r'/v2/auth/passkey/append/start';
+    final _options = Options(
+      method: r'POST',
+      headers: <String, dynamic>{
+        ...?headers,
+      },
+      extra: <String, dynamic>{
+        'secure': <Map<String, String>>[
+          {
+            'type': 'http',
+            'scheme': 'bearer',
+            'name': 'bearerAuth',
+          },
+          {
+            'type': 'apiKey',
+            'name': 'projectID',
+            'keyName': 'X-Corbado-ProjectID',
+            'where': 'header',
+          },
+        ],
+        ...?extra,
+      },
+      contentType: 'application/json',
+      validateStatus: validateStatus,
+    );
+
+    dynamic _bodyData;
+
+    try {
+      const _type = FullType(PasskeyAppendStartReq);
+      _bodyData =
+          _serializers.serialize(passkeyAppendStartReq, specifiedType: _type);
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _options.compose(
+          _dio.options,
+          _path,
+        ),
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    final _response = await _dio.request<Object>(
+      _path,
+      data: _bodyData,
+      options: _options,
+      cancelToken: cancelToken,
+      onSendProgress: onSendProgress,
+      onReceiveProgress: onReceiveProgress,
+    );
+
+    ProcessResponse? _responseData;
+
+    try {
+      final rawResponse = _response.data;
+      _responseData = rawResponse == null
+          ? null
+          : _serializers.deserialize(
+              rawResponse,
+              specifiedType: const FullType(ProcessResponse),
+            ) as ProcessResponse;
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _response.requestOptions,
+        response: _response,
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    return Response<ProcessResponse>(
+      data: _responseData,
+      headers: _response.headers,
+      isRedirect: _response.isRedirect,
+      requestOptions: _response.requestOptions,
+      redirects: _response.redirects,
+      statusCode: _response.statusCode,
+      statusMessage: _response.statusMessage,
+      extra: _response.extra,
+    );
+  }
+
+  /// passkeyLoginFinish
+  /// tbd
+  ///
+  /// Parameters:
+  /// * [passkeyLoginFinishReq]
+  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
+  /// * [headers] - Can be used to add additional headers to the request
+  /// * [extras] - Can be used to add flags to the request
+  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
+  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
+  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
+  ///
+  /// Returns a [Future] containing a [Response] with a [ProcessResponse] as data
+  /// Throws [DioException] if API call or serialization fails
+  Future<Response<ProcessResponse>> passkeyLoginFinish({
+    required PasskeyLoginFinishReq passkeyLoginFinishReq,
+    CancelToken? cancelToken,
+    Map<String, dynamic>? headers,
+    Map<String, dynamic>? extra,
+    ValidateStatus? validateStatus,
+    ProgressCallback? onSendProgress,
+    ProgressCallback? onReceiveProgress,
+  }) async {
+    final _path = r'/v2/auth/passkey/login/finish';
+    final _options = Options(
+      method: r'POST',
+      headers: <String, dynamic>{
+        ...?headers,
+      },
+      extra: <String, dynamic>{
+        'secure': <Map<String, String>>[
+          {
+            'type': 'http',
+            'scheme': 'bearer',
+            'name': 'bearerAuth',
+          },
+          {
+            'type': 'apiKey',
+            'name': 'projectID',
+            'keyName': 'X-Corbado-ProjectID',
+            'where': 'header',
+          },
+        ],
+        ...?extra,
+      },
+      contentType: 'application/json',
+      validateStatus: validateStatus,
+    );
+
+    dynamic _bodyData;
+
+    try {
+      const _type = FullType(PasskeyLoginFinishReq);
+      _bodyData =
+          _serializers.serialize(passkeyLoginFinishReq, specifiedType: _type);
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _options.compose(
+          _dio.options,
+          _path,
+        ),
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    final _response = await _dio.request<Object>(
+      _path,
+      data: _bodyData,
+      options: _options,
+      cancelToken: cancelToken,
+      onSendProgress: onSendProgress,
+      onReceiveProgress: onReceiveProgress,
+    );
+
+    ProcessResponse? _responseData;
+
+    try {
+      final rawResponse = _response.data;
+      _responseData = rawResponse == null
+          ? null
+          : _serializers.deserialize(
+              rawResponse,
+              specifiedType: const FullType(ProcessResponse),
+            ) as ProcessResponse;
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _response.requestOptions,
+        response: _response,
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    return Response<ProcessResponse>(
+      data: _responseData,
+      headers: _response.headers,
+      isRedirect: _response.isRedirect,
+      requestOptions: _response.requestOptions,
+      redirects: _response.redirects,
+      statusCode: _response.statusCode,
+      statusMessage: _response.statusMessage,
+      extra: _response.extra,
+    );
+  }
+
+  /// passkeyLoginStart
+  /// tbd
+  ///
+  /// Parameters:
+  /// * [passkeyLoginStartReq]
+  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
+  /// * [headers] - Can be used to add additional headers to the request
+  /// * [extras] - Can be used to add flags to the request
+  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
+  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
+  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
+  ///
+  /// Returns a [Future] containing a [Response] with a [ProcessResponse] as data
+  /// Throws [DioException] if API call or serialization fails
+  Future<Response<ProcessResponse>> passkeyLoginStart({
+    required PasskeyLoginStartReq passkeyLoginStartReq,
+    CancelToken? cancelToken,
+    Map<String, dynamic>? headers,
+    Map<String, dynamic>? extra,
+    ValidateStatus? validateStatus,
+    ProgressCallback? onSendProgress,
+    ProgressCallback? onReceiveProgress,
+  }) async {
+    final _path = r'/v2/auth/passkey/login/start';
+    final _options = Options(
+      method: r'POST',
+      headers: <String, dynamic>{
+        ...?headers,
+      },
+      extra: <String, dynamic>{
+        'secure': <Map<String, String>>[
+          {
+            'type': 'http',
+            'scheme': 'bearer',
+            'name': 'bearerAuth',
+          },
+          {
+            'type': 'apiKey',
+            'name': 'projectID',
+            'keyName': 'X-Corbado-ProjectID',
+            'where': 'header',
+          },
+        ],
+        ...?extra,
+      },
+      contentType: 'application/json',
+      validateStatus: validateStatus,
+    );
+
+    dynamic _bodyData;
+
+    try {
+      const _type = FullType(PasskeyLoginStartReq);
+      _bodyData =
+          _serializers.serialize(passkeyLoginStartReq, specifiedType: _type);
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _options.compose(
+          _dio.options,
+          _path,
+        ),
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    final _response = await _dio.request<Object>(
+      _path,
+      data: _bodyData,
+      options: _options,
+      cancelToken: cancelToken,
+      onSendProgress: onSendProgress,
+      onReceiveProgress: onReceiveProgress,
+    );
+
+    ProcessResponse? _responseData;
+
+    try {
+      final rawResponse = _response.data;
+      _responseData = rawResponse == null
+          ? null
+          : _serializers.deserialize(
+              rawResponse,
+              specifiedType: const FullType(ProcessResponse),
+            ) as ProcessResponse;
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _response.requestOptions,
+        response: _response,
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    return Response<ProcessResponse>(
+      data: _responseData,
+      headers: _response.headers,
+      isRedirect: _response.isRedirect,
+      requestOptions: _response.requestOptions,
+      redirects: _response.redirects,
+      statusCode: _response.statusCode,
+      statusMessage: _response.statusMessage,
+      extra: _response.extra,
+    );
+  }
+
+  /// passkeyMediationFinish
+  /// tbd
+  ///
+  /// Parameters:
+  /// * [passkeyMediationFinishReq]
+  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
+  /// * [headers] - Can be used to add additional headers to the request
+  /// * [extras] - Can be used to add flags to the request
+  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
+  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
+  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
+  ///
+  /// Returns a [Future] containing a [Response] with a [ProcessResponse] as data
+  /// Throws [DioException] if API call or serialization fails
+  Future<Response<ProcessResponse>> passkeyMediationFinish({
+    required PasskeyMediationFinishReq passkeyMediationFinishReq,
+    CancelToken? cancelToken,
+    Map<String, dynamic>? headers,
+    Map<String, dynamic>? extra,
+    ValidateStatus? validateStatus,
+    ProgressCallback? onSendProgress,
+    ProgressCallback? onReceiveProgress,
+  }) async {
+    final _path = r'/v2/auth/passkey/mediation/finish';
+    final _options = Options(
+      method: r'POST',
+      headers: <String, dynamic>{
+        ...?headers,
+      },
+      extra: <String, dynamic>{
+        'secure': <Map<String, String>>[
+          {
+            'type': 'http',
+            'scheme': 'bearer',
+            'name': 'bearerAuth',
+          },
+          {
+            'type': 'apiKey',
+            'name': 'projectID',
+            'keyName': 'X-Corbado-ProjectID',
+            'where': 'header',
+          },
+        ],
+        ...?extra,
+      },
+      contentType: 'application/json',
+      validateStatus: validateStatus,
+    );
+
+    dynamic _bodyData;
+
+    try {
+      const _type = FullType(PasskeyMediationFinishReq);
+      _bodyData = _serializers.serialize(passkeyMediationFinishReq,
+          specifiedType: _type);
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _options.compose(
+          _dio.options,
+          _path,
+        ),
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    final _response = await _dio.request<Object>(
+      _path,
+      data: _bodyData,
+      options: _options,
+      cancelToken: cancelToken,
+      onSendProgress: onSendProgress,
+      onReceiveProgress: onReceiveProgress,
+    );
+
+    ProcessResponse? _responseData;
+
+    try {
+      final rawResponse = _response.data;
+      _responseData = rawResponse == null
+          ? null
+          : _serializers.deserialize(
+              rawResponse,
+              specifiedType: const FullType(ProcessResponse),
+            ) as ProcessResponse;
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _response.requestOptions,
+        response: _response,
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    return Response<ProcessResponse>(
+      data: _responseData,
+      headers: _response.headers,
+      isRedirect: _response.isRedirect,
+      requestOptions: _response.requestOptions,
+      redirects: _response.redirects,
+      statusCode: _response.statusCode,
+      statusMessage: _response.statusMessage,
+      extra: _response.extra,
+    );
+  }
+
+  /// processComplete
+  /// tbd
+  ///
+  /// Parameters:
+  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
+  /// * [headers] - Can be used to add additional headers to the request
+  /// * [extras] - Can be used to add flags to the request
+  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
+  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
+  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
+  ///
+  /// Returns a [Future] containing a [Response] with a [ProcessResponse] as data
+  /// Throws [DioException] if API call or serialization fails
+  Future<Response<ProcessResponse>> processComplete({
+    CancelToken? cancelToken,
+    Map<String, dynamic>? headers,
+    Map<String, dynamic>? extra,
+    ValidateStatus? validateStatus,
+    ProgressCallback? onSendProgress,
+    ProgressCallback? onReceiveProgress,
+  }) async {
+    final _path = r'/v2/auth/process/complete';
+    final _options = Options(
+      method: r'POST',
+      headers: <String, dynamic>{
+        ...?headers,
+      },
+      extra: <String, dynamic>{
+        'secure': <Map<String, String>>[
+          {
+            'type': 'http',
+            'scheme': 'bearer',
+            'name': 'bearerAuth',
+          },
+          {
+            'type': 'apiKey',
+            'name': 'projectID',
+            'keyName': 'X-Corbado-ProjectID',
+            'where': 'header',
+          },
+        ],
+        ...?extra,
+      },
+      validateStatus: validateStatus,
+    );
+
+    final _response = await _dio.request<Object>(
+      _path,
+      options: _options,
+      cancelToken: cancelToken,
+      onSendProgress: onSendProgress,
+      onReceiveProgress: onReceiveProgress,
+    );
+
+    ProcessResponse? _responseData;
+
+    try {
+      final rawResponse = _response.data;
+      _responseData = rawResponse == null
+          ? null
+          : _serializers.deserialize(
+              rawResponse,
+              specifiedType: const FullType(ProcessResponse),
+            ) as ProcessResponse;
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _response.requestOptions,
+        response: _response,
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    return Response<ProcessResponse>(
+      data: _responseData,
+      headers: _response.headers,
+      isRedirect: _response.isRedirect,
+      requestOptions: _response.requestOptions,
+      redirects: _response.redirects,
+      statusCode: _response.statusCode,
+      statusMessage: _response.statusMessage,
+      extra: _response.extra,
+    );
+  }
+
+  /// processGet
+  /// tbd
+  ///
+  /// Parameters:
+  /// * [preferredBlock]
+  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
+  /// * [headers] - Can be used to add additional headers to the request
+  /// * [extras] - Can be used to add flags to the request
+  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
+  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
+  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
+  ///
+  /// Returns a [Future] containing a [Response] with a [ProcessResponse] as data
+  /// Throws [DioException] if API call or serialization fails
+  Future<Response<ProcessResponse>> processGet({
+    BlockType? preferredBlock,
+    CancelToken? cancelToken,
+    Map<String, dynamic>? headers,
+    Map<String, dynamic>? extra,
+    ValidateStatus? validateStatus,
+    ProgressCallback? onSendProgress,
+    ProgressCallback? onReceiveProgress,
+  }) async {
+    final _path = r'/v2/auth/process';
+    final _options = Options(
+      method: r'GET',
+      headers: <String, dynamic>{
+        ...?headers,
+      },
+      extra: <String, dynamic>{
+        'secure': <Map<String, String>>[
+          {
+            'type': 'http',
+            'scheme': 'bearer',
+            'name': 'bearerAuth',
+          },
+          {
+            'type': 'apiKey',
+            'name': 'projectID',
+            'keyName': 'X-Corbado-ProjectID',
+            'where': 'header',
+          },
+        ],
+        ...?extra,
+      },
+      validateStatus: validateStatus,
+    );
+
+    final _queryParameters = <String, dynamic>{
+      if (preferredBlock != null)
+        r'preferredBlock': encodeQueryParameter(
+            _serializers, preferredBlock, const FullType(BlockType)),
+    };
+
+    final _response = await _dio.request<Object>(
+      _path,
+      options: _options,
+      queryParameters: _queryParameters,
+      cancelToken: cancelToken,
+      onSendProgress: onSendProgress,
+      onReceiveProgress: onReceiveProgress,
+    );
+
+    ProcessResponse? _responseData;
+
+    try {
+      final rawResponse = _response.data;
+      _responseData = rawResponse == null
+          ? null
+          : _serializers.deserialize(
+              rawResponse,
+              specifiedType: const FullType(ProcessResponse),
+            ) as ProcessResponse;
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _response.requestOptions,
+        response: _response,
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    return Response<ProcessResponse>(
+      data: _responseData,
+      headers: _response.headers,
+      isRedirect: _response.isRedirect,
+      requestOptions: _response.requestOptions,
+      redirects: _response.redirects,
+      statusCode: _response.statusCode,
+      statusMessage: _response.statusMessage,
+      extra: _response.extra,
+    );
+  }
+
+  /// processInit
+  /// tbd
+  ///
+  /// Parameters:
+  /// * [processInitReq]
+  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
+  /// * [headers] - Can be used to add additional headers to the request
+  /// * [extras] - Can be used to add flags to the request
+  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
+  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
+  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
+  ///
+  /// Returns a [Future] containing a [Response] with a [ProcessInitRsp] as data
+  /// Throws [DioException] if API call or serialization fails
+  Future<Response<ProcessInitRsp>> processInit({
+    required ProcessInitReq processInitReq,
+    CancelToken? cancelToken,
+    Map<String, dynamic>? headers,
+    Map<String, dynamic>? extra,
+    ValidateStatus? validateStatus,
+    ProgressCallback? onSendProgress,
+    ProgressCallback? onReceiveProgress,
+  }) async {
+    final _path = r'/v2/auth/process/init';
+    final _options = Options(
+      method: r'POST',
+      headers: <String, dynamic>{
+        ...?headers,
+      },
+      extra: <String, dynamic>{
+        'secure': <Map<String, String>>[
+          {
+            'type': 'http',
+            'scheme': 'bearer',
+            'name': 'bearerAuth',
+          },
+          {
+            'type': 'apiKey',
+            'name': 'projectID',
+            'keyName': 'X-Corbado-ProjectID',
+            'where': 'header',
+          },
+        ],
+        ...?extra,
+      },
+      contentType: 'application/json',
+      validateStatus: validateStatus,
+    );
+
+    dynamic _bodyData;
+
+    try {
+      const _type = FullType(ProcessInitReq);
+      _bodyData = _serializers.serialize(processInitReq, specifiedType: _type);
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _options.compose(
+          _dio.options,
+          _path,
+        ),
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    final _response = await _dio.request<Object>(
+      _path,
+      data: _bodyData,
+      options: _options,
+      cancelToken: cancelToken,
+      onSendProgress: onSendProgress,
+      onReceiveProgress: onReceiveProgress,
+    );
+
+    ProcessInitRsp? _responseData;
+
+    try {
+      final rawResponse = _response.data;
+      _responseData = rawResponse == null
+          ? null
+          : _serializers.deserialize(
+              rawResponse,
+              specifiedType: const FullType(ProcessInitRsp),
+            ) as ProcessInitRsp;
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _response.requestOptions,
+        response: _response,
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    return Response<ProcessInitRsp>(
+      data: _responseData,
+      headers: _response.headers,
+      isRedirect: _response.isRedirect,
+      requestOptions: _response.requestOptions,
+      redirects: _response.redirects,
+      statusCode: _response.statusCode,
+      statusMessage: _response.statusMessage,
+      extra: _response.extra,
+    );
+  }
+
+  /// processReset
+  /// tbd
+  ///
+  /// Parameters:
+  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
+  /// * [headers] - Can be used to add additional headers to the request
+  /// * [extras] - Can be used to add flags to the request
+  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
+  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
+  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
+  ///
+  /// Returns a [Future] containing a [Response] with a [ProcessResponse] as data
+  /// Throws [DioException] if API call or serialization fails
+  Future<Response<ProcessResponse>> processReset({
+    CancelToken? cancelToken,
+    Map<String, dynamic>? headers,
+    Map<String, dynamic>? extra,
+    ValidateStatus? validateStatus,
+    ProgressCallback? onSendProgress,
+    ProgressCallback? onReceiveProgress,
+  }) async {
+    final _path = r'/v2/auth/process/reset';
+    final _options = Options(
+      method: r'POST',
+      headers: <String, dynamic>{
+        ...?headers,
+      },
+      extra: <String, dynamic>{
+        'secure': <Map<String, String>>[
+          {
+            'type': 'http',
+            'scheme': 'bearer',
+            'name': 'bearerAuth',
+          },
+          {
+            'type': 'apiKey',
+            'name': 'projectID',
+            'keyName': 'X-Corbado-ProjectID',
+            'where': 'header',
+          },
+        ],
+        ...?extra,
+      },
+      validateStatus: validateStatus,
+    );
+
+    final _response = await _dio.request<Object>(
+      _path,
+      options: _options,
+      cancelToken: cancelToken,
+      onSendProgress: onSendProgress,
+      onReceiveProgress: onReceiveProgress,
+    );
+
+    ProcessResponse? _responseData;
+
+    try {
+      final rawResponse = _response.data;
+      _responseData = rawResponse == null
+          ? null
+          : _serializers.deserialize(
+              rawResponse,
+              specifiedType: const FullType(ProcessResponse),
+            ) as ProcessResponse;
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _response.requestOptions,
+        response: _response,
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    return Response<ProcessResponse>(
+      data: _responseData,
+      headers: _response.headers,
+      isRedirect: _response.isRedirect,
+      requestOptions: _response.requestOptions,
+      redirects: _response.redirects,
+      statusCode: _response.statusCode,
+      statusMessage: _response.statusMessage,
+      extra: _response.extra,
+    );
+  }
+
+  /// signupInit
+  /// tbd
+  ///
+  /// Parameters:
+  /// * [signupInitReq]
+  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
+  /// * [headers] - Can be used to add additional headers to the request
+  /// * [extras] - Can be used to add flags to the request
+  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
+  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
+  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
+  ///
+  /// Returns a [Future] containing a [Response] with a [ProcessResponse] as data
+  /// Throws [DioException] if API call or serialization fails
+  Future<Response<ProcessResponse>> signupInit({
+    required SignupInitReq signupInitReq,
+    CancelToken? cancelToken,
+    Map<String, dynamic>? headers,
+    Map<String, dynamic>? extra,
+    ValidateStatus? validateStatus,
+    ProgressCallback? onSendProgress,
+    ProgressCallback? onReceiveProgress,
+  }) async {
+    final _path = r'/v2/auth/signup/init';
+    final _options = Options(
+      method: r'POST',
+      headers: <String, dynamic>{
+        ...?headers,
+      },
+      extra: <String, dynamic>{
+        'secure': <Map<String, String>>[
+          {
+            'type': 'http',
+            'scheme': 'bearer',
+            'name': 'bearerAuth',
+          },
+          {
+            'type': 'apiKey',
+            'name': 'projectID',
+            'keyName': 'X-Corbado-ProjectID',
+            'where': 'header',
+          },
+        ],
+        ...?extra,
+      },
+      contentType: 'application/json',
+      validateStatus: validateStatus,
+    );
+
+    dynamic _bodyData;
+
+    try {
+      const _type = FullType(SignupInitReq);
+      _bodyData = _serializers.serialize(signupInitReq, specifiedType: _type);
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _options.compose(
+          _dio.options,
+          _path,
+        ),
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    final _response = await _dio.request<Object>(
+      _path,
+      data: _bodyData,
+      options: _options,
+      cancelToken: cancelToken,
+      onSendProgress: onSendProgress,
+      onReceiveProgress: onReceiveProgress,
+    );
+
+    ProcessResponse? _responseData;
+
+    try {
+      final rawResponse = _response.data;
+      _responseData = rawResponse == null
+          ? null
+          : _serializers.deserialize(
+              rawResponse,
+              specifiedType: const FullType(ProcessResponse),
+            ) as ProcessResponse;
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _response.requestOptions,
+        response: _response,
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    return Response<ProcessResponse>(
+      data: _responseData,
+      headers: _response.headers,
+      isRedirect: _response.isRedirect,
+      requestOptions: _response.requestOptions,
+      redirects: _response.redirects,
+      statusCode: _response.statusCode,
+      statusMessage: _response.statusMessage,
+      extra: _response.extra,
+    );
+  }
+
+  /// socialVerifyCallback
+  /// tbd
+  ///
+  /// Parameters:
+  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
+  /// * [headers] - Can be used to add additional headers to the request
+  /// * [extras] - Can be used to add flags to the request
+  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
+  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
+  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
+  ///
+  /// Returns a [Future]
+  /// Throws [DioException] if API call or serialization fails
+  Future<Response<void>> socialVerifyCallback({
+    CancelToken? cancelToken,
+    Map<String, dynamic>? headers,
+    Map<String, dynamic>? extra,
+    ValidateStatus? validateStatus,
+    ProgressCallback? onSendProgress,
+    ProgressCallback? onReceiveProgress,
+  }) async {
+    final _path = r'/v2/auth/social/verify/callback';
+    final _options = Options(
+      method: r'GET',
+      headers: <String, dynamic>{
+        ...?headers,
+      },
+      extra: <String, dynamic>{
+        'secure': <Map<String, String>>[
+          {
+            'type': 'http',
+            'scheme': 'bearer',
+            'name': 'bearerAuth',
+          },
+          {
+            'type': 'apiKey',
+            'name': 'projectID',
+            'keyName': 'X-Corbado-ProjectID',
+            'where': 'header',
+          },
+        ],
+        ...?extra,
+      },
+      validateStatus: validateStatus,
+    );
+
+    final _response = await _dio.request<Object>(
+      _path,
+      options: _options,
+      cancelToken: cancelToken,
+      onSendProgress: onSendProgress,
+      onReceiveProgress: onReceiveProgress,
+    );
+
+    return _response;
+  }
+
+  /// socialVerifyFinish
+  /// tbd
+  ///
+  /// Parameters:
+  /// * [body]
+  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
+  /// * [headers] - Can be used to add additional headers to the request
+  /// * [extras] - Can be used to add flags to the request
+  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
+  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
+  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
+  ///
+  /// Returns a [Future] containing a [Response] with a [ProcessResponse] as data
+  /// Throws [DioException] if API call or serialization fails
+  Future<Response<ProcessResponse>> socialVerifyFinish({
+    required JsonObject body,
+    CancelToken? cancelToken,
+    Map<String, dynamic>? headers,
+    Map<String, dynamic>? extra,
+    ValidateStatus? validateStatus,
+    ProgressCallback? onSendProgress,
+    ProgressCallback? onReceiveProgress,
+  }) async {
+    final _path = r'/v2/auth/social/verify/finish';
+    final _options = Options(
+      method: r'POST',
+      headers: <String, dynamic>{
+        ...?headers,
+      },
+      extra: <String, dynamic>{
+        'secure': <Map<String, String>>[
+          {
+            'type': 'http',
+            'scheme': 'bearer',
+            'name': 'bearerAuth',
+          },
+          {
+            'type': 'apiKey',
+            'name': 'projectID',
+            'keyName': 'X-Corbado-ProjectID',
+            'where': 'header',
+          },
+        ],
+        ...?extra,
+      },
+      contentType: 'application/json',
+      validateStatus: validateStatus,
+    );
+
+    dynamic _bodyData;
+
+    try {
+      _bodyData = body;
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _options.compose(
+          _dio.options,
+          _path,
+        ),
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    final _response = await _dio.request<Object>(
+      _path,
+      data: _bodyData,
+      options: _options,
+      cancelToken: cancelToken,
+      onSendProgress: onSendProgress,
+      onReceiveProgress: onReceiveProgress,
+    );
+
+    ProcessResponse? _responseData;
+
+    try {
+      final rawResponse = _response.data;
+      _responseData = rawResponse == null
+          ? null
+          : _serializers.deserialize(
+              rawResponse,
+              specifiedType: const FullType(ProcessResponse),
+            ) as ProcessResponse;
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _response.requestOptions,
+        response: _response,
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    return Response<ProcessResponse>(
+      data: _responseData,
+      headers: _response.headers,
+      isRedirect: _response.isRedirect,
+      requestOptions: _response.requestOptions,
+      redirects: _response.redirects,
+      statusCode: _response.statusCode,
+      statusMessage: _response.statusMessage,
+      extra: _response.extra,
+    );
+  }
+
+  /// socialVerifyStart
+  /// tbd
+  ///
+  /// Parameters:
+  /// * [socialVerifyStartReq]
+  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
+  /// * [headers] - Can be used to add additional headers to the request
+  /// * [extras] - Can be used to add flags to the request
+  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
+  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
+  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
+  ///
+  /// Returns a [Future] containing a [Response] with a [ProcessResponse] as data
+  /// Throws [DioException] if API call or serialization fails
+  Future<Response<ProcessResponse>> socialVerifyStart({
+    required SocialVerifyStartReq socialVerifyStartReq,
+    CancelToken? cancelToken,
+    Map<String, dynamic>? headers,
+    Map<String, dynamic>? extra,
+    ValidateStatus? validateStatus,
+    ProgressCallback? onSendProgress,
+    ProgressCallback? onReceiveProgress,
+  }) async {
+    final _path = r'/v2/auth/social/verify/start';
+    final _options = Options(
+      method: r'POST',
+      headers: <String, dynamic>{
+        ...?headers,
+      },
+      extra: <String, dynamic>{
+        'secure': <Map<String, String>>[
+          {
+            'type': 'http',
+            'scheme': 'bearer',
+            'name': 'bearerAuth',
+          },
+          {
+            'type': 'apiKey',
+            'name': 'projectID',
+            'keyName': 'X-Corbado-ProjectID',
+            'where': 'header',
+          },
+        ],
+        ...?extra,
+      },
+      contentType: 'application/json',
+      validateStatus: validateStatus,
+    );
+
+    dynamic _bodyData;
+
+    try {
+      const _type = FullType(SocialVerifyStartReq);
+      _bodyData =
+          _serializers.serialize(socialVerifyStartReq, specifiedType: _type);
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _options.compose(
+          _dio.options,
+          _path,
+        ),
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    final _response = await _dio.request<Object>(
+      _path,
+      data: _bodyData,
+      options: _options,
+      cancelToken: cancelToken,
+      onSendProgress: onSendProgress,
+      onReceiveProgress: onReceiveProgress,
+    );
+
+    ProcessResponse? _responseData;
+
+    try {
+      final rawResponse = _response.data;
+      _responseData = rawResponse == null
+          ? null
+          : _serializers.deserialize(
+              rawResponse,
+              specifiedType: const FullType(ProcessResponse),
+            ) as ProcessResponse;
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _response.requestOptions,
+        response: _response,
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    return Response<ProcessResponse>(
+      data: _responseData,
+      headers: _response.headers,
+      isRedirect: _response.isRedirect,
+      requestOptions: _response.requestOptions,
+      redirects: _response.redirects,
+      statusCode: _response.statusCode,
+      statusMessage: _response.statusMessage,
+      extra: _response.extra,
+    );
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/api/configs_api.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/api/configs_api.dart
new file mode 100644
index 0000000..a63b4c8
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/api/configs_api.dart
@@ -0,0 +1,191 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+import 'dart:async';
+
+import 'package:built_value/serializer.dart';
+import 'package:dio/dio.dart';
+
+import 'package:corbado_frontend_api_client/src/model/session_config_rsp.dart';
+import 'package:corbado_frontend_api_client/src/model/user_details_config_rsp.dart';
+
+class ConfigsApi {
+  final Dio _dio;
+
+  final Serializers _serializers;
+
+  const ConfigsApi(this._dio, this._serializers);
+
+  /// getSessionConfig
+  /// tbd
+  ///
+  /// Parameters:
+  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
+  /// * [headers] - Can be used to add additional headers to the request
+  /// * [extras] - Can be used to add flags to the request
+  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
+  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
+  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
+  ///
+  /// Returns a [Future] containing a [Response] with a [SessionConfigRsp] as data
+  /// Throws [DioException] if API call or serialization fails
+  Future<Response<SessionConfigRsp>> getSessionConfig({
+    CancelToken? cancelToken,
+    Map<String, dynamic>? headers,
+    Map<String, dynamic>? extra,
+    ValidateStatus? validateStatus,
+    ProgressCallback? onSendProgress,
+    ProgressCallback? onReceiveProgress,
+  }) async {
+    final _path = r'/v2/session-config';
+    final _options = Options(
+      method: r'GET',
+      headers: <String, dynamic>{
+        ...?headers,
+      },
+      extra: <String, dynamic>{
+        'secure': <Map<String, String>>[
+          {
+            'type': 'http',
+            'scheme': 'bearer',
+            'name': 'bearerAuth',
+          },
+          {
+            'type': 'apiKey',
+            'name': 'projectID',
+            'keyName': 'X-Corbado-ProjectID',
+            'where': 'header',
+          },
+        ],
+        ...?extra,
+      },
+      validateStatus: validateStatus,
+    );
+
+    final _response = await _dio.request<Object>(
+      _path,
+      options: _options,
+      cancelToken: cancelToken,
+      onSendProgress: onSendProgress,
+      onReceiveProgress: onReceiveProgress,
+    );
+
+    SessionConfigRsp? _responseData;
+
+    try {
+      final rawResponse = _response.data;
+      _responseData = rawResponse == null
+          ? null
+          : _serializers.deserialize(
+              rawResponse,
+              specifiedType: const FullType(SessionConfigRsp),
+            ) as SessionConfigRsp;
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _response.requestOptions,
+        response: _response,
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    return Response<SessionConfigRsp>(
+      data: _responseData,
+      headers: _response.headers,
+      isRedirect: _response.isRedirect,
+      requestOptions: _response.requestOptions,
+      redirects: _response.redirects,
+      statusCode: _response.statusCode,
+      statusMessage: _response.statusMessage,
+      extra: _response.extra,
+    );
+  }
+
+  /// getUserDetailsConfig
+  /// Gets configs needed by the UserDetails component
+  ///
+  /// Parameters:
+  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
+  /// * [headers] - Can be used to add additional headers to the request
+  /// * [extras] - Can be used to add flags to the request
+  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
+  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
+  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
+  ///
+  /// Returns a [Future] containing a [Response] with a [UserDetailsConfigRsp] as data
+  /// Throws [DioException] if API call or serialization fails
+  Future<Response<UserDetailsConfigRsp>> getUserDetailsConfig({
+    CancelToken? cancelToken,
+    Map<String, dynamic>? headers,
+    Map<String, dynamic>? extra,
+    ValidateStatus? validateStatus,
+    ProgressCallback? onSendProgress,
+    ProgressCallback? onReceiveProgress,
+  }) async {
+    final _path = r'/v2/user-details-config';
+    final _options = Options(
+      method: r'GET',
+      headers: <String, dynamic>{
+        ...?headers,
+      },
+      extra: <String, dynamic>{
+        'secure': <Map<String, String>>[
+          {
+            'type': 'http',
+            'scheme': 'bearer',
+            'name': 'bearerAuth',
+          },
+          {
+            'type': 'apiKey',
+            'name': 'projectID',
+            'keyName': 'X-Corbado-ProjectID',
+            'where': 'header',
+          },
+        ],
+        ...?extra,
+      },
+      validateStatus: validateStatus,
+    );
+
+    final _response = await _dio.request<Object>(
+      _path,
+      options: _options,
+      cancelToken: cancelToken,
+      onSendProgress: onSendProgress,
+      onReceiveProgress: onReceiveProgress,
+    );
+
+    UserDetailsConfigRsp? _responseData;
+
+    try {
+      final rawResponse = _response.data;
+      _responseData = rawResponse == null
+          ? null
+          : _serializers.deserialize(
+              rawResponse,
+              specifiedType: const FullType(UserDetailsConfigRsp),
+            ) as UserDetailsConfigRsp;
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _response.requestOptions,
+        response: _response,
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    return Response<UserDetailsConfigRsp>(
+      data: _responseData,
+      headers: _response.headers,
+      isRedirect: _response.isRedirect,
+      requestOptions: _response.requestOptions,
+      redirects: _response.redirects,
+      statusCode: _response.statusCode,
+      statusMessage: _response.statusMessage,
+      extra: _response.extra,
+    );
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/api/corbado_connect_api.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/api/corbado_connect_api.dart
new file mode 100644
index 0000000..d87f37f
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/api/corbado_connect_api.dart
@@ -0,0 +1,1087 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+import 'dart:async';
+
+import 'package:built_value/serializer.dart';
+import 'package:dio/dio.dart';
+
+import 'package:corbado_frontend_api_client/src/model/connect_append_finish_req.dart';
+import 'package:corbado_frontend_api_client/src/model/connect_append_finish_rsp.dart';
+import 'package:corbado_frontend_api_client/src/model/connect_append_init_req.dart';
+import 'package:corbado_frontend_api_client/src/model/connect_append_init_rsp.dart';
+import 'package:corbado_frontend_api_client/src/model/connect_append_start_req.dart';
+import 'package:corbado_frontend_api_client/src/model/connect_append_start_rsp.dart';
+import 'package:corbado_frontend_api_client/src/model/connect_event_create_req.dart';
+import 'package:corbado_frontend_api_client/src/model/connect_login_finish_req.dart';
+import 'package:corbado_frontend_api_client/src/model/connect_login_finish_rsp.dart';
+import 'package:corbado_frontend_api_client/src/model/connect_login_init_req.dart';
+import 'package:corbado_frontend_api_client/src/model/connect_login_init_rsp.dart';
+import 'package:corbado_frontend_api_client/src/model/connect_login_start_req.dart';
+import 'package:corbado_frontend_api_client/src/model/connect_login_start_rsp.dart';
+import 'package:corbado_frontend_api_client/src/model/connect_manage_delete_req.dart';
+import 'package:corbado_frontend_api_client/src/model/connect_manage_delete_rsp.dart';
+import 'package:corbado_frontend_api_client/src/model/connect_manage_init_req.dart';
+import 'package:corbado_frontend_api_client/src/model/connect_manage_init_rsp.dart';
+import 'package:corbado_frontend_api_client/src/model/connect_manage_list_req.dart';
+import 'package:corbado_frontend_api_client/src/model/connect_manage_list_rsp.dart';
+
+class CorbadoConnectApi {
+  final Dio _dio;
+
+  final Serializers _serializers;
+
+  const CorbadoConnectApi(this._dio, this._serializers);
+
+  /// connectAppendFinish
+  /// Finishes an initialized connect passkey append process.
+  ///
+  /// Parameters:
+  /// * [connectAppendFinishReq]
+  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
+  /// * [headers] - Can be used to add additional headers to the request
+  /// * [extras] - Can be used to add flags to the request
+  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
+  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
+  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
+  ///
+  /// Returns a [Future] containing a [Response] with a [ConnectAppendFinishRsp] as data
+  /// Throws [DioException] if API call or serialization fails
+  Future<Response<ConnectAppendFinishRsp>> connectAppendFinish({
+    required ConnectAppendFinishReq connectAppendFinishReq,
+    CancelToken? cancelToken,
+    Map<String, dynamic>? headers,
+    Map<String, dynamic>? extra,
+    ValidateStatus? validateStatus,
+    ProgressCallback? onSendProgress,
+    ProgressCallback? onReceiveProgress,
+  }) async {
+    final _path = r'/v2/connect/append/finish';
+    final _options = Options(
+      method: r'POST',
+      headers: <String, dynamic>{
+        ...?headers,
+      },
+      extra: <String, dynamic>{
+        'secure': <Map<String, String>>[
+          {
+            'type': 'http',
+            'scheme': 'bearer',
+            'name': 'bearerAuth',
+          },
+          {
+            'type': 'apiKey',
+            'name': 'projectID',
+            'keyName': 'X-Corbado-ProjectID',
+            'where': 'header',
+          },
+        ],
+        ...?extra,
+      },
+      contentType: 'application/json',
+      validateStatus: validateStatus,
+    );
+
+    dynamic _bodyData;
+
+    try {
+      const _type = FullType(ConnectAppendFinishReq);
+      _bodyData =
+          _serializers.serialize(connectAppendFinishReq, specifiedType: _type);
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _options.compose(
+          _dio.options,
+          _path,
+        ),
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    final _response = await _dio.request<Object>(
+      _path,
+      data: _bodyData,
+      options: _options,
+      cancelToken: cancelToken,
+      onSendProgress: onSendProgress,
+      onReceiveProgress: onReceiveProgress,
+    );
+
+    ConnectAppendFinishRsp? _responseData;
+
+    try {
+      final rawResponse = _response.data;
+      _responseData = rawResponse == null
+          ? null
+          : _serializers.deserialize(
+              rawResponse,
+              specifiedType: const FullType(ConnectAppendFinishRsp),
+            ) as ConnectAppendFinishRsp;
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _response.requestOptions,
+        response: _response,
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    return Response<ConnectAppendFinishRsp>(
+      data: _responseData,
+      headers: _response.headers,
+      isRedirect: _response.isRedirect,
+      requestOptions: _response.requestOptions,
+      redirects: _response.redirects,
+      statusCode: _response.statusCode,
+      statusMessage: _response.statusMessage,
+      extra: _response.extra,
+    );
+  }
+
+  /// connectAppendInit
+  /// Initializes a connect process for passkey append.
+  ///
+  /// Parameters:
+  /// * [connectAppendInitReq]
+  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
+  /// * [headers] - Can be used to add additional headers to the request
+  /// * [extras] - Can be used to add flags to the request
+  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
+  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
+  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
+  ///
+  /// Returns a [Future] containing a [Response] with a [ConnectAppendInitRsp] as data
+  /// Throws [DioException] if API call or serialization fails
+  Future<Response<ConnectAppendInitRsp>> connectAppendInit({
+    required ConnectAppendInitReq connectAppendInitReq,
+    CancelToken? cancelToken,
+    Map<String, dynamic>? headers,
+    Map<String, dynamic>? extra,
+    ValidateStatus? validateStatus,
+    ProgressCallback? onSendProgress,
+    ProgressCallback? onReceiveProgress,
+  }) async {
+    final _path = r'/v2/connect/append/init';
+    final _options = Options(
+      method: r'POST',
+      headers: <String, dynamic>{
+        ...?headers,
+      },
+      extra: <String, dynamic>{
+        'secure': <Map<String, String>>[
+          {
+            'type': 'http',
+            'scheme': 'bearer',
+            'name': 'bearerAuth',
+          },
+          {
+            'type': 'apiKey',
+            'name': 'projectID',
+            'keyName': 'X-Corbado-ProjectID',
+            'where': 'header',
+          },
+        ],
+        ...?extra,
+      },
+      contentType: 'application/json',
+      validateStatus: validateStatus,
+    );
+
+    dynamic _bodyData;
+
+    try {
+      const _type = FullType(ConnectAppendInitReq);
+      _bodyData =
+          _serializers.serialize(connectAppendInitReq, specifiedType: _type);
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _options.compose(
+          _dio.options,
+          _path,
+        ),
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    final _response = await _dio.request<Object>(
+      _path,
+      data: _bodyData,
+      options: _options,
+      cancelToken: cancelToken,
+      onSendProgress: onSendProgress,
+      onReceiveProgress: onReceiveProgress,
+    );
+
+    ConnectAppendInitRsp? _responseData;
+
+    try {
+      final rawResponse = _response.data;
+      _responseData = rawResponse == null
+          ? null
+          : _serializers.deserialize(
+              rawResponse,
+              specifiedType: const FullType(ConnectAppendInitRsp),
+            ) as ConnectAppendInitRsp;
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _response.requestOptions,
+        response: _response,
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    return Response<ConnectAppendInitRsp>(
+      data: _responseData,
+      headers: _response.headers,
+      isRedirect: _response.isRedirect,
+      requestOptions: _response.requestOptions,
+      redirects: _response.redirects,
+      statusCode: _response.statusCode,
+      statusMessage: _response.statusMessage,
+      extra: _response.extra,
+    );
+  }
+
+  /// connectAppendStart
+  /// Starts an initialized connect passkey append process.
+  ///
+  /// Parameters:
+  /// * [connectAppendStartReq]
+  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
+  /// * [headers] - Can be used to add additional headers to the request
+  /// * [extras] - Can be used to add flags to the request
+  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
+  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
+  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
+  ///
+  /// Returns a [Future] containing a [Response] with a [ConnectAppendStartRsp] as data
+  /// Throws [DioException] if API call or serialization fails
+  Future<Response<ConnectAppendStartRsp>> connectAppendStart({
+    required ConnectAppendStartReq connectAppendStartReq,
+    CancelToken? cancelToken,
+    Map<String, dynamic>? headers,
+    Map<String, dynamic>? extra,
+    ValidateStatus? validateStatus,
+    ProgressCallback? onSendProgress,
+    ProgressCallback? onReceiveProgress,
+  }) async {
+    final _path = r'/v2/connect/append/start';
+    final _options = Options(
+      method: r'POST',
+      headers: <String, dynamic>{
+        ...?headers,
+      },
+      extra: <String, dynamic>{
+        'secure': <Map<String, String>>[
+          {
+            'type': 'http',
+            'scheme': 'bearer',
+            'name': 'bearerAuth',
+          },
+          {
+            'type': 'apiKey',
+            'name': 'projectID',
+            'keyName': 'X-Corbado-ProjectID',
+            'where': 'header',
+          },
+        ],
+        ...?extra,
+      },
+      contentType: 'application/json',
+      validateStatus: validateStatus,
+    );
+
+    dynamic _bodyData;
+
+    try {
+      const _type = FullType(ConnectAppendStartReq);
+      _bodyData =
+          _serializers.serialize(connectAppendStartReq, specifiedType: _type);
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _options.compose(
+          _dio.options,
+          _path,
+        ),
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    final _response = await _dio.request<Object>(
+      _path,
+      data: _bodyData,
+      options: _options,
+      cancelToken: cancelToken,
+      onSendProgress: onSendProgress,
+      onReceiveProgress: onReceiveProgress,
+    );
+
+    ConnectAppendStartRsp? _responseData;
+
+    try {
+      final rawResponse = _response.data;
+      _responseData = rawResponse == null
+          ? null
+          : _serializers.deserialize(
+              rawResponse,
+              specifiedType: const FullType(ConnectAppendStartRsp),
+            ) as ConnectAppendStartRsp;
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _response.requestOptions,
+        response: _response,
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    return Response<ConnectAppendStartRsp>(
+      data: _responseData,
+      headers: _response.headers,
+      isRedirect: _response.isRedirect,
+      requestOptions: _response.requestOptions,
+      redirects: _response.redirects,
+      statusCode: _response.statusCode,
+      statusMessage: _response.statusMessage,
+      extra: _response.extra,
+    );
+  }
+
+  /// connectEventCreate
+  /// Creates a new user generated connect event.
+  ///
+  /// Parameters:
+  /// * [connectEventCreateReq]
+  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
+  /// * [headers] - Can be used to add additional headers to the request
+  /// * [extras] - Can be used to add flags to the request
+  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
+  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
+  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
+  ///
+  /// Returns a [Future]
+  /// Throws [DioException] if API call or serialization fails
+  Future<Response<void>> connectEventCreate({
+    required ConnectEventCreateReq connectEventCreateReq,
+    CancelToken? cancelToken,
+    Map<String, dynamic>? headers,
+    Map<String, dynamic>? extra,
+    ValidateStatus? validateStatus,
+    ProgressCallback? onSendProgress,
+    ProgressCallback? onReceiveProgress,
+  }) async {
+    final _path = r'/v2/connect/events';
+    final _options = Options(
+      method: r'POST',
+      headers: <String, dynamic>{
+        ...?headers,
+      },
+      extra: <String, dynamic>{
+        'secure': <Map<String, String>>[
+          {
+            'type': 'http',
+            'scheme': 'bearer',
+            'name': 'bearerAuth',
+          },
+          {
+            'type': 'apiKey',
+            'name': 'projectID',
+            'keyName': 'X-Corbado-ProjectID',
+            'where': 'header',
+          },
+        ],
+        ...?extra,
+      },
+      contentType: 'application/json',
+      validateStatus: validateStatus,
+    );
+
+    dynamic _bodyData;
+
+    try {
+      const _type = FullType(ConnectEventCreateReq);
+      _bodyData =
+          _serializers.serialize(connectEventCreateReq, specifiedType: _type);
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _options.compose(
+          _dio.options,
+          _path,
+        ),
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    final _response = await _dio.request<Object>(
+      _path,
+      data: _bodyData,
+      options: _options,
+      cancelToken: cancelToken,
+      onSendProgress: onSendProgress,
+      onReceiveProgress: onReceiveProgress,
+    );
+
+    return _response;
+  }
+
+  /// connectLoginFinish
+  /// Finishes an initialized connect login process.
+  ///
+  /// Parameters:
+  /// * [connectLoginFinishReq]
+  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
+  /// * [headers] - Can be used to add additional headers to the request
+  /// * [extras] - Can be used to add flags to the request
+  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
+  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
+  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
+  ///
+  /// Returns a [Future] containing a [Response] with a [ConnectLoginFinishRsp] as data
+  /// Throws [DioException] if API call or serialization fails
+  Future<Response<ConnectLoginFinishRsp>> connectLoginFinish({
+    required ConnectLoginFinishReq connectLoginFinishReq,
+    CancelToken? cancelToken,
+    Map<String, dynamic>? headers,
+    Map<String, dynamic>? extra,
+    ValidateStatus? validateStatus,
+    ProgressCallback? onSendProgress,
+    ProgressCallback? onReceiveProgress,
+  }) async {
+    final _path = r'/v2/connect/login/finish';
+    final _options = Options(
+      method: r'POST',
+      headers: <String, dynamic>{
+        ...?headers,
+      },
+      extra: <String, dynamic>{
+        'secure': <Map<String, String>>[
+          {
+            'type': 'http',
+            'scheme': 'bearer',
+            'name': 'bearerAuth',
+          },
+          {
+            'type': 'apiKey',
+            'name': 'projectID',
+            'keyName': 'X-Corbado-ProjectID',
+            'where': 'header',
+          },
+        ],
+        ...?extra,
+      },
+      contentType: 'application/json',
+      validateStatus: validateStatus,
+    );
+
+    dynamic _bodyData;
+
+    try {
+      const _type = FullType(ConnectLoginFinishReq);
+      _bodyData =
+          _serializers.serialize(connectLoginFinishReq, specifiedType: _type);
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _options.compose(
+          _dio.options,
+          _path,
+        ),
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    final _response = await _dio.request<Object>(
+      _path,
+      data: _bodyData,
+      options: _options,
+      cancelToken: cancelToken,
+      onSendProgress: onSendProgress,
+      onReceiveProgress: onReceiveProgress,
+    );
+
+    ConnectLoginFinishRsp? _responseData;
+
+    try {
+      final rawResponse = _response.data;
+      _responseData = rawResponse == null
+          ? null
+          : _serializers.deserialize(
+              rawResponse,
+              specifiedType: const FullType(ConnectLoginFinishRsp),
+            ) as ConnectLoginFinishRsp;
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _response.requestOptions,
+        response: _response,
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    return Response<ConnectLoginFinishRsp>(
+      data: _responseData,
+      headers: _response.headers,
+      isRedirect: _response.isRedirect,
+      requestOptions: _response.requestOptions,
+      redirects: _response.redirects,
+      statusCode: _response.statusCode,
+      statusMessage: _response.statusMessage,
+      extra: _response.extra,
+    );
+  }
+
+  /// connectLoginInit
+  /// Initializes a connect process for login.
+  ///
+  /// Parameters:
+  /// * [connectLoginInitReq]
+  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
+  /// * [headers] - Can be used to add additional headers to the request
+  /// * [extras] - Can be used to add flags to the request
+  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
+  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
+  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
+  ///
+  /// Returns a [Future] containing a [Response] with a [ConnectLoginInitRsp] as data
+  /// Throws [DioException] if API call or serialization fails
+  Future<Response<ConnectLoginInitRsp>> connectLoginInit({
+    required ConnectLoginInitReq connectLoginInitReq,
+    CancelToken? cancelToken,
+    Map<String, dynamic>? headers,
+    Map<String, dynamic>? extra,
+    ValidateStatus? validateStatus,
+    ProgressCallback? onSendProgress,
+    ProgressCallback? onReceiveProgress,
+  }) async {
+    final _path = r'/v2/connect/login/init';
+    final _options = Options(
+      method: r'POST',
+      headers: <String, dynamic>{
+        ...?headers,
+      },
+      extra: <String, dynamic>{
+        'secure': <Map<String, String>>[
+          {
+            'type': 'http',
+            'scheme': 'bearer',
+            'name': 'bearerAuth',
+          },
+          {
+            'type': 'apiKey',
+            'name': 'projectID',
+            'keyName': 'X-Corbado-ProjectID',
+            'where': 'header',
+          },
+        ],
+        ...?extra,
+      },
+      contentType: 'application/json',
+      validateStatus: validateStatus,
+    );
+
+    dynamic _bodyData;
+
+    try {
+      const _type = FullType(ConnectLoginInitReq);
+      _bodyData =
+          _serializers.serialize(connectLoginInitReq, specifiedType: _type);
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _options.compose(
+          _dio.options,
+          _path,
+        ),
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    final _response = await _dio.request<Object>(
+      _path,
+      data: _bodyData,
+      options: _options,
+      cancelToken: cancelToken,
+      onSendProgress: onSendProgress,
+      onReceiveProgress: onReceiveProgress,
+    );
+
+    ConnectLoginInitRsp? _responseData;
+
+    try {
+      final rawResponse = _response.data;
+      _responseData = rawResponse == null
+          ? null
+          : _serializers.deserialize(
+              rawResponse,
+              specifiedType: const FullType(ConnectLoginInitRsp),
+            ) as ConnectLoginInitRsp;
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _response.requestOptions,
+        response: _response,
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    return Response<ConnectLoginInitRsp>(
+      data: _responseData,
+      headers: _response.headers,
+      isRedirect: _response.isRedirect,
+      requestOptions: _response.requestOptions,
+      redirects: _response.redirects,
+      statusCode: _response.statusCode,
+      statusMessage: _response.statusMessage,
+      extra: _response.extra,
+    );
+  }
+
+  /// connectLoginStart
+  /// Starts an initialized connect login process.
+  ///
+  /// Parameters:
+  /// * [connectLoginStartReq]
+  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
+  /// * [headers] - Can be used to add additional headers to the request
+  /// * [extras] - Can be used to add flags to the request
+  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
+  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
+  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
+  ///
+  /// Returns a [Future] containing a [Response] with a [ConnectLoginStartRsp] as data
+  /// Throws [DioException] if API call or serialization fails
+  Future<Response<ConnectLoginStartRsp>> connectLoginStart({
+    required ConnectLoginStartReq connectLoginStartReq,
+    CancelToken? cancelToken,
+    Map<String, dynamic>? headers,
+    Map<String, dynamic>? extra,
+    ValidateStatus? validateStatus,
+    ProgressCallback? onSendProgress,
+    ProgressCallback? onReceiveProgress,
+  }) async {
+    final _path = r'/v2/connect/login/start';
+    final _options = Options(
+      method: r'POST',
+      headers: <String, dynamic>{
+        ...?headers,
+      },
+      extra: <String, dynamic>{
+        'secure': <Map<String, String>>[
+          {
+            'type': 'http',
+            'scheme': 'bearer',
+            'name': 'bearerAuth',
+          },
+          {
+            'type': 'apiKey',
+            'name': 'projectID',
+            'keyName': 'X-Corbado-ProjectID',
+            'where': 'header',
+          },
+        ],
+        ...?extra,
+      },
+      contentType: 'application/json',
+      validateStatus: validateStatus,
+    );
+
+    dynamic _bodyData;
+
+    try {
+      const _type = FullType(ConnectLoginStartReq);
+      _bodyData =
+          _serializers.serialize(connectLoginStartReq, specifiedType: _type);
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _options.compose(
+          _dio.options,
+          _path,
+        ),
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    final _response = await _dio.request<Object>(
+      _path,
+      data: _bodyData,
+      options: _options,
+      cancelToken: cancelToken,
+      onSendProgress: onSendProgress,
+      onReceiveProgress: onReceiveProgress,
+    );
+
+    ConnectLoginStartRsp? _responseData;
+
+    try {
+      final rawResponse = _response.data;
+      _responseData = rawResponse == null
+          ? null
+          : _serializers.deserialize(
+              rawResponse,
+              specifiedType: const FullType(ConnectLoginStartRsp),
+            ) as ConnectLoginStartRsp;
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _response.requestOptions,
+        response: _response,
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    return Response<ConnectLoginStartRsp>(
+      data: _responseData,
+      headers: _response.headers,
+      isRedirect: _response.isRedirect,
+      requestOptions: _response.requestOptions,
+      redirects: _response.redirects,
+      statusCode: _response.statusCode,
+      statusMessage: _response.statusMessage,
+      extra: _response.extra,
+    );
+  }
+
+  /// connectManageDelete
+  /// Deletes a passkey for a user identified by a connect token
+  ///
+  /// Parameters:
+  /// * [connectManageDeleteReq]
+  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
+  /// * [headers] - Can be used to add additional headers to the request
+  /// * [extras] - Can be used to add flags to the request
+  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
+  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
+  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
+  ///
+  /// Returns a [Future] containing a [Response] with a [ConnectManageDeleteRsp] as data
+  /// Throws [DioException] if API call or serialization fails
+  Future<Response<ConnectManageDeleteRsp>> connectManageDelete({
+    required ConnectManageDeleteReq connectManageDeleteReq,
+    CancelToken? cancelToken,
+    Map<String, dynamic>? headers,
+    Map<String, dynamic>? extra,
+    ValidateStatus? validateStatus,
+    ProgressCallback? onSendProgress,
+    ProgressCallback? onReceiveProgress,
+  }) async {
+    final _path = r'/v2/connect/manage/delete';
+    final _options = Options(
+      method: r'POST',
+      headers: <String, dynamic>{
+        ...?headers,
+      },
+      extra: <String, dynamic>{
+        'secure': <Map<String, String>>[
+          {
+            'type': 'http',
+            'scheme': 'bearer',
+            'name': 'bearerAuth',
+          },
+          {
+            'type': 'apiKey',
+            'name': 'projectID',
+            'keyName': 'X-Corbado-ProjectID',
+            'where': 'header',
+          },
+        ],
+        ...?extra,
+      },
+      contentType: 'application/json',
+      validateStatus: validateStatus,
+    );
+
+    dynamic _bodyData;
+
+    try {
+      const _type = FullType(ConnectManageDeleteReq);
+      _bodyData =
+          _serializers.serialize(connectManageDeleteReq, specifiedType: _type);
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _options.compose(
+          _dio.options,
+          _path,
+        ),
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    final _response = await _dio.request<Object>(
+      _path,
+      data: _bodyData,
+      options: _options,
+      cancelToken: cancelToken,
+      onSendProgress: onSendProgress,
+      onReceiveProgress: onReceiveProgress,
+    );
+
+    ConnectManageDeleteRsp? _responseData;
+
+    try {
+      final rawResponse = _response.data;
+      _responseData = rawResponse == null
+          ? null
+          : _serializers.deserialize(
+              rawResponse,
+              specifiedType: const FullType(ConnectManageDeleteRsp),
+            ) as ConnectManageDeleteRsp;
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _response.requestOptions,
+        response: _response,
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    return Response<ConnectManageDeleteRsp>(
+      data: _responseData,
+      headers: _response.headers,
+      isRedirect: _response.isRedirect,
+      requestOptions: _response.requestOptions,
+      redirects: _response.redirects,
+      statusCode: _response.statusCode,
+      statusMessage: _response.statusMessage,
+      extra: _response.extra,
+    );
+  }
+
+  /// connectManageInit
+  /// Initializes a connect process for passkey management.
+  ///
+  /// Parameters:
+  /// * [connectManageInitReq]
+  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
+  /// * [headers] - Can be used to add additional headers to the request
+  /// * [extras] - Can be used to add flags to the request
+  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
+  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
+  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
+  ///
+  /// Returns a [Future] containing a [Response] with a [ConnectManageInitRsp] as data
+  /// Throws [DioException] if API call or serialization fails
+  Future<Response<ConnectManageInitRsp>> connectManageInit({
+    required ConnectManageInitReq connectManageInitReq,
+    CancelToken? cancelToken,
+    Map<String, dynamic>? headers,
+    Map<String, dynamic>? extra,
+    ValidateStatus? validateStatus,
+    ProgressCallback? onSendProgress,
+    ProgressCallback? onReceiveProgress,
+  }) async {
+    final _path = r'/v2/connect/manage/init';
+    final _options = Options(
+      method: r'POST',
+      headers: <String, dynamic>{
+        ...?headers,
+      },
+      extra: <String, dynamic>{
+        'secure': <Map<String, String>>[
+          {
+            'type': 'http',
+            'scheme': 'bearer',
+            'name': 'bearerAuth',
+          },
+          {
+            'type': 'apiKey',
+            'name': 'projectID',
+            'keyName': 'X-Corbado-ProjectID',
+            'where': 'header',
+          },
+        ],
+        ...?extra,
+      },
+      contentType: 'application/json',
+      validateStatus: validateStatus,
+    );
+
+    dynamic _bodyData;
+
+    try {
+      const _type = FullType(ConnectManageInitReq);
+      _bodyData =
+          _serializers.serialize(connectManageInitReq, specifiedType: _type);
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _options.compose(
+          _dio.options,
+          _path,
+        ),
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    final _response = await _dio.request<Object>(
+      _path,
+      data: _bodyData,
+      options: _options,
+      cancelToken: cancelToken,
+      onSendProgress: onSendProgress,
+      onReceiveProgress: onReceiveProgress,
+    );
+
+    ConnectManageInitRsp? _responseData;
+
+    try {
+      final rawResponse = _response.data;
+      _responseData = rawResponse == null
+          ? null
+          : _serializers.deserialize(
+              rawResponse,
+              specifiedType: const FullType(ConnectManageInitRsp),
+            ) as ConnectManageInitRsp;
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _response.requestOptions,
+        response: _response,
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    return Response<ConnectManageInitRsp>(
+      data: _responseData,
+      headers: _response.headers,
+      isRedirect: _response.isRedirect,
+      requestOptions: _response.requestOptions,
+      redirects: _response.redirects,
+      statusCode: _response.statusCode,
+      statusMessage: _response.statusMessage,
+      extra: _response.extra,
+    );
+  }
+
+  /// connectManageList
+  /// Lists all passkeys for a user identifier by a connect token.
+  ///
+  /// Parameters:
+  /// * [connectManageListReq]
+  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
+  /// * [headers] - Can be used to add additional headers to the request
+  /// * [extras] - Can be used to add flags to the request
+  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
+  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
+  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
+  ///
+  /// Returns a [Future] containing a [Response] with a [ConnectManageListRsp] as data
+  /// Throws [DioException] if API call or serialization fails
+  Future<Response<ConnectManageListRsp>> connectManageList({
+    required ConnectManageListReq connectManageListReq,
+    CancelToken? cancelToken,
+    Map<String, dynamic>? headers,
+    Map<String, dynamic>? extra,
+    ValidateStatus? validateStatus,
+    ProgressCallback? onSendProgress,
+    ProgressCallback? onReceiveProgress,
+  }) async {
+    final _path = r'/v2/connect/manage/list';
+    final _options = Options(
+      method: r'POST',
+      headers: <String, dynamic>{
+        ...?headers,
+      },
+      extra: <String, dynamic>{
+        'secure': <Map<String, String>>[
+          {
+            'type': 'http',
+            'scheme': 'bearer',
+            'name': 'bearerAuth',
+          },
+          {
+            'type': 'apiKey',
+            'name': 'projectID',
+            'keyName': 'X-Corbado-ProjectID',
+            'where': 'header',
+          },
+        ],
+        ...?extra,
+      },
+      contentType: 'application/json',
+      validateStatus: validateStatus,
+    );
+
+    dynamic _bodyData;
+
+    try {
+      const _type = FullType(ConnectManageListReq);
+      _bodyData =
+          _serializers.serialize(connectManageListReq, specifiedType: _type);
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _options.compose(
+          _dio.options,
+          _path,
+        ),
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    final _response = await _dio.request<Object>(
+      _path,
+      data: _bodyData,
+      options: _options,
+      cancelToken: cancelToken,
+      onSendProgress: onSendProgress,
+      onReceiveProgress: onReceiveProgress,
+    );
+
+    ConnectManageListRsp? _responseData;
+
+    try {
+      final rawResponse = _response.data;
+      _responseData = rawResponse == null
+          ? null
+          : _serializers.deserialize(
+              rawResponse,
+              specifiedType: const FullType(ConnectManageListRsp),
+            ) as ConnectManageListRsp;
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _response.requestOptions,
+        response: _response,
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    return Response<ConnectManageListRsp>(
+      data: _responseData,
+      headers: _response.headers,
+      isRedirect: _response.isRedirect,
+      requestOptions: _response.requestOptions,
+      redirects: _response.redirects,
+      statusCode: _response.statusCode,
+      statusMessage: _response.statusMessage,
+      extra: _response.extra,
+    );
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/api/users_api.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/api/users_api.dart
new file mode 100644
index 0000000..90a47c3
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/api/users_api.dart
@@ -0,0 +1,1358 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+import 'dart:async';
+
+import 'package:built_value/serializer.dart';
+import 'package:dio/dio.dart';
+
+import 'package:corbado_frontend_api_client/src/api_util.dart';
+import 'package:corbado_frontend_api_client/src/model/generic_rsp.dart';
+import 'package:corbado_frontend_api_client/src/model/me_identifier_create_req.dart';
+import 'package:corbado_frontend_api_client/src/model/me_identifier_delete_req.dart';
+import 'package:corbado_frontend_api_client/src/model/me_identifier_update_req.dart';
+import 'package:corbado_frontend_api_client/src/model/me_identifier_verify_finish_req.dart';
+import 'package:corbado_frontend_api_client/src/model/me_identifier_verify_start_req.dart';
+import 'package:corbado_frontend_api_client/src/model/me_passkey_delete_rsp.dart';
+import 'package:corbado_frontend_api_client/src/model/me_passkey_rsp.dart';
+import 'package:corbado_frontend_api_client/src/model/me_passkeys_append_finish_req.dart';
+import 'package:corbado_frontend_api_client/src/model/me_passkeys_append_start_req.dart';
+import 'package:corbado_frontend_api_client/src/model/me_passkeys_append_start_rsp.dart';
+import 'package:corbado_frontend_api_client/src/model/me_refresh_rsp.dart';
+import 'package:corbado_frontend_api_client/src/model/me_rsp.dart';
+import 'package:corbado_frontend_api_client/src/model/me_update_req.dart';
+
+class UsersApi {
+  final Dio _dio;
+
+  final Serializers _serializers;
+
+  const UsersApi(this._dio, this._serializers);
+
+  /// currentUserDelete
+  /// Deletes current user
+  ///
+  /// Parameters:
+  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
+  /// * [headers] - Can be used to add additional headers to the request
+  /// * [extras] - Can be used to add flags to the request
+  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
+  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
+  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
+  ///
+  /// Returns a [Future] containing a [Response] with a [GenericRsp] as data
+  /// Throws [DioException] if API call or serialization fails
+  Future<Response<GenericRsp>> currentUserDelete({
+    CancelToken? cancelToken,
+    Map<String, dynamic>? headers,
+    Map<String, dynamic>? extra,
+    ValidateStatus? validateStatus,
+    ProgressCallback? onSendProgress,
+    ProgressCallback? onReceiveProgress,
+  }) async {
+    final _path = r'/v2/me';
+    final _options = Options(
+      method: r'DELETE',
+      headers: <String, dynamic>{
+        ...?headers,
+      },
+      extra: <String, dynamic>{
+        'secure': <Map<String, String>>[
+          {
+            'type': 'http',
+            'scheme': 'bearer',
+            'name': 'bearerAuth',
+          },
+          {
+            'type': 'apiKey',
+            'name': 'projectID',
+            'keyName': 'X-Corbado-ProjectID',
+            'where': 'header',
+          },
+        ],
+        ...?extra,
+      },
+      validateStatus: validateStatus,
+    );
+
+    final _response = await _dio.request<Object>(
+      _path,
+      options: _options,
+      cancelToken: cancelToken,
+      onSendProgress: onSendProgress,
+      onReceiveProgress: onReceiveProgress,
+    );
+
+    GenericRsp? _responseData;
+
+    try {
+      final rawResponse = _response.data;
+      _responseData = rawResponse == null
+          ? null
+          : _serializers.deserialize(
+              rawResponse,
+              specifiedType: const FullType(GenericRsp),
+            ) as GenericRsp;
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _response.requestOptions,
+        response: _response,
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    return Response<GenericRsp>(
+      data: _responseData,
+      headers: _response.headers,
+      isRedirect: _response.isRedirect,
+      requestOptions: _response.requestOptions,
+      redirects: _response.redirects,
+      statusCode: _response.statusCode,
+      statusMessage: _response.statusMessage,
+      extra: _response.extra,
+    );
+  }
+
+  /// currentUserGet
+  /// Gets current user
+  ///
+  /// Parameters:
+  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
+  /// * [headers] - Can be used to add additional headers to the request
+  /// * [extras] - Can be used to add flags to the request
+  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
+  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
+  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
+  ///
+  /// Returns a [Future] containing a [Response] with a [MeRsp] as data
+  /// Throws [DioException] if API call or serialization fails
+  Future<Response<MeRsp>> currentUserGet({
+    CancelToken? cancelToken,
+    Map<String, dynamic>? headers,
+    Map<String, dynamic>? extra,
+    ValidateStatus? validateStatus,
+    ProgressCallback? onSendProgress,
+    ProgressCallback? onReceiveProgress,
+  }) async {
+    final _path = r'/v2/me';
+    final _options = Options(
+      method: r'GET',
+      headers: <String, dynamic>{
+        ...?headers,
+      },
+      extra: <String, dynamic>{
+        'secure': <Map<String, String>>[
+          {
+            'type': 'http',
+            'scheme': 'bearer',
+            'name': 'bearerAuth',
+          },
+          {
+            'type': 'apiKey',
+            'name': 'projectID',
+            'keyName': 'X-Corbado-ProjectID',
+            'where': 'header',
+          },
+        ],
+        ...?extra,
+      },
+      validateStatus: validateStatus,
+    );
+
+    final _response = await _dio.request<Object>(
+      _path,
+      options: _options,
+      cancelToken: cancelToken,
+      onSendProgress: onSendProgress,
+      onReceiveProgress: onReceiveProgress,
+    );
+
+    MeRsp? _responseData;
+
+    try {
+      final rawResponse = _response.data;
+      _responseData = rawResponse == null
+          ? null
+          : _serializers.deserialize(
+              rawResponse,
+              specifiedType: const FullType(MeRsp),
+            ) as MeRsp;
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _response.requestOptions,
+        response: _response,
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    return Response<MeRsp>(
+      data: _responseData,
+      headers: _response.headers,
+      isRedirect: _response.isRedirect,
+      requestOptions: _response.requestOptions,
+      redirects: _response.redirects,
+      statusCode: _response.statusCode,
+      statusMessage: _response.statusMessage,
+      extra: _response.extra,
+    );
+  }
+
+  /// currentUserIdentifierCreate
+  /// Creates an identifier
+  ///
+  /// Parameters:
+  /// * [meIdentifierCreateReq]
+  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
+  /// * [headers] - Can be used to add additional headers to the request
+  /// * [extras] - Can be used to add flags to the request
+  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
+  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
+  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
+  ///
+  /// Returns a [Future] containing a [Response] with a [GenericRsp] as data
+  /// Throws [DioException] if API call or serialization fails
+  Future<Response<GenericRsp>> currentUserIdentifierCreate({
+    required MeIdentifierCreateReq meIdentifierCreateReq,
+    CancelToken? cancelToken,
+    Map<String, dynamic>? headers,
+    Map<String, dynamic>? extra,
+    ValidateStatus? validateStatus,
+    ProgressCallback? onSendProgress,
+    ProgressCallback? onReceiveProgress,
+  }) async {
+    final _path = r'/v2/me/identifier';
+    final _options = Options(
+      method: r'POST',
+      headers: <String, dynamic>{
+        ...?headers,
+      },
+      extra: <String, dynamic>{
+        'secure': <Map<String, String>>[
+          {
+            'type': 'http',
+            'scheme': 'bearer',
+            'name': 'bearerAuth',
+          },
+          {
+            'type': 'apiKey',
+            'name': 'projectID',
+            'keyName': 'X-Corbado-ProjectID',
+            'where': 'header',
+          },
+        ],
+        ...?extra,
+      },
+      contentType: 'application/json',
+      validateStatus: validateStatus,
+    );
+
+    dynamic _bodyData;
+
+    try {
+      const _type = FullType(MeIdentifierCreateReq);
+      _bodyData =
+          _serializers.serialize(meIdentifierCreateReq, specifiedType: _type);
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _options.compose(
+          _dio.options,
+          _path,
+        ),
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    final _response = await _dio.request<Object>(
+      _path,
+      data: _bodyData,
+      options: _options,
+      cancelToken: cancelToken,
+      onSendProgress: onSendProgress,
+      onReceiveProgress: onReceiveProgress,
+    );
+
+    GenericRsp? _responseData;
+
+    try {
+      final rawResponse = _response.data;
+      _responseData = rawResponse == null
+          ? null
+          : _serializers.deserialize(
+              rawResponse,
+              specifiedType: const FullType(GenericRsp),
+            ) as GenericRsp;
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _response.requestOptions,
+        response: _response,
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    return Response<GenericRsp>(
+      data: _responseData,
+      headers: _response.headers,
+      isRedirect: _response.isRedirect,
+      requestOptions: _response.requestOptions,
+      redirects: _response.redirects,
+      statusCode: _response.statusCode,
+      statusMessage: _response.statusMessage,
+      extra: _response.extra,
+    );
+  }
+
+  /// currentUserIdentifierDelete
+  /// Deletes an identifier
+  ///
+  /// Parameters:
+  /// * [meIdentifierDeleteReq]
+  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
+  /// * [headers] - Can be used to add additional headers to the request
+  /// * [extras] - Can be used to add flags to the request
+  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
+  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
+  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
+  ///
+  /// Returns a [Future] containing a [Response] with a [GenericRsp] as data
+  /// Throws [DioException] if API call or serialization fails
+  Future<Response<GenericRsp>> currentUserIdentifierDelete({
+    required MeIdentifierDeleteReq meIdentifierDeleteReq,
+    CancelToken? cancelToken,
+    Map<String, dynamic>? headers,
+    Map<String, dynamic>? extra,
+    ValidateStatus? validateStatus,
+    ProgressCallback? onSendProgress,
+    ProgressCallback? onReceiveProgress,
+  }) async {
+    final _path = r'/v2/me/identifier';
+    final _options = Options(
+      method: r'DELETE',
+      headers: <String, dynamic>{
+        ...?headers,
+      },
+      extra: <String, dynamic>{
+        'secure': <Map<String, String>>[
+          {
+            'type': 'http',
+            'scheme': 'bearer',
+            'name': 'bearerAuth',
+          },
+          {
+            'type': 'apiKey',
+            'name': 'projectID',
+            'keyName': 'X-Corbado-ProjectID',
+            'where': 'header',
+          },
+        ],
+        ...?extra,
+      },
+      contentType: 'application/json',
+      validateStatus: validateStatus,
+    );
+
+    dynamic _bodyData;
+
+    try {
+      const _type = FullType(MeIdentifierDeleteReq);
+      _bodyData =
+          _serializers.serialize(meIdentifierDeleteReq, specifiedType: _type);
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _options.compose(
+          _dio.options,
+          _path,
+        ),
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    final _response = await _dio.request<Object>(
+      _path,
+      data: _bodyData,
+      options: _options,
+      cancelToken: cancelToken,
+      onSendProgress: onSendProgress,
+      onReceiveProgress: onReceiveProgress,
+    );
+
+    GenericRsp? _responseData;
+
+    try {
+      final rawResponse = _response.data;
+      _responseData = rawResponse == null
+          ? null
+          : _serializers.deserialize(
+              rawResponse,
+              specifiedType: const FullType(GenericRsp),
+            ) as GenericRsp;
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _response.requestOptions,
+        response: _response,
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    return Response<GenericRsp>(
+      data: _responseData,
+      headers: _response.headers,
+      isRedirect: _response.isRedirect,
+      requestOptions: _response.requestOptions,
+      redirects: _response.redirects,
+      statusCode: _response.statusCode,
+      statusMessage: _response.statusMessage,
+      extra: _response.extra,
+    );
+  }
+
+  /// currentUserIdentifierUpdate
+  /// Modifies an identifier (only permitted for username; identifierID will change)
+  ///
+  /// Parameters:
+  /// * [meIdentifierUpdateReq]
+  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
+  /// * [headers] - Can be used to add additional headers to the request
+  /// * [extras] - Can be used to add flags to the request
+  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
+  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
+  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
+  ///
+  /// Returns a [Future] containing a [Response] with a [GenericRsp] as data
+  /// Throws [DioException] if API call or serialization fails
+  Future<Response<GenericRsp>> currentUserIdentifierUpdate({
+    required MeIdentifierUpdateReq meIdentifierUpdateReq,
+    CancelToken? cancelToken,
+    Map<String, dynamic>? headers,
+    Map<String, dynamic>? extra,
+    ValidateStatus? validateStatus,
+    ProgressCallback? onSendProgress,
+    ProgressCallback? onReceiveProgress,
+  }) async {
+    final _path = r'/v2/me/identifier';
+    final _options = Options(
+      method: r'PATCH',
+      headers: <String, dynamic>{
+        ...?headers,
+      },
+      extra: <String, dynamic>{
+        'secure': <Map<String, String>>[
+          {
+            'type': 'http',
+            'scheme': 'bearer',
+            'name': 'bearerAuth',
+          },
+          {
+            'type': 'apiKey',
+            'name': 'projectID',
+            'keyName': 'X-Corbado-ProjectID',
+            'where': 'header',
+          },
+        ],
+        ...?extra,
+      },
+      contentType: 'application/json',
+      validateStatus: validateStatus,
+    );
+
+    dynamic _bodyData;
+
+    try {
+      const _type = FullType(MeIdentifierUpdateReq);
+      _bodyData =
+          _serializers.serialize(meIdentifierUpdateReq, specifiedType: _type);
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _options.compose(
+          _dio.options,
+          _path,
+        ),
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    final _response = await _dio.request<Object>(
+      _path,
+      data: _bodyData,
+      options: _options,
+      cancelToken: cancelToken,
+      onSendProgress: onSendProgress,
+      onReceiveProgress: onReceiveProgress,
+    );
+
+    GenericRsp? _responseData;
+
+    try {
+      final rawResponse = _response.data;
+      _responseData = rawResponse == null
+          ? null
+          : _serializers.deserialize(
+              rawResponse,
+              specifiedType: const FullType(GenericRsp),
+            ) as GenericRsp;
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _response.requestOptions,
+        response: _response,
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    return Response<GenericRsp>(
+      data: _responseData,
+      headers: _response.headers,
+      isRedirect: _response.isRedirect,
+      requestOptions: _response.requestOptions,
+      redirects: _response.redirects,
+      statusCode: _response.statusCode,
+      statusMessage: _response.statusMessage,
+      extra: _response.extra,
+    );
+  }
+
+  /// currentUserIdentifierVerifyFinish
+  /// Verifies challenge
+  ///
+  /// Parameters:
+  /// * [meIdentifierVerifyFinishReq]
+  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
+  /// * [headers] - Can be used to add additional headers to the request
+  /// * [extras] - Can be used to add flags to the request
+  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
+  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
+  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
+  ///
+  /// Returns a [Future] containing a [Response] with a [GenericRsp] as data
+  /// Throws [DioException] if API call or serialization fails
+  Future<Response<GenericRsp>> currentUserIdentifierVerifyFinish({
+    required MeIdentifierVerifyFinishReq meIdentifierVerifyFinishReq,
+    CancelToken? cancelToken,
+    Map<String, dynamic>? headers,
+    Map<String, dynamic>? extra,
+    ValidateStatus? validateStatus,
+    ProgressCallback? onSendProgress,
+    ProgressCallback? onReceiveProgress,
+  }) async {
+    final _path = r'/v2/me/identifier/verify/finish';
+    final _options = Options(
+      method: r'POST',
+      headers: <String, dynamic>{
+        ...?headers,
+      },
+      extra: <String, dynamic>{
+        'secure': <Map<String, String>>[
+          {
+            'type': 'http',
+            'scheme': 'bearer',
+            'name': 'bearerAuth',
+          },
+          {
+            'type': 'apiKey',
+            'name': 'projectID',
+            'keyName': 'X-Corbado-ProjectID',
+            'where': 'header',
+          },
+        ],
+        ...?extra,
+      },
+      contentType: 'application/json',
+      validateStatus: validateStatus,
+    );
+
+    dynamic _bodyData;
+
+    try {
+      const _type = FullType(MeIdentifierVerifyFinishReq);
+      _bodyData = _serializers.serialize(meIdentifierVerifyFinishReq,
+          specifiedType: _type);
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _options.compose(
+          _dio.options,
+          _path,
+        ),
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    final _response = await _dio.request<Object>(
+      _path,
+      data: _bodyData,
+      options: _options,
+      cancelToken: cancelToken,
+      onSendProgress: onSendProgress,
+      onReceiveProgress: onReceiveProgress,
+    );
+
+    GenericRsp? _responseData;
+
+    try {
+      final rawResponse = _response.data;
+      _responseData = rawResponse == null
+          ? null
+          : _serializers.deserialize(
+              rawResponse,
+              specifiedType: const FullType(GenericRsp),
+            ) as GenericRsp;
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _response.requestOptions,
+        response: _response,
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    return Response<GenericRsp>(
+      data: _responseData,
+      headers: _response.headers,
+      isRedirect: _response.isRedirect,
+      requestOptions: _response.requestOptions,
+      redirects: _response.redirects,
+      statusCode: _response.statusCode,
+      statusMessage: _response.statusMessage,
+      extra: _response.extra,
+    );
+  }
+
+  /// currentUserIdentifierVerifyStart
+  /// Creates challenge (only email otp and phone otp supported for now)
+  ///
+  /// Parameters:
+  /// * [meIdentifierVerifyStartReq]
+  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
+  /// * [headers] - Can be used to add additional headers to the request
+  /// * [extras] - Can be used to add flags to the request
+  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
+  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
+  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
+  ///
+  /// Returns a [Future] containing a [Response] with a [GenericRsp] as data
+  /// Throws [DioException] if API call or serialization fails
+  Future<Response<GenericRsp>> currentUserIdentifierVerifyStart({
+    required MeIdentifierVerifyStartReq meIdentifierVerifyStartReq,
+    CancelToken? cancelToken,
+    Map<String, dynamic>? headers,
+    Map<String, dynamic>? extra,
+    ValidateStatus? validateStatus,
+    ProgressCallback? onSendProgress,
+    ProgressCallback? onReceiveProgress,
+  }) async {
+    final _path = r'/v2/me/identifier/verify/start';
+    final _options = Options(
+      method: r'POST',
+      headers: <String, dynamic>{
+        ...?headers,
+      },
+      extra: <String, dynamic>{
+        'secure': <Map<String, String>>[
+          {
+            'type': 'http',
+            'scheme': 'bearer',
+            'name': 'bearerAuth',
+          },
+          {
+            'type': 'apiKey',
+            'name': 'projectID',
+            'keyName': 'X-Corbado-ProjectID',
+            'where': 'header',
+          },
+        ],
+        ...?extra,
+      },
+      contentType: 'application/json',
+      validateStatus: validateStatus,
+    );
+
+    dynamic _bodyData;
+
+    try {
+      const _type = FullType(MeIdentifierVerifyStartReq);
+      _bodyData = _serializers.serialize(meIdentifierVerifyStartReq,
+          specifiedType: _type);
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _options.compose(
+          _dio.options,
+          _path,
+        ),
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    final _response = await _dio.request<Object>(
+      _path,
+      data: _bodyData,
+      options: _options,
+      cancelToken: cancelToken,
+      onSendProgress: onSendProgress,
+      onReceiveProgress: onReceiveProgress,
+    );
+
+    GenericRsp? _responseData;
+
+    try {
+      final rawResponse = _response.data;
+      _responseData = rawResponse == null
+          ? null
+          : _serializers.deserialize(
+              rawResponse,
+              specifiedType: const FullType(GenericRsp),
+            ) as GenericRsp;
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _response.requestOptions,
+        response: _response,
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    return Response<GenericRsp>(
+      data: _responseData,
+      headers: _response.headers,
+      isRedirect: _response.isRedirect,
+      requestOptions: _response.requestOptions,
+      redirects: _response.redirects,
+      statusCode: _response.statusCode,
+      statusMessage: _response.statusMessage,
+      extra: _response.extra,
+    );
+  }
+
+  /// currentUserPasskeyAppendFinish
+  /// Finishes passkey append for current user
+  ///
+  /// Parameters:
+  /// * [mePasskeysAppendFinishReq]
+  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
+  /// * [headers] - Can be used to add additional headers to the request
+  /// * [extras] - Can be used to add flags to the request
+  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
+  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
+  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
+  ///
+  /// Returns a [Future]
+  /// Throws [DioException] if API call or serialization fails
+  Future<Response<void>> currentUserPasskeyAppendFinish({
+    required MePasskeysAppendFinishReq mePasskeysAppendFinishReq,
+    CancelToken? cancelToken,
+    Map<String, dynamic>? headers,
+    Map<String, dynamic>? extra,
+    ValidateStatus? validateStatus,
+    ProgressCallback? onSendProgress,
+    ProgressCallback? onReceiveProgress,
+  }) async {
+    final _path = r'/v2/me/passkeys/append/finish';
+    final _options = Options(
+      method: r'POST',
+      headers: <String, dynamic>{
+        ...?headers,
+      },
+      extra: <String, dynamic>{
+        'secure': <Map<String, String>>[
+          {
+            'type': 'http',
+            'scheme': 'bearer',
+            'name': 'bearerAuth',
+          },
+          {
+            'type': 'apiKey',
+            'name': 'projectID',
+            'keyName': 'X-Corbado-ProjectID',
+            'where': 'header',
+          },
+        ],
+        ...?extra,
+      },
+      contentType: 'application/json',
+      validateStatus: validateStatus,
+    );
+
+    dynamic _bodyData;
+
+    try {
+      const _type = FullType(MePasskeysAppendFinishReq);
+      _bodyData = _serializers.serialize(mePasskeysAppendFinishReq,
+          specifiedType: _type);
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _options.compose(
+          _dio.options,
+          _path,
+        ),
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    final _response = await _dio.request<Object>(
+      _path,
+      data: _bodyData,
+      options: _options,
+      cancelToken: cancelToken,
+      onSendProgress: onSendProgress,
+      onReceiveProgress: onReceiveProgress,
+    );
+
+    return _response;
+  }
+
+  /// currentUserPasskeyAppendStart
+  /// Starts passkey append for current user
+  ///
+  /// Parameters:
+  /// * [mePasskeysAppendStartReq]
+  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
+  /// * [headers] - Can be used to add additional headers to the request
+  /// * [extras] - Can be used to add flags to the request
+  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
+  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
+  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
+  ///
+  /// Returns a [Future] containing a [Response] with a [MePasskeysAppendStartRsp] as data
+  /// Throws [DioException] if API call or serialization fails
+  Future<Response<MePasskeysAppendStartRsp>> currentUserPasskeyAppendStart({
+    required MePasskeysAppendStartReq mePasskeysAppendStartReq,
+    CancelToken? cancelToken,
+    Map<String, dynamic>? headers,
+    Map<String, dynamic>? extra,
+    ValidateStatus? validateStatus,
+    ProgressCallback? onSendProgress,
+    ProgressCallback? onReceiveProgress,
+  }) async {
+    final _path = r'/v2/me/passkeys/append/start';
+    final _options = Options(
+      method: r'POST',
+      headers: <String, dynamic>{
+        ...?headers,
+      },
+      extra: <String, dynamic>{
+        'secure': <Map<String, String>>[
+          {
+            'type': 'http',
+            'scheme': 'bearer',
+            'name': 'bearerAuth',
+          },
+          {
+            'type': 'apiKey',
+            'name': 'projectID',
+            'keyName': 'X-Corbado-ProjectID',
+            'where': 'header',
+          },
+        ],
+        ...?extra,
+      },
+      contentType: 'application/json',
+      validateStatus: validateStatus,
+    );
+
+    dynamic _bodyData;
+
+    try {
+      const _type = FullType(MePasskeysAppendStartReq);
+      _bodyData = _serializers.serialize(mePasskeysAppendStartReq,
+          specifiedType: _type);
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _options.compose(
+          _dio.options,
+          _path,
+        ),
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    final _response = await _dio.request<Object>(
+      _path,
+      data: _bodyData,
+      options: _options,
+      cancelToken: cancelToken,
+      onSendProgress: onSendProgress,
+      onReceiveProgress: onReceiveProgress,
+    );
+
+    MePasskeysAppendStartRsp? _responseData;
+
+    try {
+      final rawResponse = _response.data;
+      _responseData = rawResponse == null
+          ? null
+          : _serializers.deserialize(
+              rawResponse,
+              specifiedType: const FullType(MePasskeysAppendStartRsp),
+            ) as MePasskeysAppendStartRsp;
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _response.requestOptions,
+        response: _response,
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    return Response<MePasskeysAppendStartRsp>(
+      data: _responseData,
+      headers: _response.headers,
+      isRedirect: _response.isRedirect,
+      requestOptions: _response.requestOptions,
+      redirects: _response.redirects,
+      statusCode: _response.statusCode,
+      statusMessage: _response.statusMessage,
+      extra: _response.extra,
+    );
+  }
+
+  /// currentUserPasskeyDelete
+  /// Delete current user&#39;s passkeys
+  ///
+  /// Parameters:
+  /// * [credentialID] - Credential ID from passkeys
+  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
+  /// * [headers] - Can be used to add additional headers to the request
+  /// * [extras] - Can be used to add flags to the request
+  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
+  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
+  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
+  ///
+  /// Returns a [Future] containing a [Response] with a [MePasskeyDeleteRsp] as data
+  /// Throws [DioException] if API call or serialization fails
+  Future<Response<MePasskeyDeleteRsp>> currentUserPasskeyDelete({
+    required String credentialID,
+    CancelToken? cancelToken,
+    Map<String, dynamic>? headers,
+    Map<String, dynamic>? extra,
+    ValidateStatus? validateStatus,
+    ProgressCallback? onSendProgress,
+    ProgressCallback? onReceiveProgress,
+  }) async {
+    final _path = r'/v2/me/passkeys/{credentialID}'.replaceAll(
+        '{' r'credentialID' '}',
+        encodeQueryParameter(_serializers, credentialID, const FullType(String))
+            .toString());
+    final _options = Options(
+      method: r'DELETE',
+      headers: <String, dynamic>{
+        ...?headers,
+      },
+      extra: <String, dynamic>{
+        'secure': <Map<String, String>>[
+          {
+            'type': 'http',
+            'scheme': 'bearer',
+            'name': 'bearerAuth',
+          },
+          {
+            'type': 'apiKey',
+            'name': 'projectID',
+            'keyName': 'X-Corbado-ProjectID',
+            'where': 'header',
+          },
+        ],
+        ...?extra,
+      },
+      validateStatus: validateStatus,
+    );
+
+    final _response = await _dio.request<Object>(
+      _path,
+      options: _options,
+      cancelToken: cancelToken,
+      onSendProgress: onSendProgress,
+      onReceiveProgress: onReceiveProgress,
+    );
+
+    MePasskeyDeleteRsp? _responseData;
+
+    try {
+      final rawResponse = _response.data;
+      _responseData = rawResponse == null
+          ? null
+          : _serializers.deserialize(
+              rawResponse,
+              specifiedType: const FullType(MePasskeyDeleteRsp),
+            ) as MePasskeyDeleteRsp;
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _response.requestOptions,
+        response: _response,
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    return Response<MePasskeyDeleteRsp>(
+      data: _responseData,
+      headers: _response.headers,
+      isRedirect: _response.isRedirect,
+      requestOptions: _response.requestOptions,
+      redirects: _response.redirects,
+      statusCode: _response.statusCode,
+      statusMessage: _response.statusMessage,
+      extra: _response.extra,
+    );
+  }
+
+  /// currentUserPasskeyGet
+  /// Gets current user&#39;s passkeys
+  ///
+  /// Parameters:
+  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
+  /// * [headers] - Can be used to add additional headers to the request
+  /// * [extras] - Can be used to add flags to the request
+  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
+  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
+  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
+  ///
+  /// Returns a [Future] containing a [Response] with a [MePasskeyRsp] as data
+  /// Throws [DioException] if API call or serialization fails
+  Future<Response<MePasskeyRsp>> currentUserPasskeyGet({
+    CancelToken? cancelToken,
+    Map<String, dynamic>? headers,
+    Map<String, dynamic>? extra,
+    ValidateStatus? validateStatus,
+    ProgressCallback? onSendProgress,
+    ProgressCallback? onReceiveProgress,
+  }) async {
+    final _path = r'/v2/me/passkeys';
+    final _options = Options(
+      method: r'GET',
+      headers: <String, dynamic>{
+        ...?headers,
+      },
+      extra: <String, dynamic>{
+        'secure': <Map<String, String>>[
+          {
+            'type': 'http',
+            'scheme': 'bearer',
+            'name': 'bearerAuth',
+          },
+          {
+            'type': 'apiKey',
+            'name': 'projectID',
+            'keyName': 'X-Corbado-ProjectID',
+            'where': 'header',
+          },
+        ],
+        ...?extra,
+      },
+      validateStatus: validateStatus,
+    );
+
+    final _response = await _dio.request<Object>(
+      _path,
+      options: _options,
+      cancelToken: cancelToken,
+      onSendProgress: onSendProgress,
+      onReceiveProgress: onReceiveProgress,
+    );
+
+    MePasskeyRsp? _responseData;
+
+    try {
+      final rawResponse = _response.data;
+      _responseData = rawResponse == null
+          ? null
+          : _serializers.deserialize(
+              rawResponse,
+              specifiedType: const FullType(MePasskeyRsp),
+            ) as MePasskeyRsp;
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _response.requestOptions,
+        response: _response,
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    return Response<MePasskeyRsp>(
+      data: _responseData,
+      headers: _response.headers,
+      isRedirect: _response.isRedirect,
+      requestOptions: _response.requestOptions,
+      redirects: _response.redirects,
+      statusCode: _response.statusCode,
+      statusMessage: _response.statusMessage,
+      extra: _response.extra,
+    );
+  }
+
+  /// currentUserSessionLogout
+  /// Performs session logout
+  ///
+  /// Parameters:
+  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
+  /// * [headers] - Can be used to add additional headers to the request
+  /// * [extras] - Can be used to add flags to the request
+  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
+  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
+  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
+  ///
+  /// Returns a [Future]
+  /// Throws [DioException] if API call or serialization fails
+  Future<Response<void>> currentUserSessionLogout({
+    CancelToken? cancelToken,
+    Map<String, dynamic>? headers,
+    Map<String, dynamic>? extra,
+    ValidateStatus? validateStatus,
+    ProgressCallback? onSendProgress,
+    ProgressCallback? onReceiveProgress,
+  }) async {
+    final _path = r'/v2/me/logout';
+    final _options = Options(
+      method: r'POST',
+      headers: <String, dynamic>{
+        ...?headers,
+      },
+      extra: <String, dynamic>{
+        'secure': <Map<String, String>>[
+          {
+            'type': 'http',
+            'scheme': 'bearer',
+            'name': 'bearerAuth',
+          },
+          {
+            'type': 'apiKey',
+            'name': 'projectID',
+            'keyName': 'X-Corbado-ProjectID',
+            'where': 'header',
+          },
+        ],
+        ...?extra,
+      },
+      validateStatus: validateStatus,
+    );
+
+    final _response = await _dio.request<Object>(
+      _path,
+      options: _options,
+      cancelToken: cancelToken,
+      onSendProgress: onSendProgress,
+      onReceiveProgress: onReceiveProgress,
+    );
+
+    return _response;
+  }
+
+  /// currentUserSessionRefresh
+  /// Performs session refresh
+  ///
+  /// Parameters:
+  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
+  /// * [headers] - Can be used to add additional headers to the request
+  /// * [extras] - Can be used to add flags to the request
+  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
+  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
+  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
+  ///
+  /// Returns a [Future] containing a [Response] with a [MeRefreshRsp] as data
+  /// Throws [DioException] if API call or serialization fails
+  Future<Response<MeRefreshRsp>> currentUserSessionRefresh({
+    CancelToken? cancelToken,
+    Map<String, dynamic>? headers,
+    Map<String, dynamic>? extra,
+    ValidateStatus? validateStatus,
+    ProgressCallback? onSendProgress,
+    ProgressCallback? onReceiveProgress,
+  }) async {
+    final _path = r'/v2/me/refresh';
+    final _options = Options(
+      method: r'POST',
+      headers: <String, dynamic>{
+        ...?headers,
+      },
+      extra: <String, dynamic>{
+        'secure': <Map<String, String>>[
+          {
+            'type': 'http',
+            'scheme': 'bearer',
+            'name': 'bearerAuth',
+          },
+          {
+            'type': 'apiKey',
+            'name': 'projectID',
+            'keyName': 'X-Corbado-ProjectID',
+            'where': 'header',
+          },
+        ],
+        ...?extra,
+      },
+      validateStatus: validateStatus,
+    );
+
+    final _response = await _dio.request<Object>(
+      _path,
+      options: _options,
+      cancelToken: cancelToken,
+      onSendProgress: onSendProgress,
+      onReceiveProgress: onReceiveProgress,
+    );
+
+    MeRefreshRsp? _responseData;
+
+    try {
+      final rawResponse = _response.data;
+      _responseData = rawResponse == null
+          ? null
+          : _serializers.deserialize(
+              rawResponse,
+              specifiedType: const FullType(MeRefreshRsp),
+            ) as MeRefreshRsp;
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _response.requestOptions,
+        response: _response,
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    return Response<MeRefreshRsp>(
+      data: _responseData,
+      headers: _response.headers,
+      isRedirect: _response.isRedirect,
+      requestOptions: _response.requestOptions,
+      redirects: _response.redirects,
+      statusCode: _response.statusCode,
+      statusMessage: _response.statusMessage,
+      extra: _response.extra,
+    );
+  }
+
+  /// currentUserUpdate
+  /// Updates current user
+  ///
+  /// Parameters:
+  /// * [meUpdateReq]
+  /// * [cancelToken] - A [CancelToken] that can be used to cancel the operation
+  /// * [headers] - Can be used to add additional headers to the request
+  /// * [extras] - Can be used to add flags to the request
+  /// * [validateStatus] - A [ValidateStatus] callback that can be used to determine request success based on the HTTP status of the response
+  /// * [onSendProgress] - A [ProgressCallback] that can be used to get the send progress
+  /// * [onReceiveProgress] - A [ProgressCallback] that can be used to get the receive progress
+  ///
+  /// Returns a [Future] containing a [Response] with a [GenericRsp] as data
+  /// Throws [DioException] if API call or serialization fails
+  Future<Response<GenericRsp>> currentUserUpdate({
+    required MeUpdateReq meUpdateReq,
+    CancelToken? cancelToken,
+    Map<String, dynamic>? headers,
+    Map<String, dynamic>? extra,
+    ValidateStatus? validateStatus,
+    ProgressCallback? onSendProgress,
+    ProgressCallback? onReceiveProgress,
+  }) async {
+    final _path = r'/v2/me';
+    final _options = Options(
+      method: r'PATCH',
+      headers: <String, dynamic>{
+        ...?headers,
+      },
+      extra: <String, dynamic>{
+        'secure': <Map<String, String>>[
+          {
+            'type': 'http',
+            'scheme': 'bearer',
+            'name': 'bearerAuth',
+          },
+          {
+            'type': 'apiKey',
+            'name': 'projectID',
+            'keyName': 'X-Corbado-ProjectID',
+            'where': 'header',
+          },
+        ],
+        ...?extra,
+      },
+      contentType: 'application/json',
+      validateStatus: validateStatus,
+    );
+
+    dynamic _bodyData;
+
+    try {
+      const _type = FullType(MeUpdateReq);
+      _bodyData = _serializers.serialize(meUpdateReq, specifiedType: _type);
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _options.compose(
+          _dio.options,
+          _path,
+        ),
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    final _response = await _dio.request<Object>(
+      _path,
+      data: _bodyData,
+      options: _options,
+      cancelToken: cancelToken,
+      onSendProgress: onSendProgress,
+      onReceiveProgress: onReceiveProgress,
+    );
+
+    GenericRsp? _responseData;
+
+    try {
+      final rawResponse = _response.data;
+      _responseData = rawResponse == null
+          ? null
+          : _serializers.deserialize(
+              rawResponse,
+              specifiedType: const FullType(GenericRsp),
+            ) as GenericRsp;
+    } catch (error, stackTrace) {
+      throw DioException(
+        requestOptions: _response.requestOptions,
+        response: _response,
+        type: DioExceptionType.unknown,
+        error: error,
+        stackTrace: stackTrace,
+      );
+    }
+
+    return Response<GenericRsp>(
+      data: _responseData,
+      headers: _response.headers,
+      isRedirect: _response.isRedirect,
+      requestOptions: _response.requestOptions,
+      redirects: _response.redirects,
+      statusCode: _response.statusCode,
+      statusMessage: _response.statusMessage,
+      extra: _response.extra,
+    );
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/api_util.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/api_util.dart
new file mode 100644
index 0000000..7a2534b
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/api_util.dart
@@ -0,0 +1,78 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+import 'dart:convert';
+import 'dart:typed_data';
+
+import 'package:built_collection/built_collection.dart';
+import 'package:built_value/serializer.dart';
+import 'package:dio/dio.dart';
+
+/// Format the given form parameter object into something that Dio can handle.
+/// Returns primitive or String.
+/// Returns List/Map if the value is BuildList/BuiltMap.
+dynamic encodeFormParameter(
+    Serializers serializers, dynamic value, FullType type) {
+  if (value == null) {
+    return '';
+  }
+  if (value is String || value is num || value is bool) {
+    return value;
+  }
+  final serialized = serializers.serialize(
+    value as Object,
+    specifiedType: type,
+  );
+  if (serialized is String) {
+    return serialized;
+  }
+  if (value is BuiltList || value is BuiltSet || value is BuiltMap) {
+    return serialized;
+  }
+  return json.encode(serialized);
+}
+
+dynamic encodeQueryParameter(
+  Serializers serializers,
+  dynamic value,
+  FullType type,
+) {
+  if (value == null) {
+    return '';
+  }
+  if (value is String || value is num || value is bool) {
+    return value;
+  }
+  if (value is Uint8List) {
+    // Currently not sure how to serialize this
+    return value;
+  }
+  final serialized = serializers.serialize(
+    value as Object,
+    specifiedType: type,
+  );
+  if (serialized == null) {
+    return '';
+  }
+  if (serialized is String) {
+    return serialized;
+  }
+  return serialized;
+}
+
+ListParam<Object?> encodeCollectionQueryParameter<T>(
+  Serializers serializers,
+  dynamic value,
+  FullType type, {
+  ListFormat format = ListFormat.multi,
+}) {
+  final serialized = serializers.serialize(
+    value as Object,
+    specifiedType: type,
+  );
+  if (value is BuiltList<T> || value is BuiltSet<T>) {
+    return ListParam(List.of((serialized as Iterable<Object?>).cast()), format);
+  }
+  throw ArgumentError('Invalid value passed to encodeCollectionQueryParameter');
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/auth/api_key_auth.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/auth/api_key_auth.dart
new file mode 100644
index 0000000..1dc3678
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/auth/api_key_auth.dart
@@ -0,0 +1,30 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+import 'package:dio/dio.dart';
+import 'package:corbado_frontend_api_client/src/auth/auth.dart';
+
+class ApiKeyAuthInterceptor extends AuthInterceptor {
+  final Map<String, String> apiKeys = {};
+
+  @override
+  void onRequest(RequestOptions options, RequestInterceptorHandler handler) {
+    final authInfo =
+        getAuthInfo(options, (secure) => secure['type'] == 'apiKey');
+    for (final info in authInfo) {
+      final authName = info['name'] as String;
+      final authKeyName = info['keyName'] as String;
+      final authWhere = info['where'] as String;
+      final apiKey = apiKeys[authName];
+      if (apiKey != null) {
+        if (authWhere == 'query') {
+          options.queryParameters[authKeyName] = apiKey;
+        } else {
+          options.headers[authKeyName] = apiKey;
+        }
+      }
+    }
+    super.onRequest(options, handler);
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/auth/auth.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/auth/auth.dart
new file mode 100644
index 0000000..c6fcca5
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/auth/auth.dart
@@ -0,0 +1,19 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+import 'package:dio/dio.dart';
+
+abstract class AuthInterceptor extends Interceptor {
+  /// Get auth information on given route for the given type.
+  /// Can return an empty list if type is not present on auth data or
+  /// if route doesn't need authentication.
+  List<Map<String, String>> getAuthInfo(
+      RequestOptions route, bool Function(Map<String, String> secure) handles) {
+    if (route.extra.containsKey('secure')) {
+      final auth = route.extra['secure'] as List<Map<String, String>>;
+      return auth.where((secure) => handles(secure)).toList();
+    }
+    return [];
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/auth/basic_auth.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/auth/basic_auth.dart
new file mode 100644
index 0000000..3704a02
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/auth/basic_auth.dart
@@ -0,0 +1,42 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+import 'dart:convert';
+
+import 'package:dio/dio.dart';
+import 'package:corbado_frontend_api_client/src/auth/auth.dart';
+
+class BasicAuthInfo {
+  final String username;
+  final String password;
+
+  const BasicAuthInfo(this.username, this.password);
+}
+
+class BasicAuthInterceptor extends AuthInterceptor {
+  final Map<String, BasicAuthInfo> authInfo = {};
+
+  @override
+  void onRequest(
+    RequestOptions options,
+    RequestInterceptorHandler handler,
+  ) {
+    final metadataAuthInfo = getAuthInfo(
+        options,
+        (secure) =>
+            (secure['type'] == 'http' && secure['scheme'] == 'basic') ||
+            secure['type'] == 'basic');
+    for (final info in metadataAuthInfo) {
+      final authName = info['name'] as String;
+      final basicAuthInfo = authInfo[authName];
+      if (basicAuthInfo != null) {
+        final basicAuth =
+            'Basic ${base64Encode(utf8.encode('${basicAuthInfo.username}:${basicAuthInfo.password}'))}';
+        options.headers['Authorization'] = basicAuth;
+        break;
+      }
+    }
+    super.onRequest(options, handler);
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/auth/bearer_auth.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/auth/bearer_auth.dart
new file mode 100644
index 0000000..ccbd56d
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/auth/bearer_auth.dart
@@ -0,0 +1,27 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+import 'package:dio/dio.dart';
+import 'package:corbado_frontend_api_client/src/auth/auth.dart';
+
+class BearerAuthInterceptor extends AuthInterceptor {
+  final Map<String, String> tokens = {};
+
+  @override
+  void onRequest(
+    RequestOptions options,
+    RequestInterceptorHandler handler,
+  ) {
+    final authInfo = getAuthInfo(options,
+        (secure) => secure['type'] == 'http' && secure['scheme'] == 'bearer');
+    for (final info in authInfo) {
+      final token = tokens[info['name']];
+      if (token != null) {
+        options.headers['Authorization'] = 'Bearer ${token}';
+        break;
+      }
+    }
+    super.onRequest(options, handler);
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/auth/oauth.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/auth/oauth.dart
new file mode 100644
index 0000000..d749fa2
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/auth/oauth.dart
@@ -0,0 +1,27 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+import 'package:dio/dio.dart';
+import 'package:corbado_frontend_api_client/src/auth/auth.dart';
+
+class OAuthInterceptor extends AuthInterceptor {
+  final Map<String, String> tokens = {};
+
+  @override
+  void onRequest(
+    RequestOptions options,
+    RequestInterceptorHandler handler,
+  ) {
+    final authInfo = getAuthInfo(options,
+        (secure) => secure['type'] == 'oauth' || secure['type'] == 'oauth2');
+    for (final info in authInfo) {
+      final token = tokens[info['name']];
+      if (token != null) {
+        options.headers['Authorization'] = 'Bearer ${token}';
+        break;
+      }
+    }
+    super.onRequest(options, handler);
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/date_serializer.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/date_serializer.dart
new file mode 100644
index 0000000..e4f1f1c
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/date_serializer.dart
@@ -0,0 +1,30 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+import 'package:built_collection/built_collection.dart';
+import 'package:built_value/serializer.dart';
+import 'package:corbado_frontend_api_client/src/model/date.dart';
+
+class DateSerializer implements PrimitiveSerializer<Date> {
+  const DateSerializer();
+
+  @override
+  Iterable<Type> get types => BuiltList.of([Date]);
+
+  @override
+  String get wireName => 'Date';
+
+  @override
+  Date deserialize(Serializers serializers, Object serialized,
+      {FullType specifiedType = FullType.unspecified}) {
+    final parsed = DateTime.parse(serialized as String);
+    return Date(parsed.year, parsed.month, parsed.day);
+  }
+
+  @override
+  Object serialize(Serializers serializers, Date date,
+      {FullType specifiedType = FullType.unspecified}) {
+    return date.toString();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/auth_type.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/auth_type.dart
new file mode 100644
index 0000000..bd8cc61
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/auth_type.dart
@@ -0,0 +1,32 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:built_collection/built_collection.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'auth_type.g.dart';
+
+class AuthType extends EnumClass {
+  @BuiltValueEnumConst(wireName: r'signup')
+  static const AuthType signup = _$signup;
+  @BuiltValueEnumConst(wireName: r'login', fallback: true)
+  static const AuthType login = _$login;
+
+  static Serializer<AuthType> get serializer => _$authTypeSerializer;
+
+  const AuthType._(String name) : super(name);
+
+  static BuiltSet<AuthType> get values => _$values;
+  static AuthType valueOf(String name) => _$valueOf(name);
+}
+
+/// Optionally, enum_class can generate a mixin to go with your enum for use
+/// with Angular. It exposes your enum constants as getters. So, if you mix it
+/// in to your Dart component class, the values become available to the
+/// corresponding Angular template.
+///
+/// Trigger mixin generation by writing a line like this one next to your enum.
+abstract class AuthTypeMixin = Object with _$AuthTypeMixin;
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/auth_type.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/auth_type.g.dart
new file mode 100644
index 0000000..f8c83b8
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/auth_type.g.dart
@@ -0,0 +1,70 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'auth_type.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+const AuthType _$signup = const AuthType._('signup');
+const AuthType _$login = const AuthType._('login');
+
+AuthType _$valueOf(String name) {
+  switch (name) {
+    case 'signup':
+      return _$signup;
+    case 'login':
+      return _$login;
+    default:
+      return _$login;
+  }
+}
+
+final BuiltSet<AuthType> _$values = new BuiltSet<AuthType>(const <AuthType>[
+  _$signup,
+  _$login,
+]);
+
+class _$AuthTypeMeta {
+  const _$AuthTypeMeta();
+  AuthType get signup => _$signup;
+  AuthType get login => _$login;
+  AuthType valueOf(String name) => _$valueOf(name);
+  BuiltSet<AuthType> get values => _$values;
+}
+
+abstract class _$AuthTypeMixin {
+  // ignore: non_constant_identifier_names
+  _$AuthTypeMeta get AuthType => const _$AuthTypeMeta();
+}
+
+Serializer<AuthType> _$authTypeSerializer = new _$AuthTypeSerializer();
+
+class _$AuthTypeSerializer implements PrimitiveSerializer<AuthType> {
+  static const Map<String, Object> _toWire = const <String, Object>{
+    'signup': 'signup',
+    'login': 'login',
+  };
+  static const Map<Object, String> _fromWire = const <Object, String>{
+    'signup': 'signup',
+    'login': 'login',
+  };
+
+  @override
+  final Iterable<Type> types = const <Type>[AuthType];
+  @override
+  final String wireName = 'AuthType';
+
+  @override
+  Object serialize(Serializers serializers, AuthType object,
+          {FullType specifiedType = FullType.unspecified}) =>
+      _toWire[object.name] ?? object.name;
+
+  @override
+  AuthType deserialize(Serializers serializers, Object serialized,
+          {FullType specifiedType = FullType.unspecified}) =>
+      AuthType.valueOf(
+          _fromWire[serialized] ?? (serialized is String ? serialized : ''));
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/block_body.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/block_body.dart
new file mode 100644
index 0000000..4cfce5a
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/block_body.dart
@@ -0,0 +1,201 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:corbado_frontend_api_client/src/model/continue_on_other_device.dart';
+import 'package:corbado_frontend_api_client/src/model/auth_type.dart';
+import 'package:corbado_frontend_api_client/src/model/block_body_data.dart';
+import 'package:built_collection/built_collection.dart';
+import 'package:corbado_frontend_api_client/src/model/request_error.dart';
+import 'package:corbado_frontend_api_client/src/model/block_type.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'block_body.g.dart';
+
+/// BlockBody
+///
+/// Properties:
+/// * [block]
+/// * [authType]
+/// * [data]
+/// * [alternatives]
+/// * [error]
+/// * [continueOnOtherDevice]
+@BuiltValue()
+abstract class BlockBody implements Built<BlockBody, BlockBodyBuilder> {
+  @BuiltValueField(wireName: r'block')
+  BlockType get block;
+  // enum blockEnum {  signup-init,  passkey-append,  phone-verify,  email-verify,  passkey-appended,  completed,  social-verify,  login-init,  passkey-verify,  conditional-ui-completed,  post-signup-email-verify,  passkey-append-after-hybrid,  };
+
+  @BuiltValueField(wireName: r'authType')
+  AuthType get authType;
+  // enum authTypeEnum {  signup,  login,  };
+
+  @BuiltValueField(wireName: r'data')
+  BlockBodyData get data;
+
+  @BuiltValueField(wireName: r'alternatives')
+  BuiltList<BlockBody>? get alternatives;
+
+  @BuiltValueField(wireName: r'error')
+  RequestError? get error;
+
+  @BuiltValueField(wireName: r'continueOnOtherDevice')
+  ContinueOnOtherDevice? get continueOnOtherDevice;
+
+  BlockBody._();
+
+  factory BlockBody([void updates(BlockBodyBuilder b)]) = _$BlockBody;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(BlockBodyBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<BlockBody> get serializer => _$BlockBodySerializer();
+}
+
+class _$BlockBodySerializer implements PrimitiveSerializer<BlockBody> {
+  @override
+  final Iterable<Type> types = const [BlockBody, _$BlockBody];
+
+  @override
+  final String wireName = r'BlockBody';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    BlockBody object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'block';
+    yield serializers.serialize(
+      object.block,
+      specifiedType: const FullType(BlockType),
+    );
+    yield r'authType';
+    yield serializers.serialize(
+      object.authType,
+      specifiedType: const FullType(AuthType),
+    );
+    yield r'data';
+    yield serializers.serialize(
+      object.data,
+      specifiedType: const FullType(BlockBodyData),
+    );
+    if (object.alternatives != null) {
+      yield r'alternatives';
+      yield serializers.serialize(
+        object.alternatives,
+        specifiedType: const FullType(BuiltList, [FullType(BlockBody)]),
+      );
+    }
+    if (object.error != null) {
+      yield r'error';
+      yield serializers.serialize(
+        object.error,
+        specifiedType: const FullType(RequestError),
+      );
+    }
+    if (object.continueOnOtherDevice != null) {
+      yield r'continueOnOtherDevice';
+      yield serializers.serialize(
+        object.continueOnOtherDevice,
+        specifiedType: const FullType(ContinueOnOtherDevice),
+      );
+    }
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    BlockBody object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required BlockBodyBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'block':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(BlockType),
+          ) as BlockType;
+          result.block = valueDes;
+          break;
+        case r'authType':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(AuthType),
+          ) as AuthType;
+          result.authType = valueDes;
+          break;
+        case r'data':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(BlockBodyData),
+          ) as BlockBodyData;
+          result.data.replace(valueDes);
+          break;
+        case r'alternatives':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(BuiltList, [FullType(BlockBody)]),
+          ) as BuiltList<BlockBody>;
+          result.alternatives.replace(valueDes);
+          break;
+        case r'error':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(RequestError),
+          ) as RequestError;
+          result.error.replace(valueDes);
+          break;
+        case r'continueOnOtherDevice':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(ContinueOnOtherDevice),
+          ) as ContinueOnOtherDevice;
+          result.continueOnOtherDevice.replace(valueDes);
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  BlockBody deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = BlockBodyBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/block_body.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/block_body.g.dart
new file mode 100644
index 0000000..f027fab
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/block_body.g.dart
@@ -0,0 +1,183 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'block_body.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$BlockBody extends BlockBody {
+  @override
+  final BlockType block;
+  @override
+  final AuthType authType;
+  @override
+  final BlockBodyData data;
+  @override
+  final BuiltList<BlockBody>? alternatives;
+  @override
+  final RequestError? error;
+  @override
+  final ContinueOnOtherDevice? continueOnOtherDevice;
+
+  factory _$BlockBody([void Function(BlockBodyBuilder)? updates]) =>
+      (new BlockBodyBuilder()..update(updates))._build();
+
+  _$BlockBody._(
+      {required this.block,
+      required this.authType,
+      required this.data,
+      this.alternatives,
+      this.error,
+      this.continueOnOtherDevice})
+      : super._() {
+    BuiltValueNullFieldError.checkNotNull(block, r'BlockBody', 'block');
+    BuiltValueNullFieldError.checkNotNull(authType, r'BlockBody', 'authType');
+    BuiltValueNullFieldError.checkNotNull(data, r'BlockBody', 'data');
+  }
+
+  @override
+  BlockBody rebuild(void Function(BlockBodyBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  BlockBodyBuilder toBuilder() => new BlockBodyBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is BlockBody &&
+        block == other.block &&
+        authType == other.authType &&
+        data == other.data &&
+        alternatives == other.alternatives &&
+        error == other.error &&
+        continueOnOtherDevice == other.continueOnOtherDevice;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, block.hashCode);
+    _$hash = $jc(_$hash, authType.hashCode);
+    _$hash = $jc(_$hash, data.hashCode);
+    _$hash = $jc(_$hash, alternatives.hashCode);
+    _$hash = $jc(_$hash, error.hashCode);
+    _$hash = $jc(_$hash, continueOnOtherDevice.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'BlockBody')
+          ..add('block', block)
+          ..add('authType', authType)
+          ..add('data', data)
+          ..add('alternatives', alternatives)
+          ..add('error', error)
+          ..add('continueOnOtherDevice', continueOnOtherDevice))
+        .toString();
+  }
+}
+
+class BlockBodyBuilder implements Builder<BlockBody, BlockBodyBuilder> {
+  _$BlockBody? _$v;
+
+  BlockType? _block;
+  BlockType? get block => _$this._block;
+  set block(BlockType? block) => _$this._block = block;
+
+  AuthType? _authType;
+  AuthType? get authType => _$this._authType;
+  set authType(AuthType? authType) => _$this._authType = authType;
+
+  BlockBodyDataBuilder? _data;
+  BlockBodyDataBuilder get data => _$this._data ??= new BlockBodyDataBuilder();
+  set data(BlockBodyDataBuilder? data) => _$this._data = data;
+
+  ListBuilder<BlockBody>? _alternatives;
+  ListBuilder<BlockBody> get alternatives =>
+      _$this._alternatives ??= new ListBuilder<BlockBody>();
+  set alternatives(ListBuilder<BlockBody>? alternatives) =>
+      _$this._alternatives = alternatives;
+
+  RequestErrorBuilder? _error;
+  RequestErrorBuilder get error => _$this._error ??= new RequestErrorBuilder();
+  set error(RequestErrorBuilder? error) => _$this._error = error;
+
+  ContinueOnOtherDeviceBuilder? _continueOnOtherDevice;
+  ContinueOnOtherDeviceBuilder get continueOnOtherDevice =>
+      _$this._continueOnOtherDevice ??= new ContinueOnOtherDeviceBuilder();
+  set continueOnOtherDevice(
+          ContinueOnOtherDeviceBuilder? continueOnOtherDevice) =>
+      _$this._continueOnOtherDevice = continueOnOtherDevice;
+
+  BlockBodyBuilder() {
+    BlockBody._defaults(this);
+  }
+
+  BlockBodyBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _block = $v.block;
+      _authType = $v.authType;
+      _data = $v.data.toBuilder();
+      _alternatives = $v.alternatives?.toBuilder();
+      _error = $v.error?.toBuilder();
+      _continueOnOtherDevice = $v.continueOnOtherDevice?.toBuilder();
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(BlockBody other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$BlockBody;
+  }
+
+  @override
+  void update(void Function(BlockBodyBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  BlockBody build() => _build();
+
+  _$BlockBody _build() {
+    _$BlockBody _$result;
+    try {
+      _$result = _$v ??
+          new _$BlockBody._(
+              block: BuiltValueNullFieldError.checkNotNull(
+                  block, r'BlockBody', 'block'),
+              authType: BuiltValueNullFieldError.checkNotNull(
+                  authType, r'BlockBody', 'authType'),
+              data: data.build(),
+              alternatives: _alternatives?.build(),
+              error: _error?.build(),
+              continueOnOtherDevice: _continueOnOtherDevice?.build());
+    } catch (_) {
+      late String _$failedField;
+      try {
+        _$failedField = 'data';
+        data.build();
+        _$failedField = 'alternatives';
+        _alternatives?.build();
+        _$failedField = 'error';
+        _error?.build();
+        _$failedField = 'continueOnOtherDevice';
+        _continueOnOtherDevice?.build();
+      } catch (e) {
+        throw new BuiltValueNestedFieldError(
+            r'BlockBody', _$failedField, e.toString());
+      }
+      rethrow;
+    }
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/block_body_data.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/block_body_data.dart
new file mode 100644
index 0000000..85d8fac
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/block_body_data.dart
@@ -0,0 +1,306 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:corbado_frontend_api_client/src/model/social_data.dart';
+import 'package:corbado_frontend_api_client/src/model/general_block_login_init.dart';
+import 'package:corbado_frontend_api_client/src/model/general_block_verify_identifier_alternative_verification_methods_inner.dart';
+import 'package:corbado_frontend_api_client/src/model/full_name_with_error.dart';
+import 'package:corbado_frontend_api_client/src/model/general_block_passkey_append.dart';
+import 'package:corbado_frontend_api_client/src/model/login_identifier_with_error.dart';
+import 'package:corbado_frontend_api_client/src/model/passkey_icon_set.dart';
+import 'package:corbado_frontend_api_client/src/model/verification_method.dart';
+import 'package:corbado_frontend_api_client/src/model/passkey_operation.dart';
+import 'package:corbado_frontend_api_client/src/model/general_block_completed.dart';
+import 'package:corbado_frontend_api_client/src/model/general_block_verify_identifier.dart';
+import 'package:corbado_frontend_api_client/src/model/general_block_passkey_appended.dart';
+import 'package:corbado_frontend_api_client/src/model/general_block_signup_init.dart';
+import 'package:built_collection/built_collection.dart';
+import 'package:corbado_frontend_api_client/src/model/request_error.dart';
+import 'package:corbado_frontend_api_client/src/model/login_identifier_type.dart';
+import 'package:corbado_frontend_api_client/src/model/general_block_passkey_verify.dart';
+import 'package:corbado_frontend_api_client/src/model/general_block_post_signup_email_verify.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+import 'package:one_of/one_of.dart';
+
+part 'block_body_data.g.dart';
+
+/// BlockBodyData
+///
+/// Properties:
+/// * [blockType]
+/// * [challenge]
+/// * [identifierValue]
+/// * [identifierType]
+/// * [autoSubmit]
+/// * [passkeyIconSet]
+/// * [variant]
+/// * [verificationMethod]
+/// * [identifier]
+/// * [alternativeVerificationMethods]
+/// * [isPostLoginVerification]
+/// * [shortSession]
+/// * [identifiers]
+/// * [socialData]
+/// * [isPhone]
+/// * [isPhoneAvailable]
+/// * [isEmailAvailable]
+/// * [isUsernameAvailable]
+/// * [loginHint]
+/// * [retryNotBefore]
+/// * [error]
+/// * [longSession] - Only given when project environment is dev 1
+/// * [passkeyOperation]
+/// * [fullName]
+/// * [conditionalUIChallenge]
+/// * [fieldError]
+@BuiltValue()
+abstract class BlockBodyData
+    implements Built<BlockBodyData, BlockBodyDataBuilder> {
+  /// One Of [GeneralBlockCompleted], [GeneralBlockLoginInit], [GeneralBlockPasskeyAppend], [GeneralBlockPasskeyAppended], [GeneralBlockPasskeyVerify], [GeneralBlockPostSignupEmailVerify], [GeneralBlockSignupInit], [GeneralBlockVerifyIdentifier]
+  OneOf get oneOf;
+
+  static const String discriminatorFieldName = r'blockType';
+
+  static const Map<String, Type> discriminatorMapping = {
+    r'generalBlockCompleted': GeneralBlockCompleted,
+    r'generalBlockLoginInit': GeneralBlockLoginInit,
+    r'generalBlockPasskeyAppend': GeneralBlockPasskeyAppend,
+    r'generalBlockPasskeyAppended': GeneralBlockPasskeyAppended,
+    r'generalBlockPasskeyVerify': GeneralBlockPasskeyVerify,
+    r'generalBlockPostSignupEmailVerify': GeneralBlockPostSignupEmailVerify,
+    r'generalBlockSignupInit': GeneralBlockSignupInit,
+    r'generalBlockVerifyIdentifier': GeneralBlockVerifyIdentifier,
+  };
+
+  BlockBodyData._();
+
+  factory BlockBodyData([void updates(BlockBodyDataBuilder b)]) =
+      _$BlockBodyData;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(BlockBodyDataBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<BlockBodyData> get serializer =>
+      _$BlockBodyDataSerializer();
+}
+
+extension BlockBodyDataDiscriminatorExt on BlockBodyData {
+  String? get discriminatorValue {
+    if (this is GeneralBlockCompleted) {
+      return r'generalBlockCompleted';
+    }
+    if (this is GeneralBlockLoginInit) {
+      return r'generalBlockLoginInit';
+    }
+    if (this is GeneralBlockPasskeyAppend) {
+      return r'generalBlockPasskeyAppend';
+    }
+    if (this is GeneralBlockPasskeyAppended) {
+      return r'generalBlockPasskeyAppended';
+    }
+    if (this is GeneralBlockPasskeyVerify) {
+      return r'generalBlockPasskeyVerify';
+    }
+    if (this is GeneralBlockPostSignupEmailVerify) {
+      return r'generalBlockPostSignupEmailVerify';
+    }
+    if (this is GeneralBlockSignupInit) {
+      return r'generalBlockSignupInit';
+    }
+    if (this is GeneralBlockVerifyIdentifier) {
+      return r'generalBlockVerifyIdentifier';
+    }
+    return null;
+  }
+}
+
+extension BlockBodyDataBuilderDiscriminatorExt on BlockBodyDataBuilder {
+  String? get discriminatorValue {
+    if (this is GeneralBlockCompletedBuilder) {
+      return r'generalBlockCompleted';
+    }
+    if (this is GeneralBlockLoginInitBuilder) {
+      return r'generalBlockLoginInit';
+    }
+    if (this is GeneralBlockPasskeyAppendBuilder) {
+      return r'generalBlockPasskeyAppend';
+    }
+    if (this is GeneralBlockPasskeyAppendedBuilder) {
+      return r'generalBlockPasskeyAppended';
+    }
+    if (this is GeneralBlockPasskeyVerifyBuilder) {
+      return r'generalBlockPasskeyVerify';
+    }
+    if (this is GeneralBlockPostSignupEmailVerifyBuilder) {
+      return r'generalBlockPostSignupEmailVerify';
+    }
+    if (this is GeneralBlockSignupInitBuilder) {
+      return r'generalBlockSignupInit';
+    }
+    if (this is GeneralBlockVerifyIdentifierBuilder) {
+      return r'generalBlockVerifyIdentifier';
+    }
+    return null;
+  }
+}
+
+class _$BlockBodyDataSerializer implements PrimitiveSerializer<BlockBodyData> {
+  @override
+  final Iterable<Type> types = const [BlockBodyData, _$BlockBodyData];
+
+  @override
+  final String wireName = r'BlockBodyData';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    BlockBodyData object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {}
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    BlockBodyData object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final oneOf = object.oneOf;
+    return serializers.serialize(oneOf.value,
+        specifiedType: FullType(oneOf.valueType))!;
+  }
+
+  @override
+  BlockBodyData deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = BlockBodyDataBuilder();
+    Object? oneOfDataSrc;
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final discIndex =
+        serializedList.indexOf(BlockBodyData.discriminatorFieldName) + 1;
+    final discValue = serializers.deserialize(serializedList[discIndex],
+        specifiedType: FullType(String)) as String;
+    oneOfDataSrc = serialized;
+    final oneOfTypes = [
+      GeneralBlockCompleted,
+      GeneralBlockLoginInit,
+      GeneralBlockPasskeyAppend,
+      GeneralBlockPasskeyAppended,
+      GeneralBlockPasskeyVerify,
+      GeneralBlockPostSignupEmailVerify,
+      GeneralBlockSignupInit,
+      GeneralBlockVerifyIdentifier,
+    ];
+    Object oneOfResult;
+    Type oneOfType;
+    switch (discValue) {
+      case r'generalBlockCompleted':
+        oneOfResult = serializers.deserialize(
+          oneOfDataSrc,
+          specifiedType: FullType(GeneralBlockCompleted),
+        ) as GeneralBlockCompleted;
+        oneOfType = GeneralBlockCompleted;
+        break;
+      case r'generalBlockLoginInit':
+        oneOfResult = serializers.deserialize(
+          oneOfDataSrc,
+          specifiedType: FullType(GeneralBlockLoginInit),
+        ) as GeneralBlockLoginInit;
+        oneOfType = GeneralBlockLoginInit;
+        break;
+      case r'generalBlockPasskeyAppend':
+        oneOfResult = serializers.deserialize(
+          oneOfDataSrc,
+          specifiedType: FullType(GeneralBlockPasskeyAppend),
+        ) as GeneralBlockPasskeyAppend;
+        oneOfType = GeneralBlockPasskeyAppend;
+        break;
+      case r'generalBlockPasskeyAppended':
+        oneOfResult = serializers.deserialize(
+          oneOfDataSrc,
+          specifiedType: FullType(GeneralBlockPasskeyAppended),
+        ) as GeneralBlockPasskeyAppended;
+        oneOfType = GeneralBlockPasskeyAppended;
+        break;
+      case r'generalBlockPasskeyVerify':
+        oneOfResult = serializers.deserialize(
+          oneOfDataSrc,
+          specifiedType: FullType(GeneralBlockPasskeyVerify),
+        ) as GeneralBlockPasskeyVerify;
+        oneOfType = GeneralBlockPasskeyVerify;
+        break;
+      case r'generalBlockPostSignupEmailVerify':
+        oneOfResult = serializers.deserialize(
+          oneOfDataSrc,
+          specifiedType: FullType(GeneralBlockPostSignupEmailVerify),
+        ) as GeneralBlockPostSignupEmailVerify;
+        oneOfType = GeneralBlockPostSignupEmailVerify;
+        break;
+      case r'generalBlockSignupInit':
+        oneOfResult = serializers.deserialize(
+          oneOfDataSrc,
+          specifiedType: FullType(GeneralBlockSignupInit),
+        ) as GeneralBlockSignupInit;
+        oneOfType = GeneralBlockSignupInit;
+        break;
+      case r'generalBlockVerifyIdentifier':
+        oneOfResult = serializers.deserialize(
+          oneOfDataSrc,
+          specifiedType: FullType(GeneralBlockVerifyIdentifier),
+        ) as GeneralBlockVerifyIdentifier;
+        oneOfType = GeneralBlockVerifyIdentifier;
+        break;
+      default:
+        throw UnsupportedError(
+            "Couldn't deserialize oneOf for the discriminator value: ${discValue}");
+    }
+    result.oneOf = OneOfDynamic(
+        typeIndex: oneOfTypes.indexOf(oneOfType),
+        types: oneOfTypes,
+        value: oneOfResult);
+    return result.build();
+  }
+}
+
+class BlockBodyDataVariantEnum extends EnumClass {
+  @BuiltValueEnumConst(wireName: r'default')
+  static const BlockBodyDataVariantEnum default_ =
+      _$blockBodyDataVariantEnum_default_;
+  @BuiltValueEnumConst(wireName: r'after-hybrid')
+  static const BlockBodyDataVariantEnum afterHybrid =
+      _$blockBodyDataVariantEnum_afterHybrid;
+  @BuiltValueEnumConst(wireName: r'after-error', fallback: true)
+  static const BlockBodyDataVariantEnum afterError =
+      _$blockBodyDataVariantEnum_afterError;
+
+  static Serializer<BlockBodyDataVariantEnum> get serializer =>
+      _$blockBodyDataVariantEnumSerializer;
+
+  const BlockBodyDataVariantEnum._(String name) : super(name);
+
+  static BuiltSet<BlockBodyDataVariantEnum> get values =>
+      _$blockBodyDataVariantEnumValues;
+  static BlockBodyDataVariantEnum valueOf(String name) =>
+      _$blockBodyDataVariantEnumValueOf(name);
+}
+
+class BlockBodyDataLoginHintEnum extends EnumClass {
+  @BuiltValueEnumConst(wireName: r'cda', fallback: true)
+  static const BlockBodyDataLoginHintEnum cda =
+      _$blockBodyDataLoginHintEnum_cda;
+
+  static Serializer<BlockBodyDataLoginHintEnum> get serializer =>
+      _$blockBodyDataLoginHintEnumSerializer;
+
+  const BlockBodyDataLoginHintEnum._(String name) : super(name);
+
+  static BuiltSet<BlockBodyDataLoginHintEnum> get values =>
+      _$blockBodyDataLoginHintEnumValues;
+  static BlockBodyDataLoginHintEnum valueOf(String name) =>
+      _$blockBodyDataLoginHintEnumValueOf(name);
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/block_body_data.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/block_body_data.g.dart
new file mode 100644
index 0000000..e027fa3
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/block_body_data.g.dart
@@ -0,0 +1,200 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'block_body_data.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+const BlockBodyDataVariantEnum _$blockBodyDataVariantEnum_default_ =
+    const BlockBodyDataVariantEnum._('default_');
+const BlockBodyDataVariantEnum _$blockBodyDataVariantEnum_afterHybrid =
+    const BlockBodyDataVariantEnum._('afterHybrid');
+const BlockBodyDataVariantEnum _$blockBodyDataVariantEnum_afterError =
+    const BlockBodyDataVariantEnum._('afterError');
+
+BlockBodyDataVariantEnum _$blockBodyDataVariantEnumValueOf(String name) {
+  switch (name) {
+    case 'default_':
+      return _$blockBodyDataVariantEnum_default_;
+    case 'afterHybrid':
+      return _$blockBodyDataVariantEnum_afterHybrid;
+    case 'afterError':
+      return _$blockBodyDataVariantEnum_afterError;
+    default:
+      return _$blockBodyDataVariantEnum_afterError;
+  }
+}
+
+final BuiltSet<BlockBodyDataVariantEnum> _$blockBodyDataVariantEnumValues =
+    new BuiltSet<BlockBodyDataVariantEnum>(const <BlockBodyDataVariantEnum>[
+  _$blockBodyDataVariantEnum_default_,
+  _$blockBodyDataVariantEnum_afterHybrid,
+  _$blockBodyDataVariantEnum_afterError,
+]);
+
+const BlockBodyDataLoginHintEnum _$blockBodyDataLoginHintEnum_cda =
+    const BlockBodyDataLoginHintEnum._('cda');
+
+BlockBodyDataLoginHintEnum _$blockBodyDataLoginHintEnumValueOf(String name) {
+  switch (name) {
+    case 'cda':
+      return _$blockBodyDataLoginHintEnum_cda;
+    default:
+      return _$blockBodyDataLoginHintEnum_cda;
+  }
+}
+
+final BuiltSet<BlockBodyDataLoginHintEnum> _$blockBodyDataLoginHintEnumValues =
+    new BuiltSet<BlockBodyDataLoginHintEnum>(const <BlockBodyDataLoginHintEnum>[
+  _$blockBodyDataLoginHintEnum_cda,
+]);
+
+Serializer<BlockBodyDataVariantEnum> _$blockBodyDataVariantEnumSerializer =
+    new _$BlockBodyDataVariantEnumSerializer();
+Serializer<BlockBodyDataLoginHintEnum> _$blockBodyDataLoginHintEnumSerializer =
+    new _$BlockBodyDataLoginHintEnumSerializer();
+
+class _$BlockBodyDataVariantEnumSerializer
+    implements PrimitiveSerializer<BlockBodyDataVariantEnum> {
+  static const Map<String, Object> _toWire = const <String, Object>{
+    'default_': 'default',
+    'afterHybrid': 'after-hybrid',
+    'afterError': 'after-error',
+  };
+  static const Map<Object, String> _fromWire = const <Object, String>{
+    'default': 'default_',
+    'after-hybrid': 'afterHybrid',
+    'after-error': 'afterError',
+  };
+
+  @override
+  final Iterable<Type> types = const <Type>[BlockBodyDataVariantEnum];
+  @override
+  final String wireName = 'BlockBodyDataVariantEnum';
+
+  @override
+  Object serialize(Serializers serializers, BlockBodyDataVariantEnum object,
+          {FullType specifiedType = FullType.unspecified}) =>
+      _toWire[object.name] ?? object.name;
+
+  @override
+  BlockBodyDataVariantEnum deserialize(
+          Serializers serializers, Object serialized,
+          {FullType specifiedType = FullType.unspecified}) =>
+      BlockBodyDataVariantEnum.valueOf(
+          _fromWire[serialized] ?? (serialized is String ? serialized : ''));
+}
+
+class _$BlockBodyDataLoginHintEnumSerializer
+    implements PrimitiveSerializer<BlockBodyDataLoginHintEnum> {
+  static const Map<String, Object> _toWire = const <String, Object>{
+    'cda': 'cda',
+  };
+  static const Map<Object, String> _fromWire = const <Object, String>{
+    'cda': 'cda',
+  };
+
+  @override
+  final Iterable<Type> types = const <Type>[BlockBodyDataLoginHintEnum];
+  @override
+  final String wireName = 'BlockBodyDataLoginHintEnum';
+
+  @override
+  Object serialize(Serializers serializers, BlockBodyDataLoginHintEnum object,
+          {FullType specifiedType = FullType.unspecified}) =>
+      _toWire[object.name] ?? object.name;
+
+  @override
+  BlockBodyDataLoginHintEnum deserialize(
+          Serializers serializers, Object serialized,
+          {FullType specifiedType = FullType.unspecified}) =>
+      BlockBodyDataLoginHintEnum.valueOf(
+          _fromWire[serialized] ?? (serialized is String ? serialized : ''));
+}
+
+class _$BlockBodyData extends BlockBodyData {
+  @override
+  final OneOf oneOf;
+
+  factory _$BlockBodyData([void Function(BlockBodyDataBuilder)? updates]) =>
+      (new BlockBodyDataBuilder()..update(updates))._build();
+
+  _$BlockBodyData._({required this.oneOf}) : super._() {
+    BuiltValueNullFieldError.checkNotNull(oneOf, r'BlockBodyData', 'oneOf');
+  }
+
+  @override
+  BlockBodyData rebuild(void Function(BlockBodyDataBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  BlockBodyDataBuilder toBuilder() => new BlockBodyDataBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is BlockBodyData && oneOf == other.oneOf;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, oneOf.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'BlockBodyData')..add('oneOf', oneOf))
+        .toString();
+  }
+}
+
+class BlockBodyDataBuilder
+    implements Builder<BlockBodyData, BlockBodyDataBuilder> {
+  _$BlockBodyData? _$v;
+
+  OneOf? _oneOf;
+  OneOf? get oneOf => _$this._oneOf;
+  set oneOf(OneOf? oneOf) => _$this._oneOf = oneOf;
+
+  BlockBodyDataBuilder() {
+    BlockBodyData._defaults(this);
+  }
+
+  BlockBodyDataBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _oneOf = $v.oneOf;
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(BlockBodyData other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$BlockBodyData;
+  }
+
+  @override
+  void update(void Function(BlockBodyDataBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  BlockBodyData build() => _build();
+
+  _$BlockBodyData _build() {
+    final _$result = _$v ??
+        new _$BlockBodyData._(
+            oneOf: BuiltValueNullFieldError.checkNotNull(
+                oneOf, r'BlockBodyData', 'oneOf'));
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/block_type.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/block_type.dart
new file mode 100644
index 0000000..1df810d
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/block_type.dart
@@ -0,0 +1,52 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:built_collection/built_collection.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'block_type.g.dart';
+
+class BlockType extends EnumClass {
+  @BuiltValueEnumConst(wireName: r'signup-init')
+  static const BlockType signupInit = _$signupInit;
+  @BuiltValueEnumConst(wireName: r'passkey-append')
+  static const BlockType passkeyAppend = _$passkeyAppend;
+  @BuiltValueEnumConst(wireName: r'phone-verify')
+  static const BlockType phoneVerify = _$phoneVerify;
+  @BuiltValueEnumConst(wireName: r'email-verify')
+  static const BlockType emailVerify = _$emailVerify;
+  @BuiltValueEnumConst(wireName: r'passkey-appended')
+  static const BlockType passkeyAppended = _$passkeyAppended;
+  @BuiltValueEnumConst(wireName: r'completed')
+  static const BlockType completed = _$completed;
+  @BuiltValueEnumConst(wireName: r'social-verify')
+  static const BlockType socialVerify = _$socialVerify;
+  @BuiltValueEnumConst(wireName: r'login-init')
+  static const BlockType loginInit = _$loginInit;
+  @BuiltValueEnumConst(wireName: r'passkey-verify')
+  static const BlockType passkeyVerify = _$passkeyVerify;
+  @BuiltValueEnumConst(wireName: r'conditional-ui-completed')
+  static const BlockType conditionalUiCompleted = _$conditionalUiCompleted;
+  @BuiltValueEnumConst(wireName: r'post-signup-email-verify')
+  static const BlockType postSignupEmailVerify = _$postSignupEmailVerify;
+  @BuiltValueEnumConst(wireName: r'passkey-append-after-hybrid', fallback: true)
+  static const BlockType passkeyAppendAfterHybrid = _$passkeyAppendAfterHybrid;
+
+  static Serializer<BlockType> get serializer => _$blockTypeSerializer;
+
+  const BlockType._(String name) : super(name);
+
+  static BuiltSet<BlockType> get values => _$values;
+  static BlockType valueOf(String name) => _$valueOf(name);
+}
+
+/// Optionally, enum_class can generate a mixin to go with your enum for use
+/// with Angular. It exposes your enum constants as getters. So, if you mix it
+/// in to your Dart component class, the values become available to the
+/// corresponding Angular template.
+///
+/// Trigger mixin generation by writing a line like this one next to your enum.
+abstract class BlockTypeMixin = Object with _$BlockTypeMixin;
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/block_type.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/block_type.g.dart
new file mode 100644
index 0000000..f13f777
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/block_type.g.dart
@@ -0,0 +1,143 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'block_type.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+const BlockType _$signupInit = const BlockType._('signupInit');
+const BlockType _$passkeyAppend = const BlockType._('passkeyAppend');
+const BlockType _$phoneVerify = const BlockType._('phoneVerify');
+const BlockType _$emailVerify = const BlockType._('emailVerify');
+const BlockType _$passkeyAppended = const BlockType._('passkeyAppended');
+const BlockType _$completed = const BlockType._('completed');
+const BlockType _$socialVerify = const BlockType._('socialVerify');
+const BlockType _$loginInit = const BlockType._('loginInit');
+const BlockType _$passkeyVerify = const BlockType._('passkeyVerify');
+const BlockType _$conditionalUiCompleted =
+    const BlockType._('conditionalUiCompleted');
+const BlockType _$postSignupEmailVerify =
+    const BlockType._('postSignupEmailVerify');
+const BlockType _$passkeyAppendAfterHybrid =
+    const BlockType._('passkeyAppendAfterHybrid');
+
+BlockType _$valueOf(String name) {
+  switch (name) {
+    case 'signupInit':
+      return _$signupInit;
+    case 'passkeyAppend':
+      return _$passkeyAppend;
+    case 'phoneVerify':
+      return _$phoneVerify;
+    case 'emailVerify':
+      return _$emailVerify;
+    case 'passkeyAppended':
+      return _$passkeyAppended;
+    case 'completed':
+      return _$completed;
+    case 'socialVerify':
+      return _$socialVerify;
+    case 'loginInit':
+      return _$loginInit;
+    case 'passkeyVerify':
+      return _$passkeyVerify;
+    case 'conditionalUiCompleted':
+      return _$conditionalUiCompleted;
+    case 'postSignupEmailVerify':
+      return _$postSignupEmailVerify;
+    case 'passkeyAppendAfterHybrid':
+      return _$passkeyAppendAfterHybrid;
+    default:
+      return _$passkeyAppendAfterHybrid;
+  }
+}
+
+final BuiltSet<BlockType> _$values = new BuiltSet<BlockType>(const <BlockType>[
+  _$signupInit,
+  _$passkeyAppend,
+  _$phoneVerify,
+  _$emailVerify,
+  _$passkeyAppended,
+  _$completed,
+  _$socialVerify,
+  _$loginInit,
+  _$passkeyVerify,
+  _$conditionalUiCompleted,
+  _$postSignupEmailVerify,
+  _$passkeyAppendAfterHybrid,
+]);
+
+class _$BlockTypeMeta {
+  const _$BlockTypeMeta();
+  BlockType get signupInit => _$signupInit;
+  BlockType get passkeyAppend => _$passkeyAppend;
+  BlockType get phoneVerify => _$phoneVerify;
+  BlockType get emailVerify => _$emailVerify;
+  BlockType get passkeyAppended => _$passkeyAppended;
+  BlockType get completed => _$completed;
+  BlockType get socialVerify => _$socialVerify;
+  BlockType get loginInit => _$loginInit;
+  BlockType get passkeyVerify => _$passkeyVerify;
+  BlockType get conditionalUiCompleted => _$conditionalUiCompleted;
+  BlockType get postSignupEmailVerify => _$postSignupEmailVerify;
+  BlockType get passkeyAppendAfterHybrid => _$passkeyAppendAfterHybrid;
+  BlockType valueOf(String name) => _$valueOf(name);
+  BuiltSet<BlockType> get values => _$values;
+}
+
+abstract class _$BlockTypeMixin {
+  // ignore: non_constant_identifier_names
+  _$BlockTypeMeta get BlockType => const _$BlockTypeMeta();
+}
+
+Serializer<BlockType> _$blockTypeSerializer = new _$BlockTypeSerializer();
+
+class _$BlockTypeSerializer implements PrimitiveSerializer<BlockType> {
+  static const Map<String, Object> _toWire = const <String, Object>{
+    'signupInit': 'signup-init',
+    'passkeyAppend': 'passkey-append',
+    'phoneVerify': 'phone-verify',
+    'emailVerify': 'email-verify',
+    'passkeyAppended': 'passkey-appended',
+    'completed': 'completed',
+    'socialVerify': 'social-verify',
+    'loginInit': 'login-init',
+    'passkeyVerify': 'passkey-verify',
+    'conditionalUiCompleted': 'conditional-ui-completed',
+    'postSignupEmailVerify': 'post-signup-email-verify',
+    'passkeyAppendAfterHybrid': 'passkey-append-after-hybrid',
+  };
+  static const Map<Object, String> _fromWire = const <Object, String>{
+    'signup-init': 'signupInit',
+    'passkey-append': 'passkeyAppend',
+    'phone-verify': 'phoneVerify',
+    'email-verify': 'emailVerify',
+    'passkey-appended': 'passkeyAppended',
+    'completed': 'completed',
+    'social-verify': 'socialVerify',
+    'login-init': 'loginInit',
+    'passkey-verify': 'passkeyVerify',
+    'conditional-ui-completed': 'conditionalUiCompleted',
+    'post-signup-email-verify': 'postSignupEmailVerify',
+    'passkey-append-after-hybrid': 'passkeyAppendAfterHybrid',
+  };
+
+  @override
+  final Iterable<Type> types = const <Type>[BlockType];
+  @override
+  final String wireName = 'BlockType';
+
+  @override
+  Object serialize(Serializers serializers, BlockType object,
+          {FullType specifiedType = FullType.unspecified}) =>
+      _toWire[object.name] ?? object.name;
+
+  @override
+  BlockType deserialize(Serializers serializers, Object serialized,
+          {FullType specifiedType = FullType.unspecified}) =>
+      BlockType.valueOf(
+          _fromWire[serialized] ?? (serialized is String ? serialized : ''));
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/client_capabilities.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/client_capabilities.dart
new file mode 100644
index 0000000..9f979da
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/client_capabilities.dart
@@ -0,0 +1,185 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'client_capabilities.g.dart';
+
+/// ClientCapabilities
+///
+/// Properties:
+/// * [conditionalCreate]
+/// * [conditionalMediation]
+/// * [hybridTransport]
+/// * [passkeyPlatformAuthenticator]
+/// * [userVerifyingPlatformAuthenticator]
+@BuiltValue()
+abstract class ClientCapabilities
+    implements Built<ClientCapabilities, ClientCapabilitiesBuilder> {
+  @BuiltValueField(wireName: r'conditionalCreate')
+  bool? get conditionalCreate;
+
+  @BuiltValueField(wireName: r'conditionalMediation')
+  bool? get conditionalMediation;
+
+  @BuiltValueField(wireName: r'hybridTransport')
+  bool? get hybridTransport;
+
+  @BuiltValueField(wireName: r'passkeyPlatformAuthenticator')
+  bool? get passkeyPlatformAuthenticator;
+
+  @BuiltValueField(wireName: r'userVerifyingPlatformAuthenticator')
+  bool? get userVerifyingPlatformAuthenticator;
+
+  ClientCapabilities._();
+
+  factory ClientCapabilities([void updates(ClientCapabilitiesBuilder b)]) =
+      _$ClientCapabilities;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(ClientCapabilitiesBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<ClientCapabilities> get serializer =>
+      _$ClientCapabilitiesSerializer();
+}
+
+class _$ClientCapabilitiesSerializer
+    implements PrimitiveSerializer<ClientCapabilities> {
+  @override
+  final Iterable<Type> types = const [ClientCapabilities, _$ClientCapabilities];
+
+  @override
+  final String wireName = r'ClientCapabilities';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    ClientCapabilities object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    if (object.conditionalCreate != null) {
+      yield r'conditionalCreate';
+      yield serializers.serialize(
+        object.conditionalCreate,
+        specifiedType: const FullType(bool),
+      );
+    }
+    if (object.conditionalMediation != null) {
+      yield r'conditionalMediation';
+      yield serializers.serialize(
+        object.conditionalMediation,
+        specifiedType: const FullType(bool),
+      );
+    }
+    if (object.hybridTransport != null) {
+      yield r'hybridTransport';
+      yield serializers.serialize(
+        object.hybridTransport,
+        specifiedType: const FullType(bool),
+      );
+    }
+    if (object.passkeyPlatformAuthenticator != null) {
+      yield r'passkeyPlatformAuthenticator';
+      yield serializers.serialize(
+        object.passkeyPlatformAuthenticator,
+        specifiedType: const FullType(bool),
+      );
+    }
+    if (object.userVerifyingPlatformAuthenticator != null) {
+      yield r'userVerifyingPlatformAuthenticator';
+      yield serializers.serialize(
+        object.userVerifyingPlatformAuthenticator,
+        specifiedType: const FullType(bool),
+      );
+    }
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    ClientCapabilities object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required ClientCapabilitiesBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'conditionalCreate':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(bool),
+          ) as bool;
+          result.conditionalCreate = valueDes;
+          break;
+        case r'conditionalMediation':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(bool),
+          ) as bool;
+          result.conditionalMediation = valueDes;
+          break;
+        case r'hybridTransport':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(bool),
+          ) as bool;
+          result.hybridTransport = valueDes;
+          break;
+        case r'passkeyPlatformAuthenticator':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(bool),
+          ) as bool;
+          result.passkeyPlatformAuthenticator = valueDes;
+          break;
+        case r'userVerifyingPlatformAuthenticator':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(bool),
+          ) as bool;
+          result.userVerifyingPlatformAuthenticator = valueDes;
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  ClientCapabilities deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = ClientCapabilitiesBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/client_capabilities.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/client_capabilities.g.dart
new file mode 100644
index 0000000..bc7b684
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/client_capabilities.g.dart
@@ -0,0 +1,158 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'client_capabilities.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$ClientCapabilities extends ClientCapabilities {
+  @override
+  final bool? conditionalCreate;
+  @override
+  final bool? conditionalMediation;
+  @override
+  final bool? hybridTransport;
+  @override
+  final bool? passkeyPlatformAuthenticator;
+  @override
+  final bool? userVerifyingPlatformAuthenticator;
+
+  factory _$ClientCapabilities(
+          [void Function(ClientCapabilitiesBuilder)? updates]) =>
+      (new ClientCapabilitiesBuilder()..update(updates))._build();
+
+  _$ClientCapabilities._(
+      {this.conditionalCreate,
+      this.conditionalMediation,
+      this.hybridTransport,
+      this.passkeyPlatformAuthenticator,
+      this.userVerifyingPlatformAuthenticator})
+      : super._();
+
+  @override
+  ClientCapabilities rebuild(
+          void Function(ClientCapabilitiesBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  ClientCapabilitiesBuilder toBuilder() =>
+      new ClientCapabilitiesBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is ClientCapabilities &&
+        conditionalCreate == other.conditionalCreate &&
+        conditionalMediation == other.conditionalMediation &&
+        hybridTransport == other.hybridTransport &&
+        passkeyPlatformAuthenticator == other.passkeyPlatformAuthenticator &&
+        userVerifyingPlatformAuthenticator ==
+            other.userVerifyingPlatformAuthenticator;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, conditionalCreate.hashCode);
+    _$hash = $jc(_$hash, conditionalMediation.hashCode);
+    _$hash = $jc(_$hash, hybridTransport.hashCode);
+    _$hash = $jc(_$hash, passkeyPlatformAuthenticator.hashCode);
+    _$hash = $jc(_$hash, userVerifyingPlatformAuthenticator.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'ClientCapabilities')
+          ..add('conditionalCreate', conditionalCreate)
+          ..add('conditionalMediation', conditionalMediation)
+          ..add('hybridTransport', hybridTransport)
+          ..add('passkeyPlatformAuthenticator', passkeyPlatformAuthenticator)
+          ..add('userVerifyingPlatformAuthenticator',
+              userVerifyingPlatformAuthenticator))
+        .toString();
+  }
+}
+
+class ClientCapabilitiesBuilder
+    implements Builder<ClientCapabilities, ClientCapabilitiesBuilder> {
+  _$ClientCapabilities? _$v;
+
+  bool? _conditionalCreate;
+  bool? get conditionalCreate => _$this._conditionalCreate;
+  set conditionalCreate(bool? conditionalCreate) =>
+      _$this._conditionalCreate = conditionalCreate;
+
+  bool? _conditionalMediation;
+  bool? get conditionalMediation => _$this._conditionalMediation;
+  set conditionalMediation(bool? conditionalMediation) =>
+      _$this._conditionalMediation = conditionalMediation;
+
+  bool? _hybridTransport;
+  bool? get hybridTransport => _$this._hybridTransport;
+  set hybridTransport(bool? hybridTransport) =>
+      _$this._hybridTransport = hybridTransport;
+
+  bool? _passkeyPlatformAuthenticator;
+  bool? get passkeyPlatformAuthenticator =>
+      _$this._passkeyPlatformAuthenticator;
+  set passkeyPlatformAuthenticator(bool? passkeyPlatformAuthenticator) =>
+      _$this._passkeyPlatformAuthenticator = passkeyPlatformAuthenticator;
+
+  bool? _userVerifyingPlatformAuthenticator;
+  bool? get userVerifyingPlatformAuthenticator =>
+      _$this._userVerifyingPlatformAuthenticator;
+  set userVerifyingPlatformAuthenticator(
+          bool? userVerifyingPlatformAuthenticator) =>
+      _$this._userVerifyingPlatformAuthenticator =
+          userVerifyingPlatformAuthenticator;
+
+  ClientCapabilitiesBuilder() {
+    ClientCapabilities._defaults(this);
+  }
+
+  ClientCapabilitiesBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _conditionalCreate = $v.conditionalCreate;
+      _conditionalMediation = $v.conditionalMediation;
+      _hybridTransport = $v.hybridTransport;
+      _passkeyPlatformAuthenticator = $v.passkeyPlatformAuthenticator;
+      _userVerifyingPlatformAuthenticator =
+          $v.userVerifyingPlatformAuthenticator;
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(ClientCapabilities other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$ClientCapabilities;
+  }
+
+  @override
+  void update(void Function(ClientCapabilitiesBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  ClientCapabilities build() => _build();
+
+  _$ClientCapabilities _build() {
+    final _$result = _$v ??
+        new _$ClientCapabilities._(
+            conditionalCreate: conditionalCreate,
+            conditionalMediation: conditionalMediation,
+            hybridTransport: hybridTransport,
+            passkeyPlatformAuthenticator: passkeyPlatformAuthenticator,
+            userVerifyingPlatformAuthenticator:
+                userVerifyingPlatformAuthenticator);
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/client_information.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/client_information.dart
new file mode 100644
index 0000000..4ebe12a
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/client_information.dart
@@ -0,0 +1,260 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:corbado_frontend_api_client/src/model/client_capabilities.dart';
+import 'package:corbado_frontend_api_client/src/model/java_script_high_entropy.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'client_information.g.dart';
+
+/// ClientInformation
+///
+/// Properties:
+/// * [bluetoothAvailable]
+/// * [clientEnvHandle]
+/// * [visitorId]
+/// * [canUsePasskeys] - Deprecated, use isUserVerifyingPlatformAuthenticatorAvailable instead
+/// * [isUserVerifyingPlatformAuthenticatorAvailable]
+/// * [isConditionalMediationAvailable]
+/// * [clientCapabilities]
+/// * [javaScriptHighEntropy]
+/// * [isNative]
+@BuiltValue()
+abstract class ClientInformation
+    implements Built<ClientInformation, ClientInformationBuilder> {
+  @BuiltValueField(wireName: r'bluetoothAvailable')
+  bool? get bluetoothAvailable;
+
+  @BuiltValueField(wireName: r'clientEnvHandle')
+  String? get clientEnvHandle;
+
+  @BuiltValueField(wireName: r'visitorId')
+  String? get visitorId;
+
+  /// Deprecated, use isUserVerifyingPlatformAuthenticatorAvailable instead
+  @BuiltValueField(wireName: r'canUsePasskeys')
+  bool? get canUsePasskeys;
+
+  @BuiltValueField(wireName: r'isUserVerifyingPlatformAuthenticatorAvailable')
+  bool? get isUserVerifyingPlatformAuthenticatorAvailable;
+
+  @BuiltValueField(wireName: r'isConditionalMediationAvailable')
+  bool? get isConditionalMediationAvailable;
+
+  @BuiltValueField(wireName: r'clientCapabilities')
+  ClientCapabilities? get clientCapabilities;
+
+  @BuiltValueField(wireName: r'javaScriptHighEntropy')
+  JavaScriptHighEntropy? get javaScriptHighEntropy;
+
+  @BuiltValueField(wireName: r'isNative')
+  bool? get isNative;
+
+  ClientInformation._();
+
+  factory ClientInformation([void updates(ClientInformationBuilder b)]) =
+      _$ClientInformation;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(ClientInformationBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<ClientInformation> get serializer =>
+      _$ClientInformationSerializer();
+}
+
+class _$ClientInformationSerializer
+    implements PrimitiveSerializer<ClientInformation> {
+  @override
+  final Iterable<Type> types = const [ClientInformation, _$ClientInformation];
+
+  @override
+  final String wireName = r'ClientInformation';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    ClientInformation object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    if (object.bluetoothAvailable != null) {
+      yield r'bluetoothAvailable';
+      yield serializers.serialize(
+        object.bluetoothAvailable,
+        specifiedType: const FullType(bool),
+      );
+    }
+    if (object.clientEnvHandle != null) {
+      yield r'clientEnvHandle';
+      yield serializers.serialize(
+        object.clientEnvHandle,
+        specifiedType: const FullType(String),
+      );
+    }
+    if (object.visitorId != null) {
+      yield r'visitorId';
+      yield serializers.serialize(
+        object.visitorId,
+        specifiedType: const FullType(String),
+      );
+    }
+    if (object.canUsePasskeys != null) {
+      yield r'canUsePasskeys';
+      yield serializers.serialize(
+        object.canUsePasskeys,
+        specifiedType: const FullType(bool),
+      );
+    }
+    if (object.isUserVerifyingPlatformAuthenticatorAvailable != null) {
+      yield r'isUserVerifyingPlatformAuthenticatorAvailable';
+      yield serializers.serialize(
+        object.isUserVerifyingPlatformAuthenticatorAvailable,
+        specifiedType: const FullType(bool),
+      );
+    }
+    if (object.isConditionalMediationAvailable != null) {
+      yield r'isConditionalMediationAvailable';
+      yield serializers.serialize(
+        object.isConditionalMediationAvailable,
+        specifiedType: const FullType(bool),
+      );
+    }
+    if (object.clientCapabilities != null) {
+      yield r'clientCapabilities';
+      yield serializers.serialize(
+        object.clientCapabilities,
+        specifiedType: const FullType(ClientCapabilities),
+      );
+    }
+    if (object.javaScriptHighEntropy != null) {
+      yield r'javaScriptHighEntropy';
+      yield serializers.serialize(
+        object.javaScriptHighEntropy,
+        specifiedType: const FullType(JavaScriptHighEntropy),
+      );
+    }
+    if (object.isNative != null) {
+      yield r'isNative';
+      yield serializers.serialize(
+        object.isNative,
+        specifiedType: const FullType(bool),
+      );
+    }
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    ClientInformation object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required ClientInformationBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'bluetoothAvailable':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(bool),
+          ) as bool;
+          result.bluetoothAvailable = valueDes;
+          break;
+        case r'clientEnvHandle':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.clientEnvHandle = valueDes;
+          break;
+        case r'visitorId':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.visitorId = valueDes;
+          break;
+        case r'canUsePasskeys':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(bool),
+          ) as bool;
+          result.canUsePasskeys = valueDes;
+          break;
+        case r'isUserVerifyingPlatformAuthenticatorAvailable':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(bool),
+          ) as bool;
+          result.isUserVerifyingPlatformAuthenticatorAvailable = valueDes;
+          break;
+        case r'isConditionalMediationAvailable':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(bool),
+          ) as bool;
+          result.isConditionalMediationAvailable = valueDes;
+          break;
+        case r'clientCapabilities':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(ClientCapabilities),
+          ) as ClientCapabilities;
+          result.clientCapabilities.replace(valueDes);
+          break;
+        case r'javaScriptHighEntropy':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(JavaScriptHighEntropy),
+          ) as JavaScriptHighEntropy;
+          result.javaScriptHighEntropy.replace(valueDes);
+          break;
+        case r'isNative':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(bool),
+          ) as bool;
+          result.isNative = valueDes;
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  ClientInformation deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = ClientInformationBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/client_information.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/client_information.g.dart
new file mode 100644
index 0000000..42a2ed0
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/client_information.g.dart
@@ -0,0 +1,228 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'client_information.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$ClientInformation extends ClientInformation {
+  @override
+  final bool? bluetoothAvailable;
+  @override
+  final String? clientEnvHandle;
+  @override
+  final String? visitorId;
+  @override
+  final bool? canUsePasskeys;
+  @override
+  final bool? isUserVerifyingPlatformAuthenticatorAvailable;
+  @override
+  final bool? isConditionalMediationAvailable;
+  @override
+  final ClientCapabilities? clientCapabilities;
+  @override
+  final JavaScriptHighEntropy? javaScriptHighEntropy;
+  @override
+  final bool? isNative;
+
+  factory _$ClientInformation(
+          [void Function(ClientInformationBuilder)? updates]) =>
+      (new ClientInformationBuilder()..update(updates))._build();
+
+  _$ClientInformation._(
+      {this.bluetoothAvailable,
+      this.clientEnvHandle,
+      this.visitorId,
+      this.canUsePasskeys,
+      this.isUserVerifyingPlatformAuthenticatorAvailable,
+      this.isConditionalMediationAvailable,
+      this.clientCapabilities,
+      this.javaScriptHighEntropy,
+      this.isNative})
+      : super._();
+
+  @override
+  ClientInformation rebuild(void Function(ClientInformationBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  ClientInformationBuilder toBuilder() =>
+      new ClientInformationBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is ClientInformation &&
+        bluetoothAvailable == other.bluetoothAvailable &&
+        clientEnvHandle == other.clientEnvHandle &&
+        visitorId == other.visitorId &&
+        canUsePasskeys == other.canUsePasskeys &&
+        isUserVerifyingPlatformAuthenticatorAvailable ==
+            other.isUserVerifyingPlatformAuthenticatorAvailable &&
+        isConditionalMediationAvailable ==
+            other.isConditionalMediationAvailable &&
+        clientCapabilities == other.clientCapabilities &&
+        javaScriptHighEntropy == other.javaScriptHighEntropy &&
+        isNative == other.isNative;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, bluetoothAvailable.hashCode);
+    _$hash = $jc(_$hash, clientEnvHandle.hashCode);
+    _$hash = $jc(_$hash, visitorId.hashCode);
+    _$hash = $jc(_$hash, canUsePasskeys.hashCode);
+    _$hash =
+        $jc(_$hash, isUserVerifyingPlatformAuthenticatorAvailable.hashCode);
+    _$hash = $jc(_$hash, isConditionalMediationAvailable.hashCode);
+    _$hash = $jc(_$hash, clientCapabilities.hashCode);
+    _$hash = $jc(_$hash, javaScriptHighEntropy.hashCode);
+    _$hash = $jc(_$hash, isNative.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'ClientInformation')
+          ..add('bluetoothAvailable', bluetoothAvailable)
+          ..add('clientEnvHandle', clientEnvHandle)
+          ..add('visitorId', visitorId)
+          ..add('canUsePasskeys', canUsePasskeys)
+          ..add('isUserVerifyingPlatformAuthenticatorAvailable',
+              isUserVerifyingPlatformAuthenticatorAvailable)
+          ..add('isConditionalMediationAvailable',
+              isConditionalMediationAvailable)
+          ..add('clientCapabilities', clientCapabilities)
+          ..add('javaScriptHighEntropy', javaScriptHighEntropy)
+          ..add('isNative', isNative))
+        .toString();
+  }
+}
+
+class ClientInformationBuilder
+    implements Builder<ClientInformation, ClientInformationBuilder> {
+  _$ClientInformation? _$v;
+
+  bool? _bluetoothAvailable;
+  bool? get bluetoothAvailable => _$this._bluetoothAvailable;
+  set bluetoothAvailable(bool? bluetoothAvailable) =>
+      _$this._bluetoothAvailable = bluetoothAvailable;
+
+  String? _clientEnvHandle;
+  String? get clientEnvHandle => _$this._clientEnvHandle;
+  set clientEnvHandle(String? clientEnvHandle) =>
+      _$this._clientEnvHandle = clientEnvHandle;
+
+  String? _visitorId;
+  String? get visitorId => _$this._visitorId;
+  set visitorId(String? visitorId) => _$this._visitorId = visitorId;
+
+  bool? _canUsePasskeys;
+  bool? get canUsePasskeys => _$this._canUsePasskeys;
+  set canUsePasskeys(bool? canUsePasskeys) =>
+      _$this._canUsePasskeys = canUsePasskeys;
+
+  bool? _isUserVerifyingPlatformAuthenticatorAvailable;
+  bool? get isUserVerifyingPlatformAuthenticatorAvailable =>
+      _$this._isUserVerifyingPlatformAuthenticatorAvailable;
+  set isUserVerifyingPlatformAuthenticatorAvailable(
+          bool? isUserVerifyingPlatformAuthenticatorAvailable) =>
+      _$this._isUserVerifyingPlatformAuthenticatorAvailable =
+          isUserVerifyingPlatformAuthenticatorAvailable;
+
+  bool? _isConditionalMediationAvailable;
+  bool? get isConditionalMediationAvailable =>
+      _$this._isConditionalMediationAvailable;
+  set isConditionalMediationAvailable(bool? isConditionalMediationAvailable) =>
+      _$this._isConditionalMediationAvailable = isConditionalMediationAvailable;
+
+  ClientCapabilitiesBuilder? _clientCapabilities;
+  ClientCapabilitiesBuilder get clientCapabilities =>
+      _$this._clientCapabilities ??= new ClientCapabilitiesBuilder();
+  set clientCapabilities(ClientCapabilitiesBuilder? clientCapabilities) =>
+      _$this._clientCapabilities = clientCapabilities;
+
+  JavaScriptHighEntropyBuilder? _javaScriptHighEntropy;
+  JavaScriptHighEntropyBuilder get javaScriptHighEntropy =>
+      _$this._javaScriptHighEntropy ??= new JavaScriptHighEntropyBuilder();
+  set javaScriptHighEntropy(
+          JavaScriptHighEntropyBuilder? javaScriptHighEntropy) =>
+      _$this._javaScriptHighEntropy = javaScriptHighEntropy;
+
+  bool? _isNative;
+  bool? get isNative => _$this._isNative;
+  set isNative(bool? isNative) => _$this._isNative = isNative;
+
+  ClientInformationBuilder() {
+    ClientInformation._defaults(this);
+  }
+
+  ClientInformationBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _bluetoothAvailable = $v.bluetoothAvailable;
+      _clientEnvHandle = $v.clientEnvHandle;
+      _visitorId = $v.visitorId;
+      _canUsePasskeys = $v.canUsePasskeys;
+      _isUserVerifyingPlatformAuthenticatorAvailable =
+          $v.isUserVerifyingPlatformAuthenticatorAvailable;
+      _isConditionalMediationAvailable = $v.isConditionalMediationAvailable;
+      _clientCapabilities = $v.clientCapabilities?.toBuilder();
+      _javaScriptHighEntropy = $v.javaScriptHighEntropy?.toBuilder();
+      _isNative = $v.isNative;
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(ClientInformation other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$ClientInformation;
+  }
+
+  @override
+  void update(void Function(ClientInformationBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  ClientInformation build() => _build();
+
+  _$ClientInformation _build() {
+    _$ClientInformation _$result;
+    try {
+      _$result = _$v ??
+          new _$ClientInformation._(
+              bluetoothAvailable: bluetoothAvailable,
+              clientEnvHandle: clientEnvHandle,
+              visitorId: visitorId,
+              canUsePasskeys: canUsePasskeys,
+              isUserVerifyingPlatformAuthenticatorAvailable:
+                  isUserVerifyingPlatformAuthenticatorAvailable,
+              isConditionalMediationAvailable: isConditionalMediationAvailable,
+              clientCapabilities: _clientCapabilities?.build(),
+              javaScriptHighEntropy: _javaScriptHighEntropy?.build(),
+              isNative: isNative);
+    } catch (_) {
+      late String _$failedField;
+      try {
+        _$failedField = 'clientCapabilities';
+        _clientCapabilities?.build();
+        _$failedField = 'javaScriptHighEntropy';
+        _javaScriptHighEntropy?.build();
+      } catch (e) {
+        throw new BuiltValueNestedFieldError(
+            r'ClientInformation', _$failedField, e.toString());
+      }
+      rethrow;
+    }
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_append_finish_req.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_append_finish_req.dart
new file mode 100644
index 0000000..3448e2f
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_append_finish_req.dart
@@ -0,0 +1,115 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'connect_append_finish_req.g.dart';
+
+/// ConnectAppendFinishReq
+///
+/// Properties:
+/// * [attestationResponse]
+@BuiltValue()
+abstract class ConnectAppendFinishReq
+    implements Built<ConnectAppendFinishReq, ConnectAppendFinishReqBuilder> {
+  @BuiltValueField(wireName: r'attestationResponse')
+  String get attestationResponse;
+
+  ConnectAppendFinishReq._();
+
+  factory ConnectAppendFinishReq(
+          [void updates(ConnectAppendFinishReqBuilder b)]) =
+      _$ConnectAppendFinishReq;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(ConnectAppendFinishReqBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<ConnectAppendFinishReq> get serializer =>
+      _$ConnectAppendFinishReqSerializer();
+}
+
+class _$ConnectAppendFinishReqSerializer
+    implements PrimitiveSerializer<ConnectAppendFinishReq> {
+  @override
+  final Iterable<Type> types = const [
+    ConnectAppendFinishReq,
+    _$ConnectAppendFinishReq
+  ];
+
+  @override
+  final String wireName = r'ConnectAppendFinishReq';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    ConnectAppendFinishReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'attestationResponse';
+    yield serializers.serialize(
+      object.attestationResponse,
+      specifiedType: const FullType(String),
+    );
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    ConnectAppendFinishReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required ConnectAppendFinishReqBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'attestationResponse':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.attestationResponse = valueDes;
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  ConnectAppendFinishReq deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = ConnectAppendFinishReqBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_append_finish_req.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_append_finish_req.g.dart
new file mode 100644
index 0000000..7f485ac
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_append_finish_req.g.dart
@@ -0,0 +1,102 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'connect_append_finish_req.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$ConnectAppendFinishReq extends ConnectAppendFinishReq {
+  @override
+  final String attestationResponse;
+
+  factory _$ConnectAppendFinishReq(
+          [void Function(ConnectAppendFinishReqBuilder)? updates]) =>
+      (new ConnectAppendFinishReqBuilder()..update(updates))._build();
+
+  _$ConnectAppendFinishReq._({required this.attestationResponse}) : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        attestationResponse, r'ConnectAppendFinishReq', 'attestationResponse');
+  }
+
+  @override
+  ConnectAppendFinishReq rebuild(
+          void Function(ConnectAppendFinishReqBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  ConnectAppendFinishReqBuilder toBuilder() =>
+      new ConnectAppendFinishReqBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is ConnectAppendFinishReq &&
+        attestationResponse == other.attestationResponse;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, attestationResponse.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'ConnectAppendFinishReq')
+          ..add('attestationResponse', attestationResponse))
+        .toString();
+  }
+}
+
+class ConnectAppendFinishReqBuilder
+    implements Builder<ConnectAppendFinishReq, ConnectAppendFinishReqBuilder> {
+  _$ConnectAppendFinishReq? _$v;
+
+  String? _attestationResponse;
+  String? get attestationResponse => _$this._attestationResponse;
+  set attestationResponse(String? attestationResponse) =>
+      _$this._attestationResponse = attestationResponse;
+
+  ConnectAppendFinishReqBuilder() {
+    ConnectAppendFinishReq._defaults(this);
+  }
+
+  ConnectAppendFinishReqBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _attestationResponse = $v.attestationResponse;
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(ConnectAppendFinishReq other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$ConnectAppendFinishReq;
+  }
+
+  @override
+  void update(void Function(ConnectAppendFinishReqBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  ConnectAppendFinishReq build() => _build();
+
+  _$ConnectAppendFinishReq _build() {
+    final _$result = _$v ??
+        new _$ConnectAppendFinishReq._(
+            attestationResponse: BuiltValueNullFieldError.checkNotNull(
+                attestationResponse,
+                r'ConnectAppendFinishReq',
+                'attestationResponse'));
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_append_finish_rsp.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_append_finish_rsp.dart
new file mode 100644
index 0000000..c03b0c5
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_append_finish_rsp.dart
@@ -0,0 +1,116 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:corbado_frontend_api_client/src/model/passkey_operation.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'connect_append_finish_rsp.g.dart';
+
+/// ConnectAppendFinishRsp
+///
+/// Properties:
+/// * [passkeyOperation]
+@BuiltValue()
+abstract class ConnectAppendFinishRsp
+    implements Built<ConnectAppendFinishRsp, ConnectAppendFinishRspBuilder> {
+  @BuiltValueField(wireName: r'passkeyOperation')
+  PasskeyOperation get passkeyOperation;
+
+  ConnectAppendFinishRsp._();
+
+  factory ConnectAppendFinishRsp(
+          [void updates(ConnectAppendFinishRspBuilder b)]) =
+      _$ConnectAppendFinishRsp;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(ConnectAppendFinishRspBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<ConnectAppendFinishRsp> get serializer =>
+      _$ConnectAppendFinishRspSerializer();
+}
+
+class _$ConnectAppendFinishRspSerializer
+    implements PrimitiveSerializer<ConnectAppendFinishRsp> {
+  @override
+  final Iterable<Type> types = const [
+    ConnectAppendFinishRsp,
+    _$ConnectAppendFinishRsp
+  ];
+
+  @override
+  final String wireName = r'ConnectAppendFinishRsp';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    ConnectAppendFinishRsp object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'passkeyOperation';
+    yield serializers.serialize(
+      object.passkeyOperation,
+      specifiedType: const FullType(PasskeyOperation),
+    );
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    ConnectAppendFinishRsp object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required ConnectAppendFinishRspBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'passkeyOperation':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(PasskeyOperation),
+          ) as PasskeyOperation;
+          result.passkeyOperation.replace(valueDes);
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  ConnectAppendFinishRsp deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = ConnectAppendFinishRspBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_append_finish_rsp.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_append_finish_rsp.g.dart
new file mode 100644
index 0000000..8c60bca
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_append_finish_rsp.g.dart
@@ -0,0 +1,113 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'connect_append_finish_rsp.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$ConnectAppendFinishRsp extends ConnectAppendFinishRsp {
+  @override
+  final PasskeyOperation passkeyOperation;
+
+  factory _$ConnectAppendFinishRsp(
+          [void Function(ConnectAppendFinishRspBuilder)? updates]) =>
+      (new ConnectAppendFinishRspBuilder()..update(updates))._build();
+
+  _$ConnectAppendFinishRsp._({required this.passkeyOperation}) : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        passkeyOperation, r'ConnectAppendFinishRsp', 'passkeyOperation');
+  }
+
+  @override
+  ConnectAppendFinishRsp rebuild(
+          void Function(ConnectAppendFinishRspBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  ConnectAppendFinishRspBuilder toBuilder() =>
+      new ConnectAppendFinishRspBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is ConnectAppendFinishRsp &&
+        passkeyOperation == other.passkeyOperation;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, passkeyOperation.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'ConnectAppendFinishRsp')
+          ..add('passkeyOperation', passkeyOperation))
+        .toString();
+  }
+}
+
+class ConnectAppendFinishRspBuilder
+    implements Builder<ConnectAppendFinishRsp, ConnectAppendFinishRspBuilder> {
+  _$ConnectAppendFinishRsp? _$v;
+
+  PasskeyOperationBuilder? _passkeyOperation;
+  PasskeyOperationBuilder get passkeyOperation =>
+      _$this._passkeyOperation ??= new PasskeyOperationBuilder();
+  set passkeyOperation(PasskeyOperationBuilder? passkeyOperation) =>
+      _$this._passkeyOperation = passkeyOperation;
+
+  ConnectAppendFinishRspBuilder() {
+    ConnectAppendFinishRsp._defaults(this);
+  }
+
+  ConnectAppendFinishRspBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _passkeyOperation = $v.passkeyOperation.toBuilder();
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(ConnectAppendFinishRsp other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$ConnectAppendFinishRsp;
+  }
+
+  @override
+  void update(void Function(ConnectAppendFinishRspBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  ConnectAppendFinishRsp build() => _build();
+
+  _$ConnectAppendFinishRsp _build() {
+    _$ConnectAppendFinishRsp _$result;
+    try {
+      _$result = _$v ??
+          new _$ConnectAppendFinishRsp._(
+              passkeyOperation: passkeyOperation.build());
+    } catch (_) {
+      late String _$failedField;
+      try {
+        _$failedField = 'passkeyOperation';
+        passkeyOperation.build();
+      } catch (e) {
+        throw new BuiltValueNestedFieldError(
+            r'ConnectAppendFinishRsp', _$failedField, e.toString());
+      }
+      rethrow;
+    }
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_append_init_req.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_append_init_req.dart
new file mode 100644
index 0000000..0b03681
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_append_init_req.dart
@@ -0,0 +1,134 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:built_collection/built_collection.dart';
+import 'package:corbado_frontend_api_client/src/model/client_information.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'connect_append_init_req.g.dart';
+
+/// ConnectAppendInitReq
+///
+/// Properties:
+/// * [clientInformation]
+/// * [flags]
+@BuiltValue()
+abstract class ConnectAppendInitReq
+    implements Built<ConnectAppendInitReq, ConnectAppendInitReqBuilder> {
+  @BuiltValueField(wireName: r'clientInformation')
+  ClientInformation get clientInformation;
+
+  @BuiltValueField(wireName: r'flags')
+  BuiltMap<String, String> get flags;
+
+  ConnectAppendInitReq._();
+
+  factory ConnectAppendInitReq([void updates(ConnectAppendInitReqBuilder b)]) =
+      _$ConnectAppendInitReq;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(ConnectAppendInitReqBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<ConnectAppendInitReq> get serializer =>
+      _$ConnectAppendInitReqSerializer();
+}
+
+class _$ConnectAppendInitReqSerializer
+    implements PrimitiveSerializer<ConnectAppendInitReq> {
+  @override
+  final Iterable<Type> types = const [
+    ConnectAppendInitReq,
+    _$ConnectAppendInitReq
+  ];
+
+  @override
+  final String wireName = r'ConnectAppendInitReq';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    ConnectAppendInitReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'clientInformation';
+    yield serializers.serialize(
+      object.clientInformation,
+      specifiedType: const FullType(ClientInformation),
+    );
+    yield r'flags';
+    yield serializers.serialize(
+      object.flags,
+      specifiedType:
+          const FullType(BuiltMap, [FullType(String), FullType(String)]),
+    );
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    ConnectAppendInitReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required ConnectAppendInitReqBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'clientInformation':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(ClientInformation),
+          ) as ClientInformation;
+          result.clientInformation.replace(valueDes);
+          break;
+        case r'flags':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType:
+                const FullType(BuiltMap, [FullType(String), FullType(String)]),
+          ) as BuiltMap<String, String>;
+          result.flags.replace(valueDes);
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  ConnectAppendInitReq deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = ConnectAppendInitReqBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_append_init_req.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_append_init_req.g.dart
new file mode 100644
index 0000000..0870c6a
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_append_init_req.g.dart
@@ -0,0 +1,131 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'connect_append_init_req.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$ConnectAppendInitReq extends ConnectAppendInitReq {
+  @override
+  final ClientInformation clientInformation;
+  @override
+  final BuiltMap<String, String> flags;
+
+  factory _$ConnectAppendInitReq(
+          [void Function(ConnectAppendInitReqBuilder)? updates]) =>
+      (new ConnectAppendInitReqBuilder()..update(updates))._build();
+
+  _$ConnectAppendInitReq._(
+      {required this.clientInformation, required this.flags})
+      : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        clientInformation, r'ConnectAppendInitReq', 'clientInformation');
+    BuiltValueNullFieldError.checkNotNull(
+        flags, r'ConnectAppendInitReq', 'flags');
+  }
+
+  @override
+  ConnectAppendInitReq rebuild(
+          void Function(ConnectAppendInitReqBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  ConnectAppendInitReqBuilder toBuilder() =>
+      new ConnectAppendInitReqBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is ConnectAppendInitReq &&
+        clientInformation == other.clientInformation &&
+        flags == other.flags;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, clientInformation.hashCode);
+    _$hash = $jc(_$hash, flags.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'ConnectAppendInitReq')
+          ..add('clientInformation', clientInformation)
+          ..add('flags', flags))
+        .toString();
+  }
+}
+
+class ConnectAppendInitReqBuilder
+    implements Builder<ConnectAppendInitReq, ConnectAppendInitReqBuilder> {
+  _$ConnectAppendInitReq? _$v;
+
+  ClientInformationBuilder? _clientInformation;
+  ClientInformationBuilder get clientInformation =>
+      _$this._clientInformation ??= new ClientInformationBuilder();
+  set clientInformation(ClientInformationBuilder? clientInformation) =>
+      _$this._clientInformation = clientInformation;
+
+  MapBuilder<String, String>? _flags;
+  MapBuilder<String, String> get flags =>
+      _$this._flags ??= new MapBuilder<String, String>();
+  set flags(MapBuilder<String, String>? flags) => _$this._flags = flags;
+
+  ConnectAppendInitReqBuilder() {
+    ConnectAppendInitReq._defaults(this);
+  }
+
+  ConnectAppendInitReqBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _clientInformation = $v.clientInformation.toBuilder();
+      _flags = $v.flags.toBuilder();
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(ConnectAppendInitReq other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$ConnectAppendInitReq;
+  }
+
+  @override
+  void update(void Function(ConnectAppendInitReqBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  ConnectAppendInitReq build() => _build();
+
+  _$ConnectAppendInitReq _build() {
+    _$ConnectAppendInitReq _$result;
+    try {
+      _$result = _$v ??
+          new _$ConnectAppendInitReq._(
+              clientInformation: clientInformation.build(),
+              flags: flags.build());
+    } catch (_) {
+      late String _$failedField;
+      try {
+        _$failedField = 'clientInformation';
+        clientInformation.build();
+        _$failedField = 'flags';
+        flags.build();
+      } catch (e) {
+        throw new BuiltValueNestedFieldError(
+            r'ConnectAppendInitReq', _$failedField, e.toString());
+      }
+      rethrow;
+    }
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_append_init_rsp.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_append_init_rsp.dart
new file mode 100644
index 0000000..eff7282
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_append_init_rsp.dart
@@ -0,0 +1,199 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:built_collection/built_collection.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'connect_append_init_rsp.g.dart';
+
+/// ConnectAppendInitRsp
+///
+/// Properties:
+/// * [processID]
+/// * [expiresAt]
+/// * [frontendApiUrl]
+/// * [appendAllowed]
+/// * [flags]
+/// * [newClientEnvHandle]
+@BuiltValue()
+abstract class ConnectAppendInitRsp
+    implements Built<ConnectAppendInitRsp, ConnectAppendInitRspBuilder> {
+  @BuiltValueField(wireName: r'processID')
+  String get processID;
+
+  @BuiltValueField(wireName: r'expiresAt')
+  int get expiresAt;
+
+  @BuiltValueField(wireName: r'frontendApiUrl')
+  String get frontendApiUrl;
+
+  @BuiltValueField(wireName: r'appendAllowed')
+  bool get appendAllowed;
+
+  @BuiltValueField(wireName: r'flags')
+  BuiltMap<String, String> get flags;
+
+  @BuiltValueField(wireName: r'newClientEnvHandle')
+  String? get newClientEnvHandle;
+
+  ConnectAppendInitRsp._();
+
+  factory ConnectAppendInitRsp([void updates(ConnectAppendInitRspBuilder b)]) =
+      _$ConnectAppendInitRsp;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(ConnectAppendInitRspBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<ConnectAppendInitRsp> get serializer =>
+      _$ConnectAppendInitRspSerializer();
+}
+
+class _$ConnectAppendInitRspSerializer
+    implements PrimitiveSerializer<ConnectAppendInitRsp> {
+  @override
+  final Iterable<Type> types = const [
+    ConnectAppendInitRsp,
+    _$ConnectAppendInitRsp
+  ];
+
+  @override
+  final String wireName = r'ConnectAppendInitRsp';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    ConnectAppendInitRsp object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'processID';
+    yield serializers.serialize(
+      object.processID,
+      specifiedType: const FullType(String),
+    );
+    yield r'expiresAt';
+    yield serializers.serialize(
+      object.expiresAt,
+      specifiedType: const FullType(int),
+    );
+    yield r'frontendApiUrl';
+    yield serializers.serialize(
+      object.frontendApiUrl,
+      specifiedType: const FullType(String),
+    );
+    yield r'appendAllowed';
+    yield serializers.serialize(
+      object.appendAllowed,
+      specifiedType: const FullType(bool),
+    );
+    yield r'flags';
+    yield serializers.serialize(
+      object.flags,
+      specifiedType:
+          const FullType(BuiltMap, [FullType(String), FullType(String)]),
+    );
+    if (object.newClientEnvHandle != null) {
+      yield r'newClientEnvHandle';
+      yield serializers.serialize(
+        object.newClientEnvHandle,
+        specifiedType: const FullType(String),
+      );
+    }
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    ConnectAppendInitRsp object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required ConnectAppendInitRspBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'processID':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.processID = valueDes;
+          break;
+        case r'expiresAt':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(int),
+          ) as int;
+          result.expiresAt = valueDes;
+          break;
+        case r'frontendApiUrl':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.frontendApiUrl = valueDes;
+          break;
+        case r'appendAllowed':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(bool),
+          ) as bool;
+          result.appendAllowed = valueDes;
+          break;
+        case r'flags':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType:
+                const FullType(BuiltMap, [FullType(String), FullType(String)]),
+          ) as BuiltMap<String, String>;
+          result.flags.replace(valueDes);
+          break;
+        case r'newClientEnvHandle':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.newClientEnvHandle = valueDes;
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  ConnectAppendInitRsp deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = ConnectAppendInitRspBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_append_init_rsp.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_append_init_rsp.g.dart
new file mode 100644
index 0000000..14e7db3
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_append_init_rsp.g.dart
@@ -0,0 +1,189 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'connect_append_init_rsp.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$ConnectAppendInitRsp extends ConnectAppendInitRsp {
+  @override
+  final String processID;
+  @override
+  final int expiresAt;
+  @override
+  final String frontendApiUrl;
+  @override
+  final bool appendAllowed;
+  @override
+  final BuiltMap<String, String> flags;
+  @override
+  final String? newClientEnvHandle;
+
+  factory _$ConnectAppendInitRsp(
+          [void Function(ConnectAppendInitRspBuilder)? updates]) =>
+      (new ConnectAppendInitRspBuilder()..update(updates))._build();
+
+  _$ConnectAppendInitRsp._(
+      {required this.processID,
+      required this.expiresAt,
+      required this.frontendApiUrl,
+      required this.appendAllowed,
+      required this.flags,
+      this.newClientEnvHandle})
+      : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        processID, r'ConnectAppendInitRsp', 'processID');
+    BuiltValueNullFieldError.checkNotNull(
+        expiresAt, r'ConnectAppendInitRsp', 'expiresAt');
+    BuiltValueNullFieldError.checkNotNull(
+        frontendApiUrl, r'ConnectAppendInitRsp', 'frontendApiUrl');
+    BuiltValueNullFieldError.checkNotNull(
+        appendAllowed, r'ConnectAppendInitRsp', 'appendAllowed');
+    BuiltValueNullFieldError.checkNotNull(
+        flags, r'ConnectAppendInitRsp', 'flags');
+  }
+
+  @override
+  ConnectAppendInitRsp rebuild(
+          void Function(ConnectAppendInitRspBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  ConnectAppendInitRspBuilder toBuilder() =>
+      new ConnectAppendInitRspBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is ConnectAppendInitRsp &&
+        processID == other.processID &&
+        expiresAt == other.expiresAt &&
+        frontendApiUrl == other.frontendApiUrl &&
+        appendAllowed == other.appendAllowed &&
+        flags == other.flags &&
+        newClientEnvHandle == other.newClientEnvHandle;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, processID.hashCode);
+    _$hash = $jc(_$hash, expiresAt.hashCode);
+    _$hash = $jc(_$hash, frontendApiUrl.hashCode);
+    _$hash = $jc(_$hash, appendAllowed.hashCode);
+    _$hash = $jc(_$hash, flags.hashCode);
+    _$hash = $jc(_$hash, newClientEnvHandle.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'ConnectAppendInitRsp')
+          ..add('processID', processID)
+          ..add('expiresAt', expiresAt)
+          ..add('frontendApiUrl', frontendApiUrl)
+          ..add('appendAllowed', appendAllowed)
+          ..add('flags', flags)
+          ..add('newClientEnvHandle', newClientEnvHandle))
+        .toString();
+  }
+}
+
+class ConnectAppendInitRspBuilder
+    implements Builder<ConnectAppendInitRsp, ConnectAppendInitRspBuilder> {
+  _$ConnectAppendInitRsp? _$v;
+
+  String? _processID;
+  String? get processID => _$this._processID;
+  set processID(String? processID) => _$this._processID = processID;
+
+  int? _expiresAt;
+  int? get expiresAt => _$this._expiresAt;
+  set expiresAt(int? expiresAt) => _$this._expiresAt = expiresAt;
+
+  String? _frontendApiUrl;
+  String? get frontendApiUrl => _$this._frontendApiUrl;
+  set frontendApiUrl(String? frontendApiUrl) =>
+      _$this._frontendApiUrl = frontendApiUrl;
+
+  bool? _appendAllowed;
+  bool? get appendAllowed => _$this._appendAllowed;
+  set appendAllowed(bool? appendAllowed) =>
+      _$this._appendAllowed = appendAllowed;
+
+  MapBuilder<String, String>? _flags;
+  MapBuilder<String, String> get flags =>
+      _$this._flags ??= new MapBuilder<String, String>();
+  set flags(MapBuilder<String, String>? flags) => _$this._flags = flags;
+
+  String? _newClientEnvHandle;
+  String? get newClientEnvHandle => _$this._newClientEnvHandle;
+  set newClientEnvHandle(String? newClientEnvHandle) =>
+      _$this._newClientEnvHandle = newClientEnvHandle;
+
+  ConnectAppendInitRspBuilder() {
+    ConnectAppendInitRsp._defaults(this);
+  }
+
+  ConnectAppendInitRspBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _processID = $v.processID;
+      _expiresAt = $v.expiresAt;
+      _frontendApiUrl = $v.frontendApiUrl;
+      _appendAllowed = $v.appendAllowed;
+      _flags = $v.flags.toBuilder();
+      _newClientEnvHandle = $v.newClientEnvHandle;
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(ConnectAppendInitRsp other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$ConnectAppendInitRsp;
+  }
+
+  @override
+  void update(void Function(ConnectAppendInitRspBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  ConnectAppendInitRsp build() => _build();
+
+  _$ConnectAppendInitRsp _build() {
+    _$ConnectAppendInitRsp _$result;
+    try {
+      _$result = _$v ??
+          new _$ConnectAppendInitRsp._(
+              processID: BuiltValueNullFieldError.checkNotNull(
+                  processID, r'ConnectAppendInitRsp', 'processID'),
+              expiresAt: BuiltValueNullFieldError.checkNotNull(
+                  expiresAt, r'ConnectAppendInitRsp', 'expiresAt'),
+              frontendApiUrl: BuiltValueNullFieldError.checkNotNull(
+                  frontendApiUrl, r'ConnectAppendInitRsp', 'frontendApiUrl'),
+              appendAllowed: BuiltValueNullFieldError.checkNotNull(
+                  appendAllowed, r'ConnectAppendInitRsp', 'appendAllowed'),
+              flags: flags.build(),
+              newClientEnvHandle: newClientEnvHandle);
+    } catch (_) {
+      late String _$failedField;
+      try {
+        _$failedField = 'flags';
+        flags.build();
+      } catch (e) {
+        throw new BuiltValueNestedFieldError(
+            r'ConnectAppendInitRsp', _$failedField, e.toString());
+      }
+      rethrow;
+    }
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_append_start_req.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_append_start_req.dart
new file mode 100644
index 0000000..a575277
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_append_start_req.dart
@@ -0,0 +1,148 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'connect_append_start_req.g.dart';
+
+/// ConnectAppendStartReq
+///
+/// Properties:
+/// * [appendTokenValue]
+/// * [loadedMs]
+/// * [forcePasskeyAppend]
+@BuiltValue()
+abstract class ConnectAppendStartReq
+    implements Built<ConnectAppendStartReq, ConnectAppendStartReqBuilder> {
+  @BuiltValueField(wireName: r'appendTokenValue')
+  String get appendTokenValue;
+
+  @BuiltValueField(wireName: r'loadedMs')
+  int get loadedMs;
+
+  @BuiltValueField(wireName: r'forcePasskeyAppend')
+  bool? get forcePasskeyAppend;
+
+  ConnectAppendStartReq._();
+
+  factory ConnectAppendStartReq(
+      [void updates(ConnectAppendStartReqBuilder b)]) = _$ConnectAppendStartReq;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(ConnectAppendStartReqBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<ConnectAppendStartReq> get serializer =>
+      _$ConnectAppendStartReqSerializer();
+}
+
+class _$ConnectAppendStartReqSerializer
+    implements PrimitiveSerializer<ConnectAppendStartReq> {
+  @override
+  final Iterable<Type> types = const [
+    ConnectAppendStartReq,
+    _$ConnectAppendStartReq
+  ];
+
+  @override
+  final String wireName = r'ConnectAppendStartReq';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    ConnectAppendStartReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'appendTokenValue';
+    yield serializers.serialize(
+      object.appendTokenValue,
+      specifiedType: const FullType(String),
+    );
+    yield r'loadedMs';
+    yield serializers.serialize(
+      object.loadedMs,
+      specifiedType: const FullType(int),
+    );
+    if (object.forcePasskeyAppend != null) {
+      yield r'forcePasskeyAppend';
+      yield serializers.serialize(
+        object.forcePasskeyAppend,
+        specifiedType: const FullType(bool),
+      );
+    }
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    ConnectAppendStartReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required ConnectAppendStartReqBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'appendTokenValue':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.appendTokenValue = valueDes;
+          break;
+        case r'loadedMs':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(int),
+          ) as int;
+          result.loadedMs = valueDes;
+          break;
+        case r'forcePasskeyAppend':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(bool),
+          ) as bool;
+          result.forcePasskeyAppend = valueDes;
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  ConnectAppendStartReq deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = ConnectAppendStartReqBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_append_start_req.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_append_start_req.g.dart
new file mode 100644
index 0000000..9aee9cb
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_append_start_req.g.dart
@@ -0,0 +1,130 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'connect_append_start_req.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$ConnectAppendStartReq extends ConnectAppendStartReq {
+  @override
+  final String appendTokenValue;
+  @override
+  final int loadedMs;
+  @override
+  final bool? forcePasskeyAppend;
+
+  factory _$ConnectAppendStartReq(
+          [void Function(ConnectAppendStartReqBuilder)? updates]) =>
+      (new ConnectAppendStartReqBuilder()..update(updates))._build();
+
+  _$ConnectAppendStartReq._(
+      {required this.appendTokenValue,
+      required this.loadedMs,
+      this.forcePasskeyAppend})
+      : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        appendTokenValue, r'ConnectAppendStartReq', 'appendTokenValue');
+    BuiltValueNullFieldError.checkNotNull(
+        loadedMs, r'ConnectAppendStartReq', 'loadedMs');
+  }
+
+  @override
+  ConnectAppendStartReq rebuild(
+          void Function(ConnectAppendStartReqBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  ConnectAppendStartReqBuilder toBuilder() =>
+      new ConnectAppendStartReqBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is ConnectAppendStartReq &&
+        appendTokenValue == other.appendTokenValue &&
+        loadedMs == other.loadedMs &&
+        forcePasskeyAppend == other.forcePasskeyAppend;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, appendTokenValue.hashCode);
+    _$hash = $jc(_$hash, loadedMs.hashCode);
+    _$hash = $jc(_$hash, forcePasskeyAppend.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'ConnectAppendStartReq')
+          ..add('appendTokenValue', appendTokenValue)
+          ..add('loadedMs', loadedMs)
+          ..add('forcePasskeyAppend', forcePasskeyAppend))
+        .toString();
+  }
+}
+
+class ConnectAppendStartReqBuilder
+    implements Builder<ConnectAppendStartReq, ConnectAppendStartReqBuilder> {
+  _$ConnectAppendStartReq? _$v;
+
+  String? _appendTokenValue;
+  String? get appendTokenValue => _$this._appendTokenValue;
+  set appendTokenValue(String? appendTokenValue) =>
+      _$this._appendTokenValue = appendTokenValue;
+
+  int? _loadedMs;
+  int? get loadedMs => _$this._loadedMs;
+  set loadedMs(int? loadedMs) => _$this._loadedMs = loadedMs;
+
+  bool? _forcePasskeyAppend;
+  bool? get forcePasskeyAppend => _$this._forcePasskeyAppend;
+  set forcePasskeyAppend(bool? forcePasskeyAppend) =>
+      _$this._forcePasskeyAppend = forcePasskeyAppend;
+
+  ConnectAppendStartReqBuilder() {
+    ConnectAppendStartReq._defaults(this);
+  }
+
+  ConnectAppendStartReqBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _appendTokenValue = $v.appendTokenValue;
+      _loadedMs = $v.loadedMs;
+      _forcePasskeyAppend = $v.forcePasskeyAppend;
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(ConnectAppendStartReq other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$ConnectAppendStartReq;
+  }
+
+  @override
+  void update(void Function(ConnectAppendStartReqBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  ConnectAppendStartReq build() => _build();
+
+  _$ConnectAppendStartReq _build() {
+    final _$result = _$v ??
+        new _$ConnectAppendStartReq._(
+            appendTokenValue: BuiltValueNullFieldError.checkNotNull(
+                appendTokenValue, r'ConnectAppendStartReq', 'appendTokenValue'),
+            loadedMs: BuiltValueNullFieldError.checkNotNull(
+                loadedMs, r'ConnectAppendStartReq', 'loadedMs'),
+            forcePasskeyAppend: forcePasskeyAppend);
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_append_start_rsp.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_append_start_rsp.dart
new file mode 100644
index 0000000..79afc0c
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_append_start_rsp.dart
@@ -0,0 +1,154 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:built_collection/built_collection.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'connect_append_start_rsp.g.dart';
+
+/// ConnectAppendStartRsp
+///
+/// Properties:
+/// * [attestationOptions]
+/// * [variant]
+@BuiltValue()
+abstract class ConnectAppendStartRsp
+    implements Built<ConnectAppendStartRsp, ConnectAppendStartRspBuilder> {
+  @BuiltValueField(wireName: r'attestationOptions')
+  String get attestationOptions;
+
+  @BuiltValueField(wireName: r'variant')
+  ConnectAppendStartRspVariantEnum get variant;
+  // enum variantEnum {  default,  after-hybrid,  after-error,  };
+
+  ConnectAppendStartRsp._();
+
+  factory ConnectAppendStartRsp(
+      [void updates(ConnectAppendStartRspBuilder b)]) = _$ConnectAppendStartRsp;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(ConnectAppendStartRspBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<ConnectAppendStartRsp> get serializer =>
+      _$ConnectAppendStartRspSerializer();
+}
+
+class _$ConnectAppendStartRspSerializer
+    implements PrimitiveSerializer<ConnectAppendStartRsp> {
+  @override
+  final Iterable<Type> types = const [
+    ConnectAppendStartRsp,
+    _$ConnectAppendStartRsp
+  ];
+
+  @override
+  final String wireName = r'ConnectAppendStartRsp';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    ConnectAppendStartRsp object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'attestationOptions';
+    yield serializers.serialize(
+      object.attestationOptions,
+      specifiedType: const FullType(String),
+    );
+    yield r'variant';
+    yield serializers.serialize(
+      object.variant,
+      specifiedType: const FullType(ConnectAppendStartRspVariantEnum),
+    );
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    ConnectAppendStartRsp object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required ConnectAppendStartRspBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'attestationOptions':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.attestationOptions = valueDes;
+          break;
+        case r'variant':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(ConnectAppendStartRspVariantEnum),
+          ) as ConnectAppendStartRspVariantEnum;
+          result.variant = valueDes;
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  ConnectAppendStartRsp deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = ConnectAppendStartRspBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
+
+class ConnectAppendStartRspVariantEnum extends EnumClass {
+  @BuiltValueEnumConst(wireName: r'default')
+  static const ConnectAppendStartRspVariantEnum default_ =
+      _$connectAppendStartRspVariantEnum_default_;
+  @BuiltValueEnumConst(wireName: r'after-hybrid')
+  static const ConnectAppendStartRspVariantEnum afterHybrid =
+      _$connectAppendStartRspVariantEnum_afterHybrid;
+  @BuiltValueEnumConst(wireName: r'after-error', fallback: true)
+  static const ConnectAppendStartRspVariantEnum afterError =
+      _$connectAppendStartRspVariantEnum_afterError;
+
+  static Serializer<ConnectAppendStartRspVariantEnum> get serializer =>
+      _$connectAppendStartRspVariantEnumSerializer;
+
+  const ConnectAppendStartRspVariantEnum._(String name) : super(name);
+
+  static BuiltSet<ConnectAppendStartRspVariantEnum> get values =>
+      _$connectAppendStartRspVariantEnumValues;
+  static ConnectAppendStartRspVariantEnum valueOf(String name) =>
+      _$connectAppendStartRspVariantEnumValueOf(name);
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_append_start_rsp.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_append_start_rsp.g.dart
new file mode 100644
index 0000000..f80e3df
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_append_start_rsp.g.dart
@@ -0,0 +1,187 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'connect_append_start_rsp.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+const ConnectAppendStartRspVariantEnum
+    _$connectAppendStartRspVariantEnum_default_ =
+    const ConnectAppendStartRspVariantEnum._('default_');
+const ConnectAppendStartRspVariantEnum
+    _$connectAppendStartRspVariantEnum_afterHybrid =
+    const ConnectAppendStartRspVariantEnum._('afterHybrid');
+const ConnectAppendStartRspVariantEnum
+    _$connectAppendStartRspVariantEnum_afterError =
+    const ConnectAppendStartRspVariantEnum._('afterError');
+
+ConnectAppendStartRspVariantEnum _$connectAppendStartRspVariantEnumValueOf(
+    String name) {
+  switch (name) {
+    case 'default_':
+      return _$connectAppendStartRspVariantEnum_default_;
+    case 'afterHybrid':
+      return _$connectAppendStartRspVariantEnum_afterHybrid;
+    case 'afterError':
+      return _$connectAppendStartRspVariantEnum_afterError;
+    default:
+      return _$connectAppendStartRspVariantEnum_afterError;
+  }
+}
+
+final BuiltSet<ConnectAppendStartRspVariantEnum>
+    _$connectAppendStartRspVariantEnumValues = new BuiltSet<
+        ConnectAppendStartRspVariantEnum>(const <ConnectAppendStartRspVariantEnum>[
+  _$connectAppendStartRspVariantEnum_default_,
+  _$connectAppendStartRspVariantEnum_afterHybrid,
+  _$connectAppendStartRspVariantEnum_afterError,
+]);
+
+Serializer<ConnectAppendStartRspVariantEnum>
+    _$connectAppendStartRspVariantEnumSerializer =
+    new _$ConnectAppendStartRspVariantEnumSerializer();
+
+class _$ConnectAppendStartRspVariantEnumSerializer
+    implements PrimitiveSerializer<ConnectAppendStartRspVariantEnum> {
+  static const Map<String, Object> _toWire = const <String, Object>{
+    'default_': 'default',
+    'afterHybrid': 'after-hybrid',
+    'afterError': 'after-error',
+  };
+  static const Map<Object, String> _fromWire = const <Object, String>{
+    'default': 'default_',
+    'after-hybrid': 'afterHybrid',
+    'after-error': 'afterError',
+  };
+
+  @override
+  final Iterable<Type> types = const <Type>[ConnectAppendStartRspVariantEnum];
+  @override
+  final String wireName = 'ConnectAppendStartRspVariantEnum';
+
+  @override
+  Object serialize(
+          Serializers serializers, ConnectAppendStartRspVariantEnum object,
+          {FullType specifiedType = FullType.unspecified}) =>
+      _toWire[object.name] ?? object.name;
+
+  @override
+  ConnectAppendStartRspVariantEnum deserialize(
+          Serializers serializers, Object serialized,
+          {FullType specifiedType = FullType.unspecified}) =>
+      ConnectAppendStartRspVariantEnum.valueOf(
+          _fromWire[serialized] ?? (serialized is String ? serialized : ''));
+}
+
+class _$ConnectAppendStartRsp extends ConnectAppendStartRsp {
+  @override
+  final String attestationOptions;
+  @override
+  final ConnectAppendStartRspVariantEnum variant;
+
+  factory _$ConnectAppendStartRsp(
+          [void Function(ConnectAppendStartRspBuilder)? updates]) =>
+      (new ConnectAppendStartRspBuilder()..update(updates))._build();
+
+  _$ConnectAppendStartRsp._(
+      {required this.attestationOptions, required this.variant})
+      : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        attestationOptions, r'ConnectAppendStartRsp', 'attestationOptions');
+    BuiltValueNullFieldError.checkNotNull(
+        variant, r'ConnectAppendStartRsp', 'variant');
+  }
+
+  @override
+  ConnectAppendStartRsp rebuild(
+          void Function(ConnectAppendStartRspBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  ConnectAppendStartRspBuilder toBuilder() =>
+      new ConnectAppendStartRspBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is ConnectAppendStartRsp &&
+        attestationOptions == other.attestationOptions &&
+        variant == other.variant;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, attestationOptions.hashCode);
+    _$hash = $jc(_$hash, variant.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'ConnectAppendStartRsp')
+          ..add('attestationOptions', attestationOptions)
+          ..add('variant', variant))
+        .toString();
+  }
+}
+
+class ConnectAppendStartRspBuilder
+    implements Builder<ConnectAppendStartRsp, ConnectAppendStartRspBuilder> {
+  _$ConnectAppendStartRsp? _$v;
+
+  String? _attestationOptions;
+  String? get attestationOptions => _$this._attestationOptions;
+  set attestationOptions(String? attestationOptions) =>
+      _$this._attestationOptions = attestationOptions;
+
+  ConnectAppendStartRspVariantEnum? _variant;
+  ConnectAppendStartRspVariantEnum? get variant => _$this._variant;
+  set variant(ConnectAppendStartRspVariantEnum? variant) =>
+      _$this._variant = variant;
+
+  ConnectAppendStartRspBuilder() {
+    ConnectAppendStartRsp._defaults(this);
+  }
+
+  ConnectAppendStartRspBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _attestationOptions = $v.attestationOptions;
+      _variant = $v.variant;
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(ConnectAppendStartRsp other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$ConnectAppendStartRsp;
+  }
+
+  @override
+  void update(void Function(ConnectAppendStartRspBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  ConnectAppendStartRsp build() => _build();
+
+  _$ConnectAppendStartRsp _build() {
+    final _$result = _$v ??
+        new _$ConnectAppendStartRsp._(
+            attestationOptions: BuiltValueNullFieldError.checkNotNull(
+                attestationOptions,
+                r'ConnectAppendStartRsp',
+                'attestationOptions'),
+            variant: BuiltValueNullFieldError.checkNotNull(
+                variant, r'ConnectAppendStartRsp', 'variant'));
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_event_create_req.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_event_create_req.dart
new file mode 100644
index 0000000..3037581
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_event_create_req.dart
@@ -0,0 +1,116 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:corbado_frontend_api_client/src/model/passkey_event_type.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'connect_event_create_req.g.dart';
+
+/// ConnectEventCreateReq
+///
+/// Properties:
+/// * [eventType]
+@BuiltValue()
+abstract class ConnectEventCreateReq
+    implements Built<ConnectEventCreateReq, ConnectEventCreateReqBuilder> {
+  @BuiltValueField(wireName: r'eventType')
+  PasskeyEventType get eventType;
+  // enum eventTypeEnum {  login-explicit-abort,  login-error,  login-error-untyped,  login-one-tap-switch,  user-append-after-cross-platform-blacklisted,  user-append-after-login-error-blacklisted,  append-credential-exists,  append-explicit-abort,  append-error,  };
+
+  ConnectEventCreateReq._();
+
+  factory ConnectEventCreateReq(
+      [void updates(ConnectEventCreateReqBuilder b)]) = _$ConnectEventCreateReq;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(ConnectEventCreateReqBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<ConnectEventCreateReq> get serializer =>
+      _$ConnectEventCreateReqSerializer();
+}
+
+class _$ConnectEventCreateReqSerializer
+    implements PrimitiveSerializer<ConnectEventCreateReq> {
+  @override
+  final Iterable<Type> types = const [
+    ConnectEventCreateReq,
+    _$ConnectEventCreateReq
+  ];
+
+  @override
+  final String wireName = r'ConnectEventCreateReq';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    ConnectEventCreateReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'eventType';
+    yield serializers.serialize(
+      object.eventType,
+      specifiedType: const FullType(PasskeyEventType),
+    );
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    ConnectEventCreateReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required ConnectEventCreateReqBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'eventType':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(PasskeyEventType),
+          ) as PasskeyEventType;
+          result.eventType = valueDes;
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  ConnectEventCreateReq deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = ConnectEventCreateReqBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_event_create_req.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_event_create_req.g.dart
new file mode 100644
index 0000000..9fdd61a
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_event_create_req.g.dart
@@ -0,0 +1,98 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'connect_event_create_req.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$ConnectEventCreateReq extends ConnectEventCreateReq {
+  @override
+  final PasskeyEventType eventType;
+
+  factory _$ConnectEventCreateReq(
+          [void Function(ConnectEventCreateReqBuilder)? updates]) =>
+      (new ConnectEventCreateReqBuilder()..update(updates))._build();
+
+  _$ConnectEventCreateReq._({required this.eventType}) : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        eventType, r'ConnectEventCreateReq', 'eventType');
+  }
+
+  @override
+  ConnectEventCreateReq rebuild(
+          void Function(ConnectEventCreateReqBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  ConnectEventCreateReqBuilder toBuilder() =>
+      new ConnectEventCreateReqBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is ConnectEventCreateReq && eventType == other.eventType;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, eventType.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'ConnectEventCreateReq')
+          ..add('eventType', eventType))
+        .toString();
+  }
+}
+
+class ConnectEventCreateReqBuilder
+    implements Builder<ConnectEventCreateReq, ConnectEventCreateReqBuilder> {
+  _$ConnectEventCreateReq? _$v;
+
+  PasskeyEventType? _eventType;
+  PasskeyEventType? get eventType => _$this._eventType;
+  set eventType(PasskeyEventType? eventType) => _$this._eventType = eventType;
+
+  ConnectEventCreateReqBuilder() {
+    ConnectEventCreateReq._defaults(this);
+  }
+
+  ConnectEventCreateReqBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _eventType = $v.eventType;
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(ConnectEventCreateReq other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$ConnectEventCreateReq;
+  }
+
+  @override
+  void update(void Function(ConnectEventCreateReqBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  ConnectEventCreateReq build() => _build();
+
+  _$ConnectEventCreateReq _build() {
+    final _$result = _$v ??
+        new _$ConnectEventCreateReq._(
+            eventType: BuiltValueNullFieldError.checkNotNull(
+                eventType, r'ConnectEventCreateReq', 'eventType'));
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_login_finish_req.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_login_finish_req.dart
new file mode 100644
index 0000000..ab71c01
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_login_finish_req.dart
@@ -0,0 +1,130 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'connect_login_finish_req.g.dart';
+
+/// ConnectLoginFinishReq
+///
+/// Properties:
+/// * [isConditionalUI]
+/// * [assertionResponse]
+@BuiltValue()
+abstract class ConnectLoginFinishReq
+    implements Built<ConnectLoginFinishReq, ConnectLoginFinishReqBuilder> {
+  @BuiltValueField(wireName: r'isConditionalUI')
+  bool get isConditionalUI;
+
+  @BuiltValueField(wireName: r'assertionResponse')
+  String get assertionResponse;
+
+  ConnectLoginFinishReq._();
+
+  factory ConnectLoginFinishReq(
+      [void updates(ConnectLoginFinishReqBuilder b)]) = _$ConnectLoginFinishReq;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(ConnectLoginFinishReqBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<ConnectLoginFinishReq> get serializer =>
+      _$ConnectLoginFinishReqSerializer();
+}
+
+class _$ConnectLoginFinishReqSerializer
+    implements PrimitiveSerializer<ConnectLoginFinishReq> {
+  @override
+  final Iterable<Type> types = const [
+    ConnectLoginFinishReq,
+    _$ConnectLoginFinishReq
+  ];
+
+  @override
+  final String wireName = r'ConnectLoginFinishReq';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    ConnectLoginFinishReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'isConditionalUI';
+    yield serializers.serialize(
+      object.isConditionalUI,
+      specifiedType: const FullType(bool),
+    );
+    yield r'assertionResponse';
+    yield serializers.serialize(
+      object.assertionResponse,
+      specifiedType: const FullType(String),
+    );
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    ConnectLoginFinishReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required ConnectLoginFinishReqBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'isConditionalUI':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(bool),
+          ) as bool;
+          result.isConditionalUI = valueDes;
+          break;
+        case r'assertionResponse':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.assertionResponse = valueDes;
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  ConnectLoginFinishReq deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = ConnectLoginFinishReqBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_login_finish_req.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_login_finish_req.g.dart
new file mode 100644
index 0000000..3ed804d
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_login_finish_req.g.dart
@@ -0,0 +1,119 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'connect_login_finish_req.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$ConnectLoginFinishReq extends ConnectLoginFinishReq {
+  @override
+  final bool isConditionalUI;
+  @override
+  final String assertionResponse;
+
+  factory _$ConnectLoginFinishReq(
+          [void Function(ConnectLoginFinishReqBuilder)? updates]) =>
+      (new ConnectLoginFinishReqBuilder()..update(updates))._build();
+
+  _$ConnectLoginFinishReq._(
+      {required this.isConditionalUI, required this.assertionResponse})
+      : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        isConditionalUI, r'ConnectLoginFinishReq', 'isConditionalUI');
+    BuiltValueNullFieldError.checkNotNull(
+        assertionResponse, r'ConnectLoginFinishReq', 'assertionResponse');
+  }
+
+  @override
+  ConnectLoginFinishReq rebuild(
+          void Function(ConnectLoginFinishReqBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  ConnectLoginFinishReqBuilder toBuilder() =>
+      new ConnectLoginFinishReqBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is ConnectLoginFinishReq &&
+        isConditionalUI == other.isConditionalUI &&
+        assertionResponse == other.assertionResponse;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, isConditionalUI.hashCode);
+    _$hash = $jc(_$hash, assertionResponse.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'ConnectLoginFinishReq')
+          ..add('isConditionalUI', isConditionalUI)
+          ..add('assertionResponse', assertionResponse))
+        .toString();
+  }
+}
+
+class ConnectLoginFinishReqBuilder
+    implements Builder<ConnectLoginFinishReq, ConnectLoginFinishReqBuilder> {
+  _$ConnectLoginFinishReq? _$v;
+
+  bool? _isConditionalUI;
+  bool? get isConditionalUI => _$this._isConditionalUI;
+  set isConditionalUI(bool? isConditionalUI) =>
+      _$this._isConditionalUI = isConditionalUI;
+
+  String? _assertionResponse;
+  String? get assertionResponse => _$this._assertionResponse;
+  set assertionResponse(String? assertionResponse) =>
+      _$this._assertionResponse = assertionResponse;
+
+  ConnectLoginFinishReqBuilder() {
+    ConnectLoginFinishReq._defaults(this);
+  }
+
+  ConnectLoginFinishReqBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _isConditionalUI = $v.isConditionalUI;
+      _assertionResponse = $v.assertionResponse;
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(ConnectLoginFinishReq other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$ConnectLoginFinishReq;
+  }
+
+  @override
+  void update(void Function(ConnectLoginFinishReqBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  ConnectLoginFinishReq build() => _build();
+
+  _$ConnectLoginFinishReq _build() {
+    final _$result = _$v ??
+        new _$ConnectLoginFinishReq._(
+            isConditionalUI: BuiltValueNullFieldError.checkNotNull(
+                isConditionalUI, r'ConnectLoginFinishReq', 'isConditionalUI'),
+            assertionResponse: BuiltValueNullFieldError.checkNotNull(
+                assertionResponse,
+                r'ConnectLoginFinishReq',
+                'assertionResponse'));
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_login_finish_rsp.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_login_finish_rsp.dart
new file mode 100644
index 0000000..3f88022
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_login_finish_rsp.dart
@@ -0,0 +1,131 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:corbado_frontend_api_client/src/model/passkey_operation.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'connect_login_finish_rsp.g.dart';
+
+/// ConnectLoginFinishRsp
+///
+/// Properties:
+/// * [passkeyOperation]
+/// * [session]
+@BuiltValue()
+abstract class ConnectLoginFinishRsp
+    implements Built<ConnectLoginFinishRsp, ConnectLoginFinishRspBuilder> {
+  @BuiltValueField(wireName: r'passkeyOperation')
+  PasskeyOperation get passkeyOperation;
+
+  @BuiltValueField(wireName: r'session')
+  String get session;
+
+  ConnectLoginFinishRsp._();
+
+  factory ConnectLoginFinishRsp(
+      [void updates(ConnectLoginFinishRspBuilder b)]) = _$ConnectLoginFinishRsp;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(ConnectLoginFinishRspBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<ConnectLoginFinishRsp> get serializer =>
+      _$ConnectLoginFinishRspSerializer();
+}
+
+class _$ConnectLoginFinishRspSerializer
+    implements PrimitiveSerializer<ConnectLoginFinishRsp> {
+  @override
+  final Iterable<Type> types = const [
+    ConnectLoginFinishRsp,
+    _$ConnectLoginFinishRsp
+  ];
+
+  @override
+  final String wireName = r'ConnectLoginFinishRsp';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    ConnectLoginFinishRsp object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'passkeyOperation';
+    yield serializers.serialize(
+      object.passkeyOperation,
+      specifiedType: const FullType(PasskeyOperation),
+    );
+    yield r'session';
+    yield serializers.serialize(
+      object.session,
+      specifiedType: const FullType(String),
+    );
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    ConnectLoginFinishRsp object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required ConnectLoginFinishRspBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'passkeyOperation':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(PasskeyOperation),
+          ) as PasskeyOperation;
+          result.passkeyOperation.replace(valueDes);
+          break;
+        case r'session':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.session = valueDes;
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  ConnectLoginFinishRsp deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = ConnectLoginFinishRspBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_login_finish_rsp.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_login_finish_rsp.g.dart
new file mode 100644
index 0000000..fac6856
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_login_finish_rsp.g.dart
@@ -0,0 +1,129 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'connect_login_finish_rsp.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$ConnectLoginFinishRsp extends ConnectLoginFinishRsp {
+  @override
+  final PasskeyOperation passkeyOperation;
+  @override
+  final String session;
+
+  factory _$ConnectLoginFinishRsp(
+          [void Function(ConnectLoginFinishRspBuilder)? updates]) =>
+      (new ConnectLoginFinishRspBuilder()..update(updates))._build();
+
+  _$ConnectLoginFinishRsp._(
+      {required this.passkeyOperation, required this.session})
+      : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        passkeyOperation, r'ConnectLoginFinishRsp', 'passkeyOperation');
+    BuiltValueNullFieldError.checkNotNull(
+        session, r'ConnectLoginFinishRsp', 'session');
+  }
+
+  @override
+  ConnectLoginFinishRsp rebuild(
+          void Function(ConnectLoginFinishRspBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  ConnectLoginFinishRspBuilder toBuilder() =>
+      new ConnectLoginFinishRspBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is ConnectLoginFinishRsp &&
+        passkeyOperation == other.passkeyOperation &&
+        session == other.session;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, passkeyOperation.hashCode);
+    _$hash = $jc(_$hash, session.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'ConnectLoginFinishRsp')
+          ..add('passkeyOperation', passkeyOperation)
+          ..add('session', session))
+        .toString();
+  }
+}
+
+class ConnectLoginFinishRspBuilder
+    implements Builder<ConnectLoginFinishRsp, ConnectLoginFinishRspBuilder> {
+  _$ConnectLoginFinishRsp? _$v;
+
+  PasskeyOperationBuilder? _passkeyOperation;
+  PasskeyOperationBuilder get passkeyOperation =>
+      _$this._passkeyOperation ??= new PasskeyOperationBuilder();
+  set passkeyOperation(PasskeyOperationBuilder? passkeyOperation) =>
+      _$this._passkeyOperation = passkeyOperation;
+
+  String? _session;
+  String? get session => _$this._session;
+  set session(String? session) => _$this._session = session;
+
+  ConnectLoginFinishRspBuilder() {
+    ConnectLoginFinishRsp._defaults(this);
+  }
+
+  ConnectLoginFinishRspBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _passkeyOperation = $v.passkeyOperation.toBuilder();
+      _session = $v.session;
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(ConnectLoginFinishRsp other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$ConnectLoginFinishRsp;
+  }
+
+  @override
+  void update(void Function(ConnectLoginFinishRspBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  ConnectLoginFinishRsp build() => _build();
+
+  _$ConnectLoginFinishRsp _build() {
+    _$ConnectLoginFinishRsp _$result;
+    try {
+      _$result = _$v ??
+          new _$ConnectLoginFinishRsp._(
+              passkeyOperation: passkeyOperation.build(),
+              session: BuiltValueNullFieldError.checkNotNull(
+                  session, r'ConnectLoginFinishRsp', 'session'));
+    } catch (_) {
+      late String _$failedField;
+      try {
+        _$failedField = 'passkeyOperation';
+        passkeyOperation.build();
+      } catch (e) {
+        throw new BuiltValueNestedFieldError(
+            r'ConnectLoginFinishRsp', _$failedField, e.toString());
+      }
+      rethrow;
+    }
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_login_init_req.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_login_init_req.dart
new file mode 100644
index 0000000..ddc4f0e
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_login_init_req.dart
@@ -0,0 +1,134 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:built_collection/built_collection.dart';
+import 'package:corbado_frontend_api_client/src/model/client_information.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'connect_login_init_req.g.dart';
+
+/// ConnectLoginInitReq
+///
+/// Properties:
+/// * [clientInformation]
+/// * [flags]
+@BuiltValue()
+abstract class ConnectLoginInitReq
+    implements Built<ConnectLoginInitReq, ConnectLoginInitReqBuilder> {
+  @BuiltValueField(wireName: r'clientInformation')
+  ClientInformation get clientInformation;
+
+  @BuiltValueField(wireName: r'flags')
+  BuiltMap<String, String> get flags;
+
+  ConnectLoginInitReq._();
+
+  factory ConnectLoginInitReq([void updates(ConnectLoginInitReqBuilder b)]) =
+      _$ConnectLoginInitReq;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(ConnectLoginInitReqBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<ConnectLoginInitReq> get serializer =>
+      _$ConnectLoginInitReqSerializer();
+}
+
+class _$ConnectLoginInitReqSerializer
+    implements PrimitiveSerializer<ConnectLoginInitReq> {
+  @override
+  final Iterable<Type> types = const [
+    ConnectLoginInitReq,
+    _$ConnectLoginInitReq
+  ];
+
+  @override
+  final String wireName = r'ConnectLoginInitReq';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    ConnectLoginInitReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'clientInformation';
+    yield serializers.serialize(
+      object.clientInformation,
+      specifiedType: const FullType(ClientInformation),
+    );
+    yield r'flags';
+    yield serializers.serialize(
+      object.flags,
+      specifiedType:
+          const FullType(BuiltMap, [FullType(String), FullType(String)]),
+    );
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    ConnectLoginInitReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required ConnectLoginInitReqBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'clientInformation':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(ClientInformation),
+          ) as ClientInformation;
+          result.clientInformation.replace(valueDes);
+          break;
+        case r'flags':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType:
+                const FullType(BuiltMap, [FullType(String), FullType(String)]),
+          ) as BuiltMap<String, String>;
+          result.flags.replace(valueDes);
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  ConnectLoginInitReq deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = ConnectLoginInitReqBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_login_init_req.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_login_init_req.g.dart
new file mode 100644
index 0000000..62c3775
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_login_init_req.g.dart
@@ -0,0 +1,131 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'connect_login_init_req.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$ConnectLoginInitReq extends ConnectLoginInitReq {
+  @override
+  final ClientInformation clientInformation;
+  @override
+  final BuiltMap<String, String> flags;
+
+  factory _$ConnectLoginInitReq(
+          [void Function(ConnectLoginInitReqBuilder)? updates]) =>
+      (new ConnectLoginInitReqBuilder()..update(updates))._build();
+
+  _$ConnectLoginInitReq._(
+      {required this.clientInformation, required this.flags})
+      : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        clientInformation, r'ConnectLoginInitReq', 'clientInformation');
+    BuiltValueNullFieldError.checkNotNull(
+        flags, r'ConnectLoginInitReq', 'flags');
+  }
+
+  @override
+  ConnectLoginInitReq rebuild(
+          void Function(ConnectLoginInitReqBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  ConnectLoginInitReqBuilder toBuilder() =>
+      new ConnectLoginInitReqBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is ConnectLoginInitReq &&
+        clientInformation == other.clientInformation &&
+        flags == other.flags;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, clientInformation.hashCode);
+    _$hash = $jc(_$hash, flags.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'ConnectLoginInitReq')
+          ..add('clientInformation', clientInformation)
+          ..add('flags', flags))
+        .toString();
+  }
+}
+
+class ConnectLoginInitReqBuilder
+    implements Builder<ConnectLoginInitReq, ConnectLoginInitReqBuilder> {
+  _$ConnectLoginInitReq? _$v;
+
+  ClientInformationBuilder? _clientInformation;
+  ClientInformationBuilder get clientInformation =>
+      _$this._clientInformation ??= new ClientInformationBuilder();
+  set clientInformation(ClientInformationBuilder? clientInformation) =>
+      _$this._clientInformation = clientInformation;
+
+  MapBuilder<String, String>? _flags;
+  MapBuilder<String, String> get flags =>
+      _$this._flags ??= new MapBuilder<String, String>();
+  set flags(MapBuilder<String, String>? flags) => _$this._flags = flags;
+
+  ConnectLoginInitReqBuilder() {
+    ConnectLoginInitReq._defaults(this);
+  }
+
+  ConnectLoginInitReqBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _clientInformation = $v.clientInformation.toBuilder();
+      _flags = $v.flags.toBuilder();
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(ConnectLoginInitReq other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$ConnectLoginInitReq;
+  }
+
+  @override
+  void update(void Function(ConnectLoginInitReqBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  ConnectLoginInitReq build() => _build();
+
+  _$ConnectLoginInitReq _build() {
+    _$ConnectLoginInitReq _$result;
+    try {
+      _$result = _$v ??
+          new _$ConnectLoginInitReq._(
+              clientInformation: clientInformation.build(),
+              flags: flags.build());
+    } catch (_) {
+      late String _$failedField;
+      try {
+        _$failedField = 'clientInformation';
+        clientInformation.build();
+        _$failedField = 'flags';
+        flags.build();
+      } catch (e) {
+        throw new BuiltValueNestedFieldError(
+            r'ConnectLoginInitReq', _$failedField, e.toString());
+      }
+      rethrow;
+    }
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_login_init_rsp.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_login_init_rsp.dart
new file mode 100644
index 0000000..2e57bd5
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_login_init_rsp.dart
@@ -0,0 +1,217 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:built_collection/built_collection.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'connect_login_init_rsp.g.dart';
+
+/// ConnectLoginInitRsp
+///
+/// Properties:
+/// * [token]
+/// * [expiresAt]
+/// * [frontendApiUrl]
+/// * [loginAllowed]
+/// * [flags]
+/// * [newClientEnvHandle]
+/// * [conditionalUIChallenge]
+@BuiltValue()
+abstract class ConnectLoginInitRsp
+    implements Built<ConnectLoginInitRsp, ConnectLoginInitRspBuilder> {
+  @BuiltValueField(wireName: r'token')
+  String get token;
+
+  @BuiltValueField(wireName: r'expiresAt')
+  int get expiresAt;
+
+  @BuiltValueField(wireName: r'frontendApiUrl')
+  String get frontendApiUrl;
+
+  @BuiltValueField(wireName: r'loginAllowed')
+  bool get loginAllowed;
+
+  @BuiltValueField(wireName: r'flags')
+  BuiltMap<String, String> get flags;
+
+  @BuiltValueField(wireName: r'newClientEnvHandle')
+  String? get newClientEnvHandle;
+
+  @BuiltValueField(wireName: r'conditionalUIChallenge')
+  String? get conditionalUIChallenge;
+
+  ConnectLoginInitRsp._();
+
+  factory ConnectLoginInitRsp([void updates(ConnectLoginInitRspBuilder b)]) =
+      _$ConnectLoginInitRsp;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(ConnectLoginInitRspBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<ConnectLoginInitRsp> get serializer =>
+      _$ConnectLoginInitRspSerializer();
+}
+
+class _$ConnectLoginInitRspSerializer
+    implements PrimitiveSerializer<ConnectLoginInitRsp> {
+  @override
+  final Iterable<Type> types = const [
+    ConnectLoginInitRsp,
+    _$ConnectLoginInitRsp
+  ];
+
+  @override
+  final String wireName = r'ConnectLoginInitRsp';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    ConnectLoginInitRsp object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'token';
+    yield serializers.serialize(
+      object.token,
+      specifiedType: const FullType(String),
+    );
+    yield r'expiresAt';
+    yield serializers.serialize(
+      object.expiresAt,
+      specifiedType: const FullType(int),
+    );
+    yield r'frontendApiUrl';
+    yield serializers.serialize(
+      object.frontendApiUrl,
+      specifiedType: const FullType(String),
+    );
+    yield r'loginAllowed';
+    yield serializers.serialize(
+      object.loginAllowed,
+      specifiedType: const FullType(bool),
+    );
+    yield r'flags';
+    yield serializers.serialize(
+      object.flags,
+      specifiedType:
+          const FullType(BuiltMap, [FullType(String), FullType(String)]),
+    );
+    if (object.newClientEnvHandle != null) {
+      yield r'newClientEnvHandle';
+      yield serializers.serialize(
+        object.newClientEnvHandle,
+        specifiedType: const FullType(String),
+      );
+    }
+    if (object.conditionalUIChallenge != null) {
+      yield r'conditionalUIChallenge';
+      yield serializers.serialize(
+        object.conditionalUIChallenge,
+        specifiedType: const FullType(String),
+      );
+    }
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    ConnectLoginInitRsp object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required ConnectLoginInitRspBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'token':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.token = valueDes;
+          break;
+        case r'expiresAt':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(int),
+          ) as int;
+          result.expiresAt = valueDes;
+          break;
+        case r'frontendApiUrl':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.frontendApiUrl = valueDes;
+          break;
+        case r'loginAllowed':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(bool),
+          ) as bool;
+          result.loginAllowed = valueDes;
+          break;
+        case r'flags':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType:
+                const FullType(BuiltMap, [FullType(String), FullType(String)]),
+          ) as BuiltMap<String, String>;
+          result.flags.replace(valueDes);
+          break;
+        case r'newClientEnvHandle':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.newClientEnvHandle = valueDes;
+          break;
+        case r'conditionalUIChallenge':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.conditionalUIChallenge = valueDes;
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  ConnectLoginInitRsp deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = ConnectLoginInitRspBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_login_init_rsp.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_login_init_rsp.g.dart
new file mode 100644
index 0000000..69c761b
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_login_init_rsp.g.dart
@@ -0,0 +1,201 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'connect_login_init_rsp.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$ConnectLoginInitRsp extends ConnectLoginInitRsp {
+  @override
+  final String token;
+  @override
+  final int expiresAt;
+  @override
+  final String frontendApiUrl;
+  @override
+  final bool loginAllowed;
+  @override
+  final BuiltMap<String, String> flags;
+  @override
+  final String? newClientEnvHandle;
+  @override
+  final String? conditionalUIChallenge;
+
+  factory _$ConnectLoginInitRsp(
+          [void Function(ConnectLoginInitRspBuilder)? updates]) =>
+      (new ConnectLoginInitRspBuilder()..update(updates))._build();
+
+  _$ConnectLoginInitRsp._(
+      {required this.token,
+      required this.expiresAt,
+      required this.frontendApiUrl,
+      required this.loginAllowed,
+      required this.flags,
+      this.newClientEnvHandle,
+      this.conditionalUIChallenge})
+      : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        token, r'ConnectLoginInitRsp', 'token');
+    BuiltValueNullFieldError.checkNotNull(
+        expiresAt, r'ConnectLoginInitRsp', 'expiresAt');
+    BuiltValueNullFieldError.checkNotNull(
+        frontendApiUrl, r'ConnectLoginInitRsp', 'frontendApiUrl');
+    BuiltValueNullFieldError.checkNotNull(
+        loginAllowed, r'ConnectLoginInitRsp', 'loginAllowed');
+    BuiltValueNullFieldError.checkNotNull(
+        flags, r'ConnectLoginInitRsp', 'flags');
+  }
+
+  @override
+  ConnectLoginInitRsp rebuild(
+          void Function(ConnectLoginInitRspBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  ConnectLoginInitRspBuilder toBuilder() =>
+      new ConnectLoginInitRspBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is ConnectLoginInitRsp &&
+        token == other.token &&
+        expiresAt == other.expiresAt &&
+        frontendApiUrl == other.frontendApiUrl &&
+        loginAllowed == other.loginAllowed &&
+        flags == other.flags &&
+        newClientEnvHandle == other.newClientEnvHandle &&
+        conditionalUIChallenge == other.conditionalUIChallenge;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, token.hashCode);
+    _$hash = $jc(_$hash, expiresAt.hashCode);
+    _$hash = $jc(_$hash, frontendApiUrl.hashCode);
+    _$hash = $jc(_$hash, loginAllowed.hashCode);
+    _$hash = $jc(_$hash, flags.hashCode);
+    _$hash = $jc(_$hash, newClientEnvHandle.hashCode);
+    _$hash = $jc(_$hash, conditionalUIChallenge.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'ConnectLoginInitRsp')
+          ..add('token', token)
+          ..add('expiresAt', expiresAt)
+          ..add('frontendApiUrl', frontendApiUrl)
+          ..add('loginAllowed', loginAllowed)
+          ..add('flags', flags)
+          ..add('newClientEnvHandle', newClientEnvHandle)
+          ..add('conditionalUIChallenge', conditionalUIChallenge))
+        .toString();
+  }
+}
+
+class ConnectLoginInitRspBuilder
+    implements Builder<ConnectLoginInitRsp, ConnectLoginInitRspBuilder> {
+  _$ConnectLoginInitRsp? _$v;
+
+  String? _token;
+  String? get token => _$this._token;
+  set token(String? token) => _$this._token = token;
+
+  int? _expiresAt;
+  int? get expiresAt => _$this._expiresAt;
+  set expiresAt(int? expiresAt) => _$this._expiresAt = expiresAt;
+
+  String? _frontendApiUrl;
+  String? get frontendApiUrl => _$this._frontendApiUrl;
+  set frontendApiUrl(String? frontendApiUrl) =>
+      _$this._frontendApiUrl = frontendApiUrl;
+
+  bool? _loginAllowed;
+  bool? get loginAllowed => _$this._loginAllowed;
+  set loginAllowed(bool? loginAllowed) => _$this._loginAllowed = loginAllowed;
+
+  MapBuilder<String, String>? _flags;
+  MapBuilder<String, String> get flags =>
+      _$this._flags ??= new MapBuilder<String, String>();
+  set flags(MapBuilder<String, String>? flags) => _$this._flags = flags;
+
+  String? _newClientEnvHandle;
+  String? get newClientEnvHandle => _$this._newClientEnvHandle;
+  set newClientEnvHandle(String? newClientEnvHandle) =>
+      _$this._newClientEnvHandle = newClientEnvHandle;
+
+  String? _conditionalUIChallenge;
+  String? get conditionalUIChallenge => _$this._conditionalUIChallenge;
+  set conditionalUIChallenge(String? conditionalUIChallenge) =>
+      _$this._conditionalUIChallenge = conditionalUIChallenge;
+
+  ConnectLoginInitRspBuilder() {
+    ConnectLoginInitRsp._defaults(this);
+  }
+
+  ConnectLoginInitRspBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _token = $v.token;
+      _expiresAt = $v.expiresAt;
+      _frontendApiUrl = $v.frontendApiUrl;
+      _loginAllowed = $v.loginAllowed;
+      _flags = $v.flags.toBuilder();
+      _newClientEnvHandle = $v.newClientEnvHandle;
+      _conditionalUIChallenge = $v.conditionalUIChallenge;
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(ConnectLoginInitRsp other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$ConnectLoginInitRsp;
+  }
+
+  @override
+  void update(void Function(ConnectLoginInitRspBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  ConnectLoginInitRsp build() => _build();
+
+  _$ConnectLoginInitRsp _build() {
+    _$ConnectLoginInitRsp _$result;
+    try {
+      _$result = _$v ??
+          new _$ConnectLoginInitRsp._(
+              token: BuiltValueNullFieldError.checkNotNull(
+                  token, r'ConnectLoginInitRsp', 'token'),
+              expiresAt: BuiltValueNullFieldError.checkNotNull(
+                  expiresAt, r'ConnectLoginInitRsp', 'expiresAt'),
+              frontendApiUrl: BuiltValueNullFieldError.checkNotNull(
+                  frontendApiUrl, r'ConnectLoginInitRsp', 'frontendApiUrl'),
+              loginAllowed: BuiltValueNullFieldError.checkNotNull(
+                  loginAllowed, r'ConnectLoginInitRsp', 'loginAllowed'),
+              flags: flags.build(),
+              newClientEnvHandle: newClientEnvHandle,
+              conditionalUIChallenge: conditionalUIChallenge);
+    } catch (_) {
+      late String _$failedField;
+      try {
+        _$failedField = 'flags';
+        flags.build();
+      } catch (e) {
+        throw new BuiltValueNestedFieldError(
+            r'ConnectLoginInitRsp', _$failedField, e.toString());
+      }
+      rethrow;
+    }
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_login_start_req.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_login_start_req.dart
new file mode 100644
index 0000000..159e664
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_login_start_req.dart
@@ -0,0 +1,173 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:built_collection/built_collection.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'connect_login_start_req.g.dart';
+
+/// ConnectLoginStartReq
+///
+/// Properties:
+/// * [identifier]
+/// * [source_]
+/// * [loadedMs]
+@BuiltValue()
+abstract class ConnectLoginStartReq
+    implements Built<ConnectLoginStartReq, ConnectLoginStartReqBuilder> {
+  @BuiltValueField(wireName: r'identifier')
+  String get identifier;
+
+  @BuiltValueField(wireName: r'source')
+  ConnectLoginStartReqSource_Enum get source_;
+  // enum source_Enum {  one-tap,  text-field,  error-soft,  error-hard,  };
+
+  @BuiltValueField(wireName: r'loadedMs')
+  int get loadedMs;
+
+  ConnectLoginStartReq._();
+
+  factory ConnectLoginStartReq([void updates(ConnectLoginStartReqBuilder b)]) =
+      _$ConnectLoginStartReq;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(ConnectLoginStartReqBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<ConnectLoginStartReq> get serializer =>
+      _$ConnectLoginStartReqSerializer();
+}
+
+class _$ConnectLoginStartReqSerializer
+    implements PrimitiveSerializer<ConnectLoginStartReq> {
+  @override
+  final Iterable<Type> types = const [
+    ConnectLoginStartReq,
+    _$ConnectLoginStartReq
+  ];
+
+  @override
+  final String wireName = r'ConnectLoginStartReq';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    ConnectLoginStartReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'identifier';
+    yield serializers.serialize(
+      object.identifier,
+      specifiedType: const FullType(String),
+    );
+    yield r'source';
+    yield serializers.serialize(
+      object.source_,
+      specifiedType: const FullType(ConnectLoginStartReqSource_Enum),
+    );
+    yield r'loadedMs';
+    yield serializers.serialize(
+      object.loadedMs,
+      specifiedType: const FullType(int),
+    );
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    ConnectLoginStartReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required ConnectLoginStartReqBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'identifier':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.identifier = valueDes;
+          break;
+        case r'source':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(ConnectLoginStartReqSource_Enum),
+          ) as ConnectLoginStartReqSource_Enum;
+          result.source_ = valueDes;
+          break;
+        case r'loadedMs':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(int),
+          ) as int;
+          result.loadedMs = valueDes;
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  ConnectLoginStartReq deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = ConnectLoginStartReqBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
+
+class ConnectLoginStartReqSource_Enum extends EnumClass {
+  @BuiltValueEnumConst(wireName: r'one-tap')
+  static const ConnectLoginStartReqSource_Enum oneTap =
+      _$connectLoginStartReqSourceEnum_oneTap;
+  @BuiltValueEnumConst(wireName: r'text-field')
+  static const ConnectLoginStartReqSource_Enum textField =
+      _$connectLoginStartReqSourceEnum_textField;
+  @BuiltValueEnumConst(wireName: r'error-soft')
+  static const ConnectLoginStartReqSource_Enum errorSoft =
+      _$connectLoginStartReqSourceEnum_errorSoft;
+  @BuiltValueEnumConst(wireName: r'error-hard', fallback: true)
+  static const ConnectLoginStartReqSource_Enum errorHard =
+      _$connectLoginStartReqSourceEnum_errorHard;
+
+  static Serializer<ConnectLoginStartReqSource_Enum> get serializer =>
+      _$connectLoginStartReqSourceEnumSerializer;
+
+  const ConnectLoginStartReqSource_Enum._(String name) : super(name);
+
+  static BuiltSet<ConnectLoginStartReqSource_Enum> get values =>
+      _$connectLoginStartReqSourceEnumValues;
+  static ConnectLoginStartReqSource_Enum valueOf(String name) =>
+      _$connectLoginStartReqSourceEnumValueOf(name);
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_login_start_req.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_login_start_req.g.dart
new file mode 100644
index 0000000..4df28ea
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_login_start_req.g.dart
@@ -0,0 +1,205 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'connect_login_start_req.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+const ConnectLoginStartReqSource_Enum _$connectLoginStartReqSourceEnum_oneTap =
+    const ConnectLoginStartReqSource_Enum._('oneTap');
+const ConnectLoginStartReqSource_Enum
+    _$connectLoginStartReqSourceEnum_textField =
+    const ConnectLoginStartReqSource_Enum._('textField');
+const ConnectLoginStartReqSource_Enum
+    _$connectLoginStartReqSourceEnum_errorSoft =
+    const ConnectLoginStartReqSource_Enum._('errorSoft');
+const ConnectLoginStartReqSource_Enum
+    _$connectLoginStartReqSourceEnum_errorHard =
+    const ConnectLoginStartReqSource_Enum._('errorHard');
+
+ConnectLoginStartReqSource_Enum _$connectLoginStartReqSourceEnumValueOf(
+    String name) {
+  switch (name) {
+    case 'oneTap':
+      return _$connectLoginStartReqSourceEnum_oneTap;
+    case 'textField':
+      return _$connectLoginStartReqSourceEnum_textField;
+    case 'errorSoft':
+      return _$connectLoginStartReqSourceEnum_errorSoft;
+    case 'errorHard':
+      return _$connectLoginStartReqSourceEnum_errorHard;
+    default:
+      return _$connectLoginStartReqSourceEnum_errorHard;
+  }
+}
+
+final BuiltSet<ConnectLoginStartReqSource_Enum>
+    _$connectLoginStartReqSourceEnumValues = new BuiltSet<
+        ConnectLoginStartReqSource_Enum>(const <ConnectLoginStartReqSource_Enum>[
+  _$connectLoginStartReqSourceEnum_oneTap,
+  _$connectLoginStartReqSourceEnum_textField,
+  _$connectLoginStartReqSourceEnum_errorSoft,
+  _$connectLoginStartReqSourceEnum_errorHard,
+]);
+
+Serializer<ConnectLoginStartReqSource_Enum>
+    _$connectLoginStartReqSourceEnumSerializer =
+    new _$ConnectLoginStartReqSource_EnumSerializer();
+
+class _$ConnectLoginStartReqSource_EnumSerializer
+    implements PrimitiveSerializer<ConnectLoginStartReqSource_Enum> {
+  static const Map<String, Object> _toWire = const <String, Object>{
+    'oneTap': 'one-tap',
+    'textField': 'text-field',
+    'errorSoft': 'error-soft',
+    'errorHard': 'error-hard',
+  };
+  static const Map<Object, String> _fromWire = const <Object, String>{
+    'one-tap': 'oneTap',
+    'text-field': 'textField',
+    'error-soft': 'errorSoft',
+    'error-hard': 'errorHard',
+  };
+
+  @override
+  final Iterable<Type> types = const <Type>[ConnectLoginStartReqSource_Enum];
+  @override
+  final String wireName = 'ConnectLoginStartReqSource_Enum';
+
+  @override
+  Object serialize(
+          Serializers serializers, ConnectLoginStartReqSource_Enum object,
+          {FullType specifiedType = FullType.unspecified}) =>
+      _toWire[object.name] ?? object.name;
+
+  @override
+  ConnectLoginStartReqSource_Enum deserialize(
+          Serializers serializers, Object serialized,
+          {FullType specifiedType = FullType.unspecified}) =>
+      ConnectLoginStartReqSource_Enum.valueOf(
+          _fromWire[serialized] ?? (serialized is String ? serialized : ''));
+}
+
+class _$ConnectLoginStartReq extends ConnectLoginStartReq {
+  @override
+  final String identifier;
+  @override
+  final ConnectLoginStartReqSource_Enum source_;
+  @override
+  final int loadedMs;
+
+  factory _$ConnectLoginStartReq(
+          [void Function(ConnectLoginStartReqBuilder)? updates]) =>
+      (new ConnectLoginStartReqBuilder()..update(updates))._build();
+
+  _$ConnectLoginStartReq._(
+      {required this.identifier, required this.source_, required this.loadedMs})
+      : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        identifier, r'ConnectLoginStartReq', 'identifier');
+    BuiltValueNullFieldError.checkNotNull(
+        source_, r'ConnectLoginStartReq', 'source_');
+    BuiltValueNullFieldError.checkNotNull(
+        loadedMs, r'ConnectLoginStartReq', 'loadedMs');
+  }
+
+  @override
+  ConnectLoginStartReq rebuild(
+          void Function(ConnectLoginStartReqBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  ConnectLoginStartReqBuilder toBuilder() =>
+      new ConnectLoginStartReqBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is ConnectLoginStartReq &&
+        identifier == other.identifier &&
+        source_ == other.source_ &&
+        loadedMs == other.loadedMs;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, identifier.hashCode);
+    _$hash = $jc(_$hash, source_.hashCode);
+    _$hash = $jc(_$hash, loadedMs.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'ConnectLoginStartReq')
+          ..add('identifier', identifier)
+          ..add('source_', source_)
+          ..add('loadedMs', loadedMs))
+        .toString();
+  }
+}
+
+class ConnectLoginStartReqBuilder
+    implements Builder<ConnectLoginStartReq, ConnectLoginStartReqBuilder> {
+  _$ConnectLoginStartReq? _$v;
+
+  String? _identifier;
+  String? get identifier => _$this._identifier;
+  set identifier(String? identifier) => _$this._identifier = identifier;
+
+  ConnectLoginStartReqSource_Enum? _source_;
+  ConnectLoginStartReqSource_Enum? get source_ => _$this._source_;
+  set source_(ConnectLoginStartReqSource_Enum? source_) =>
+      _$this._source_ = source_;
+
+  int? _loadedMs;
+  int? get loadedMs => _$this._loadedMs;
+  set loadedMs(int? loadedMs) => _$this._loadedMs = loadedMs;
+
+  ConnectLoginStartReqBuilder() {
+    ConnectLoginStartReq._defaults(this);
+  }
+
+  ConnectLoginStartReqBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _identifier = $v.identifier;
+      _source_ = $v.source_;
+      _loadedMs = $v.loadedMs;
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(ConnectLoginStartReq other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$ConnectLoginStartReq;
+  }
+
+  @override
+  void update(void Function(ConnectLoginStartReqBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  ConnectLoginStartReq build() => _build();
+
+  _$ConnectLoginStartReq _build() {
+    final _$result = _$v ??
+        new _$ConnectLoginStartReq._(
+            identifier: BuiltValueNullFieldError.checkNotNull(
+                identifier, r'ConnectLoginStartReq', 'identifier'),
+            source_: BuiltValueNullFieldError.checkNotNull(
+                source_, r'ConnectLoginStartReq', 'source_'),
+            loadedMs: BuiltValueNullFieldError.checkNotNull(
+                loadedMs, r'ConnectLoginStartReq', 'loadedMs'));
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_login_start_rsp.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_login_start_rsp.dart
new file mode 100644
index 0000000..e86beeb
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_login_start_rsp.dart
@@ -0,0 +1,130 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'connect_login_start_rsp.g.dart';
+
+/// ConnectLoginStartRsp
+///
+/// Properties:
+/// * [assertionOptions]
+/// * [isCDA]
+@BuiltValue()
+abstract class ConnectLoginStartRsp
+    implements Built<ConnectLoginStartRsp, ConnectLoginStartRspBuilder> {
+  @BuiltValueField(wireName: r'assertionOptions')
+  String get assertionOptions;
+
+  @BuiltValueField(wireName: r'isCDA')
+  bool get isCDA;
+
+  ConnectLoginStartRsp._();
+
+  factory ConnectLoginStartRsp([void updates(ConnectLoginStartRspBuilder b)]) =
+      _$ConnectLoginStartRsp;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(ConnectLoginStartRspBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<ConnectLoginStartRsp> get serializer =>
+      _$ConnectLoginStartRspSerializer();
+}
+
+class _$ConnectLoginStartRspSerializer
+    implements PrimitiveSerializer<ConnectLoginStartRsp> {
+  @override
+  final Iterable<Type> types = const [
+    ConnectLoginStartRsp,
+    _$ConnectLoginStartRsp
+  ];
+
+  @override
+  final String wireName = r'ConnectLoginStartRsp';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    ConnectLoginStartRsp object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'assertionOptions';
+    yield serializers.serialize(
+      object.assertionOptions,
+      specifiedType: const FullType(String),
+    );
+    yield r'isCDA';
+    yield serializers.serialize(
+      object.isCDA,
+      specifiedType: const FullType(bool),
+    );
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    ConnectLoginStartRsp object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required ConnectLoginStartRspBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'assertionOptions':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.assertionOptions = valueDes;
+          break;
+        case r'isCDA':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(bool),
+          ) as bool;
+          result.isCDA = valueDes;
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  ConnectLoginStartRsp deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = ConnectLoginStartRspBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_login_start_rsp.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_login_start_rsp.g.dart
new file mode 100644
index 0000000..c8afe1b
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_login_start_rsp.g.dart
@@ -0,0 +1,116 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'connect_login_start_rsp.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$ConnectLoginStartRsp extends ConnectLoginStartRsp {
+  @override
+  final String assertionOptions;
+  @override
+  final bool isCDA;
+
+  factory _$ConnectLoginStartRsp(
+          [void Function(ConnectLoginStartRspBuilder)? updates]) =>
+      (new ConnectLoginStartRspBuilder()..update(updates))._build();
+
+  _$ConnectLoginStartRsp._(
+      {required this.assertionOptions, required this.isCDA})
+      : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        assertionOptions, r'ConnectLoginStartRsp', 'assertionOptions');
+    BuiltValueNullFieldError.checkNotNull(
+        isCDA, r'ConnectLoginStartRsp', 'isCDA');
+  }
+
+  @override
+  ConnectLoginStartRsp rebuild(
+          void Function(ConnectLoginStartRspBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  ConnectLoginStartRspBuilder toBuilder() =>
+      new ConnectLoginStartRspBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is ConnectLoginStartRsp &&
+        assertionOptions == other.assertionOptions &&
+        isCDA == other.isCDA;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, assertionOptions.hashCode);
+    _$hash = $jc(_$hash, isCDA.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'ConnectLoginStartRsp')
+          ..add('assertionOptions', assertionOptions)
+          ..add('isCDA', isCDA))
+        .toString();
+  }
+}
+
+class ConnectLoginStartRspBuilder
+    implements Builder<ConnectLoginStartRsp, ConnectLoginStartRspBuilder> {
+  _$ConnectLoginStartRsp? _$v;
+
+  String? _assertionOptions;
+  String? get assertionOptions => _$this._assertionOptions;
+  set assertionOptions(String? assertionOptions) =>
+      _$this._assertionOptions = assertionOptions;
+
+  bool? _isCDA;
+  bool? get isCDA => _$this._isCDA;
+  set isCDA(bool? isCDA) => _$this._isCDA = isCDA;
+
+  ConnectLoginStartRspBuilder() {
+    ConnectLoginStartRsp._defaults(this);
+  }
+
+  ConnectLoginStartRspBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _assertionOptions = $v.assertionOptions;
+      _isCDA = $v.isCDA;
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(ConnectLoginStartRsp other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$ConnectLoginStartRsp;
+  }
+
+  @override
+  void update(void Function(ConnectLoginStartRspBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  ConnectLoginStartRsp build() => _build();
+
+  _$ConnectLoginStartRsp _build() {
+    final _$result = _$v ??
+        new _$ConnectLoginStartRsp._(
+            assertionOptions: BuiltValueNullFieldError.checkNotNull(
+                assertionOptions, r'ConnectLoginStartRsp', 'assertionOptions'),
+            isCDA: BuiltValueNullFieldError.checkNotNull(
+                isCDA, r'ConnectLoginStartRsp', 'isCDA'));
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_manage_delete_req.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_manage_delete_req.dart
new file mode 100644
index 0000000..efd8cff
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_manage_delete_req.dart
@@ -0,0 +1,131 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'connect_manage_delete_req.g.dart';
+
+/// ConnectManageDeleteReq
+///
+/// Properties:
+/// * [connectToken]
+/// * [credentialID]
+@BuiltValue()
+abstract class ConnectManageDeleteReq
+    implements Built<ConnectManageDeleteReq, ConnectManageDeleteReqBuilder> {
+  @BuiltValueField(wireName: r'connectToken')
+  String get connectToken;
+
+  @BuiltValueField(wireName: r'credentialID')
+  String get credentialID;
+
+  ConnectManageDeleteReq._();
+
+  factory ConnectManageDeleteReq(
+          [void updates(ConnectManageDeleteReqBuilder b)]) =
+      _$ConnectManageDeleteReq;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(ConnectManageDeleteReqBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<ConnectManageDeleteReq> get serializer =>
+      _$ConnectManageDeleteReqSerializer();
+}
+
+class _$ConnectManageDeleteReqSerializer
+    implements PrimitiveSerializer<ConnectManageDeleteReq> {
+  @override
+  final Iterable<Type> types = const [
+    ConnectManageDeleteReq,
+    _$ConnectManageDeleteReq
+  ];
+
+  @override
+  final String wireName = r'ConnectManageDeleteReq';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    ConnectManageDeleteReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'connectToken';
+    yield serializers.serialize(
+      object.connectToken,
+      specifiedType: const FullType(String),
+    );
+    yield r'credentialID';
+    yield serializers.serialize(
+      object.credentialID,
+      specifiedType: const FullType(String),
+    );
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    ConnectManageDeleteReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required ConnectManageDeleteReqBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'connectToken':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.connectToken = valueDes;
+          break;
+        case r'credentialID':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.credentialID = valueDes;
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  ConnectManageDeleteReq deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = ConnectManageDeleteReqBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_manage_delete_req.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_manage_delete_req.g.dart
new file mode 100644
index 0000000..f827032
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_manage_delete_req.g.dart
@@ -0,0 +1,115 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'connect_manage_delete_req.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$ConnectManageDeleteReq extends ConnectManageDeleteReq {
+  @override
+  final String connectToken;
+  @override
+  final String credentialID;
+
+  factory _$ConnectManageDeleteReq(
+          [void Function(ConnectManageDeleteReqBuilder)? updates]) =>
+      (new ConnectManageDeleteReqBuilder()..update(updates))._build();
+
+  _$ConnectManageDeleteReq._(
+      {required this.connectToken, required this.credentialID})
+      : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        connectToken, r'ConnectManageDeleteReq', 'connectToken');
+    BuiltValueNullFieldError.checkNotNull(
+        credentialID, r'ConnectManageDeleteReq', 'credentialID');
+  }
+
+  @override
+  ConnectManageDeleteReq rebuild(
+          void Function(ConnectManageDeleteReqBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  ConnectManageDeleteReqBuilder toBuilder() =>
+      new ConnectManageDeleteReqBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is ConnectManageDeleteReq &&
+        connectToken == other.connectToken &&
+        credentialID == other.credentialID;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, connectToken.hashCode);
+    _$hash = $jc(_$hash, credentialID.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'ConnectManageDeleteReq')
+          ..add('connectToken', connectToken)
+          ..add('credentialID', credentialID))
+        .toString();
+  }
+}
+
+class ConnectManageDeleteReqBuilder
+    implements Builder<ConnectManageDeleteReq, ConnectManageDeleteReqBuilder> {
+  _$ConnectManageDeleteReq? _$v;
+
+  String? _connectToken;
+  String? get connectToken => _$this._connectToken;
+  set connectToken(String? connectToken) => _$this._connectToken = connectToken;
+
+  String? _credentialID;
+  String? get credentialID => _$this._credentialID;
+  set credentialID(String? credentialID) => _$this._credentialID = credentialID;
+
+  ConnectManageDeleteReqBuilder() {
+    ConnectManageDeleteReq._defaults(this);
+  }
+
+  ConnectManageDeleteReqBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _connectToken = $v.connectToken;
+      _credentialID = $v.credentialID;
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(ConnectManageDeleteReq other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$ConnectManageDeleteReq;
+  }
+
+  @override
+  void update(void Function(ConnectManageDeleteReqBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  ConnectManageDeleteReq build() => _build();
+
+  _$ConnectManageDeleteReq _build() {
+    final _$result = _$v ??
+        new _$ConnectManageDeleteReq._(
+            connectToken: BuiltValueNullFieldError.checkNotNull(
+                connectToken, r'ConnectManageDeleteReq', 'connectToken'),
+            credentialID: BuiltValueNullFieldError.checkNotNull(
+                credentialID, r'ConnectManageDeleteReq', 'credentialID'));
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_manage_delete_rsp.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_manage_delete_rsp.dart
new file mode 100644
index 0000000..0600524
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_manage_delete_rsp.dart
@@ -0,0 +1,115 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'connect_manage_delete_rsp.g.dart';
+
+/// ConnectManageDeleteRsp
+///
+/// Properties:
+/// * [credentialID]
+@BuiltValue()
+abstract class ConnectManageDeleteRsp
+    implements Built<ConnectManageDeleteRsp, ConnectManageDeleteRspBuilder> {
+  @BuiltValueField(wireName: r'credentialID')
+  String get credentialID;
+
+  ConnectManageDeleteRsp._();
+
+  factory ConnectManageDeleteRsp(
+          [void updates(ConnectManageDeleteRspBuilder b)]) =
+      _$ConnectManageDeleteRsp;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(ConnectManageDeleteRspBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<ConnectManageDeleteRsp> get serializer =>
+      _$ConnectManageDeleteRspSerializer();
+}
+
+class _$ConnectManageDeleteRspSerializer
+    implements PrimitiveSerializer<ConnectManageDeleteRsp> {
+  @override
+  final Iterable<Type> types = const [
+    ConnectManageDeleteRsp,
+    _$ConnectManageDeleteRsp
+  ];
+
+  @override
+  final String wireName = r'ConnectManageDeleteRsp';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    ConnectManageDeleteRsp object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'credentialID';
+    yield serializers.serialize(
+      object.credentialID,
+      specifiedType: const FullType(String),
+    );
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    ConnectManageDeleteRsp object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required ConnectManageDeleteRspBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'credentialID':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.credentialID = valueDes;
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  ConnectManageDeleteRsp deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = ConnectManageDeleteRspBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_manage_delete_rsp.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_manage_delete_rsp.g.dart
new file mode 100644
index 0000000..efafc18
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_manage_delete_rsp.g.dart
@@ -0,0 +1,99 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'connect_manage_delete_rsp.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$ConnectManageDeleteRsp extends ConnectManageDeleteRsp {
+  @override
+  final String credentialID;
+
+  factory _$ConnectManageDeleteRsp(
+          [void Function(ConnectManageDeleteRspBuilder)? updates]) =>
+      (new ConnectManageDeleteRspBuilder()..update(updates))._build();
+
+  _$ConnectManageDeleteRsp._({required this.credentialID}) : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        credentialID, r'ConnectManageDeleteRsp', 'credentialID');
+  }
+
+  @override
+  ConnectManageDeleteRsp rebuild(
+          void Function(ConnectManageDeleteRspBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  ConnectManageDeleteRspBuilder toBuilder() =>
+      new ConnectManageDeleteRspBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is ConnectManageDeleteRsp &&
+        credentialID == other.credentialID;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, credentialID.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'ConnectManageDeleteRsp')
+          ..add('credentialID', credentialID))
+        .toString();
+  }
+}
+
+class ConnectManageDeleteRspBuilder
+    implements Builder<ConnectManageDeleteRsp, ConnectManageDeleteRspBuilder> {
+  _$ConnectManageDeleteRsp? _$v;
+
+  String? _credentialID;
+  String? get credentialID => _$this._credentialID;
+  set credentialID(String? credentialID) => _$this._credentialID = credentialID;
+
+  ConnectManageDeleteRspBuilder() {
+    ConnectManageDeleteRsp._defaults(this);
+  }
+
+  ConnectManageDeleteRspBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _credentialID = $v.credentialID;
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(ConnectManageDeleteRsp other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$ConnectManageDeleteRsp;
+  }
+
+  @override
+  void update(void Function(ConnectManageDeleteRspBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  ConnectManageDeleteRsp build() => _build();
+
+  _$ConnectManageDeleteRsp _build() {
+    final _$result = _$v ??
+        new _$ConnectManageDeleteRsp._(
+            credentialID: BuiltValueNullFieldError.checkNotNull(
+                credentialID, r'ConnectManageDeleteRsp', 'credentialID'));
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_manage_init_req.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_manage_init_req.dart
new file mode 100644
index 0000000..be659f5
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_manage_init_req.dart
@@ -0,0 +1,134 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:built_collection/built_collection.dart';
+import 'package:corbado_frontend_api_client/src/model/client_information.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'connect_manage_init_req.g.dart';
+
+/// ConnectManageInitReq
+///
+/// Properties:
+/// * [clientInformation]
+/// * [flags]
+@BuiltValue()
+abstract class ConnectManageInitReq
+    implements Built<ConnectManageInitReq, ConnectManageInitReqBuilder> {
+  @BuiltValueField(wireName: r'clientInformation')
+  ClientInformation get clientInformation;
+
+  @BuiltValueField(wireName: r'flags')
+  BuiltMap<String, String> get flags;
+
+  ConnectManageInitReq._();
+
+  factory ConnectManageInitReq([void updates(ConnectManageInitReqBuilder b)]) =
+      _$ConnectManageInitReq;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(ConnectManageInitReqBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<ConnectManageInitReq> get serializer =>
+      _$ConnectManageInitReqSerializer();
+}
+
+class _$ConnectManageInitReqSerializer
+    implements PrimitiveSerializer<ConnectManageInitReq> {
+  @override
+  final Iterable<Type> types = const [
+    ConnectManageInitReq,
+    _$ConnectManageInitReq
+  ];
+
+  @override
+  final String wireName = r'ConnectManageInitReq';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    ConnectManageInitReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'clientInformation';
+    yield serializers.serialize(
+      object.clientInformation,
+      specifiedType: const FullType(ClientInformation),
+    );
+    yield r'flags';
+    yield serializers.serialize(
+      object.flags,
+      specifiedType:
+          const FullType(BuiltMap, [FullType(String), FullType(String)]),
+    );
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    ConnectManageInitReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required ConnectManageInitReqBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'clientInformation':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(ClientInformation),
+          ) as ClientInformation;
+          result.clientInformation.replace(valueDes);
+          break;
+        case r'flags':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType:
+                const FullType(BuiltMap, [FullType(String), FullType(String)]),
+          ) as BuiltMap<String, String>;
+          result.flags.replace(valueDes);
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  ConnectManageInitReq deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = ConnectManageInitReqBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_manage_init_req.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_manage_init_req.g.dart
new file mode 100644
index 0000000..22941ff
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_manage_init_req.g.dart
@@ -0,0 +1,131 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'connect_manage_init_req.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$ConnectManageInitReq extends ConnectManageInitReq {
+  @override
+  final ClientInformation clientInformation;
+  @override
+  final BuiltMap<String, String> flags;
+
+  factory _$ConnectManageInitReq(
+          [void Function(ConnectManageInitReqBuilder)? updates]) =>
+      (new ConnectManageInitReqBuilder()..update(updates))._build();
+
+  _$ConnectManageInitReq._(
+      {required this.clientInformation, required this.flags})
+      : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        clientInformation, r'ConnectManageInitReq', 'clientInformation');
+    BuiltValueNullFieldError.checkNotNull(
+        flags, r'ConnectManageInitReq', 'flags');
+  }
+
+  @override
+  ConnectManageInitReq rebuild(
+          void Function(ConnectManageInitReqBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  ConnectManageInitReqBuilder toBuilder() =>
+      new ConnectManageInitReqBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is ConnectManageInitReq &&
+        clientInformation == other.clientInformation &&
+        flags == other.flags;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, clientInformation.hashCode);
+    _$hash = $jc(_$hash, flags.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'ConnectManageInitReq')
+          ..add('clientInformation', clientInformation)
+          ..add('flags', flags))
+        .toString();
+  }
+}
+
+class ConnectManageInitReqBuilder
+    implements Builder<ConnectManageInitReq, ConnectManageInitReqBuilder> {
+  _$ConnectManageInitReq? _$v;
+
+  ClientInformationBuilder? _clientInformation;
+  ClientInformationBuilder get clientInformation =>
+      _$this._clientInformation ??= new ClientInformationBuilder();
+  set clientInformation(ClientInformationBuilder? clientInformation) =>
+      _$this._clientInformation = clientInformation;
+
+  MapBuilder<String, String>? _flags;
+  MapBuilder<String, String> get flags =>
+      _$this._flags ??= new MapBuilder<String, String>();
+  set flags(MapBuilder<String, String>? flags) => _$this._flags = flags;
+
+  ConnectManageInitReqBuilder() {
+    ConnectManageInitReq._defaults(this);
+  }
+
+  ConnectManageInitReqBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _clientInformation = $v.clientInformation.toBuilder();
+      _flags = $v.flags.toBuilder();
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(ConnectManageInitReq other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$ConnectManageInitReq;
+  }
+
+  @override
+  void update(void Function(ConnectManageInitReqBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  ConnectManageInitReq build() => _build();
+
+  _$ConnectManageInitReq _build() {
+    _$ConnectManageInitReq _$result;
+    try {
+      _$result = _$v ??
+          new _$ConnectManageInitReq._(
+              clientInformation: clientInformation.build(),
+              flags: flags.build());
+    } catch (_) {
+      late String _$failedField;
+      try {
+        _$failedField = 'clientInformation';
+        clientInformation.build();
+        _$failedField = 'flags';
+        flags.build();
+      } catch (e) {
+        throw new BuiltValueNestedFieldError(
+            r'ConnectManageInitReq', _$failedField, e.toString());
+      }
+      rethrow;
+    }
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_manage_init_rsp.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_manage_init_rsp.dart
new file mode 100644
index 0000000..59957f5
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_manage_init_rsp.dart
@@ -0,0 +1,199 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:built_collection/built_collection.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'connect_manage_init_rsp.g.dart';
+
+/// ConnectManageInitRsp
+///
+/// Properties:
+/// * [processID]
+/// * [expiresAt]
+/// * [frontendApiUrl]
+/// * [manageAllowed]
+/// * [flags]
+/// * [newClientEnvHandle]
+@BuiltValue()
+abstract class ConnectManageInitRsp
+    implements Built<ConnectManageInitRsp, ConnectManageInitRspBuilder> {
+  @BuiltValueField(wireName: r'processID')
+  String get processID;
+
+  @BuiltValueField(wireName: r'expiresAt')
+  int get expiresAt;
+
+  @BuiltValueField(wireName: r'frontendApiUrl')
+  String get frontendApiUrl;
+
+  @BuiltValueField(wireName: r'manageAllowed')
+  bool get manageAllowed;
+
+  @BuiltValueField(wireName: r'flags')
+  BuiltMap<String, String> get flags;
+
+  @BuiltValueField(wireName: r'newClientEnvHandle')
+  String? get newClientEnvHandle;
+
+  ConnectManageInitRsp._();
+
+  factory ConnectManageInitRsp([void updates(ConnectManageInitRspBuilder b)]) =
+      _$ConnectManageInitRsp;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(ConnectManageInitRspBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<ConnectManageInitRsp> get serializer =>
+      _$ConnectManageInitRspSerializer();
+}
+
+class _$ConnectManageInitRspSerializer
+    implements PrimitiveSerializer<ConnectManageInitRsp> {
+  @override
+  final Iterable<Type> types = const [
+    ConnectManageInitRsp,
+    _$ConnectManageInitRsp
+  ];
+
+  @override
+  final String wireName = r'ConnectManageInitRsp';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    ConnectManageInitRsp object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'processID';
+    yield serializers.serialize(
+      object.processID,
+      specifiedType: const FullType(String),
+    );
+    yield r'expiresAt';
+    yield serializers.serialize(
+      object.expiresAt,
+      specifiedType: const FullType(int),
+    );
+    yield r'frontendApiUrl';
+    yield serializers.serialize(
+      object.frontendApiUrl,
+      specifiedType: const FullType(String),
+    );
+    yield r'manageAllowed';
+    yield serializers.serialize(
+      object.manageAllowed,
+      specifiedType: const FullType(bool),
+    );
+    yield r'flags';
+    yield serializers.serialize(
+      object.flags,
+      specifiedType:
+          const FullType(BuiltMap, [FullType(String), FullType(String)]),
+    );
+    if (object.newClientEnvHandle != null) {
+      yield r'newClientEnvHandle';
+      yield serializers.serialize(
+        object.newClientEnvHandle,
+        specifiedType: const FullType(String),
+      );
+    }
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    ConnectManageInitRsp object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required ConnectManageInitRspBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'processID':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.processID = valueDes;
+          break;
+        case r'expiresAt':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(int),
+          ) as int;
+          result.expiresAt = valueDes;
+          break;
+        case r'frontendApiUrl':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.frontendApiUrl = valueDes;
+          break;
+        case r'manageAllowed':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(bool),
+          ) as bool;
+          result.manageAllowed = valueDes;
+          break;
+        case r'flags':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType:
+                const FullType(BuiltMap, [FullType(String), FullType(String)]),
+          ) as BuiltMap<String, String>;
+          result.flags.replace(valueDes);
+          break;
+        case r'newClientEnvHandle':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.newClientEnvHandle = valueDes;
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  ConnectManageInitRsp deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = ConnectManageInitRspBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_manage_init_rsp.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_manage_init_rsp.g.dart
new file mode 100644
index 0000000..2bb06f2
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_manage_init_rsp.g.dart
@@ -0,0 +1,189 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'connect_manage_init_rsp.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$ConnectManageInitRsp extends ConnectManageInitRsp {
+  @override
+  final String processID;
+  @override
+  final int expiresAt;
+  @override
+  final String frontendApiUrl;
+  @override
+  final bool manageAllowed;
+  @override
+  final BuiltMap<String, String> flags;
+  @override
+  final String? newClientEnvHandle;
+
+  factory _$ConnectManageInitRsp(
+          [void Function(ConnectManageInitRspBuilder)? updates]) =>
+      (new ConnectManageInitRspBuilder()..update(updates))._build();
+
+  _$ConnectManageInitRsp._(
+      {required this.processID,
+      required this.expiresAt,
+      required this.frontendApiUrl,
+      required this.manageAllowed,
+      required this.flags,
+      this.newClientEnvHandle})
+      : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        processID, r'ConnectManageInitRsp', 'processID');
+    BuiltValueNullFieldError.checkNotNull(
+        expiresAt, r'ConnectManageInitRsp', 'expiresAt');
+    BuiltValueNullFieldError.checkNotNull(
+        frontendApiUrl, r'ConnectManageInitRsp', 'frontendApiUrl');
+    BuiltValueNullFieldError.checkNotNull(
+        manageAllowed, r'ConnectManageInitRsp', 'manageAllowed');
+    BuiltValueNullFieldError.checkNotNull(
+        flags, r'ConnectManageInitRsp', 'flags');
+  }
+
+  @override
+  ConnectManageInitRsp rebuild(
+          void Function(ConnectManageInitRspBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  ConnectManageInitRspBuilder toBuilder() =>
+      new ConnectManageInitRspBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is ConnectManageInitRsp &&
+        processID == other.processID &&
+        expiresAt == other.expiresAt &&
+        frontendApiUrl == other.frontendApiUrl &&
+        manageAllowed == other.manageAllowed &&
+        flags == other.flags &&
+        newClientEnvHandle == other.newClientEnvHandle;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, processID.hashCode);
+    _$hash = $jc(_$hash, expiresAt.hashCode);
+    _$hash = $jc(_$hash, frontendApiUrl.hashCode);
+    _$hash = $jc(_$hash, manageAllowed.hashCode);
+    _$hash = $jc(_$hash, flags.hashCode);
+    _$hash = $jc(_$hash, newClientEnvHandle.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'ConnectManageInitRsp')
+          ..add('processID', processID)
+          ..add('expiresAt', expiresAt)
+          ..add('frontendApiUrl', frontendApiUrl)
+          ..add('manageAllowed', manageAllowed)
+          ..add('flags', flags)
+          ..add('newClientEnvHandle', newClientEnvHandle))
+        .toString();
+  }
+}
+
+class ConnectManageInitRspBuilder
+    implements Builder<ConnectManageInitRsp, ConnectManageInitRspBuilder> {
+  _$ConnectManageInitRsp? _$v;
+
+  String? _processID;
+  String? get processID => _$this._processID;
+  set processID(String? processID) => _$this._processID = processID;
+
+  int? _expiresAt;
+  int? get expiresAt => _$this._expiresAt;
+  set expiresAt(int? expiresAt) => _$this._expiresAt = expiresAt;
+
+  String? _frontendApiUrl;
+  String? get frontendApiUrl => _$this._frontendApiUrl;
+  set frontendApiUrl(String? frontendApiUrl) =>
+      _$this._frontendApiUrl = frontendApiUrl;
+
+  bool? _manageAllowed;
+  bool? get manageAllowed => _$this._manageAllowed;
+  set manageAllowed(bool? manageAllowed) =>
+      _$this._manageAllowed = manageAllowed;
+
+  MapBuilder<String, String>? _flags;
+  MapBuilder<String, String> get flags =>
+      _$this._flags ??= new MapBuilder<String, String>();
+  set flags(MapBuilder<String, String>? flags) => _$this._flags = flags;
+
+  String? _newClientEnvHandle;
+  String? get newClientEnvHandle => _$this._newClientEnvHandle;
+  set newClientEnvHandle(String? newClientEnvHandle) =>
+      _$this._newClientEnvHandle = newClientEnvHandle;
+
+  ConnectManageInitRspBuilder() {
+    ConnectManageInitRsp._defaults(this);
+  }
+
+  ConnectManageInitRspBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _processID = $v.processID;
+      _expiresAt = $v.expiresAt;
+      _frontendApiUrl = $v.frontendApiUrl;
+      _manageAllowed = $v.manageAllowed;
+      _flags = $v.flags.toBuilder();
+      _newClientEnvHandle = $v.newClientEnvHandle;
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(ConnectManageInitRsp other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$ConnectManageInitRsp;
+  }
+
+  @override
+  void update(void Function(ConnectManageInitRspBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  ConnectManageInitRsp build() => _build();
+
+  _$ConnectManageInitRsp _build() {
+    _$ConnectManageInitRsp _$result;
+    try {
+      _$result = _$v ??
+          new _$ConnectManageInitRsp._(
+              processID: BuiltValueNullFieldError.checkNotNull(
+                  processID, r'ConnectManageInitRsp', 'processID'),
+              expiresAt: BuiltValueNullFieldError.checkNotNull(
+                  expiresAt, r'ConnectManageInitRsp', 'expiresAt'),
+              frontendApiUrl: BuiltValueNullFieldError.checkNotNull(
+                  frontendApiUrl, r'ConnectManageInitRsp', 'frontendApiUrl'),
+              manageAllowed: BuiltValueNullFieldError.checkNotNull(
+                  manageAllowed, r'ConnectManageInitRsp', 'manageAllowed'),
+              flags: flags.build(),
+              newClientEnvHandle: newClientEnvHandle);
+    } catch (_) {
+      late String _$failedField;
+      try {
+        _$failedField = 'flags';
+        flags.build();
+      } catch (e) {
+        throw new BuiltValueNestedFieldError(
+            r'ConnectManageInitRsp', _$failedField, e.toString());
+      }
+      rethrow;
+    }
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_manage_list_req.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_manage_list_req.dart
new file mode 100644
index 0000000..c71502f
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_manage_list_req.dart
@@ -0,0 +1,114 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'connect_manage_list_req.g.dart';
+
+/// ConnectManageListReq
+///
+/// Properties:
+/// * [connectToken]
+@BuiltValue()
+abstract class ConnectManageListReq
+    implements Built<ConnectManageListReq, ConnectManageListReqBuilder> {
+  @BuiltValueField(wireName: r'connectToken')
+  String get connectToken;
+
+  ConnectManageListReq._();
+
+  factory ConnectManageListReq([void updates(ConnectManageListReqBuilder b)]) =
+      _$ConnectManageListReq;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(ConnectManageListReqBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<ConnectManageListReq> get serializer =>
+      _$ConnectManageListReqSerializer();
+}
+
+class _$ConnectManageListReqSerializer
+    implements PrimitiveSerializer<ConnectManageListReq> {
+  @override
+  final Iterable<Type> types = const [
+    ConnectManageListReq,
+    _$ConnectManageListReq
+  ];
+
+  @override
+  final String wireName = r'ConnectManageListReq';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    ConnectManageListReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'connectToken';
+    yield serializers.serialize(
+      object.connectToken,
+      specifiedType: const FullType(String),
+    );
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    ConnectManageListReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required ConnectManageListReqBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'connectToken':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.connectToken = valueDes;
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  ConnectManageListReq deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = ConnectManageListReqBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_manage_list_req.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_manage_list_req.g.dart
new file mode 100644
index 0000000..bc7113b
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_manage_list_req.g.dart
@@ -0,0 +1,98 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'connect_manage_list_req.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$ConnectManageListReq extends ConnectManageListReq {
+  @override
+  final String connectToken;
+
+  factory _$ConnectManageListReq(
+          [void Function(ConnectManageListReqBuilder)? updates]) =>
+      (new ConnectManageListReqBuilder()..update(updates))._build();
+
+  _$ConnectManageListReq._({required this.connectToken}) : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        connectToken, r'ConnectManageListReq', 'connectToken');
+  }
+
+  @override
+  ConnectManageListReq rebuild(
+          void Function(ConnectManageListReqBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  ConnectManageListReqBuilder toBuilder() =>
+      new ConnectManageListReqBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is ConnectManageListReq && connectToken == other.connectToken;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, connectToken.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'ConnectManageListReq')
+          ..add('connectToken', connectToken))
+        .toString();
+  }
+}
+
+class ConnectManageListReqBuilder
+    implements Builder<ConnectManageListReq, ConnectManageListReqBuilder> {
+  _$ConnectManageListReq? _$v;
+
+  String? _connectToken;
+  String? get connectToken => _$this._connectToken;
+  set connectToken(String? connectToken) => _$this._connectToken = connectToken;
+
+  ConnectManageListReqBuilder() {
+    ConnectManageListReq._defaults(this);
+  }
+
+  ConnectManageListReqBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _connectToken = $v.connectToken;
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(ConnectManageListReq other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$ConnectManageListReq;
+  }
+
+  @override
+  void update(void Function(ConnectManageListReqBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  ConnectManageListReq build() => _build();
+
+  _$ConnectManageListReq _build() {
+    final _$result = _$v ??
+        new _$ConnectManageListReq._(
+            connectToken: BuiltValueNullFieldError.checkNotNull(
+                connectToken, r'ConnectManageListReq', 'connectToken'));
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_manage_list_rsp.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_manage_list_rsp.dart
new file mode 100644
index 0000000..33eac59
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_manage_list_rsp.dart
@@ -0,0 +1,116 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:corbado_frontend_api_client/src/model/passkey.dart';
+import 'package:built_collection/built_collection.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'connect_manage_list_rsp.g.dart';
+
+/// ConnectManageListRsp
+///
+/// Properties:
+/// * [passkeys]
+@BuiltValue()
+abstract class ConnectManageListRsp
+    implements Built<ConnectManageListRsp, ConnectManageListRspBuilder> {
+  @BuiltValueField(wireName: r'passkeys')
+  BuiltList<Passkey> get passkeys;
+
+  ConnectManageListRsp._();
+
+  factory ConnectManageListRsp([void updates(ConnectManageListRspBuilder b)]) =
+      _$ConnectManageListRsp;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(ConnectManageListRspBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<ConnectManageListRsp> get serializer =>
+      _$ConnectManageListRspSerializer();
+}
+
+class _$ConnectManageListRspSerializer
+    implements PrimitiveSerializer<ConnectManageListRsp> {
+  @override
+  final Iterable<Type> types = const [
+    ConnectManageListRsp,
+    _$ConnectManageListRsp
+  ];
+
+  @override
+  final String wireName = r'ConnectManageListRsp';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    ConnectManageListRsp object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'passkeys';
+    yield serializers.serialize(
+      object.passkeys,
+      specifiedType: const FullType(BuiltList, [FullType(Passkey)]),
+    );
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    ConnectManageListRsp object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required ConnectManageListRspBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'passkeys':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(BuiltList, [FullType(Passkey)]),
+          ) as BuiltList<Passkey>;
+          result.passkeys.replace(valueDes);
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  ConnectManageListRsp deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = ConnectManageListRspBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_manage_list_rsp.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_manage_list_rsp.g.dart
new file mode 100644
index 0000000..d73b2c6
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/connect_manage_list_rsp.g.dart
@@ -0,0 +1,110 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'connect_manage_list_rsp.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$ConnectManageListRsp extends ConnectManageListRsp {
+  @override
+  final BuiltList<Passkey> passkeys;
+
+  factory _$ConnectManageListRsp(
+          [void Function(ConnectManageListRspBuilder)? updates]) =>
+      (new ConnectManageListRspBuilder()..update(updates))._build();
+
+  _$ConnectManageListRsp._({required this.passkeys}) : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        passkeys, r'ConnectManageListRsp', 'passkeys');
+  }
+
+  @override
+  ConnectManageListRsp rebuild(
+          void Function(ConnectManageListRspBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  ConnectManageListRspBuilder toBuilder() =>
+      new ConnectManageListRspBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is ConnectManageListRsp && passkeys == other.passkeys;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, passkeys.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'ConnectManageListRsp')
+          ..add('passkeys', passkeys))
+        .toString();
+  }
+}
+
+class ConnectManageListRspBuilder
+    implements Builder<ConnectManageListRsp, ConnectManageListRspBuilder> {
+  _$ConnectManageListRsp? _$v;
+
+  ListBuilder<Passkey>? _passkeys;
+  ListBuilder<Passkey> get passkeys =>
+      _$this._passkeys ??= new ListBuilder<Passkey>();
+  set passkeys(ListBuilder<Passkey>? passkeys) => _$this._passkeys = passkeys;
+
+  ConnectManageListRspBuilder() {
+    ConnectManageListRsp._defaults(this);
+  }
+
+  ConnectManageListRspBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _passkeys = $v.passkeys.toBuilder();
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(ConnectManageListRsp other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$ConnectManageListRsp;
+  }
+
+  @override
+  void update(void Function(ConnectManageListRspBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  ConnectManageListRsp build() => _build();
+
+  _$ConnectManageListRsp _build() {
+    _$ConnectManageListRsp _$result;
+    try {
+      _$result =
+          _$v ?? new _$ConnectManageListRsp._(passkeys: passkeys.build());
+    } catch (_) {
+      late String _$failedField;
+      try {
+        _$failedField = 'passkeys';
+        passkeys.build();
+      } catch (e) {
+        throw new BuiltValueNestedFieldError(
+            r'ConnectManageListRsp', _$failedField, e.toString());
+      }
+      rethrow;
+    }
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/continue_on_other_device.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/continue_on_other_device.dart
new file mode 100644
index 0000000..1c4b14c
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/continue_on_other_device.dart
@@ -0,0 +1,135 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:built_collection/built_collection.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'continue_on_other_device.g.dart';
+
+/// ContinueOnOtherDevice
+///
+/// Properties:
+/// * [reason]
+@BuiltValue()
+abstract class ContinueOnOtherDevice
+    implements Built<ContinueOnOtherDevice, ContinueOnOtherDeviceBuilder> {
+  @BuiltValueField(wireName: r'reason')
+  ContinueOnOtherDeviceReasonEnum get reason;
+  // enum reasonEnum {  email-link-verified,  process-already-completed,  };
+
+  ContinueOnOtherDevice._();
+
+  factory ContinueOnOtherDevice(
+      [void updates(ContinueOnOtherDeviceBuilder b)]) = _$ContinueOnOtherDevice;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(ContinueOnOtherDeviceBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<ContinueOnOtherDevice> get serializer =>
+      _$ContinueOnOtherDeviceSerializer();
+}
+
+class _$ContinueOnOtherDeviceSerializer
+    implements PrimitiveSerializer<ContinueOnOtherDevice> {
+  @override
+  final Iterable<Type> types = const [
+    ContinueOnOtherDevice,
+    _$ContinueOnOtherDevice
+  ];
+
+  @override
+  final String wireName = r'ContinueOnOtherDevice';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    ContinueOnOtherDevice object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'reason';
+    yield serializers.serialize(
+      object.reason,
+      specifiedType: const FullType(ContinueOnOtherDeviceReasonEnum),
+    );
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    ContinueOnOtherDevice object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required ContinueOnOtherDeviceBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'reason':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(ContinueOnOtherDeviceReasonEnum),
+          ) as ContinueOnOtherDeviceReasonEnum;
+          result.reason = valueDes;
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  ContinueOnOtherDevice deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = ContinueOnOtherDeviceBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
+
+class ContinueOnOtherDeviceReasonEnum extends EnumClass {
+  @BuiltValueEnumConst(wireName: r'email-link-verified')
+  static const ContinueOnOtherDeviceReasonEnum emailLinkVerified =
+      _$continueOnOtherDeviceReasonEnum_emailLinkVerified;
+  @BuiltValueEnumConst(wireName: r'process-already-completed', fallback: true)
+  static const ContinueOnOtherDeviceReasonEnum processAlreadyCompleted =
+      _$continueOnOtherDeviceReasonEnum_processAlreadyCompleted;
+
+  static Serializer<ContinueOnOtherDeviceReasonEnum> get serializer =>
+      _$continueOnOtherDeviceReasonEnumSerializer;
+
+  const ContinueOnOtherDeviceReasonEnum._(String name) : super(name);
+
+  static BuiltSet<ContinueOnOtherDeviceReasonEnum> get values =>
+      _$continueOnOtherDeviceReasonEnumValues;
+  static ContinueOnOtherDeviceReasonEnum valueOf(String name) =>
+      _$continueOnOtherDeviceReasonEnumValueOf(name);
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/continue_on_other_device.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/continue_on_other_device.g.dart
new file mode 100644
index 0000000..f2379a3
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/continue_on_other_device.g.dart
@@ -0,0 +1,159 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'continue_on_other_device.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+const ContinueOnOtherDeviceReasonEnum
+    _$continueOnOtherDeviceReasonEnum_emailLinkVerified =
+    const ContinueOnOtherDeviceReasonEnum._('emailLinkVerified');
+const ContinueOnOtherDeviceReasonEnum
+    _$continueOnOtherDeviceReasonEnum_processAlreadyCompleted =
+    const ContinueOnOtherDeviceReasonEnum._('processAlreadyCompleted');
+
+ContinueOnOtherDeviceReasonEnum _$continueOnOtherDeviceReasonEnumValueOf(
+    String name) {
+  switch (name) {
+    case 'emailLinkVerified':
+      return _$continueOnOtherDeviceReasonEnum_emailLinkVerified;
+    case 'processAlreadyCompleted':
+      return _$continueOnOtherDeviceReasonEnum_processAlreadyCompleted;
+    default:
+      return _$continueOnOtherDeviceReasonEnum_processAlreadyCompleted;
+  }
+}
+
+final BuiltSet<ContinueOnOtherDeviceReasonEnum>
+    _$continueOnOtherDeviceReasonEnumValues = new BuiltSet<
+        ContinueOnOtherDeviceReasonEnum>(const <ContinueOnOtherDeviceReasonEnum>[
+  _$continueOnOtherDeviceReasonEnum_emailLinkVerified,
+  _$continueOnOtherDeviceReasonEnum_processAlreadyCompleted,
+]);
+
+Serializer<ContinueOnOtherDeviceReasonEnum>
+    _$continueOnOtherDeviceReasonEnumSerializer =
+    new _$ContinueOnOtherDeviceReasonEnumSerializer();
+
+class _$ContinueOnOtherDeviceReasonEnumSerializer
+    implements PrimitiveSerializer<ContinueOnOtherDeviceReasonEnum> {
+  static const Map<String, Object> _toWire = const <String, Object>{
+    'emailLinkVerified': 'email-link-verified',
+    'processAlreadyCompleted': 'process-already-completed',
+  };
+  static const Map<Object, String> _fromWire = const <Object, String>{
+    'email-link-verified': 'emailLinkVerified',
+    'process-already-completed': 'processAlreadyCompleted',
+  };
+
+  @override
+  final Iterable<Type> types = const <Type>[ContinueOnOtherDeviceReasonEnum];
+  @override
+  final String wireName = 'ContinueOnOtherDeviceReasonEnum';
+
+  @override
+  Object serialize(
+          Serializers serializers, ContinueOnOtherDeviceReasonEnum object,
+          {FullType specifiedType = FullType.unspecified}) =>
+      _toWire[object.name] ?? object.name;
+
+  @override
+  ContinueOnOtherDeviceReasonEnum deserialize(
+          Serializers serializers, Object serialized,
+          {FullType specifiedType = FullType.unspecified}) =>
+      ContinueOnOtherDeviceReasonEnum.valueOf(
+          _fromWire[serialized] ?? (serialized is String ? serialized : ''));
+}
+
+class _$ContinueOnOtherDevice extends ContinueOnOtherDevice {
+  @override
+  final ContinueOnOtherDeviceReasonEnum reason;
+
+  factory _$ContinueOnOtherDevice(
+          [void Function(ContinueOnOtherDeviceBuilder)? updates]) =>
+      (new ContinueOnOtherDeviceBuilder()..update(updates))._build();
+
+  _$ContinueOnOtherDevice._({required this.reason}) : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        reason, r'ContinueOnOtherDevice', 'reason');
+  }
+
+  @override
+  ContinueOnOtherDevice rebuild(
+          void Function(ContinueOnOtherDeviceBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  ContinueOnOtherDeviceBuilder toBuilder() =>
+      new ContinueOnOtherDeviceBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is ContinueOnOtherDevice && reason == other.reason;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, reason.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'ContinueOnOtherDevice')
+          ..add('reason', reason))
+        .toString();
+  }
+}
+
+class ContinueOnOtherDeviceBuilder
+    implements Builder<ContinueOnOtherDevice, ContinueOnOtherDeviceBuilder> {
+  _$ContinueOnOtherDevice? _$v;
+
+  ContinueOnOtherDeviceReasonEnum? _reason;
+  ContinueOnOtherDeviceReasonEnum? get reason => _$this._reason;
+  set reason(ContinueOnOtherDeviceReasonEnum? reason) =>
+      _$this._reason = reason;
+
+  ContinueOnOtherDeviceBuilder() {
+    ContinueOnOtherDevice._defaults(this);
+  }
+
+  ContinueOnOtherDeviceBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _reason = $v.reason;
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(ContinueOnOtherDevice other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$ContinueOnOtherDevice;
+  }
+
+  @override
+  void update(void Function(ContinueOnOtherDeviceBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  ContinueOnOtherDevice build() => _build();
+
+  _$ContinueOnOtherDevice _build() {
+    final _$result = _$v ??
+        new _$ContinueOnOtherDevice._(
+            reason: BuiltValueNullFieldError.checkNotNull(
+                reason, r'ContinueOnOtherDevice', 'reason'));
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/date.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/date.dart
new file mode 100644
index 0000000..b21c7f5
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/date.dart
@@ -0,0 +1,70 @@
+/// A gregorian calendar date generated by
+/// OpenAPI generator to differentiate
+/// between [DateTime] and [Date] formats.
+class Date implements Comparable<Date> {
+  final int year;
+
+  /// January is 1.
+  final int month;
+
+  /// First day is 1.
+  final int day;
+
+  Date(this.year, this.month, this.day);
+
+  /// The current date
+  static Date now({bool utc = false}) {
+    var now = DateTime.now();
+    if (utc) {
+      now = now.toUtc();
+    }
+    return now.toDate();
+  }
+
+  /// Convert to a [DateTime].
+  DateTime toDateTime({bool utc = false}) {
+    if (utc) {
+      return DateTime.utc(year, month, day);
+    } else {
+      return DateTime(year, month, day);
+    }
+  }
+
+  @override
+  int compareTo(Date other) {
+    int d = year.compareTo(other.year);
+    if (d != 0) {
+      return d;
+    }
+    d = month.compareTo(other.month);
+    if (d != 0) {
+      return d;
+    }
+    return day.compareTo(other.day);
+  }
+
+  @override
+  bool operator ==(Object other) =>
+      identical(this, other) ||
+      other is Date &&
+          runtimeType == other.runtimeType &&
+          year == other.year &&
+          month == other.month &&
+          day == other.day;
+
+  @override
+  int get hashCode => year.hashCode ^ month.hashCode ^ day.hashCode;
+
+  @override
+  String toString() {
+    final yyyy = year.toString();
+    final mm = month.toString().padLeft(2, '0');
+    final dd = day.toString().padLeft(2, '0');
+
+    return '$yyyy-$mm-$dd';
+  }
+}
+
+extension DateTimeToDate on DateTime {
+  Date toDate() => Date(year, month, day);
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/event_create_req.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/event_create_req.dart
new file mode 100644
index 0000000..403cfd5
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/event_create_req.dart
@@ -0,0 +1,113 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:corbado_frontend_api_client/src/model/passkey_event_type.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'event_create_req.g.dart';
+
+/// EventCreateReq
+///
+/// Properties:
+/// * [eventType]
+@BuiltValue()
+abstract class EventCreateReq
+    implements Built<EventCreateReq, EventCreateReqBuilder> {
+  @BuiltValueField(wireName: r'eventType')
+  PasskeyEventType get eventType;
+  // enum eventTypeEnum {  login-explicit-abort,  login-error,  login-error-untyped,  login-one-tap-switch,  user-append-after-cross-platform-blacklisted,  user-append-after-login-error-blacklisted,  append-credential-exists,  append-explicit-abort,  append-error,  };
+
+  EventCreateReq._();
+
+  factory EventCreateReq([void updates(EventCreateReqBuilder b)]) =
+      _$EventCreateReq;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(EventCreateReqBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<EventCreateReq> get serializer =>
+      _$EventCreateReqSerializer();
+}
+
+class _$EventCreateReqSerializer
+    implements PrimitiveSerializer<EventCreateReq> {
+  @override
+  final Iterable<Type> types = const [EventCreateReq, _$EventCreateReq];
+
+  @override
+  final String wireName = r'EventCreateReq';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    EventCreateReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'eventType';
+    yield serializers.serialize(
+      object.eventType,
+      specifiedType: const FullType(PasskeyEventType),
+    );
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    EventCreateReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required EventCreateReqBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'eventType':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(PasskeyEventType),
+          ) as PasskeyEventType;
+          result.eventType = valueDes;
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  EventCreateReq deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = EventCreateReqBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/event_create_req.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/event_create_req.g.dart
new file mode 100644
index 0000000..0715d3c
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/event_create_req.g.dart
@@ -0,0 +1,96 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'event_create_req.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$EventCreateReq extends EventCreateReq {
+  @override
+  final PasskeyEventType eventType;
+
+  factory _$EventCreateReq([void Function(EventCreateReqBuilder)? updates]) =>
+      (new EventCreateReqBuilder()..update(updates))._build();
+
+  _$EventCreateReq._({required this.eventType}) : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        eventType, r'EventCreateReq', 'eventType');
+  }
+
+  @override
+  EventCreateReq rebuild(void Function(EventCreateReqBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  EventCreateReqBuilder toBuilder() =>
+      new EventCreateReqBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is EventCreateReq && eventType == other.eventType;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, eventType.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'EventCreateReq')
+          ..add('eventType', eventType))
+        .toString();
+  }
+}
+
+class EventCreateReqBuilder
+    implements Builder<EventCreateReq, EventCreateReqBuilder> {
+  _$EventCreateReq? _$v;
+
+  PasskeyEventType? _eventType;
+  PasskeyEventType? get eventType => _$this._eventType;
+  set eventType(PasskeyEventType? eventType) => _$this._eventType = eventType;
+
+  EventCreateReqBuilder() {
+    EventCreateReq._defaults(this);
+  }
+
+  EventCreateReqBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _eventType = $v.eventType;
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(EventCreateReq other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$EventCreateReq;
+  }
+
+  @override
+  void update(void Function(EventCreateReqBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  EventCreateReq build() => _build();
+
+  _$EventCreateReq _build() {
+    final _$result = _$v ??
+        new _$EventCreateReq._(
+            eventType: BuiltValueNullFieldError.checkNotNull(
+                eventType, r'EventCreateReq', 'eventType'));
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/full_name_with_error.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/full_name_with_error.dart
new file mode 100644
index 0000000..06b6752
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/full_name_with_error.dart
@@ -0,0 +1,130 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:corbado_frontend_api_client/src/model/request_error.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'full_name_with_error.g.dart';
+
+/// FullNameWithError
+///
+/// Properties:
+/// * [fullName]
+/// * [error]
+@BuiltValue()
+abstract class FullNameWithError
+    implements Built<FullNameWithError, FullNameWithErrorBuilder> {
+  @BuiltValueField(wireName: r'fullName')
+  String get fullName;
+
+  @BuiltValueField(wireName: r'error')
+  RequestError? get error;
+
+  FullNameWithError._();
+
+  factory FullNameWithError([void updates(FullNameWithErrorBuilder b)]) =
+      _$FullNameWithError;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(FullNameWithErrorBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<FullNameWithError> get serializer =>
+      _$FullNameWithErrorSerializer();
+}
+
+class _$FullNameWithErrorSerializer
+    implements PrimitiveSerializer<FullNameWithError> {
+  @override
+  final Iterable<Type> types = const [FullNameWithError, _$FullNameWithError];
+
+  @override
+  final String wireName = r'FullNameWithError';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    FullNameWithError object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'fullName';
+    yield serializers.serialize(
+      object.fullName,
+      specifiedType: const FullType(String),
+    );
+    if (object.error != null) {
+      yield r'error';
+      yield serializers.serialize(
+        object.error,
+        specifiedType: const FullType(RequestError),
+      );
+    }
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    FullNameWithError object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required FullNameWithErrorBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'fullName':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.fullName = valueDes;
+          break;
+        case r'error':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(RequestError),
+          ) as RequestError;
+          result.error.replace(valueDes);
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  FullNameWithError deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = FullNameWithErrorBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/full_name_with_error.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/full_name_with_error.g.dart
new file mode 100644
index 0000000..a604c90
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/full_name_with_error.g.dart
@@ -0,0 +1,122 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'full_name_with_error.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$FullNameWithError extends FullNameWithError {
+  @override
+  final String fullName;
+  @override
+  final RequestError? error;
+
+  factory _$FullNameWithError(
+          [void Function(FullNameWithErrorBuilder)? updates]) =>
+      (new FullNameWithErrorBuilder()..update(updates))._build();
+
+  _$FullNameWithError._({required this.fullName, this.error}) : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        fullName, r'FullNameWithError', 'fullName');
+  }
+
+  @override
+  FullNameWithError rebuild(void Function(FullNameWithErrorBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  FullNameWithErrorBuilder toBuilder() =>
+      new FullNameWithErrorBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is FullNameWithError &&
+        fullName == other.fullName &&
+        error == other.error;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, fullName.hashCode);
+    _$hash = $jc(_$hash, error.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'FullNameWithError')
+          ..add('fullName', fullName)
+          ..add('error', error))
+        .toString();
+  }
+}
+
+class FullNameWithErrorBuilder
+    implements Builder<FullNameWithError, FullNameWithErrorBuilder> {
+  _$FullNameWithError? _$v;
+
+  String? _fullName;
+  String? get fullName => _$this._fullName;
+  set fullName(String? fullName) => _$this._fullName = fullName;
+
+  RequestErrorBuilder? _error;
+  RequestErrorBuilder get error => _$this._error ??= new RequestErrorBuilder();
+  set error(RequestErrorBuilder? error) => _$this._error = error;
+
+  FullNameWithErrorBuilder() {
+    FullNameWithError._defaults(this);
+  }
+
+  FullNameWithErrorBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _fullName = $v.fullName;
+      _error = $v.error?.toBuilder();
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(FullNameWithError other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$FullNameWithError;
+  }
+
+  @override
+  void update(void Function(FullNameWithErrorBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  FullNameWithError build() => _build();
+
+  _$FullNameWithError _build() {
+    _$FullNameWithError _$result;
+    try {
+      _$result = _$v ??
+          new _$FullNameWithError._(
+              fullName: BuiltValueNullFieldError.checkNotNull(
+                  fullName, r'FullNameWithError', 'fullName'),
+              error: _error?.build());
+    } catch (_) {
+      late String _$failedField;
+      try {
+        _$failedField = 'error';
+        _error?.build();
+      } catch (e) {
+        throw new BuiltValueNestedFieldError(
+            r'FullNameWithError', _$failedField, e.toString());
+      }
+      rethrow;
+    }
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/general_block_completed.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/general_block_completed.dart
new file mode 100644
index 0000000..51aab9d
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/general_block_completed.dart
@@ -0,0 +1,168 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:corbado_frontend_api_client/src/model/passkey_operation.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'general_block_completed.g.dart';
+
+/// GeneralBlockCompleted
+///
+/// Properties:
+/// * [blockType]
+/// * [shortSession]
+/// * [longSession] - Only given when project environment is dev 1
+/// * [passkeyOperation]
+@BuiltValue()
+abstract class GeneralBlockCompleted
+    implements Built<GeneralBlockCompleted, GeneralBlockCompletedBuilder> {
+  @BuiltValueField(wireName: r'blockType')
+  String get blockType;
+
+  @BuiltValueField(wireName: r'shortSession')
+  String get shortSession;
+
+  /// Only given when project environment is dev 1
+  @BuiltValueField(wireName: r'longSession')
+  String? get longSession;
+
+  @BuiltValueField(wireName: r'passkeyOperation')
+  PasskeyOperation? get passkeyOperation;
+
+  GeneralBlockCompleted._();
+
+  factory GeneralBlockCompleted(
+      [void updates(GeneralBlockCompletedBuilder b)]) = _$GeneralBlockCompleted;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(GeneralBlockCompletedBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<GeneralBlockCompleted> get serializer =>
+      _$GeneralBlockCompletedSerializer();
+}
+
+class _$GeneralBlockCompletedSerializer
+    implements PrimitiveSerializer<GeneralBlockCompleted> {
+  @override
+  final Iterable<Type> types = const [
+    GeneralBlockCompleted,
+    _$GeneralBlockCompleted
+  ];
+
+  @override
+  final String wireName = r'GeneralBlockCompleted';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    GeneralBlockCompleted object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'blockType';
+    yield serializers.serialize(
+      object.blockType,
+      specifiedType: const FullType(String),
+    );
+    yield r'shortSession';
+    yield serializers.serialize(
+      object.shortSession,
+      specifiedType: const FullType(String),
+    );
+    if (object.longSession != null) {
+      yield r'longSession';
+      yield serializers.serialize(
+        object.longSession,
+        specifiedType: const FullType(String),
+      );
+    }
+    if (object.passkeyOperation != null) {
+      yield r'passkeyOperation';
+      yield serializers.serialize(
+        object.passkeyOperation,
+        specifiedType: const FullType(PasskeyOperation),
+      );
+    }
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    GeneralBlockCompleted object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required GeneralBlockCompletedBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'blockType':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.blockType = valueDes;
+          break;
+        case r'shortSession':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.shortSession = valueDes;
+          break;
+        case r'longSession':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.longSession = valueDes;
+          break;
+        case r'passkeyOperation':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(PasskeyOperation),
+          ) as PasskeyOperation;
+          result.passkeyOperation.replace(valueDes);
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  GeneralBlockCompleted deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = GeneralBlockCompletedBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/general_block_completed.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/general_block_completed.g.dart
new file mode 100644
index 0000000..b179248
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/general_block_completed.g.dart
@@ -0,0 +1,155 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'general_block_completed.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$GeneralBlockCompleted extends GeneralBlockCompleted {
+  @override
+  final String blockType;
+  @override
+  final String shortSession;
+  @override
+  final String? longSession;
+  @override
+  final PasskeyOperation? passkeyOperation;
+
+  factory _$GeneralBlockCompleted(
+          [void Function(GeneralBlockCompletedBuilder)? updates]) =>
+      (new GeneralBlockCompletedBuilder()..update(updates))._build();
+
+  _$GeneralBlockCompleted._(
+      {required this.blockType,
+      required this.shortSession,
+      this.longSession,
+      this.passkeyOperation})
+      : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        blockType, r'GeneralBlockCompleted', 'blockType');
+    BuiltValueNullFieldError.checkNotNull(
+        shortSession, r'GeneralBlockCompleted', 'shortSession');
+  }
+
+  @override
+  GeneralBlockCompleted rebuild(
+          void Function(GeneralBlockCompletedBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  GeneralBlockCompletedBuilder toBuilder() =>
+      new GeneralBlockCompletedBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is GeneralBlockCompleted &&
+        blockType == other.blockType &&
+        shortSession == other.shortSession &&
+        longSession == other.longSession &&
+        passkeyOperation == other.passkeyOperation;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, blockType.hashCode);
+    _$hash = $jc(_$hash, shortSession.hashCode);
+    _$hash = $jc(_$hash, longSession.hashCode);
+    _$hash = $jc(_$hash, passkeyOperation.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'GeneralBlockCompleted')
+          ..add('blockType', blockType)
+          ..add('shortSession', shortSession)
+          ..add('longSession', longSession)
+          ..add('passkeyOperation', passkeyOperation))
+        .toString();
+  }
+}
+
+class GeneralBlockCompletedBuilder
+    implements Builder<GeneralBlockCompleted, GeneralBlockCompletedBuilder> {
+  _$GeneralBlockCompleted? _$v;
+
+  String? _blockType;
+  String? get blockType => _$this._blockType;
+  set blockType(String? blockType) => _$this._blockType = blockType;
+
+  String? _shortSession;
+  String? get shortSession => _$this._shortSession;
+  set shortSession(String? shortSession) => _$this._shortSession = shortSession;
+
+  String? _longSession;
+  String? get longSession => _$this._longSession;
+  set longSession(String? longSession) => _$this._longSession = longSession;
+
+  PasskeyOperationBuilder? _passkeyOperation;
+  PasskeyOperationBuilder get passkeyOperation =>
+      _$this._passkeyOperation ??= new PasskeyOperationBuilder();
+  set passkeyOperation(PasskeyOperationBuilder? passkeyOperation) =>
+      _$this._passkeyOperation = passkeyOperation;
+
+  GeneralBlockCompletedBuilder() {
+    GeneralBlockCompleted._defaults(this);
+  }
+
+  GeneralBlockCompletedBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _blockType = $v.blockType;
+      _shortSession = $v.shortSession;
+      _longSession = $v.longSession;
+      _passkeyOperation = $v.passkeyOperation?.toBuilder();
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(GeneralBlockCompleted other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$GeneralBlockCompleted;
+  }
+
+  @override
+  void update(void Function(GeneralBlockCompletedBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  GeneralBlockCompleted build() => _build();
+
+  _$GeneralBlockCompleted _build() {
+    _$GeneralBlockCompleted _$result;
+    try {
+      _$result = _$v ??
+          new _$GeneralBlockCompleted._(
+              blockType: BuiltValueNullFieldError.checkNotNull(
+                  blockType, r'GeneralBlockCompleted', 'blockType'),
+              shortSession: BuiltValueNullFieldError.checkNotNull(
+                  shortSession, r'GeneralBlockCompleted', 'shortSession'),
+              longSession: longSession,
+              passkeyOperation: _passkeyOperation?.build());
+    } catch (_) {
+      late String _$failedField;
+      try {
+        _$failedField = 'passkeyOperation';
+        _passkeyOperation?.build();
+      } catch (e) {
+        throw new BuiltValueNestedFieldError(
+            r'GeneralBlockCompleted', _$failedField, e.toString());
+      }
+      rethrow;
+    }
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/general_block_login_init.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/general_block_login_init.dart
new file mode 100644
index 0000000..7bdae13
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/general_block_login_init.dart
@@ -0,0 +1,266 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:corbado_frontend_api_client/src/model/social_data.dart';
+import 'package:corbado_frontend_api_client/src/model/request_error.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'general_block_login_init.g.dart';
+
+/// GeneralBlockLoginInit
+///
+/// Properties:
+/// * [blockType]
+/// * [identifierValue]
+/// * [isPhone]
+/// * [isPhoneAvailable]
+/// * [isEmailAvailable]
+/// * [isUsernameAvailable]
+/// * [socialData]
+/// * [conditionalUIChallenge]
+/// * [fieldError]
+/// * [error]
+@BuiltValue()
+abstract class GeneralBlockLoginInit
+    implements Built<GeneralBlockLoginInit, GeneralBlockLoginInitBuilder> {
+  @BuiltValueField(wireName: r'blockType')
+  String get blockType;
+
+  @BuiltValueField(wireName: r'identifierValue')
+  String get identifierValue;
+
+  @BuiltValueField(wireName: r'isPhone')
+  bool get isPhone;
+
+  @BuiltValueField(wireName: r'isPhoneAvailable')
+  bool get isPhoneAvailable;
+
+  @BuiltValueField(wireName: r'isEmailAvailable')
+  bool get isEmailAvailable;
+
+  @BuiltValueField(wireName: r'isUsernameAvailable')
+  bool get isUsernameAvailable;
+
+  @BuiltValueField(wireName: r'socialData')
+  SocialData get socialData;
+
+  @BuiltValueField(wireName: r'conditionalUIChallenge')
+  String? get conditionalUIChallenge;
+
+  @BuiltValueField(wireName: r'fieldError')
+  RequestError? get fieldError;
+
+  @BuiltValueField(wireName: r'error')
+  RequestError? get error;
+
+  GeneralBlockLoginInit._();
+
+  factory GeneralBlockLoginInit(
+      [void updates(GeneralBlockLoginInitBuilder b)]) = _$GeneralBlockLoginInit;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(GeneralBlockLoginInitBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<GeneralBlockLoginInit> get serializer =>
+      _$GeneralBlockLoginInitSerializer();
+}
+
+class _$GeneralBlockLoginInitSerializer
+    implements PrimitiveSerializer<GeneralBlockLoginInit> {
+  @override
+  final Iterable<Type> types = const [
+    GeneralBlockLoginInit,
+    _$GeneralBlockLoginInit
+  ];
+
+  @override
+  final String wireName = r'GeneralBlockLoginInit';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    GeneralBlockLoginInit object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'blockType';
+    yield serializers.serialize(
+      object.blockType,
+      specifiedType: const FullType(String),
+    );
+    yield r'identifierValue';
+    yield serializers.serialize(
+      object.identifierValue,
+      specifiedType: const FullType(String),
+    );
+    yield r'isPhone';
+    yield serializers.serialize(
+      object.isPhone,
+      specifiedType: const FullType(bool),
+    );
+    yield r'isPhoneAvailable';
+    yield serializers.serialize(
+      object.isPhoneAvailable,
+      specifiedType: const FullType(bool),
+    );
+    yield r'isEmailAvailable';
+    yield serializers.serialize(
+      object.isEmailAvailable,
+      specifiedType: const FullType(bool),
+    );
+    yield r'isUsernameAvailable';
+    yield serializers.serialize(
+      object.isUsernameAvailable,
+      specifiedType: const FullType(bool),
+    );
+    yield r'socialData';
+    yield serializers.serialize(
+      object.socialData,
+      specifiedType: const FullType(SocialData),
+    );
+    if (object.conditionalUIChallenge != null) {
+      yield r'conditionalUIChallenge';
+      yield serializers.serialize(
+        object.conditionalUIChallenge,
+        specifiedType: const FullType(String),
+      );
+    }
+    if (object.fieldError != null) {
+      yield r'fieldError';
+      yield serializers.serialize(
+        object.fieldError,
+        specifiedType: const FullType(RequestError),
+      );
+    }
+    if (object.error != null) {
+      yield r'error';
+      yield serializers.serialize(
+        object.error,
+        specifiedType: const FullType(RequestError),
+      );
+    }
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    GeneralBlockLoginInit object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required GeneralBlockLoginInitBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'blockType':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.blockType = valueDes;
+          break;
+        case r'identifierValue':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.identifierValue = valueDes;
+          break;
+        case r'isPhone':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(bool),
+          ) as bool;
+          result.isPhone = valueDes;
+          break;
+        case r'isPhoneAvailable':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(bool),
+          ) as bool;
+          result.isPhoneAvailable = valueDes;
+          break;
+        case r'isEmailAvailable':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(bool),
+          ) as bool;
+          result.isEmailAvailable = valueDes;
+          break;
+        case r'isUsernameAvailable':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(bool),
+          ) as bool;
+          result.isUsernameAvailable = valueDes;
+          break;
+        case r'socialData':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(SocialData),
+          ) as SocialData;
+          result.socialData.replace(valueDes);
+          break;
+        case r'conditionalUIChallenge':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.conditionalUIChallenge = valueDes;
+          break;
+        case r'fieldError':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(RequestError),
+          ) as RequestError;
+          result.fieldError.replace(valueDes);
+          break;
+        case r'error':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(RequestError),
+          ) as RequestError;
+          result.error.replace(valueDes);
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  GeneralBlockLoginInit deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = GeneralBlockLoginInitBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/general_block_login_init.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/general_block_login_init.g.dart
new file mode 100644
index 0000000..03f0384
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/general_block_login_init.g.dart
@@ -0,0 +1,259 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'general_block_login_init.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$GeneralBlockLoginInit extends GeneralBlockLoginInit {
+  @override
+  final String blockType;
+  @override
+  final String identifierValue;
+  @override
+  final bool isPhone;
+  @override
+  final bool isPhoneAvailable;
+  @override
+  final bool isEmailAvailable;
+  @override
+  final bool isUsernameAvailable;
+  @override
+  final SocialData socialData;
+  @override
+  final String? conditionalUIChallenge;
+  @override
+  final RequestError? fieldError;
+  @override
+  final RequestError? error;
+
+  factory _$GeneralBlockLoginInit(
+          [void Function(GeneralBlockLoginInitBuilder)? updates]) =>
+      (new GeneralBlockLoginInitBuilder()..update(updates))._build();
+
+  _$GeneralBlockLoginInit._(
+      {required this.blockType,
+      required this.identifierValue,
+      required this.isPhone,
+      required this.isPhoneAvailable,
+      required this.isEmailAvailable,
+      required this.isUsernameAvailable,
+      required this.socialData,
+      this.conditionalUIChallenge,
+      this.fieldError,
+      this.error})
+      : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        blockType, r'GeneralBlockLoginInit', 'blockType');
+    BuiltValueNullFieldError.checkNotNull(
+        identifierValue, r'GeneralBlockLoginInit', 'identifierValue');
+    BuiltValueNullFieldError.checkNotNull(
+        isPhone, r'GeneralBlockLoginInit', 'isPhone');
+    BuiltValueNullFieldError.checkNotNull(
+        isPhoneAvailable, r'GeneralBlockLoginInit', 'isPhoneAvailable');
+    BuiltValueNullFieldError.checkNotNull(
+        isEmailAvailable, r'GeneralBlockLoginInit', 'isEmailAvailable');
+    BuiltValueNullFieldError.checkNotNull(
+        isUsernameAvailable, r'GeneralBlockLoginInit', 'isUsernameAvailable');
+    BuiltValueNullFieldError.checkNotNull(
+        socialData, r'GeneralBlockLoginInit', 'socialData');
+  }
+
+  @override
+  GeneralBlockLoginInit rebuild(
+          void Function(GeneralBlockLoginInitBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  GeneralBlockLoginInitBuilder toBuilder() =>
+      new GeneralBlockLoginInitBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is GeneralBlockLoginInit &&
+        blockType == other.blockType &&
+        identifierValue == other.identifierValue &&
+        isPhone == other.isPhone &&
+        isPhoneAvailable == other.isPhoneAvailable &&
+        isEmailAvailable == other.isEmailAvailable &&
+        isUsernameAvailable == other.isUsernameAvailable &&
+        socialData == other.socialData &&
+        conditionalUIChallenge == other.conditionalUIChallenge &&
+        fieldError == other.fieldError &&
+        error == other.error;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, blockType.hashCode);
+    _$hash = $jc(_$hash, identifierValue.hashCode);
+    _$hash = $jc(_$hash, isPhone.hashCode);
+    _$hash = $jc(_$hash, isPhoneAvailable.hashCode);
+    _$hash = $jc(_$hash, isEmailAvailable.hashCode);
+    _$hash = $jc(_$hash, isUsernameAvailable.hashCode);
+    _$hash = $jc(_$hash, socialData.hashCode);
+    _$hash = $jc(_$hash, conditionalUIChallenge.hashCode);
+    _$hash = $jc(_$hash, fieldError.hashCode);
+    _$hash = $jc(_$hash, error.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'GeneralBlockLoginInit')
+          ..add('blockType', blockType)
+          ..add('identifierValue', identifierValue)
+          ..add('isPhone', isPhone)
+          ..add('isPhoneAvailable', isPhoneAvailable)
+          ..add('isEmailAvailable', isEmailAvailable)
+          ..add('isUsernameAvailable', isUsernameAvailable)
+          ..add('socialData', socialData)
+          ..add('conditionalUIChallenge', conditionalUIChallenge)
+          ..add('fieldError', fieldError)
+          ..add('error', error))
+        .toString();
+  }
+}
+
+class GeneralBlockLoginInitBuilder
+    implements Builder<GeneralBlockLoginInit, GeneralBlockLoginInitBuilder> {
+  _$GeneralBlockLoginInit? _$v;
+
+  String? _blockType;
+  String? get blockType => _$this._blockType;
+  set blockType(String? blockType) => _$this._blockType = blockType;
+
+  String? _identifierValue;
+  String? get identifierValue => _$this._identifierValue;
+  set identifierValue(String? identifierValue) =>
+      _$this._identifierValue = identifierValue;
+
+  bool? _isPhone;
+  bool? get isPhone => _$this._isPhone;
+  set isPhone(bool? isPhone) => _$this._isPhone = isPhone;
+
+  bool? _isPhoneAvailable;
+  bool? get isPhoneAvailable => _$this._isPhoneAvailable;
+  set isPhoneAvailable(bool? isPhoneAvailable) =>
+      _$this._isPhoneAvailable = isPhoneAvailable;
+
+  bool? _isEmailAvailable;
+  bool? get isEmailAvailable => _$this._isEmailAvailable;
+  set isEmailAvailable(bool? isEmailAvailable) =>
+      _$this._isEmailAvailable = isEmailAvailable;
+
+  bool? _isUsernameAvailable;
+  bool? get isUsernameAvailable => _$this._isUsernameAvailable;
+  set isUsernameAvailable(bool? isUsernameAvailable) =>
+      _$this._isUsernameAvailable = isUsernameAvailable;
+
+  SocialDataBuilder? _socialData;
+  SocialDataBuilder get socialData =>
+      _$this._socialData ??= new SocialDataBuilder();
+  set socialData(SocialDataBuilder? socialData) =>
+      _$this._socialData = socialData;
+
+  String? _conditionalUIChallenge;
+  String? get conditionalUIChallenge => _$this._conditionalUIChallenge;
+  set conditionalUIChallenge(String? conditionalUIChallenge) =>
+      _$this._conditionalUIChallenge = conditionalUIChallenge;
+
+  RequestErrorBuilder? _fieldError;
+  RequestErrorBuilder get fieldError =>
+      _$this._fieldError ??= new RequestErrorBuilder();
+  set fieldError(RequestErrorBuilder? fieldError) =>
+      _$this._fieldError = fieldError;
+
+  RequestErrorBuilder? _error;
+  RequestErrorBuilder get error => _$this._error ??= new RequestErrorBuilder();
+  set error(RequestErrorBuilder? error) => _$this._error = error;
+
+  GeneralBlockLoginInitBuilder() {
+    GeneralBlockLoginInit._defaults(this);
+  }
+
+  GeneralBlockLoginInitBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _blockType = $v.blockType;
+      _identifierValue = $v.identifierValue;
+      _isPhone = $v.isPhone;
+      _isPhoneAvailable = $v.isPhoneAvailable;
+      _isEmailAvailable = $v.isEmailAvailable;
+      _isUsernameAvailable = $v.isUsernameAvailable;
+      _socialData = $v.socialData.toBuilder();
+      _conditionalUIChallenge = $v.conditionalUIChallenge;
+      _fieldError = $v.fieldError?.toBuilder();
+      _error = $v.error?.toBuilder();
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(GeneralBlockLoginInit other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$GeneralBlockLoginInit;
+  }
+
+  @override
+  void update(void Function(GeneralBlockLoginInitBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  GeneralBlockLoginInit build() => _build();
+
+  _$GeneralBlockLoginInit _build() {
+    _$GeneralBlockLoginInit _$result;
+    try {
+      _$result = _$v ??
+          new _$GeneralBlockLoginInit._(
+              blockType: BuiltValueNullFieldError.checkNotNull(
+                  blockType, r'GeneralBlockLoginInit', 'blockType'),
+              identifierValue: BuiltValueNullFieldError.checkNotNull(
+                  identifierValue, r'GeneralBlockLoginInit', 'identifierValue'),
+              isPhone: BuiltValueNullFieldError.checkNotNull(
+                  isPhone, r'GeneralBlockLoginInit', 'isPhone'),
+              isPhoneAvailable: BuiltValueNullFieldError.checkNotNull(
+                  isPhoneAvailable,
+                  r'GeneralBlockLoginInit',
+                  'isPhoneAvailable'),
+              isEmailAvailable: BuiltValueNullFieldError.checkNotNull(
+                  isEmailAvailable,
+                  r'GeneralBlockLoginInit',
+                  'isEmailAvailable'),
+              isUsernameAvailable: BuiltValueNullFieldError.checkNotNull(
+                  isUsernameAvailable,
+                  r'GeneralBlockLoginInit',
+                  'isUsernameAvailable'),
+              socialData: socialData.build(),
+              conditionalUIChallenge: conditionalUIChallenge,
+              fieldError: _fieldError?.build(),
+              error: _error?.build());
+    } catch (_) {
+      late String _$failedField;
+      try {
+        _$failedField = 'socialData';
+        socialData.build();
+
+        _$failedField = 'fieldError';
+        _fieldError?.build();
+        _$failedField = 'error';
+        _error?.build();
+      } catch (e) {
+        throw new BuiltValueNestedFieldError(
+            r'GeneralBlockLoginInit', _$failedField, e.toString());
+      }
+      rethrow;
+    }
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/general_block_passkey_append.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/general_block_passkey_append.dart
new file mode 100644
index 0000000..84c9fdf
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/general_block_passkey_append.dart
@@ -0,0 +1,240 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:built_collection/built_collection.dart';
+import 'package:corbado_frontend_api_client/src/model/login_identifier_type.dart';
+import 'package:corbado_frontend_api_client/src/model/passkey_icon_set.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'general_block_passkey_append.g.dart';
+
+/// GeneralBlockPasskeyAppend
+///
+/// Properties:
+/// * [blockType]
+/// * [challenge]
+/// * [identifierValue]
+/// * [identifierType]
+/// * [autoSubmit]
+/// * [passkeyIconSet]
+/// * [variant]
+@BuiltValue()
+abstract class GeneralBlockPasskeyAppend
+    implements
+        Built<GeneralBlockPasskeyAppend, GeneralBlockPasskeyAppendBuilder> {
+  @BuiltValueField(wireName: r'blockType')
+  String get blockType;
+
+  @BuiltValueField(wireName: r'challenge')
+  String get challenge;
+
+  @BuiltValueField(wireName: r'identifierValue')
+  String get identifierValue;
+
+  @BuiltValueField(wireName: r'identifierType')
+  LoginIdentifierType get identifierType;
+  // enum identifierTypeEnum {  email,  phone,  username,  };
+
+  @BuiltValueField(wireName: r'autoSubmit')
+  bool get autoSubmit;
+
+  @BuiltValueField(wireName: r'passkeyIconSet')
+  PasskeyIconSet get passkeyIconSet;
+  // enum passkeyIconSetEnum {  default,  apple,  android,  windows,  };
+
+  @BuiltValueField(wireName: r'variant')
+  GeneralBlockPasskeyAppendVariantEnum get variant;
+  // enum variantEnum {  default,  after-hybrid,  after-error,  };
+
+  GeneralBlockPasskeyAppend._();
+
+  factory GeneralBlockPasskeyAppend(
+          [void updates(GeneralBlockPasskeyAppendBuilder b)]) =
+      _$GeneralBlockPasskeyAppend;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(GeneralBlockPasskeyAppendBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<GeneralBlockPasskeyAppend> get serializer =>
+      _$GeneralBlockPasskeyAppendSerializer();
+}
+
+class _$GeneralBlockPasskeyAppendSerializer
+    implements PrimitiveSerializer<GeneralBlockPasskeyAppend> {
+  @override
+  final Iterable<Type> types = const [
+    GeneralBlockPasskeyAppend,
+    _$GeneralBlockPasskeyAppend
+  ];
+
+  @override
+  final String wireName = r'GeneralBlockPasskeyAppend';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    GeneralBlockPasskeyAppend object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'blockType';
+    yield serializers.serialize(
+      object.blockType,
+      specifiedType: const FullType(String),
+    );
+    yield r'challenge';
+    yield serializers.serialize(
+      object.challenge,
+      specifiedType: const FullType(String),
+    );
+    yield r'identifierValue';
+    yield serializers.serialize(
+      object.identifierValue,
+      specifiedType: const FullType(String),
+    );
+    yield r'identifierType';
+    yield serializers.serialize(
+      object.identifierType,
+      specifiedType: const FullType(LoginIdentifierType),
+    );
+    yield r'autoSubmit';
+    yield serializers.serialize(
+      object.autoSubmit,
+      specifiedType: const FullType(bool),
+    );
+    yield r'passkeyIconSet';
+    yield serializers.serialize(
+      object.passkeyIconSet,
+      specifiedType: const FullType(PasskeyIconSet),
+    );
+    yield r'variant';
+    yield serializers.serialize(
+      object.variant,
+      specifiedType: const FullType(GeneralBlockPasskeyAppendVariantEnum),
+    );
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    GeneralBlockPasskeyAppend object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required GeneralBlockPasskeyAppendBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'blockType':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.blockType = valueDes;
+          break;
+        case r'challenge':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.challenge = valueDes;
+          break;
+        case r'identifierValue':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.identifierValue = valueDes;
+          break;
+        case r'identifierType':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(LoginIdentifierType),
+          ) as LoginIdentifierType;
+          result.identifierType = valueDes;
+          break;
+        case r'autoSubmit':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(bool),
+          ) as bool;
+          result.autoSubmit = valueDes;
+          break;
+        case r'passkeyIconSet':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(PasskeyIconSet),
+          ) as PasskeyIconSet;
+          result.passkeyIconSet = valueDes;
+          break;
+        case r'variant':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(GeneralBlockPasskeyAppendVariantEnum),
+          ) as GeneralBlockPasskeyAppendVariantEnum;
+          result.variant = valueDes;
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  GeneralBlockPasskeyAppend deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = GeneralBlockPasskeyAppendBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
+
+class GeneralBlockPasskeyAppendVariantEnum extends EnumClass {
+  @BuiltValueEnumConst(wireName: r'default')
+  static const GeneralBlockPasskeyAppendVariantEnum default_ =
+      _$generalBlockPasskeyAppendVariantEnum_default_;
+  @BuiltValueEnumConst(wireName: r'after-hybrid')
+  static const GeneralBlockPasskeyAppendVariantEnum afterHybrid =
+      _$generalBlockPasskeyAppendVariantEnum_afterHybrid;
+  @BuiltValueEnumConst(wireName: r'after-error', fallback: true)
+  static const GeneralBlockPasskeyAppendVariantEnum afterError =
+      _$generalBlockPasskeyAppendVariantEnum_afterError;
+
+  static Serializer<GeneralBlockPasskeyAppendVariantEnum> get serializer =>
+      _$generalBlockPasskeyAppendVariantEnumSerializer;
+
+  const GeneralBlockPasskeyAppendVariantEnum._(String name) : super(name);
+
+  static BuiltSet<GeneralBlockPasskeyAppendVariantEnum> get values =>
+      _$generalBlockPasskeyAppendVariantEnumValues;
+  static GeneralBlockPasskeyAppendVariantEnum valueOf(String name) =>
+      _$generalBlockPasskeyAppendVariantEnumValueOf(name);
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/general_block_passkey_append.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/general_block_passkey_append.g.dart
new file mode 100644
index 0000000..bdc7e42
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/general_block_passkey_append.g.dart
@@ -0,0 +1,268 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'general_block_passkey_append.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+const GeneralBlockPasskeyAppendVariantEnum
+    _$generalBlockPasskeyAppendVariantEnum_default_ =
+    const GeneralBlockPasskeyAppendVariantEnum._('default_');
+const GeneralBlockPasskeyAppendVariantEnum
+    _$generalBlockPasskeyAppendVariantEnum_afterHybrid =
+    const GeneralBlockPasskeyAppendVariantEnum._('afterHybrid');
+const GeneralBlockPasskeyAppendVariantEnum
+    _$generalBlockPasskeyAppendVariantEnum_afterError =
+    const GeneralBlockPasskeyAppendVariantEnum._('afterError');
+
+GeneralBlockPasskeyAppendVariantEnum
+    _$generalBlockPasskeyAppendVariantEnumValueOf(String name) {
+  switch (name) {
+    case 'default_':
+      return _$generalBlockPasskeyAppendVariantEnum_default_;
+    case 'afterHybrid':
+      return _$generalBlockPasskeyAppendVariantEnum_afterHybrid;
+    case 'afterError':
+      return _$generalBlockPasskeyAppendVariantEnum_afterError;
+    default:
+      return _$generalBlockPasskeyAppendVariantEnum_afterError;
+  }
+}
+
+final BuiltSet<GeneralBlockPasskeyAppendVariantEnum>
+    _$generalBlockPasskeyAppendVariantEnumValues = new BuiltSet<
+        GeneralBlockPasskeyAppendVariantEnum>(const <GeneralBlockPasskeyAppendVariantEnum>[
+  _$generalBlockPasskeyAppendVariantEnum_default_,
+  _$generalBlockPasskeyAppendVariantEnum_afterHybrid,
+  _$generalBlockPasskeyAppendVariantEnum_afterError,
+]);
+
+Serializer<GeneralBlockPasskeyAppendVariantEnum>
+    _$generalBlockPasskeyAppendVariantEnumSerializer =
+    new _$GeneralBlockPasskeyAppendVariantEnumSerializer();
+
+class _$GeneralBlockPasskeyAppendVariantEnumSerializer
+    implements PrimitiveSerializer<GeneralBlockPasskeyAppendVariantEnum> {
+  static const Map<String, Object> _toWire = const <String, Object>{
+    'default_': 'default',
+    'afterHybrid': 'after-hybrid',
+    'afterError': 'after-error',
+  };
+  static const Map<Object, String> _fromWire = const <Object, String>{
+    'default': 'default_',
+    'after-hybrid': 'afterHybrid',
+    'after-error': 'afterError',
+  };
+
+  @override
+  final Iterable<Type> types = const <Type>[
+    GeneralBlockPasskeyAppendVariantEnum
+  ];
+  @override
+  final String wireName = 'GeneralBlockPasskeyAppendVariantEnum';
+
+  @override
+  Object serialize(
+          Serializers serializers, GeneralBlockPasskeyAppendVariantEnum object,
+          {FullType specifiedType = FullType.unspecified}) =>
+      _toWire[object.name] ?? object.name;
+
+  @override
+  GeneralBlockPasskeyAppendVariantEnum deserialize(
+          Serializers serializers, Object serialized,
+          {FullType specifiedType = FullType.unspecified}) =>
+      GeneralBlockPasskeyAppendVariantEnum.valueOf(
+          _fromWire[serialized] ?? (serialized is String ? serialized : ''));
+}
+
+class _$GeneralBlockPasskeyAppend extends GeneralBlockPasskeyAppend {
+  @override
+  final String blockType;
+  @override
+  final String challenge;
+  @override
+  final String identifierValue;
+  @override
+  final LoginIdentifierType identifierType;
+  @override
+  final bool autoSubmit;
+  @override
+  final PasskeyIconSet passkeyIconSet;
+  @override
+  final GeneralBlockPasskeyAppendVariantEnum variant;
+
+  factory _$GeneralBlockPasskeyAppend(
+          [void Function(GeneralBlockPasskeyAppendBuilder)? updates]) =>
+      (new GeneralBlockPasskeyAppendBuilder()..update(updates))._build();
+
+  _$GeneralBlockPasskeyAppend._(
+      {required this.blockType,
+      required this.challenge,
+      required this.identifierValue,
+      required this.identifierType,
+      required this.autoSubmit,
+      required this.passkeyIconSet,
+      required this.variant})
+      : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        blockType, r'GeneralBlockPasskeyAppend', 'blockType');
+    BuiltValueNullFieldError.checkNotNull(
+        challenge, r'GeneralBlockPasskeyAppend', 'challenge');
+    BuiltValueNullFieldError.checkNotNull(
+        identifierValue, r'GeneralBlockPasskeyAppend', 'identifierValue');
+    BuiltValueNullFieldError.checkNotNull(
+        identifierType, r'GeneralBlockPasskeyAppend', 'identifierType');
+    BuiltValueNullFieldError.checkNotNull(
+        autoSubmit, r'GeneralBlockPasskeyAppend', 'autoSubmit');
+    BuiltValueNullFieldError.checkNotNull(
+        passkeyIconSet, r'GeneralBlockPasskeyAppend', 'passkeyIconSet');
+    BuiltValueNullFieldError.checkNotNull(
+        variant, r'GeneralBlockPasskeyAppend', 'variant');
+  }
+
+  @override
+  GeneralBlockPasskeyAppend rebuild(
+          void Function(GeneralBlockPasskeyAppendBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  GeneralBlockPasskeyAppendBuilder toBuilder() =>
+      new GeneralBlockPasskeyAppendBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is GeneralBlockPasskeyAppend &&
+        blockType == other.blockType &&
+        challenge == other.challenge &&
+        identifierValue == other.identifierValue &&
+        identifierType == other.identifierType &&
+        autoSubmit == other.autoSubmit &&
+        passkeyIconSet == other.passkeyIconSet &&
+        variant == other.variant;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, blockType.hashCode);
+    _$hash = $jc(_$hash, challenge.hashCode);
+    _$hash = $jc(_$hash, identifierValue.hashCode);
+    _$hash = $jc(_$hash, identifierType.hashCode);
+    _$hash = $jc(_$hash, autoSubmit.hashCode);
+    _$hash = $jc(_$hash, passkeyIconSet.hashCode);
+    _$hash = $jc(_$hash, variant.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'GeneralBlockPasskeyAppend')
+          ..add('blockType', blockType)
+          ..add('challenge', challenge)
+          ..add('identifierValue', identifierValue)
+          ..add('identifierType', identifierType)
+          ..add('autoSubmit', autoSubmit)
+          ..add('passkeyIconSet', passkeyIconSet)
+          ..add('variant', variant))
+        .toString();
+  }
+}
+
+class GeneralBlockPasskeyAppendBuilder
+    implements
+        Builder<GeneralBlockPasskeyAppend, GeneralBlockPasskeyAppendBuilder> {
+  _$GeneralBlockPasskeyAppend? _$v;
+
+  String? _blockType;
+  String? get blockType => _$this._blockType;
+  set blockType(String? blockType) => _$this._blockType = blockType;
+
+  String? _challenge;
+  String? get challenge => _$this._challenge;
+  set challenge(String? challenge) => _$this._challenge = challenge;
+
+  String? _identifierValue;
+  String? get identifierValue => _$this._identifierValue;
+  set identifierValue(String? identifierValue) =>
+      _$this._identifierValue = identifierValue;
+
+  LoginIdentifierType? _identifierType;
+  LoginIdentifierType? get identifierType => _$this._identifierType;
+  set identifierType(LoginIdentifierType? identifierType) =>
+      _$this._identifierType = identifierType;
+
+  bool? _autoSubmit;
+  bool? get autoSubmit => _$this._autoSubmit;
+  set autoSubmit(bool? autoSubmit) => _$this._autoSubmit = autoSubmit;
+
+  PasskeyIconSet? _passkeyIconSet;
+  PasskeyIconSet? get passkeyIconSet => _$this._passkeyIconSet;
+  set passkeyIconSet(PasskeyIconSet? passkeyIconSet) =>
+      _$this._passkeyIconSet = passkeyIconSet;
+
+  GeneralBlockPasskeyAppendVariantEnum? _variant;
+  GeneralBlockPasskeyAppendVariantEnum? get variant => _$this._variant;
+  set variant(GeneralBlockPasskeyAppendVariantEnum? variant) =>
+      _$this._variant = variant;
+
+  GeneralBlockPasskeyAppendBuilder() {
+    GeneralBlockPasskeyAppend._defaults(this);
+  }
+
+  GeneralBlockPasskeyAppendBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _blockType = $v.blockType;
+      _challenge = $v.challenge;
+      _identifierValue = $v.identifierValue;
+      _identifierType = $v.identifierType;
+      _autoSubmit = $v.autoSubmit;
+      _passkeyIconSet = $v.passkeyIconSet;
+      _variant = $v.variant;
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(GeneralBlockPasskeyAppend other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$GeneralBlockPasskeyAppend;
+  }
+
+  @override
+  void update(void Function(GeneralBlockPasskeyAppendBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  GeneralBlockPasskeyAppend build() => _build();
+
+  _$GeneralBlockPasskeyAppend _build() {
+    final _$result = _$v ??
+        new _$GeneralBlockPasskeyAppend._(
+            blockType: BuiltValueNullFieldError.checkNotNull(
+                blockType, r'GeneralBlockPasskeyAppend', 'blockType'),
+            challenge: BuiltValueNullFieldError.checkNotNull(
+                challenge, r'GeneralBlockPasskeyAppend', 'challenge'),
+            identifierValue: BuiltValueNullFieldError.checkNotNull(
+                identifierValue,
+                r'GeneralBlockPasskeyAppend',
+                'identifierValue'),
+            identifierType: BuiltValueNullFieldError.checkNotNull(
+                identifierType, r'GeneralBlockPasskeyAppend', 'identifierType'),
+            autoSubmit: BuiltValueNullFieldError.checkNotNull(
+                autoSubmit, r'GeneralBlockPasskeyAppend', 'autoSubmit'),
+            passkeyIconSet: BuiltValueNullFieldError.checkNotNull(
+                passkeyIconSet, r'GeneralBlockPasskeyAppend', 'passkeyIconSet'),
+            variant: BuiltValueNullFieldError.checkNotNull(
+                variant, r'GeneralBlockPasskeyAppend', 'variant'));
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/general_block_passkey_appended.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/general_block_passkey_appended.dart
new file mode 100644
index 0000000..75d88d1
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/general_block_passkey_appended.dart
@@ -0,0 +1,116 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'general_block_passkey_appended.g.dart';
+
+/// GeneralBlockPasskeyAppended
+///
+/// Properties:
+/// * [blockType]
+@BuiltValue()
+abstract class GeneralBlockPasskeyAppended
+    implements
+        Built<GeneralBlockPasskeyAppended, GeneralBlockPasskeyAppendedBuilder> {
+  @BuiltValueField(wireName: r'blockType')
+  String get blockType;
+
+  GeneralBlockPasskeyAppended._();
+
+  factory GeneralBlockPasskeyAppended(
+          [void updates(GeneralBlockPasskeyAppendedBuilder b)]) =
+      _$GeneralBlockPasskeyAppended;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(GeneralBlockPasskeyAppendedBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<GeneralBlockPasskeyAppended> get serializer =>
+      _$GeneralBlockPasskeyAppendedSerializer();
+}
+
+class _$GeneralBlockPasskeyAppendedSerializer
+    implements PrimitiveSerializer<GeneralBlockPasskeyAppended> {
+  @override
+  final Iterable<Type> types = const [
+    GeneralBlockPasskeyAppended,
+    _$GeneralBlockPasskeyAppended
+  ];
+
+  @override
+  final String wireName = r'GeneralBlockPasskeyAppended';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    GeneralBlockPasskeyAppended object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'blockType';
+    yield serializers.serialize(
+      object.blockType,
+      specifiedType: const FullType(String),
+    );
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    GeneralBlockPasskeyAppended object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required GeneralBlockPasskeyAppendedBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'blockType':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.blockType = valueDes;
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  GeneralBlockPasskeyAppended deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = GeneralBlockPasskeyAppendedBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/general_block_passkey_appended.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/general_block_passkey_appended.g.dart
new file mode 100644
index 0000000..ebc0a00
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/general_block_passkey_appended.g.dart
@@ -0,0 +1,100 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'general_block_passkey_appended.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$GeneralBlockPasskeyAppended extends GeneralBlockPasskeyAppended {
+  @override
+  final String blockType;
+
+  factory _$GeneralBlockPasskeyAppended(
+          [void Function(GeneralBlockPasskeyAppendedBuilder)? updates]) =>
+      (new GeneralBlockPasskeyAppendedBuilder()..update(updates))._build();
+
+  _$GeneralBlockPasskeyAppended._({required this.blockType}) : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        blockType, r'GeneralBlockPasskeyAppended', 'blockType');
+  }
+
+  @override
+  GeneralBlockPasskeyAppended rebuild(
+          void Function(GeneralBlockPasskeyAppendedBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  GeneralBlockPasskeyAppendedBuilder toBuilder() =>
+      new GeneralBlockPasskeyAppendedBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is GeneralBlockPasskeyAppended && blockType == other.blockType;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, blockType.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'GeneralBlockPasskeyAppended')
+          ..add('blockType', blockType))
+        .toString();
+  }
+}
+
+class GeneralBlockPasskeyAppendedBuilder
+    implements
+        Builder<GeneralBlockPasskeyAppended,
+            GeneralBlockPasskeyAppendedBuilder> {
+  _$GeneralBlockPasskeyAppended? _$v;
+
+  String? _blockType;
+  String? get blockType => _$this._blockType;
+  set blockType(String? blockType) => _$this._blockType = blockType;
+
+  GeneralBlockPasskeyAppendedBuilder() {
+    GeneralBlockPasskeyAppended._defaults(this);
+  }
+
+  GeneralBlockPasskeyAppendedBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _blockType = $v.blockType;
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(GeneralBlockPasskeyAppended other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$GeneralBlockPasskeyAppended;
+  }
+
+  @override
+  void update(void Function(GeneralBlockPasskeyAppendedBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  GeneralBlockPasskeyAppended build() => _build();
+
+  _$GeneralBlockPasskeyAppended _build() {
+    final _$result = _$v ??
+        new _$GeneralBlockPasskeyAppended._(
+            blockType: BuiltValueNullFieldError.checkNotNull(
+                blockType, r'GeneralBlockPasskeyAppended', 'blockType'));
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/general_block_passkey_verify.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/general_block_passkey_verify.dart
new file mode 100644
index 0000000..f5a4c1e
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/general_block_passkey_verify.dart
@@ -0,0 +1,185 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:built_collection/built_collection.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'general_block_passkey_verify.g.dart';
+
+/// GeneralBlockPasskeyVerify
+///
+/// Properties:
+/// * [blockType]
+/// * [challenge]
+/// * [identifierValue]
+/// * [loginHint]
+@BuiltValue()
+abstract class GeneralBlockPasskeyVerify
+    implements
+        Built<GeneralBlockPasskeyVerify, GeneralBlockPasskeyVerifyBuilder> {
+  @BuiltValueField(wireName: r'blockType')
+  String get blockType;
+
+  @BuiltValueField(wireName: r'challenge')
+  String get challenge;
+
+  @BuiltValueField(wireName: r'identifierValue')
+  String get identifierValue;
+
+  @BuiltValueField(wireName: r'loginHint')
+  GeneralBlockPasskeyVerifyLoginHintEnum? get loginHint;
+  // enum loginHintEnum {  cda,  };
+
+  GeneralBlockPasskeyVerify._();
+
+  factory GeneralBlockPasskeyVerify(
+          [void updates(GeneralBlockPasskeyVerifyBuilder b)]) =
+      _$GeneralBlockPasskeyVerify;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(GeneralBlockPasskeyVerifyBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<GeneralBlockPasskeyVerify> get serializer =>
+      _$GeneralBlockPasskeyVerifySerializer();
+}
+
+class _$GeneralBlockPasskeyVerifySerializer
+    implements PrimitiveSerializer<GeneralBlockPasskeyVerify> {
+  @override
+  final Iterable<Type> types = const [
+    GeneralBlockPasskeyVerify,
+    _$GeneralBlockPasskeyVerify
+  ];
+
+  @override
+  final String wireName = r'GeneralBlockPasskeyVerify';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    GeneralBlockPasskeyVerify object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'blockType';
+    yield serializers.serialize(
+      object.blockType,
+      specifiedType: const FullType(String),
+    );
+    yield r'challenge';
+    yield serializers.serialize(
+      object.challenge,
+      specifiedType: const FullType(String),
+    );
+    yield r'identifierValue';
+    yield serializers.serialize(
+      object.identifierValue,
+      specifiedType: const FullType(String),
+    );
+    if (object.loginHint != null) {
+      yield r'loginHint';
+      yield serializers.serialize(
+        object.loginHint,
+        specifiedType: const FullType(GeneralBlockPasskeyVerifyLoginHintEnum),
+      );
+    }
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    GeneralBlockPasskeyVerify object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required GeneralBlockPasskeyVerifyBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'blockType':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.blockType = valueDes;
+          break;
+        case r'challenge':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.challenge = valueDes;
+          break;
+        case r'identifierValue':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.identifierValue = valueDes;
+          break;
+        case r'loginHint':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType:
+                const FullType(GeneralBlockPasskeyVerifyLoginHintEnum),
+          ) as GeneralBlockPasskeyVerifyLoginHintEnum;
+          result.loginHint = valueDes;
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  GeneralBlockPasskeyVerify deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = GeneralBlockPasskeyVerifyBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
+
+class GeneralBlockPasskeyVerifyLoginHintEnum extends EnumClass {
+  @BuiltValueEnumConst(wireName: r'cda', fallback: true)
+  static const GeneralBlockPasskeyVerifyLoginHintEnum cda =
+      _$generalBlockPasskeyVerifyLoginHintEnum_cda;
+
+  static Serializer<GeneralBlockPasskeyVerifyLoginHintEnum> get serializer =>
+      _$generalBlockPasskeyVerifyLoginHintEnumSerializer;
+
+  const GeneralBlockPasskeyVerifyLoginHintEnum._(String name) : super(name);
+
+  static BuiltSet<GeneralBlockPasskeyVerifyLoginHintEnum> get values =>
+      _$generalBlockPasskeyVerifyLoginHintEnumValues;
+  static GeneralBlockPasskeyVerifyLoginHintEnum valueOf(String name) =>
+      _$generalBlockPasskeyVerifyLoginHintEnumValueOf(name);
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/general_block_passkey_verify.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/general_block_passkey_verify.g.dart
new file mode 100644
index 0000000..ce228d9
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/general_block_passkey_verify.g.dart
@@ -0,0 +1,202 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'general_block_passkey_verify.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+const GeneralBlockPasskeyVerifyLoginHintEnum
+    _$generalBlockPasskeyVerifyLoginHintEnum_cda =
+    const GeneralBlockPasskeyVerifyLoginHintEnum._('cda');
+
+GeneralBlockPasskeyVerifyLoginHintEnum
+    _$generalBlockPasskeyVerifyLoginHintEnumValueOf(String name) {
+  switch (name) {
+    case 'cda':
+      return _$generalBlockPasskeyVerifyLoginHintEnum_cda;
+    default:
+      return _$generalBlockPasskeyVerifyLoginHintEnum_cda;
+  }
+}
+
+final BuiltSet<GeneralBlockPasskeyVerifyLoginHintEnum>
+    _$generalBlockPasskeyVerifyLoginHintEnumValues = new BuiltSet<
+        GeneralBlockPasskeyVerifyLoginHintEnum>(const <GeneralBlockPasskeyVerifyLoginHintEnum>[
+  _$generalBlockPasskeyVerifyLoginHintEnum_cda,
+]);
+
+Serializer<GeneralBlockPasskeyVerifyLoginHintEnum>
+    _$generalBlockPasskeyVerifyLoginHintEnumSerializer =
+    new _$GeneralBlockPasskeyVerifyLoginHintEnumSerializer();
+
+class _$GeneralBlockPasskeyVerifyLoginHintEnumSerializer
+    implements PrimitiveSerializer<GeneralBlockPasskeyVerifyLoginHintEnum> {
+  static const Map<String, Object> _toWire = const <String, Object>{
+    'cda': 'cda',
+  };
+  static const Map<Object, String> _fromWire = const <Object, String>{
+    'cda': 'cda',
+  };
+
+  @override
+  final Iterable<Type> types = const <Type>[
+    GeneralBlockPasskeyVerifyLoginHintEnum
+  ];
+  @override
+  final String wireName = 'GeneralBlockPasskeyVerifyLoginHintEnum';
+
+  @override
+  Object serialize(Serializers serializers,
+          GeneralBlockPasskeyVerifyLoginHintEnum object,
+          {FullType specifiedType = FullType.unspecified}) =>
+      _toWire[object.name] ?? object.name;
+
+  @override
+  GeneralBlockPasskeyVerifyLoginHintEnum deserialize(
+          Serializers serializers, Object serialized,
+          {FullType specifiedType = FullType.unspecified}) =>
+      GeneralBlockPasskeyVerifyLoginHintEnum.valueOf(
+          _fromWire[serialized] ?? (serialized is String ? serialized : ''));
+}
+
+class _$GeneralBlockPasskeyVerify extends GeneralBlockPasskeyVerify {
+  @override
+  final String blockType;
+  @override
+  final String challenge;
+  @override
+  final String identifierValue;
+  @override
+  final GeneralBlockPasskeyVerifyLoginHintEnum? loginHint;
+
+  factory _$GeneralBlockPasskeyVerify(
+          [void Function(GeneralBlockPasskeyVerifyBuilder)? updates]) =>
+      (new GeneralBlockPasskeyVerifyBuilder()..update(updates))._build();
+
+  _$GeneralBlockPasskeyVerify._(
+      {required this.blockType,
+      required this.challenge,
+      required this.identifierValue,
+      this.loginHint})
+      : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        blockType, r'GeneralBlockPasskeyVerify', 'blockType');
+    BuiltValueNullFieldError.checkNotNull(
+        challenge, r'GeneralBlockPasskeyVerify', 'challenge');
+    BuiltValueNullFieldError.checkNotNull(
+        identifierValue, r'GeneralBlockPasskeyVerify', 'identifierValue');
+  }
+
+  @override
+  GeneralBlockPasskeyVerify rebuild(
+          void Function(GeneralBlockPasskeyVerifyBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  GeneralBlockPasskeyVerifyBuilder toBuilder() =>
+      new GeneralBlockPasskeyVerifyBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is GeneralBlockPasskeyVerify &&
+        blockType == other.blockType &&
+        challenge == other.challenge &&
+        identifierValue == other.identifierValue &&
+        loginHint == other.loginHint;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, blockType.hashCode);
+    _$hash = $jc(_$hash, challenge.hashCode);
+    _$hash = $jc(_$hash, identifierValue.hashCode);
+    _$hash = $jc(_$hash, loginHint.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'GeneralBlockPasskeyVerify')
+          ..add('blockType', blockType)
+          ..add('challenge', challenge)
+          ..add('identifierValue', identifierValue)
+          ..add('loginHint', loginHint))
+        .toString();
+  }
+}
+
+class GeneralBlockPasskeyVerifyBuilder
+    implements
+        Builder<GeneralBlockPasskeyVerify, GeneralBlockPasskeyVerifyBuilder> {
+  _$GeneralBlockPasskeyVerify? _$v;
+
+  String? _blockType;
+  String? get blockType => _$this._blockType;
+  set blockType(String? blockType) => _$this._blockType = blockType;
+
+  String? _challenge;
+  String? get challenge => _$this._challenge;
+  set challenge(String? challenge) => _$this._challenge = challenge;
+
+  String? _identifierValue;
+  String? get identifierValue => _$this._identifierValue;
+  set identifierValue(String? identifierValue) =>
+      _$this._identifierValue = identifierValue;
+
+  GeneralBlockPasskeyVerifyLoginHintEnum? _loginHint;
+  GeneralBlockPasskeyVerifyLoginHintEnum? get loginHint => _$this._loginHint;
+  set loginHint(GeneralBlockPasskeyVerifyLoginHintEnum? loginHint) =>
+      _$this._loginHint = loginHint;
+
+  GeneralBlockPasskeyVerifyBuilder() {
+    GeneralBlockPasskeyVerify._defaults(this);
+  }
+
+  GeneralBlockPasskeyVerifyBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _blockType = $v.blockType;
+      _challenge = $v.challenge;
+      _identifierValue = $v.identifierValue;
+      _loginHint = $v.loginHint;
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(GeneralBlockPasskeyVerify other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$GeneralBlockPasskeyVerify;
+  }
+
+  @override
+  void update(void Function(GeneralBlockPasskeyVerifyBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  GeneralBlockPasskeyVerify build() => _build();
+
+  _$GeneralBlockPasskeyVerify _build() {
+    final _$result = _$v ??
+        new _$GeneralBlockPasskeyVerify._(
+            blockType: BuiltValueNullFieldError.checkNotNull(
+                blockType, r'GeneralBlockPasskeyVerify', 'blockType'),
+            challenge: BuiltValueNullFieldError.checkNotNull(
+                challenge, r'GeneralBlockPasskeyVerify', 'challenge'),
+            identifierValue: BuiltValueNullFieldError.checkNotNull(
+                identifierValue,
+                r'GeneralBlockPasskeyVerify',
+                'identifierValue'),
+            loginHint: loginHint);
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/general_block_post_signup_email_verify.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/general_block_post_signup_email_verify.dart
new file mode 100644
index 0000000..249cd90
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/general_block_post_signup_email_verify.dart
@@ -0,0 +1,136 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:corbado_frontend_api_client/src/model/request_error.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'general_block_post_signup_email_verify.g.dart';
+
+/// GeneralBlockPostSignupEmailVerify
+///
+/// Properties:
+/// * [blockType]
+/// * [error]
+@BuiltValue()
+abstract class GeneralBlockPostSignupEmailVerify
+    implements
+        Built<GeneralBlockPostSignupEmailVerify,
+            GeneralBlockPostSignupEmailVerifyBuilder> {
+  @BuiltValueField(wireName: r'blockType')
+  String get blockType;
+
+  @BuiltValueField(wireName: r'error')
+  RequestError? get error;
+
+  GeneralBlockPostSignupEmailVerify._();
+
+  factory GeneralBlockPostSignupEmailVerify(
+          [void updates(GeneralBlockPostSignupEmailVerifyBuilder b)]) =
+      _$GeneralBlockPostSignupEmailVerify;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(GeneralBlockPostSignupEmailVerifyBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<GeneralBlockPostSignupEmailVerify> get serializer =>
+      _$GeneralBlockPostSignupEmailVerifySerializer();
+}
+
+class _$GeneralBlockPostSignupEmailVerifySerializer
+    implements PrimitiveSerializer<GeneralBlockPostSignupEmailVerify> {
+  @override
+  final Iterable<Type> types = const [
+    GeneralBlockPostSignupEmailVerify,
+    _$GeneralBlockPostSignupEmailVerify
+  ];
+
+  @override
+  final String wireName = r'GeneralBlockPostSignupEmailVerify';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    GeneralBlockPostSignupEmailVerify object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'blockType';
+    yield serializers.serialize(
+      object.blockType,
+      specifiedType: const FullType(String),
+    );
+    if (object.error != null) {
+      yield r'error';
+      yield serializers.serialize(
+        object.error,
+        specifiedType: const FullType(RequestError),
+      );
+    }
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    GeneralBlockPostSignupEmailVerify object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required GeneralBlockPostSignupEmailVerifyBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'blockType':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.blockType = valueDes;
+          break;
+        case r'error':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(RequestError),
+          ) as RequestError;
+          result.error.replace(valueDes);
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  GeneralBlockPostSignupEmailVerify deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = GeneralBlockPostSignupEmailVerifyBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/general_block_post_signup_email_verify.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/general_block_post_signup_email_verify.g.dart
new file mode 100644
index 0000000..f85dae9
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/general_block_post_signup_email_verify.g.dart
@@ -0,0 +1,129 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'general_block_post_signup_email_verify.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$GeneralBlockPostSignupEmailVerify
+    extends GeneralBlockPostSignupEmailVerify {
+  @override
+  final String blockType;
+  @override
+  final RequestError? error;
+
+  factory _$GeneralBlockPostSignupEmailVerify(
+          [void Function(GeneralBlockPostSignupEmailVerifyBuilder)? updates]) =>
+      (new GeneralBlockPostSignupEmailVerifyBuilder()..update(updates))
+          ._build();
+
+  _$GeneralBlockPostSignupEmailVerify._({required this.blockType, this.error})
+      : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        blockType, r'GeneralBlockPostSignupEmailVerify', 'blockType');
+  }
+
+  @override
+  GeneralBlockPostSignupEmailVerify rebuild(
+          void Function(GeneralBlockPostSignupEmailVerifyBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  GeneralBlockPostSignupEmailVerifyBuilder toBuilder() =>
+      new GeneralBlockPostSignupEmailVerifyBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is GeneralBlockPostSignupEmailVerify &&
+        blockType == other.blockType &&
+        error == other.error;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, blockType.hashCode);
+    _$hash = $jc(_$hash, error.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'GeneralBlockPostSignupEmailVerify')
+          ..add('blockType', blockType)
+          ..add('error', error))
+        .toString();
+  }
+}
+
+class GeneralBlockPostSignupEmailVerifyBuilder
+    implements
+        Builder<GeneralBlockPostSignupEmailVerify,
+            GeneralBlockPostSignupEmailVerifyBuilder> {
+  _$GeneralBlockPostSignupEmailVerify? _$v;
+
+  String? _blockType;
+  String? get blockType => _$this._blockType;
+  set blockType(String? blockType) => _$this._blockType = blockType;
+
+  RequestErrorBuilder? _error;
+  RequestErrorBuilder get error => _$this._error ??= new RequestErrorBuilder();
+  set error(RequestErrorBuilder? error) => _$this._error = error;
+
+  GeneralBlockPostSignupEmailVerifyBuilder() {
+    GeneralBlockPostSignupEmailVerify._defaults(this);
+  }
+
+  GeneralBlockPostSignupEmailVerifyBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _blockType = $v.blockType;
+      _error = $v.error?.toBuilder();
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(GeneralBlockPostSignupEmailVerify other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$GeneralBlockPostSignupEmailVerify;
+  }
+
+  @override
+  void update(
+      void Function(GeneralBlockPostSignupEmailVerifyBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  GeneralBlockPostSignupEmailVerify build() => _build();
+
+  _$GeneralBlockPostSignupEmailVerify _build() {
+    _$GeneralBlockPostSignupEmailVerify _$result;
+    try {
+      _$result = _$v ??
+          new _$GeneralBlockPostSignupEmailVerify._(
+              blockType: BuiltValueNullFieldError.checkNotNull(
+                  blockType, r'GeneralBlockPostSignupEmailVerify', 'blockType'),
+              error: _error?.build());
+    } catch (_) {
+      late String _$failedField;
+      try {
+        _$failedField = 'error';
+        _error?.build();
+      } catch (e) {
+        throw new BuiltValueNestedFieldError(
+            r'GeneralBlockPostSignupEmailVerify', _$failedField, e.toString());
+      }
+      rethrow;
+    }
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/general_block_signup_init.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/general_block_signup_init.dart
new file mode 100644
index 0000000..440c43b
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/general_block_signup_init.dart
@@ -0,0 +1,192 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:built_collection/built_collection.dart';
+import 'package:corbado_frontend_api_client/src/model/social_data.dart';
+import 'package:corbado_frontend_api_client/src/model/request_error.dart';
+import 'package:corbado_frontend_api_client/src/model/full_name_with_error.dart';
+import 'package:corbado_frontend_api_client/src/model/login_identifier_with_error.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'general_block_signup_init.g.dart';
+
+/// GeneralBlockSignupInit
+///
+/// Properties:
+/// * [blockType]
+/// * [identifiers]
+/// * [fullName]
+/// * [socialData]
+/// * [error]
+@BuiltValue()
+abstract class GeneralBlockSignupInit
+    implements Built<GeneralBlockSignupInit, GeneralBlockSignupInitBuilder> {
+  @BuiltValueField(wireName: r'blockType')
+  String get blockType;
+
+  @BuiltValueField(wireName: r'identifiers')
+  BuiltList<LoginIdentifierWithError> get identifiers;
+
+  @BuiltValueField(wireName: r'fullName')
+  FullNameWithError? get fullName;
+
+  @BuiltValueField(wireName: r'socialData')
+  SocialData? get socialData;
+
+  @BuiltValueField(wireName: r'error')
+  RequestError? get error;
+
+  GeneralBlockSignupInit._();
+
+  factory GeneralBlockSignupInit(
+          [void updates(GeneralBlockSignupInitBuilder b)]) =
+      _$GeneralBlockSignupInit;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(GeneralBlockSignupInitBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<GeneralBlockSignupInit> get serializer =>
+      _$GeneralBlockSignupInitSerializer();
+}
+
+class _$GeneralBlockSignupInitSerializer
+    implements PrimitiveSerializer<GeneralBlockSignupInit> {
+  @override
+  final Iterable<Type> types = const [
+    GeneralBlockSignupInit,
+    _$GeneralBlockSignupInit
+  ];
+
+  @override
+  final String wireName = r'GeneralBlockSignupInit';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    GeneralBlockSignupInit object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'blockType';
+    yield serializers.serialize(
+      object.blockType,
+      specifiedType: const FullType(String),
+    );
+    yield r'identifiers';
+    yield serializers.serialize(
+      object.identifiers,
+      specifiedType:
+          const FullType(BuiltList, [FullType(LoginIdentifierWithError)]),
+    );
+    if (object.fullName != null) {
+      yield r'fullName';
+      yield serializers.serialize(
+        object.fullName,
+        specifiedType: const FullType(FullNameWithError),
+      );
+    }
+    if (object.socialData != null) {
+      yield r'socialData';
+      yield serializers.serialize(
+        object.socialData,
+        specifiedType: const FullType(SocialData),
+      );
+    }
+    if (object.error != null) {
+      yield r'error';
+      yield serializers.serialize(
+        object.error,
+        specifiedType: const FullType(RequestError),
+      );
+    }
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    GeneralBlockSignupInit object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required GeneralBlockSignupInitBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'blockType':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.blockType = valueDes;
+          break;
+        case r'identifiers':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType:
+                const FullType(BuiltList, [FullType(LoginIdentifierWithError)]),
+          ) as BuiltList<LoginIdentifierWithError>;
+          result.identifiers.replace(valueDes);
+          break;
+        case r'fullName':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(FullNameWithError),
+          ) as FullNameWithError;
+          result.fullName.replace(valueDes);
+          break;
+        case r'socialData':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(SocialData),
+          ) as SocialData;
+          result.socialData.replace(valueDes);
+          break;
+        case r'error':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(RequestError),
+          ) as RequestError;
+          result.error.replace(valueDes);
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  GeneralBlockSignupInit deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = GeneralBlockSignupInitBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/general_block_signup_init.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/general_block_signup_init.g.dart
new file mode 100644
index 0000000..f1d73f8
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/general_block_signup_init.g.dart
@@ -0,0 +1,176 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'general_block_signup_init.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$GeneralBlockSignupInit extends GeneralBlockSignupInit {
+  @override
+  final String blockType;
+  @override
+  final BuiltList<LoginIdentifierWithError> identifiers;
+  @override
+  final FullNameWithError? fullName;
+  @override
+  final SocialData? socialData;
+  @override
+  final RequestError? error;
+
+  factory _$GeneralBlockSignupInit(
+          [void Function(GeneralBlockSignupInitBuilder)? updates]) =>
+      (new GeneralBlockSignupInitBuilder()..update(updates))._build();
+
+  _$GeneralBlockSignupInit._(
+      {required this.blockType,
+      required this.identifiers,
+      this.fullName,
+      this.socialData,
+      this.error})
+      : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        blockType, r'GeneralBlockSignupInit', 'blockType');
+    BuiltValueNullFieldError.checkNotNull(
+        identifiers, r'GeneralBlockSignupInit', 'identifiers');
+  }
+
+  @override
+  GeneralBlockSignupInit rebuild(
+          void Function(GeneralBlockSignupInitBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  GeneralBlockSignupInitBuilder toBuilder() =>
+      new GeneralBlockSignupInitBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is GeneralBlockSignupInit &&
+        blockType == other.blockType &&
+        identifiers == other.identifiers &&
+        fullName == other.fullName &&
+        socialData == other.socialData &&
+        error == other.error;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, blockType.hashCode);
+    _$hash = $jc(_$hash, identifiers.hashCode);
+    _$hash = $jc(_$hash, fullName.hashCode);
+    _$hash = $jc(_$hash, socialData.hashCode);
+    _$hash = $jc(_$hash, error.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'GeneralBlockSignupInit')
+          ..add('blockType', blockType)
+          ..add('identifiers', identifiers)
+          ..add('fullName', fullName)
+          ..add('socialData', socialData)
+          ..add('error', error))
+        .toString();
+  }
+}
+
+class GeneralBlockSignupInitBuilder
+    implements Builder<GeneralBlockSignupInit, GeneralBlockSignupInitBuilder> {
+  _$GeneralBlockSignupInit? _$v;
+
+  String? _blockType;
+  String? get blockType => _$this._blockType;
+  set blockType(String? blockType) => _$this._blockType = blockType;
+
+  ListBuilder<LoginIdentifierWithError>? _identifiers;
+  ListBuilder<LoginIdentifierWithError> get identifiers =>
+      _$this._identifiers ??= new ListBuilder<LoginIdentifierWithError>();
+  set identifiers(ListBuilder<LoginIdentifierWithError>? identifiers) =>
+      _$this._identifiers = identifiers;
+
+  FullNameWithErrorBuilder? _fullName;
+  FullNameWithErrorBuilder get fullName =>
+      _$this._fullName ??= new FullNameWithErrorBuilder();
+  set fullName(FullNameWithErrorBuilder? fullName) =>
+      _$this._fullName = fullName;
+
+  SocialDataBuilder? _socialData;
+  SocialDataBuilder get socialData =>
+      _$this._socialData ??= new SocialDataBuilder();
+  set socialData(SocialDataBuilder? socialData) =>
+      _$this._socialData = socialData;
+
+  RequestErrorBuilder? _error;
+  RequestErrorBuilder get error => _$this._error ??= new RequestErrorBuilder();
+  set error(RequestErrorBuilder? error) => _$this._error = error;
+
+  GeneralBlockSignupInitBuilder() {
+    GeneralBlockSignupInit._defaults(this);
+  }
+
+  GeneralBlockSignupInitBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _blockType = $v.blockType;
+      _identifiers = $v.identifiers.toBuilder();
+      _fullName = $v.fullName?.toBuilder();
+      _socialData = $v.socialData?.toBuilder();
+      _error = $v.error?.toBuilder();
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(GeneralBlockSignupInit other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$GeneralBlockSignupInit;
+  }
+
+  @override
+  void update(void Function(GeneralBlockSignupInitBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  GeneralBlockSignupInit build() => _build();
+
+  _$GeneralBlockSignupInit _build() {
+    _$GeneralBlockSignupInit _$result;
+    try {
+      _$result = _$v ??
+          new _$GeneralBlockSignupInit._(
+              blockType: BuiltValueNullFieldError.checkNotNull(
+                  blockType, r'GeneralBlockSignupInit', 'blockType'),
+              identifiers: identifiers.build(),
+              fullName: _fullName?.build(),
+              socialData: _socialData?.build(),
+              error: _error?.build());
+    } catch (_) {
+      late String _$failedField;
+      try {
+        _$failedField = 'identifiers';
+        identifiers.build();
+        _$failedField = 'fullName';
+        _fullName?.build();
+        _$failedField = 'socialData';
+        _socialData?.build();
+        _$failedField = 'error';
+        _error?.build();
+      } catch (e) {
+        throw new BuiltValueNestedFieldError(
+            r'GeneralBlockSignupInit', _$failedField, e.toString());
+      }
+      rethrow;
+    }
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/general_block_verify_identifier.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/general_block_verify_identifier.dart
new file mode 100644
index 0000000..5897819
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/general_block_verify_identifier.dart
@@ -0,0 +1,230 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:built_collection/built_collection.dart';
+import 'package:corbado_frontend_api_client/src/model/request_error.dart';
+import 'package:corbado_frontend_api_client/src/model/general_block_verify_identifier_alternative_verification_methods_inner.dart';
+import 'package:corbado_frontend_api_client/src/model/verification_method.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'general_block_verify_identifier.g.dart';
+
+/// GeneralBlockVerifyIdentifier
+///
+/// Properties:
+/// * [blockType]
+/// * [verificationMethod]
+/// * [identifier]
+/// * [alternativeVerificationMethods]
+/// * [isPostLoginVerification]
+/// * [retryNotBefore]
+/// * [error]
+@BuiltValue()
+abstract class GeneralBlockVerifyIdentifier
+    implements
+        Built<GeneralBlockVerifyIdentifier,
+            GeneralBlockVerifyIdentifierBuilder> {
+  @BuiltValueField(wireName: r'blockType')
+  String get blockType;
+
+  @BuiltValueField(wireName: r'verificationMethod')
+  VerificationMethod get verificationMethod;
+  // enum verificationMethodEnum {  email-link,  email-otp,  phone-otp,  };
+
+  @BuiltValueField(wireName: r'identifier')
+  String get identifier;
+
+  @BuiltValueField(wireName: r'alternativeVerificationMethods')
+  BuiltList<GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner>
+      get alternativeVerificationMethods;
+
+  @BuiltValueField(wireName: r'isPostLoginVerification')
+  bool get isPostLoginVerification;
+
+  @BuiltValueField(wireName: r'retryNotBefore')
+  int? get retryNotBefore;
+
+  @BuiltValueField(wireName: r'error')
+  RequestError? get error;
+
+  GeneralBlockVerifyIdentifier._();
+
+  factory GeneralBlockVerifyIdentifier(
+          [void updates(GeneralBlockVerifyIdentifierBuilder b)]) =
+      _$GeneralBlockVerifyIdentifier;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(GeneralBlockVerifyIdentifierBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<GeneralBlockVerifyIdentifier> get serializer =>
+      _$GeneralBlockVerifyIdentifierSerializer();
+}
+
+class _$GeneralBlockVerifyIdentifierSerializer
+    implements PrimitiveSerializer<GeneralBlockVerifyIdentifier> {
+  @override
+  final Iterable<Type> types = const [
+    GeneralBlockVerifyIdentifier,
+    _$GeneralBlockVerifyIdentifier
+  ];
+
+  @override
+  final String wireName = r'GeneralBlockVerifyIdentifier';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    GeneralBlockVerifyIdentifier object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'blockType';
+    yield serializers.serialize(
+      object.blockType,
+      specifiedType: const FullType(String),
+    );
+    yield r'verificationMethod';
+    yield serializers.serialize(
+      object.verificationMethod,
+      specifiedType: const FullType(VerificationMethod),
+    );
+    yield r'identifier';
+    yield serializers.serialize(
+      object.identifier,
+      specifiedType: const FullType(String),
+    );
+    yield r'alternativeVerificationMethods';
+    yield serializers.serialize(
+      object.alternativeVerificationMethods,
+      specifiedType: const FullType(BuiltList, [
+        FullType(
+            GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner)
+      ]),
+    );
+    yield r'isPostLoginVerification';
+    yield serializers.serialize(
+      object.isPostLoginVerification,
+      specifiedType: const FullType(bool),
+    );
+    if (object.retryNotBefore != null) {
+      yield r'retryNotBefore';
+      yield serializers.serialize(
+        object.retryNotBefore,
+        specifiedType: const FullType(int),
+      );
+    }
+    if (object.error != null) {
+      yield r'error';
+      yield serializers.serialize(
+        object.error,
+        specifiedType: const FullType(RequestError),
+      );
+    }
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    GeneralBlockVerifyIdentifier object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required GeneralBlockVerifyIdentifierBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'blockType':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.blockType = valueDes;
+          break;
+        case r'verificationMethod':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(VerificationMethod),
+          ) as VerificationMethod;
+          result.verificationMethod = valueDes;
+          break;
+        case r'identifier':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.identifier = valueDes;
+          break;
+        case r'alternativeVerificationMethods':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(BuiltList, [
+              FullType(
+                  GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner)
+            ]),
+          ) as BuiltList<
+              GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner>;
+          result.alternativeVerificationMethods.replace(valueDes);
+          break;
+        case r'isPostLoginVerification':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(bool),
+          ) as bool;
+          result.isPostLoginVerification = valueDes;
+          break;
+        case r'retryNotBefore':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(int),
+          ) as int;
+          result.retryNotBefore = valueDes;
+          break;
+        case r'error':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(RequestError),
+          ) as RequestError;
+          result.error.replace(valueDes);
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  GeneralBlockVerifyIdentifier deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = GeneralBlockVerifyIdentifierBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/general_block_verify_identifier.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/general_block_verify_identifier.g.dart
new file mode 100644
index 0000000..945e438
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/general_block_verify_identifier.g.dart
@@ -0,0 +1,223 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'general_block_verify_identifier.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$GeneralBlockVerifyIdentifier extends GeneralBlockVerifyIdentifier {
+  @override
+  final String blockType;
+  @override
+  final VerificationMethod verificationMethod;
+  @override
+  final String identifier;
+  @override
+  final BuiltList<
+          GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner>
+      alternativeVerificationMethods;
+  @override
+  final bool isPostLoginVerification;
+  @override
+  final int? retryNotBefore;
+  @override
+  final RequestError? error;
+
+  factory _$GeneralBlockVerifyIdentifier(
+          [void Function(GeneralBlockVerifyIdentifierBuilder)? updates]) =>
+      (new GeneralBlockVerifyIdentifierBuilder()..update(updates))._build();
+
+  _$GeneralBlockVerifyIdentifier._(
+      {required this.blockType,
+      required this.verificationMethod,
+      required this.identifier,
+      required this.alternativeVerificationMethods,
+      required this.isPostLoginVerification,
+      this.retryNotBefore,
+      this.error})
+      : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        blockType, r'GeneralBlockVerifyIdentifier', 'blockType');
+    BuiltValueNullFieldError.checkNotNull(verificationMethod,
+        r'GeneralBlockVerifyIdentifier', 'verificationMethod');
+    BuiltValueNullFieldError.checkNotNull(
+        identifier, r'GeneralBlockVerifyIdentifier', 'identifier');
+    BuiltValueNullFieldError.checkNotNull(alternativeVerificationMethods,
+        r'GeneralBlockVerifyIdentifier', 'alternativeVerificationMethods');
+    BuiltValueNullFieldError.checkNotNull(isPostLoginVerification,
+        r'GeneralBlockVerifyIdentifier', 'isPostLoginVerification');
+  }
+
+  @override
+  GeneralBlockVerifyIdentifier rebuild(
+          void Function(GeneralBlockVerifyIdentifierBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  GeneralBlockVerifyIdentifierBuilder toBuilder() =>
+      new GeneralBlockVerifyIdentifierBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is GeneralBlockVerifyIdentifier &&
+        blockType == other.blockType &&
+        verificationMethod == other.verificationMethod &&
+        identifier == other.identifier &&
+        alternativeVerificationMethods ==
+            other.alternativeVerificationMethods &&
+        isPostLoginVerification == other.isPostLoginVerification &&
+        retryNotBefore == other.retryNotBefore &&
+        error == other.error;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, blockType.hashCode);
+    _$hash = $jc(_$hash, verificationMethod.hashCode);
+    _$hash = $jc(_$hash, identifier.hashCode);
+    _$hash = $jc(_$hash, alternativeVerificationMethods.hashCode);
+    _$hash = $jc(_$hash, isPostLoginVerification.hashCode);
+    _$hash = $jc(_$hash, retryNotBefore.hashCode);
+    _$hash = $jc(_$hash, error.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'GeneralBlockVerifyIdentifier')
+          ..add('blockType', blockType)
+          ..add('verificationMethod', verificationMethod)
+          ..add('identifier', identifier)
+          ..add(
+              'alternativeVerificationMethods', alternativeVerificationMethods)
+          ..add('isPostLoginVerification', isPostLoginVerification)
+          ..add('retryNotBefore', retryNotBefore)
+          ..add('error', error))
+        .toString();
+  }
+}
+
+class GeneralBlockVerifyIdentifierBuilder
+    implements
+        Builder<GeneralBlockVerifyIdentifier,
+            GeneralBlockVerifyIdentifierBuilder> {
+  _$GeneralBlockVerifyIdentifier? _$v;
+
+  String? _blockType;
+  String? get blockType => _$this._blockType;
+  set blockType(String? blockType) => _$this._blockType = blockType;
+
+  VerificationMethod? _verificationMethod;
+  VerificationMethod? get verificationMethod => _$this._verificationMethod;
+  set verificationMethod(VerificationMethod? verificationMethod) =>
+      _$this._verificationMethod = verificationMethod;
+
+  String? _identifier;
+  String? get identifier => _$this._identifier;
+  set identifier(String? identifier) => _$this._identifier = identifier;
+
+  ListBuilder<GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner>?
+      _alternativeVerificationMethods;
+  ListBuilder<GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner>
+      get alternativeVerificationMethods =>
+          _$this._alternativeVerificationMethods ??= new ListBuilder<
+              GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner>();
+  set alternativeVerificationMethods(
+          ListBuilder<
+                  GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner>?
+              alternativeVerificationMethods) =>
+      _$this._alternativeVerificationMethods = alternativeVerificationMethods;
+
+  bool? _isPostLoginVerification;
+  bool? get isPostLoginVerification => _$this._isPostLoginVerification;
+  set isPostLoginVerification(bool? isPostLoginVerification) =>
+      _$this._isPostLoginVerification = isPostLoginVerification;
+
+  int? _retryNotBefore;
+  int? get retryNotBefore => _$this._retryNotBefore;
+  set retryNotBefore(int? retryNotBefore) =>
+      _$this._retryNotBefore = retryNotBefore;
+
+  RequestErrorBuilder? _error;
+  RequestErrorBuilder get error => _$this._error ??= new RequestErrorBuilder();
+  set error(RequestErrorBuilder? error) => _$this._error = error;
+
+  GeneralBlockVerifyIdentifierBuilder() {
+    GeneralBlockVerifyIdentifier._defaults(this);
+  }
+
+  GeneralBlockVerifyIdentifierBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _blockType = $v.blockType;
+      _verificationMethod = $v.verificationMethod;
+      _identifier = $v.identifier;
+      _alternativeVerificationMethods =
+          $v.alternativeVerificationMethods.toBuilder();
+      _isPostLoginVerification = $v.isPostLoginVerification;
+      _retryNotBefore = $v.retryNotBefore;
+      _error = $v.error?.toBuilder();
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(GeneralBlockVerifyIdentifier other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$GeneralBlockVerifyIdentifier;
+  }
+
+  @override
+  void update(void Function(GeneralBlockVerifyIdentifierBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  GeneralBlockVerifyIdentifier build() => _build();
+
+  _$GeneralBlockVerifyIdentifier _build() {
+    _$GeneralBlockVerifyIdentifier _$result;
+    try {
+      _$result = _$v ??
+          new _$GeneralBlockVerifyIdentifier._(
+              blockType: BuiltValueNullFieldError.checkNotNull(
+                  blockType, r'GeneralBlockVerifyIdentifier', 'blockType'),
+              verificationMethod: BuiltValueNullFieldError.checkNotNull(
+                  verificationMethod,
+                  r'GeneralBlockVerifyIdentifier',
+                  'verificationMethod'),
+              identifier: BuiltValueNullFieldError.checkNotNull(
+                  identifier, r'GeneralBlockVerifyIdentifier', 'identifier'),
+              alternativeVerificationMethods:
+                  alternativeVerificationMethods.build(),
+              isPostLoginVerification: BuiltValueNullFieldError.checkNotNull(
+                  isPostLoginVerification,
+                  r'GeneralBlockVerifyIdentifier',
+                  'isPostLoginVerification'),
+              retryNotBefore: retryNotBefore,
+              error: _error?.build());
+    } catch (_) {
+      late String _$failedField;
+      try {
+        _$failedField = 'alternativeVerificationMethods';
+        alternativeVerificationMethods.build();
+
+        _$failedField = 'error';
+        _error?.build();
+      } catch (e) {
+        throw new BuiltValueNestedFieldError(
+            r'GeneralBlockVerifyIdentifier', _$failedField, e.toString());
+      }
+      rethrow;
+    }
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/general_block_verify_identifier_alternative_verification_methods_inner.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/general_block_verify_identifier_alternative_verification_methods_inner.dart
new file mode 100644
index 0000000..d1e7d3c
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/general_block_verify_identifier_alternative_verification_methods_inner.dart
@@ -0,0 +1,147 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:corbado_frontend_api_client/src/model/verification_method.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'general_block_verify_identifier_alternative_verification_methods_inner.g.dart';
+
+/// GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner
+///
+/// Properties:
+/// * [verificationMethod]
+/// * [identifier]
+@BuiltValue()
+abstract class GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner
+    implements
+        Built<GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner,
+            GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInnerBuilder> {
+  @BuiltValueField(wireName: r'verificationMethod')
+  VerificationMethod get verificationMethod;
+  // enum verificationMethodEnum {  email-link,  email-otp,  phone-otp,  };
+
+  @BuiltValueField(wireName: r'identifier')
+  String get identifier;
+
+  GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner._();
+
+  factory GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner(
+          [void updates(
+              GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInnerBuilder
+                  b)]) =
+      _$GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(
+          GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInnerBuilder
+              b) =>
+      b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<
+          GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner>
+      get serializer =>
+          _$GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInnerSerializer();
+}
+
+class _$GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInnerSerializer
+    implements
+        PrimitiveSerializer<
+            GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner> {
+  @override
+  final Iterable<Type> types = const [
+    GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner,
+    _$GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner
+  ];
+
+  @override
+  final String wireName =
+      r'GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'verificationMethod';
+    yield serializers.serialize(
+      object.verificationMethod,
+      specifiedType: const FullType(VerificationMethod),
+    );
+    yield r'identifier';
+    yield serializers.serialize(
+      object.identifier,
+      specifiedType: const FullType(String),
+    );
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInnerBuilder
+        result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'verificationMethod':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(VerificationMethod),
+          ) as VerificationMethod;
+          result.verificationMethod = valueDes;
+          break;
+        case r'identifier':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.identifier = valueDes;
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result =
+        GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInnerBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/general_block_verify_identifier_alternative_verification_methods_inner.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/general_block_verify_identifier_alternative_verification_methods_inner.g.dart
new file mode 100644
index 0000000..9337f62
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/general_block_verify_identifier_alternative_verification_methods_inner.g.dart
@@ -0,0 +1,145 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'general_block_verify_identifier_alternative_verification_methods_inner.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner
+    extends GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner {
+  @override
+  final VerificationMethod verificationMethod;
+  @override
+  final String identifier;
+
+  factory _$GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner(
+          [void Function(
+                  GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInnerBuilder)?
+              updates]) =>
+      (new GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInnerBuilder()
+            ..update(updates))
+          ._build();
+
+  _$GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner._(
+      {required this.verificationMethod, required this.identifier})
+      : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        verificationMethod,
+        r'GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner',
+        'verificationMethod');
+    BuiltValueNullFieldError.checkNotNull(
+        identifier,
+        r'GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner',
+        'identifier');
+  }
+
+  @override
+  GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner rebuild(
+          void Function(
+                  GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInnerBuilder)
+              updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInnerBuilder
+      toBuilder() =>
+          new GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInnerBuilder()
+            ..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other
+            is GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner &&
+        verificationMethod == other.verificationMethod &&
+        identifier == other.identifier;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, verificationMethod.hashCode);
+    _$hash = $jc(_$hash, identifier.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(
+            r'GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner')
+          ..add('verificationMethod', verificationMethod)
+          ..add('identifier', identifier))
+        .toString();
+  }
+}
+
+class GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInnerBuilder
+    implements
+        Builder<GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner,
+            GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInnerBuilder> {
+  _$GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner? _$v;
+
+  VerificationMethod? _verificationMethod;
+  VerificationMethod? get verificationMethod => _$this._verificationMethod;
+  set verificationMethod(VerificationMethod? verificationMethod) =>
+      _$this._verificationMethod = verificationMethod;
+
+  String? _identifier;
+  String? get identifier => _$this._identifier;
+  set identifier(String? identifier) => _$this._identifier = identifier;
+
+  GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInnerBuilder() {
+    GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner._defaults(
+        this);
+  }
+
+  GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInnerBuilder
+      get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _verificationMethod = $v.verificationMethod;
+      _identifier = $v.identifier;
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(
+      GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other
+        as _$GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner;
+  }
+
+  @override
+  void update(
+      void Function(
+              GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInnerBuilder)?
+          updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner build() =>
+      _build();
+
+  _$GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner _build() {
+    final _$result = _$v ??
+        new _$GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner._(
+            verificationMethod: BuiltValueNullFieldError.checkNotNull(
+                verificationMethod,
+                r'GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner',
+                'verificationMethod'),
+            identifier: BuiltValueNullFieldError.checkNotNull(
+                identifier,
+                r'GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner',
+                'identifier'));
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/generic_rsp.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/generic_rsp.dart
new file mode 100644
index 0000000..e6b0726
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/generic_rsp.dart
@@ -0,0 +1,158 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:corbado_frontend_api_client/src/model/request_data.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'generic_rsp.g.dart';
+
+/// GenericRsp
+///
+/// Properties:
+/// * [httpStatusCode] - HTTP status code of operation
+/// * [message]
+/// * [requestData]
+/// * [runtime] - Runtime in seconds for this request
+@BuiltValue()
+abstract class GenericRsp implements Built<GenericRsp, GenericRspBuilder> {
+  /// HTTP status code of operation
+  @BuiltValueField(wireName: r'httpStatusCode')
+  int get httpStatusCode;
+
+  @BuiltValueField(wireName: r'message')
+  String get message;
+
+  @BuiltValueField(wireName: r'requestData')
+  RequestData get requestData;
+
+  /// Runtime in seconds for this request
+  @BuiltValueField(wireName: r'runtime')
+  double get runtime;
+
+  GenericRsp._();
+
+  factory GenericRsp([void updates(GenericRspBuilder b)]) = _$GenericRsp;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(GenericRspBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<GenericRsp> get serializer => _$GenericRspSerializer();
+}
+
+class _$GenericRspSerializer implements PrimitiveSerializer<GenericRsp> {
+  @override
+  final Iterable<Type> types = const [GenericRsp, _$GenericRsp];
+
+  @override
+  final String wireName = r'GenericRsp';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    GenericRsp object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'httpStatusCode';
+    yield serializers.serialize(
+      object.httpStatusCode,
+      specifiedType: const FullType(int),
+    );
+    yield r'message';
+    yield serializers.serialize(
+      object.message,
+      specifiedType: const FullType(String),
+    );
+    yield r'requestData';
+    yield serializers.serialize(
+      object.requestData,
+      specifiedType: const FullType(RequestData),
+    );
+    yield r'runtime';
+    yield serializers.serialize(
+      object.runtime,
+      specifiedType: const FullType(double),
+    );
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    GenericRsp object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required GenericRspBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'httpStatusCode':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(int),
+          ) as int;
+          result.httpStatusCode = valueDes;
+          break;
+        case r'message':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.message = valueDes;
+          break;
+        case r'requestData':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(RequestData),
+          ) as RequestData;
+          result.requestData.replace(valueDes);
+          break;
+        case r'runtime':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(double),
+          ) as double;
+          result.runtime = valueDes;
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  GenericRsp deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = GenericRspBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/generic_rsp.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/generic_rsp.g.dart
new file mode 100644
index 0000000..da005e4
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/generic_rsp.g.dart
@@ -0,0 +1,155 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'generic_rsp.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$GenericRsp extends GenericRsp {
+  @override
+  final int httpStatusCode;
+  @override
+  final String message;
+  @override
+  final RequestData requestData;
+  @override
+  final double runtime;
+
+  factory _$GenericRsp([void Function(GenericRspBuilder)? updates]) =>
+      (new GenericRspBuilder()..update(updates))._build();
+
+  _$GenericRsp._(
+      {required this.httpStatusCode,
+      required this.message,
+      required this.requestData,
+      required this.runtime})
+      : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        httpStatusCode, r'GenericRsp', 'httpStatusCode');
+    BuiltValueNullFieldError.checkNotNull(message, r'GenericRsp', 'message');
+    BuiltValueNullFieldError.checkNotNull(
+        requestData, r'GenericRsp', 'requestData');
+    BuiltValueNullFieldError.checkNotNull(runtime, r'GenericRsp', 'runtime');
+  }
+
+  @override
+  GenericRsp rebuild(void Function(GenericRspBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  GenericRspBuilder toBuilder() => new GenericRspBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is GenericRsp &&
+        httpStatusCode == other.httpStatusCode &&
+        message == other.message &&
+        requestData == other.requestData &&
+        runtime == other.runtime;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, httpStatusCode.hashCode);
+    _$hash = $jc(_$hash, message.hashCode);
+    _$hash = $jc(_$hash, requestData.hashCode);
+    _$hash = $jc(_$hash, runtime.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'GenericRsp')
+          ..add('httpStatusCode', httpStatusCode)
+          ..add('message', message)
+          ..add('requestData', requestData)
+          ..add('runtime', runtime))
+        .toString();
+  }
+}
+
+class GenericRspBuilder implements Builder<GenericRsp, GenericRspBuilder> {
+  _$GenericRsp? _$v;
+
+  int? _httpStatusCode;
+  int? get httpStatusCode => _$this._httpStatusCode;
+  set httpStatusCode(int? httpStatusCode) =>
+      _$this._httpStatusCode = httpStatusCode;
+
+  String? _message;
+  String? get message => _$this._message;
+  set message(String? message) => _$this._message = message;
+
+  RequestDataBuilder? _requestData;
+  RequestDataBuilder get requestData =>
+      _$this._requestData ??= new RequestDataBuilder();
+  set requestData(RequestDataBuilder? requestData) =>
+      _$this._requestData = requestData;
+
+  double? _runtime;
+  double? get runtime => _$this._runtime;
+  set runtime(double? runtime) => _$this._runtime = runtime;
+
+  GenericRspBuilder() {
+    GenericRsp._defaults(this);
+  }
+
+  GenericRspBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _httpStatusCode = $v.httpStatusCode;
+      _message = $v.message;
+      _requestData = $v.requestData.toBuilder();
+      _runtime = $v.runtime;
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(GenericRsp other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$GenericRsp;
+  }
+
+  @override
+  void update(void Function(GenericRspBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  GenericRsp build() => _build();
+
+  _$GenericRsp _build() {
+    _$GenericRsp _$result;
+    try {
+      _$result = _$v ??
+          new _$GenericRsp._(
+              httpStatusCode: BuiltValueNullFieldError.checkNotNull(
+                  httpStatusCode, r'GenericRsp', 'httpStatusCode'),
+              message: BuiltValueNullFieldError.checkNotNull(
+                  message, r'GenericRsp', 'message'),
+              requestData: requestData.build(),
+              runtime: BuiltValueNullFieldError.checkNotNull(
+                  runtime, r'GenericRsp', 'runtime'));
+    } catch (_) {
+      late String _$failedField;
+      try {
+        _$failedField = 'requestData';
+        requestData.build();
+      } catch (e) {
+        throw new BuiltValueNestedFieldError(
+            r'GenericRsp', _$failedField, e.toString());
+      }
+      rethrow;
+    }
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/identifier.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/identifier.dart
new file mode 100644
index 0000000..22f02ae
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/identifier.dart
@@ -0,0 +1,157 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:corbado_frontend_api_client/src/model/login_identifier_type.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'identifier.g.dart';
+
+/// Identifier
+///
+/// Properties:
+/// * [id]
+/// * [value]
+/// * [type]
+/// * [status]
+@BuiltValue()
+abstract class Identifier implements Built<Identifier, IdentifierBuilder> {
+  @BuiltValueField(wireName: r'id')
+  String get id;
+
+  @BuiltValueField(wireName: r'value')
+  String get value;
+
+  @BuiltValueField(wireName: r'type')
+  LoginIdentifierType get type;
+  // enum typeEnum {  email,  phone,  username,  };
+
+  @BuiltValueField(wireName: r'status')
+  String get status;
+
+  Identifier._();
+
+  factory Identifier([void updates(IdentifierBuilder b)]) = _$Identifier;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(IdentifierBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<Identifier> get serializer => _$IdentifierSerializer();
+}
+
+class _$IdentifierSerializer implements PrimitiveSerializer<Identifier> {
+  @override
+  final Iterable<Type> types = const [Identifier, _$Identifier];
+
+  @override
+  final String wireName = r'Identifier';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    Identifier object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'id';
+    yield serializers.serialize(
+      object.id,
+      specifiedType: const FullType(String),
+    );
+    yield r'value';
+    yield serializers.serialize(
+      object.value,
+      specifiedType: const FullType(String),
+    );
+    yield r'type';
+    yield serializers.serialize(
+      object.type,
+      specifiedType: const FullType(LoginIdentifierType),
+    );
+    yield r'status';
+    yield serializers.serialize(
+      object.status,
+      specifiedType: const FullType(String),
+    );
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    Identifier object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required IdentifierBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'id':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.id = valueDes;
+          break;
+        case r'value':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.value = valueDes;
+          break;
+        case r'type':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(LoginIdentifierType),
+          ) as LoginIdentifierType;
+          result.type = valueDes;
+          break;
+        case r'status':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.status = valueDes;
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  Identifier deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = IdentifierBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/identifier.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/identifier.g.dart
new file mode 100644
index 0000000..f52a95d
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/identifier.g.dart
@@ -0,0 +1,137 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'identifier.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$Identifier extends Identifier {
+  @override
+  final String id;
+  @override
+  final String value;
+  @override
+  final LoginIdentifierType type;
+  @override
+  final String status;
+
+  factory _$Identifier([void Function(IdentifierBuilder)? updates]) =>
+      (new IdentifierBuilder()..update(updates))._build();
+
+  _$Identifier._(
+      {required this.id,
+      required this.value,
+      required this.type,
+      required this.status})
+      : super._() {
+    BuiltValueNullFieldError.checkNotNull(id, r'Identifier', 'id');
+    BuiltValueNullFieldError.checkNotNull(value, r'Identifier', 'value');
+    BuiltValueNullFieldError.checkNotNull(type, r'Identifier', 'type');
+    BuiltValueNullFieldError.checkNotNull(status, r'Identifier', 'status');
+  }
+
+  @override
+  Identifier rebuild(void Function(IdentifierBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  IdentifierBuilder toBuilder() => new IdentifierBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is Identifier &&
+        id == other.id &&
+        value == other.value &&
+        type == other.type &&
+        status == other.status;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, id.hashCode);
+    _$hash = $jc(_$hash, value.hashCode);
+    _$hash = $jc(_$hash, type.hashCode);
+    _$hash = $jc(_$hash, status.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'Identifier')
+          ..add('id', id)
+          ..add('value', value)
+          ..add('type', type)
+          ..add('status', status))
+        .toString();
+  }
+}
+
+class IdentifierBuilder implements Builder<Identifier, IdentifierBuilder> {
+  _$Identifier? _$v;
+
+  String? _id;
+  String? get id => _$this._id;
+  set id(String? id) => _$this._id = id;
+
+  String? _value;
+  String? get value => _$this._value;
+  set value(String? value) => _$this._value = value;
+
+  LoginIdentifierType? _type;
+  LoginIdentifierType? get type => _$this._type;
+  set type(LoginIdentifierType? type) => _$this._type = type;
+
+  String? _status;
+  String? get status => _$this._status;
+  set status(String? status) => _$this._status = status;
+
+  IdentifierBuilder() {
+    Identifier._defaults(this);
+  }
+
+  IdentifierBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _id = $v.id;
+      _value = $v.value;
+      _type = $v.type;
+      _status = $v.status;
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(Identifier other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$Identifier;
+  }
+
+  @override
+  void update(void Function(IdentifierBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  Identifier build() => _build();
+
+  _$Identifier _build() {
+    final _$result = _$v ??
+        new _$Identifier._(
+            id: BuiltValueNullFieldError.checkNotNull(id, r'Identifier', 'id'),
+            value: BuiltValueNullFieldError.checkNotNull(
+                value, r'Identifier', 'value'),
+            type: BuiltValueNullFieldError.checkNotNull(
+                type, r'Identifier', 'type'),
+            status: BuiltValueNullFieldError.checkNotNull(
+                status, r'Identifier', 'status'));
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/identifier_update_req.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/identifier_update_req.dart
new file mode 100644
index 0000000..5698e6a
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/identifier_update_req.dart
@@ -0,0 +1,132 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:corbado_frontend_api_client/src/model/login_identifier_type.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'identifier_update_req.g.dart';
+
+/// IdentifierUpdateReq
+///
+/// Properties:
+/// * [identifierType]
+/// * [value]
+@BuiltValue()
+abstract class IdentifierUpdateReq
+    implements Built<IdentifierUpdateReq, IdentifierUpdateReqBuilder> {
+  @BuiltValueField(wireName: r'identifierType')
+  LoginIdentifierType get identifierType;
+  // enum identifierTypeEnum {  email,  phone,  username,  };
+
+  @BuiltValueField(wireName: r'value')
+  String get value;
+
+  IdentifierUpdateReq._();
+
+  factory IdentifierUpdateReq([void updates(IdentifierUpdateReqBuilder b)]) =
+      _$IdentifierUpdateReq;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(IdentifierUpdateReqBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<IdentifierUpdateReq> get serializer =>
+      _$IdentifierUpdateReqSerializer();
+}
+
+class _$IdentifierUpdateReqSerializer
+    implements PrimitiveSerializer<IdentifierUpdateReq> {
+  @override
+  final Iterable<Type> types = const [
+    IdentifierUpdateReq,
+    _$IdentifierUpdateReq
+  ];
+
+  @override
+  final String wireName = r'IdentifierUpdateReq';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    IdentifierUpdateReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'identifierType';
+    yield serializers.serialize(
+      object.identifierType,
+      specifiedType: const FullType(LoginIdentifierType),
+    );
+    yield r'value';
+    yield serializers.serialize(
+      object.value,
+      specifiedType: const FullType(String),
+    );
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    IdentifierUpdateReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required IdentifierUpdateReqBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'identifierType':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(LoginIdentifierType),
+          ) as LoginIdentifierType;
+          result.identifierType = valueDes;
+          break;
+        case r'value':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.value = valueDes;
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  IdentifierUpdateReq deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = IdentifierUpdateReqBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/identifier_update_req.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/identifier_update_req.g.dart
new file mode 100644
index 0000000..aaf9082
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/identifier_update_req.g.dart
@@ -0,0 +1,115 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'identifier_update_req.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$IdentifierUpdateReq extends IdentifierUpdateReq {
+  @override
+  final LoginIdentifierType identifierType;
+  @override
+  final String value;
+
+  factory _$IdentifierUpdateReq(
+          [void Function(IdentifierUpdateReqBuilder)? updates]) =>
+      (new IdentifierUpdateReqBuilder()..update(updates))._build();
+
+  _$IdentifierUpdateReq._({required this.identifierType, required this.value})
+      : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        identifierType, r'IdentifierUpdateReq', 'identifierType');
+    BuiltValueNullFieldError.checkNotNull(
+        value, r'IdentifierUpdateReq', 'value');
+  }
+
+  @override
+  IdentifierUpdateReq rebuild(
+          void Function(IdentifierUpdateReqBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  IdentifierUpdateReqBuilder toBuilder() =>
+      new IdentifierUpdateReqBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is IdentifierUpdateReq &&
+        identifierType == other.identifierType &&
+        value == other.value;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, identifierType.hashCode);
+    _$hash = $jc(_$hash, value.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'IdentifierUpdateReq')
+          ..add('identifierType', identifierType)
+          ..add('value', value))
+        .toString();
+  }
+}
+
+class IdentifierUpdateReqBuilder
+    implements Builder<IdentifierUpdateReq, IdentifierUpdateReqBuilder> {
+  _$IdentifierUpdateReq? _$v;
+
+  LoginIdentifierType? _identifierType;
+  LoginIdentifierType? get identifierType => _$this._identifierType;
+  set identifierType(LoginIdentifierType? identifierType) =>
+      _$this._identifierType = identifierType;
+
+  String? _value;
+  String? get value => _$this._value;
+  set value(String? value) => _$this._value = value;
+
+  IdentifierUpdateReqBuilder() {
+    IdentifierUpdateReq._defaults(this);
+  }
+
+  IdentifierUpdateReqBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _identifierType = $v.identifierType;
+      _value = $v.value;
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(IdentifierUpdateReq other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$IdentifierUpdateReq;
+  }
+
+  @override
+  void update(void Function(IdentifierUpdateReqBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  IdentifierUpdateReq build() => _build();
+
+  _$IdentifierUpdateReq _build() {
+    final _$result = _$v ??
+        new _$IdentifierUpdateReq._(
+            identifierType: BuiltValueNullFieldError.checkNotNull(
+                identifierType, r'IdentifierUpdateReq', 'identifierType'),
+            value: BuiltValueNullFieldError.checkNotNull(
+                value, r'IdentifierUpdateReq', 'value'));
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/identifier_verify_finish_req.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/identifier_verify_finish_req.dart
new file mode 100644
index 0000000..1199847
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/identifier_verify_finish_req.dart
@@ -0,0 +1,168 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:corbado_frontend_api_client/src/model/login_identifier_type.dart';
+import 'package:corbado_frontend_api_client/src/model/verification_method.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'identifier_verify_finish_req.g.dart';
+
+/// IdentifierVerifyFinishReq
+///
+/// Properties:
+/// * [code]
+/// * [identifierType]
+/// * [verificationType]
+/// * [isNewDevice]
+@BuiltValue()
+abstract class IdentifierVerifyFinishReq
+    implements
+        Built<IdentifierVerifyFinishReq, IdentifierVerifyFinishReqBuilder> {
+  @BuiltValueField(wireName: r'code')
+  String get code;
+
+  @BuiltValueField(wireName: r'identifierType')
+  LoginIdentifierType get identifierType;
+  // enum identifierTypeEnum {  email,  phone,  username,  };
+
+  @BuiltValueField(wireName: r'verificationType')
+  VerificationMethod get verificationType;
+  // enum verificationTypeEnum {  email-link,  email-otp,  phone-otp,  };
+
+  @BuiltValueField(wireName: r'isNewDevice')
+  bool get isNewDevice;
+
+  IdentifierVerifyFinishReq._();
+
+  factory IdentifierVerifyFinishReq(
+          [void updates(IdentifierVerifyFinishReqBuilder b)]) =
+      _$IdentifierVerifyFinishReq;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(IdentifierVerifyFinishReqBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<IdentifierVerifyFinishReq> get serializer =>
+      _$IdentifierVerifyFinishReqSerializer();
+}
+
+class _$IdentifierVerifyFinishReqSerializer
+    implements PrimitiveSerializer<IdentifierVerifyFinishReq> {
+  @override
+  final Iterable<Type> types = const [
+    IdentifierVerifyFinishReq,
+    _$IdentifierVerifyFinishReq
+  ];
+
+  @override
+  final String wireName = r'IdentifierVerifyFinishReq';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    IdentifierVerifyFinishReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'code';
+    yield serializers.serialize(
+      object.code,
+      specifiedType: const FullType(String),
+    );
+    yield r'identifierType';
+    yield serializers.serialize(
+      object.identifierType,
+      specifiedType: const FullType(LoginIdentifierType),
+    );
+    yield r'verificationType';
+    yield serializers.serialize(
+      object.verificationType,
+      specifiedType: const FullType(VerificationMethod),
+    );
+    yield r'isNewDevice';
+    yield serializers.serialize(
+      object.isNewDevice,
+      specifiedType: const FullType(bool),
+    );
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    IdentifierVerifyFinishReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required IdentifierVerifyFinishReqBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'code':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.code = valueDes;
+          break;
+        case r'identifierType':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(LoginIdentifierType),
+          ) as LoginIdentifierType;
+          result.identifierType = valueDes;
+          break;
+        case r'verificationType':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(VerificationMethod),
+          ) as VerificationMethod;
+          result.verificationType = valueDes;
+          break;
+        case r'isNewDevice':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(bool),
+          ) as bool;
+          result.isNewDevice = valueDes;
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  IdentifierVerifyFinishReq deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = IdentifierVerifyFinishReqBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/identifier_verify_finish_req.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/identifier_verify_finish_req.g.dart
new file mode 100644
index 0000000..cc4fb85
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/identifier_verify_finish_req.g.dart
@@ -0,0 +1,151 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'identifier_verify_finish_req.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$IdentifierVerifyFinishReq extends IdentifierVerifyFinishReq {
+  @override
+  final String code;
+  @override
+  final LoginIdentifierType identifierType;
+  @override
+  final VerificationMethod verificationType;
+  @override
+  final bool isNewDevice;
+
+  factory _$IdentifierVerifyFinishReq(
+          [void Function(IdentifierVerifyFinishReqBuilder)? updates]) =>
+      (new IdentifierVerifyFinishReqBuilder()..update(updates))._build();
+
+  _$IdentifierVerifyFinishReq._(
+      {required this.code,
+      required this.identifierType,
+      required this.verificationType,
+      required this.isNewDevice})
+      : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        code, r'IdentifierVerifyFinishReq', 'code');
+    BuiltValueNullFieldError.checkNotNull(
+        identifierType, r'IdentifierVerifyFinishReq', 'identifierType');
+    BuiltValueNullFieldError.checkNotNull(
+        verificationType, r'IdentifierVerifyFinishReq', 'verificationType');
+    BuiltValueNullFieldError.checkNotNull(
+        isNewDevice, r'IdentifierVerifyFinishReq', 'isNewDevice');
+  }
+
+  @override
+  IdentifierVerifyFinishReq rebuild(
+          void Function(IdentifierVerifyFinishReqBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  IdentifierVerifyFinishReqBuilder toBuilder() =>
+      new IdentifierVerifyFinishReqBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is IdentifierVerifyFinishReq &&
+        code == other.code &&
+        identifierType == other.identifierType &&
+        verificationType == other.verificationType &&
+        isNewDevice == other.isNewDevice;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, code.hashCode);
+    _$hash = $jc(_$hash, identifierType.hashCode);
+    _$hash = $jc(_$hash, verificationType.hashCode);
+    _$hash = $jc(_$hash, isNewDevice.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'IdentifierVerifyFinishReq')
+          ..add('code', code)
+          ..add('identifierType', identifierType)
+          ..add('verificationType', verificationType)
+          ..add('isNewDevice', isNewDevice))
+        .toString();
+  }
+}
+
+class IdentifierVerifyFinishReqBuilder
+    implements
+        Builder<IdentifierVerifyFinishReq, IdentifierVerifyFinishReqBuilder> {
+  _$IdentifierVerifyFinishReq? _$v;
+
+  String? _code;
+  String? get code => _$this._code;
+  set code(String? code) => _$this._code = code;
+
+  LoginIdentifierType? _identifierType;
+  LoginIdentifierType? get identifierType => _$this._identifierType;
+  set identifierType(LoginIdentifierType? identifierType) =>
+      _$this._identifierType = identifierType;
+
+  VerificationMethod? _verificationType;
+  VerificationMethod? get verificationType => _$this._verificationType;
+  set verificationType(VerificationMethod? verificationType) =>
+      _$this._verificationType = verificationType;
+
+  bool? _isNewDevice;
+  bool? get isNewDevice => _$this._isNewDevice;
+  set isNewDevice(bool? isNewDevice) => _$this._isNewDevice = isNewDevice;
+
+  IdentifierVerifyFinishReqBuilder() {
+    IdentifierVerifyFinishReq._defaults(this);
+  }
+
+  IdentifierVerifyFinishReqBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _code = $v.code;
+      _identifierType = $v.identifierType;
+      _verificationType = $v.verificationType;
+      _isNewDevice = $v.isNewDevice;
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(IdentifierVerifyFinishReq other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$IdentifierVerifyFinishReq;
+  }
+
+  @override
+  void update(void Function(IdentifierVerifyFinishReqBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  IdentifierVerifyFinishReq build() => _build();
+
+  _$IdentifierVerifyFinishReq _build() {
+    final _$result = _$v ??
+        new _$IdentifierVerifyFinishReq._(
+            code: BuiltValueNullFieldError.checkNotNull(
+                code, r'IdentifierVerifyFinishReq', 'code'),
+            identifierType: BuiltValueNullFieldError.checkNotNull(
+                identifierType, r'IdentifierVerifyFinishReq', 'identifierType'),
+            verificationType: BuiltValueNullFieldError.checkNotNull(
+                verificationType,
+                r'IdentifierVerifyFinishReq',
+                'verificationType'),
+            isNewDevice: BuiltValueNullFieldError.checkNotNull(
+                isNewDevice, r'IdentifierVerifyFinishReq', 'isNewDevice'));
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/identifier_verify_start_req.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/identifier_verify_start_req.dart
new file mode 100644
index 0000000..cf5896f
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/identifier_verify_start_req.dart
@@ -0,0 +1,136 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:corbado_frontend_api_client/src/model/login_identifier_type.dart';
+import 'package:corbado_frontend_api_client/src/model/verification_method.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'identifier_verify_start_req.g.dart';
+
+/// tbd.
+///
+/// Properties:
+/// * [identifierType]
+/// * [verificationType]
+@BuiltValue()
+abstract class IdentifierVerifyStartReq
+    implements
+        Built<IdentifierVerifyStartReq, IdentifierVerifyStartReqBuilder> {
+  @BuiltValueField(wireName: r'identifierType')
+  LoginIdentifierType get identifierType;
+  // enum identifierTypeEnum {  email,  phone,  username,  };
+
+  @BuiltValueField(wireName: r'verificationType')
+  VerificationMethod get verificationType;
+  // enum verificationTypeEnum {  email-link,  email-otp,  phone-otp,  };
+
+  IdentifierVerifyStartReq._();
+
+  factory IdentifierVerifyStartReq(
+          [void updates(IdentifierVerifyStartReqBuilder b)]) =
+      _$IdentifierVerifyStartReq;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(IdentifierVerifyStartReqBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<IdentifierVerifyStartReq> get serializer =>
+      _$IdentifierVerifyStartReqSerializer();
+}
+
+class _$IdentifierVerifyStartReqSerializer
+    implements PrimitiveSerializer<IdentifierVerifyStartReq> {
+  @override
+  final Iterable<Type> types = const [
+    IdentifierVerifyStartReq,
+    _$IdentifierVerifyStartReq
+  ];
+
+  @override
+  final String wireName = r'IdentifierVerifyStartReq';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    IdentifierVerifyStartReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'identifierType';
+    yield serializers.serialize(
+      object.identifierType,
+      specifiedType: const FullType(LoginIdentifierType),
+    );
+    yield r'verificationType';
+    yield serializers.serialize(
+      object.verificationType,
+      specifiedType: const FullType(VerificationMethod),
+    );
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    IdentifierVerifyStartReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required IdentifierVerifyStartReqBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'identifierType':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(LoginIdentifierType),
+          ) as LoginIdentifierType;
+          result.identifierType = valueDes;
+          break;
+        case r'verificationType':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(VerificationMethod),
+          ) as VerificationMethod;
+          result.verificationType = valueDes;
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  IdentifierVerifyStartReq deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = IdentifierVerifyStartReqBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/identifier_verify_start_req.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/identifier_verify_start_req.g.dart
new file mode 100644
index 0000000..524b1f1
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/identifier_verify_start_req.g.dart
@@ -0,0 +1,120 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'identifier_verify_start_req.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$IdentifierVerifyStartReq extends IdentifierVerifyStartReq {
+  @override
+  final LoginIdentifierType identifierType;
+  @override
+  final VerificationMethod verificationType;
+
+  factory _$IdentifierVerifyStartReq(
+          [void Function(IdentifierVerifyStartReqBuilder)? updates]) =>
+      (new IdentifierVerifyStartReqBuilder()..update(updates))._build();
+
+  _$IdentifierVerifyStartReq._(
+      {required this.identifierType, required this.verificationType})
+      : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        identifierType, r'IdentifierVerifyStartReq', 'identifierType');
+    BuiltValueNullFieldError.checkNotNull(
+        verificationType, r'IdentifierVerifyStartReq', 'verificationType');
+  }
+
+  @override
+  IdentifierVerifyStartReq rebuild(
+          void Function(IdentifierVerifyStartReqBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  IdentifierVerifyStartReqBuilder toBuilder() =>
+      new IdentifierVerifyStartReqBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is IdentifierVerifyStartReq &&
+        identifierType == other.identifierType &&
+        verificationType == other.verificationType;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, identifierType.hashCode);
+    _$hash = $jc(_$hash, verificationType.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'IdentifierVerifyStartReq')
+          ..add('identifierType', identifierType)
+          ..add('verificationType', verificationType))
+        .toString();
+  }
+}
+
+class IdentifierVerifyStartReqBuilder
+    implements
+        Builder<IdentifierVerifyStartReq, IdentifierVerifyStartReqBuilder> {
+  _$IdentifierVerifyStartReq? _$v;
+
+  LoginIdentifierType? _identifierType;
+  LoginIdentifierType? get identifierType => _$this._identifierType;
+  set identifierType(LoginIdentifierType? identifierType) =>
+      _$this._identifierType = identifierType;
+
+  VerificationMethod? _verificationType;
+  VerificationMethod? get verificationType => _$this._verificationType;
+  set verificationType(VerificationMethod? verificationType) =>
+      _$this._verificationType = verificationType;
+
+  IdentifierVerifyStartReqBuilder() {
+    IdentifierVerifyStartReq._defaults(this);
+  }
+
+  IdentifierVerifyStartReqBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _identifierType = $v.identifierType;
+      _verificationType = $v.verificationType;
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(IdentifierVerifyStartReq other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$IdentifierVerifyStartReq;
+  }
+
+  @override
+  void update(void Function(IdentifierVerifyStartReqBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  IdentifierVerifyStartReq build() => _build();
+
+  _$IdentifierVerifyStartReq _build() {
+    final _$result = _$v ??
+        new _$IdentifierVerifyStartReq._(
+            identifierType: BuiltValueNullFieldError.checkNotNull(
+                identifierType, r'IdentifierVerifyStartReq', 'identifierType'),
+            verificationType: BuiltValueNullFieldError.checkNotNull(
+                verificationType,
+                r'IdentifierVerifyStartReq',
+                'verificationType'));
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/java_script_high_entropy.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/java_script_high_entropy.dart
new file mode 100644
index 0000000..291a3db
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/java_script_high_entropy.dart
@@ -0,0 +1,146 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'java_script_high_entropy.g.dart';
+
+/// JavaScriptHighEntropy
+///
+/// Properties:
+/// * [platform]
+/// * [platformVersion]
+/// * [mobile]
+@BuiltValue()
+abstract class JavaScriptHighEntropy
+    implements Built<JavaScriptHighEntropy, JavaScriptHighEntropyBuilder> {
+  @BuiltValueField(wireName: r'platform')
+  String get platform;
+
+  @BuiltValueField(wireName: r'platformVersion')
+  String get platformVersion;
+
+  @BuiltValueField(wireName: r'mobile')
+  bool get mobile;
+
+  JavaScriptHighEntropy._();
+
+  factory JavaScriptHighEntropy(
+      [void updates(JavaScriptHighEntropyBuilder b)]) = _$JavaScriptHighEntropy;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(JavaScriptHighEntropyBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<JavaScriptHighEntropy> get serializer =>
+      _$JavaScriptHighEntropySerializer();
+}
+
+class _$JavaScriptHighEntropySerializer
+    implements PrimitiveSerializer<JavaScriptHighEntropy> {
+  @override
+  final Iterable<Type> types = const [
+    JavaScriptHighEntropy,
+    _$JavaScriptHighEntropy
+  ];
+
+  @override
+  final String wireName = r'JavaScriptHighEntropy';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    JavaScriptHighEntropy object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'platform';
+    yield serializers.serialize(
+      object.platform,
+      specifiedType: const FullType(String),
+    );
+    yield r'platformVersion';
+    yield serializers.serialize(
+      object.platformVersion,
+      specifiedType: const FullType(String),
+    );
+    yield r'mobile';
+    yield serializers.serialize(
+      object.mobile,
+      specifiedType: const FullType(bool),
+    );
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    JavaScriptHighEntropy object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required JavaScriptHighEntropyBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'platform':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.platform = valueDes;
+          break;
+        case r'platformVersion':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.platformVersion = valueDes;
+          break;
+        case r'mobile':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(bool),
+          ) as bool;
+          result.mobile = valueDes;
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  JavaScriptHighEntropy deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = JavaScriptHighEntropyBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/java_script_high_entropy.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/java_script_high_entropy.g.dart
new file mode 100644
index 0000000..1e64bc0
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/java_script_high_entropy.g.dart
@@ -0,0 +1,132 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'java_script_high_entropy.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$JavaScriptHighEntropy extends JavaScriptHighEntropy {
+  @override
+  final String platform;
+  @override
+  final String platformVersion;
+  @override
+  final bool mobile;
+
+  factory _$JavaScriptHighEntropy(
+          [void Function(JavaScriptHighEntropyBuilder)? updates]) =>
+      (new JavaScriptHighEntropyBuilder()..update(updates))._build();
+
+  _$JavaScriptHighEntropy._(
+      {required this.platform,
+      required this.platformVersion,
+      required this.mobile})
+      : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        platform, r'JavaScriptHighEntropy', 'platform');
+    BuiltValueNullFieldError.checkNotNull(
+        platformVersion, r'JavaScriptHighEntropy', 'platformVersion');
+    BuiltValueNullFieldError.checkNotNull(
+        mobile, r'JavaScriptHighEntropy', 'mobile');
+  }
+
+  @override
+  JavaScriptHighEntropy rebuild(
+          void Function(JavaScriptHighEntropyBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  JavaScriptHighEntropyBuilder toBuilder() =>
+      new JavaScriptHighEntropyBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is JavaScriptHighEntropy &&
+        platform == other.platform &&
+        platformVersion == other.platformVersion &&
+        mobile == other.mobile;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, platform.hashCode);
+    _$hash = $jc(_$hash, platformVersion.hashCode);
+    _$hash = $jc(_$hash, mobile.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'JavaScriptHighEntropy')
+          ..add('platform', platform)
+          ..add('platformVersion', platformVersion)
+          ..add('mobile', mobile))
+        .toString();
+  }
+}
+
+class JavaScriptHighEntropyBuilder
+    implements Builder<JavaScriptHighEntropy, JavaScriptHighEntropyBuilder> {
+  _$JavaScriptHighEntropy? _$v;
+
+  String? _platform;
+  String? get platform => _$this._platform;
+  set platform(String? platform) => _$this._platform = platform;
+
+  String? _platformVersion;
+  String? get platformVersion => _$this._platformVersion;
+  set platformVersion(String? platformVersion) =>
+      _$this._platformVersion = platformVersion;
+
+  bool? _mobile;
+  bool? get mobile => _$this._mobile;
+  set mobile(bool? mobile) => _$this._mobile = mobile;
+
+  JavaScriptHighEntropyBuilder() {
+    JavaScriptHighEntropy._defaults(this);
+  }
+
+  JavaScriptHighEntropyBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _platform = $v.platform;
+      _platformVersion = $v.platformVersion;
+      _mobile = $v.mobile;
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(JavaScriptHighEntropy other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$JavaScriptHighEntropy;
+  }
+
+  @override
+  void update(void Function(JavaScriptHighEntropyBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  JavaScriptHighEntropy build() => _build();
+
+  _$JavaScriptHighEntropy _build() {
+    final _$result = _$v ??
+        new _$JavaScriptHighEntropy._(
+            platform: BuiltValueNullFieldError.checkNotNull(
+                platform, r'JavaScriptHighEntropy', 'platform'),
+            platformVersion: BuiltValueNullFieldError.checkNotNull(
+                platformVersion, r'JavaScriptHighEntropy', 'platformVersion'),
+            mobile: BuiltValueNullFieldError.checkNotNull(
+                mobile, r'JavaScriptHighEntropy', 'mobile'));
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/login_identifier.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/login_identifier.dart
new file mode 100644
index 0000000..9b94420
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/login_identifier.dart
@@ -0,0 +1,129 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:corbado_frontend_api_client/src/model/login_identifier_type.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'login_identifier.g.dart';
+
+/// LoginIdentifier
+///
+/// Properties:
+/// * [type]
+/// * [identifier]
+@BuiltValue()
+abstract class LoginIdentifier
+    implements Built<LoginIdentifier, LoginIdentifierBuilder> {
+  @BuiltValueField(wireName: r'type')
+  LoginIdentifierType get type;
+  // enum typeEnum {  email,  phone,  username,  };
+
+  @BuiltValueField(wireName: r'identifier')
+  String get identifier;
+
+  LoginIdentifier._();
+
+  factory LoginIdentifier([void updates(LoginIdentifierBuilder b)]) =
+      _$LoginIdentifier;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(LoginIdentifierBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<LoginIdentifier> get serializer =>
+      _$LoginIdentifierSerializer();
+}
+
+class _$LoginIdentifierSerializer
+    implements PrimitiveSerializer<LoginIdentifier> {
+  @override
+  final Iterable<Type> types = const [LoginIdentifier, _$LoginIdentifier];
+
+  @override
+  final String wireName = r'LoginIdentifier';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    LoginIdentifier object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'type';
+    yield serializers.serialize(
+      object.type,
+      specifiedType: const FullType(LoginIdentifierType),
+    );
+    yield r'identifier';
+    yield serializers.serialize(
+      object.identifier,
+      specifiedType: const FullType(String),
+    );
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    LoginIdentifier object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required LoginIdentifierBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'type':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(LoginIdentifierType),
+          ) as LoginIdentifierType;
+          result.type = valueDes;
+          break;
+        case r'identifier':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.identifier = valueDes;
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  LoginIdentifier deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = LoginIdentifierBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/login_identifier.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/login_identifier.g.dart
new file mode 100644
index 0000000..206d8d6
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/login_identifier.g.dart
@@ -0,0 +1,111 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'login_identifier.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$LoginIdentifier extends LoginIdentifier {
+  @override
+  final LoginIdentifierType type;
+  @override
+  final String identifier;
+
+  factory _$LoginIdentifier([void Function(LoginIdentifierBuilder)? updates]) =>
+      (new LoginIdentifierBuilder()..update(updates))._build();
+
+  _$LoginIdentifier._({required this.type, required this.identifier})
+      : super._() {
+    BuiltValueNullFieldError.checkNotNull(type, r'LoginIdentifier', 'type');
+    BuiltValueNullFieldError.checkNotNull(
+        identifier, r'LoginIdentifier', 'identifier');
+  }
+
+  @override
+  LoginIdentifier rebuild(void Function(LoginIdentifierBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  LoginIdentifierBuilder toBuilder() =>
+      new LoginIdentifierBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is LoginIdentifier &&
+        type == other.type &&
+        identifier == other.identifier;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, type.hashCode);
+    _$hash = $jc(_$hash, identifier.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'LoginIdentifier')
+          ..add('type', type)
+          ..add('identifier', identifier))
+        .toString();
+  }
+}
+
+class LoginIdentifierBuilder
+    implements Builder<LoginIdentifier, LoginIdentifierBuilder> {
+  _$LoginIdentifier? _$v;
+
+  LoginIdentifierType? _type;
+  LoginIdentifierType? get type => _$this._type;
+  set type(LoginIdentifierType? type) => _$this._type = type;
+
+  String? _identifier;
+  String? get identifier => _$this._identifier;
+  set identifier(String? identifier) => _$this._identifier = identifier;
+
+  LoginIdentifierBuilder() {
+    LoginIdentifier._defaults(this);
+  }
+
+  LoginIdentifierBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _type = $v.type;
+      _identifier = $v.identifier;
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(LoginIdentifier other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$LoginIdentifier;
+  }
+
+  @override
+  void update(void Function(LoginIdentifierBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  LoginIdentifier build() => _build();
+
+  _$LoginIdentifier _build() {
+    final _$result = _$v ??
+        new _$LoginIdentifier._(
+            type: BuiltValueNullFieldError.checkNotNull(
+                type, r'LoginIdentifier', 'type'),
+            identifier: BuiltValueNullFieldError.checkNotNull(
+                identifier, r'LoginIdentifier', 'identifier'));
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/login_identifier_config.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/login_identifier_config.dart
new file mode 100644
index 0000000..2e3edbb
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/login_identifier_config.dart
@@ -0,0 +1,116 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:corbado_frontend_api_client/src/model/login_identifier_type.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'login_identifier_config.g.dart';
+
+/// LoginIdentifierConfig
+///
+/// Properties:
+/// * [type]
+@BuiltValue()
+abstract class LoginIdentifierConfig
+    implements Built<LoginIdentifierConfig, LoginIdentifierConfigBuilder> {
+  @BuiltValueField(wireName: r'type')
+  LoginIdentifierType get type;
+  // enum typeEnum {  email,  phone,  username,  };
+
+  LoginIdentifierConfig._();
+
+  factory LoginIdentifierConfig(
+      [void updates(LoginIdentifierConfigBuilder b)]) = _$LoginIdentifierConfig;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(LoginIdentifierConfigBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<LoginIdentifierConfig> get serializer =>
+      _$LoginIdentifierConfigSerializer();
+}
+
+class _$LoginIdentifierConfigSerializer
+    implements PrimitiveSerializer<LoginIdentifierConfig> {
+  @override
+  final Iterable<Type> types = const [
+    LoginIdentifierConfig,
+    _$LoginIdentifierConfig
+  ];
+
+  @override
+  final String wireName = r'LoginIdentifierConfig';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    LoginIdentifierConfig object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'type';
+    yield serializers.serialize(
+      object.type,
+      specifiedType: const FullType(LoginIdentifierType),
+    );
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    LoginIdentifierConfig object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required LoginIdentifierConfigBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'type':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(LoginIdentifierType),
+          ) as LoginIdentifierType;
+          result.type = valueDes;
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  LoginIdentifierConfig deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = LoginIdentifierConfigBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/login_identifier_config.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/login_identifier_config.g.dart
new file mode 100644
index 0000000..c4aa602
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/login_identifier_config.g.dart
@@ -0,0 +1,98 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'login_identifier_config.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$LoginIdentifierConfig extends LoginIdentifierConfig {
+  @override
+  final LoginIdentifierType type;
+
+  factory _$LoginIdentifierConfig(
+          [void Function(LoginIdentifierConfigBuilder)? updates]) =>
+      (new LoginIdentifierConfigBuilder()..update(updates))._build();
+
+  _$LoginIdentifierConfig._({required this.type}) : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        type, r'LoginIdentifierConfig', 'type');
+  }
+
+  @override
+  LoginIdentifierConfig rebuild(
+          void Function(LoginIdentifierConfigBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  LoginIdentifierConfigBuilder toBuilder() =>
+      new LoginIdentifierConfigBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is LoginIdentifierConfig && type == other.type;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, type.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'LoginIdentifierConfig')
+          ..add('type', type))
+        .toString();
+  }
+}
+
+class LoginIdentifierConfigBuilder
+    implements Builder<LoginIdentifierConfig, LoginIdentifierConfigBuilder> {
+  _$LoginIdentifierConfig? _$v;
+
+  LoginIdentifierType? _type;
+  LoginIdentifierType? get type => _$this._type;
+  set type(LoginIdentifierType? type) => _$this._type = type;
+
+  LoginIdentifierConfigBuilder() {
+    LoginIdentifierConfig._defaults(this);
+  }
+
+  LoginIdentifierConfigBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _type = $v.type;
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(LoginIdentifierConfig other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$LoginIdentifierConfig;
+  }
+
+  @override
+  void update(void Function(LoginIdentifierConfigBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  LoginIdentifierConfig build() => _build();
+
+  _$LoginIdentifierConfig _build() {
+    final _$result = _$v ??
+        new _$LoginIdentifierConfig._(
+            type: BuiltValueNullFieldError.checkNotNull(
+                type, r'LoginIdentifierConfig', 'type'));
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/login_identifier_type.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/login_identifier_type.dart
new file mode 100644
index 0000000..9aae958
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/login_identifier_type.dart
@@ -0,0 +1,36 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:built_collection/built_collection.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'login_identifier_type.g.dart';
+
+class LoginIdentifierType extends EnumClass {
+  @BuiltValueEnumConst(wireName: r'email')
+  static const LoginIdentifierType email = _$email;
+  @BuiltValueEnumConst(wireName: r'phone')
+  static const LoginIdentifierType phone = _$phone;
+  @BuiltValueEnumConst(wireName: r'username', fallback: true)
+  static const LoginIdentifierType username = _$username;
+
+  static Serializer<LoginIdentifierType> get serializer =>
+      _$loginIdentifierTypeSerializer;
+
+  const LoginIdentifierType._(String name) : super(name);
+
+  static BuiltSet<LoginIdentifierType> get values => _$values;
+  static LoginIdentifierType valueOf(String name) => _$valueOf(name);
+}
+
+/// Optionally, enum_class can generate a mixin to go with your enum for use
+/// with Angular. It exposes your enum constants as getters. So, if you mix it
+/// in to your Dart component class, the values become available to the
+/// corresponding Angular template.
+///
+/// Trigger mixin generation by writing a line like this one next to your enum.
+abstract class LoginIdentifierTypeMixin = Object
+    with _$LoginIdentifierTypeMixin;
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/login_identifier_type.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/login_identifier_type.g.dart
new file mode 100644
index 0000000..23cb712
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/login_identifier_type.g.dart
@@ -0,0 +1,81 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'login_identifier_type.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+const LoginIdentifierType _$email = const LoginIdentifierType._('email');
+const LoginIdentifierType _$phone = const LoginIdentifierType._('phone');
+const LoginIdentifierType _$username = const LoginIdentifierType._('username');
+
+LoginIdentifierType _$valueOf(String name) {
+  switch (name) {
+    case 'email':
+      return _$email;
+    case 'phone':
+      return _$phone;
+    case 'username':
+      return _$username;
+    default:
+      return _$username;
+  }
+}
+
+final BuiltSet<LoginIdentifierType> _$values =
+    new BuiltSet<LoginIdentifierType>(const <LoginIdentifierType>[
+  _$email,
+  _$phone,
+  _$username,
+]);
+
+class _$LoginIdentifierTypeMeta {
+  const _$LoginIdentifierTypeMeta();
+  LoginIdentifierType get email => _$email;
+  LoginIdentifierType get phone => _$phone;
+  LoginIdentifierType get username => _$username;
+  LoginIdentifierType valueOf(String name) => _$valueOf(name);
+  BuiltSet<LoginIdentifierType> get values => _$values;
+}
+
+abstract class _$LoginIdentifierTypeMixin {
+  // ignore: non_constant_identifier_names
+  _$LoginIdentifierTypeMeta get LoginIdentifierType =>
+      const _$LoginIdentifierTypeMeta();
+}
+
+Serializer<LoginIdentifierType> _$loginIdentifierTypeSerializer =
+    new _$LoginIdentifierTypeSerializer();
+
+class _$LoginIdentifierTypeSerializer
+    implements PrimitiveSerializer<LoginIdentifierType> {
+  static const Map<String, Object> _toWire = const <String, Object>{
+    'email': 'email',
+    'phone': 'phone',
+    'username': 'username',
+  };
+  static const Map<Object, String> _fromWire = const <Object, String>{
+    'email': 'email',
+    'phone': 'phone',
+    'username': 'username',
+  };
+
+  @override
+  final Iterable<Type> types = const <Type>[LoginIdentifierType];
+  @override
+  final String wireName = 'LoginIdentifierType';
+
+  @override
+  Object serialize(Serializers serializers, LoginIdentifierType object,
+          {FullType specifiedType = FullType.unspecified}) =>
+      _toWire[object.name] ?? object.name;
+
+  @override
+  LoginIdentifierType deserialize(Serializers serializers, Object serialized,
+          {FullType specifiedType = FullType.unspecified}) =>
+      LoginIdentifierType.valueOf(
+          _fromWire[serialized] ?? (serialized is String ? serialized : ''));
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/login_identifier_with_error.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/login_identifier_with_error.dart
new file mode 100644
index 0000000..1f5267c
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/login_identifier_with_error.dart
@@ -0,0 +1,153 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:corbado_frontend_api_client/src/model/request_error.dart';
+import 'package:corbado_frontend_api_client/src/model/login_identifier_type.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'login_identifier_with_error.g.dart';
+
+/// LoginIdentifierWithError
+///
+/// Properties:
+/// * [type]
+/// * [identifier]
+/// * [error]
+@BuiltValue()
+abstract class LoginIdentifierWithError
+    implements
+        Built<LoginIdentifierWithError, LoginIdentifierWithErrorBuilder> {
+  @BuiltValueField(wireName: r'type')
+  LoginIdentifierType get type;
+  // enum typeEnum {  email,  phone,  username,  };
+
+  @BuiltValueField(wireName: r'identifier')
+  String get identifier;
+
+  @BuiltValueField(wireName: r'error')
+  RequestError? get error;
+
+  LoginIdentifierWithError._();
+
+  factory LoginIdentifierWithError(
+          [void updates(LoginIdentifierWithErrorBuilder b)]) =
+      _$LoginIdentifierWithError;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(LoginIdentifierWithErrorBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<LoginIdentifierWithError> get serializer =>
+      _$LoginIdentifierWithErrorSerializer();
+}
+
+class _$LoginIdentifierWithErrorSerializer
+    implements PrimitiveSerializer<LoginIdentifierWithError> {
+  @override
+  final Iterable<Type> types = const [
+    LoginIdentifierWithError,
+    _$LoginIdentifierWithError
+  ];
+
+  @override
+  final String wireName = r'LoginIdentifierWithError';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    LoginIdentifierWithError object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'type';
+    yield serializers.serialize(
+      object.type,
+      specifiedType: const FullType(LoginIdentifierType),
+    );
+    yield r'identifier';
+    yield serializers.serialize(
+      object.identifier,
+      specifiedType: const FullType(String),
+    );
+    if (object.error != null) {
+      yield r'error';
+      yield serializers.serialize(
+        object.error,
+        specifiedType: const FullType(RequestError),
+      );
+    }
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    LoginIdentifierWithError object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required LoginIdentifierWithErrorBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'type':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(LoginIdentifierType),
+          ) as LoginIdentifierType;
+          result.type = valueDes;
+          break;
+        case r'identifier':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.identifier = valueDes;
+          break;
+        case r'error':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(RequestError),
+          ) as RequestError;
+          result.error.replace(valueDes);
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  LoginIdentifierWithError deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = LoginIdentifierWithErrorBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/login_identifier_with_error.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/login_identifier_with_error.g.dart
new file mode 100644
index 0000000..3584e60
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/login_identifier_with_error.g.dart
@@ -0,0 +1,140 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'login_identifier_with_error.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$LoginIdentifierWithError extends LoginIdentifierWithError {
+  @override
+  final LoginIdentifierType type;
+  @override
+  final String identifier;
+  @override
+  final RequestError? error;
+
+  factory _$LoginIdentifierWithError(
+          [void Function(LoginIdentifierWithErrorBuilder)? updates]) =>
+      (new LoginIdentifierWithErrorBuilder()..update(updates))._build();
+
+  _$LoginIdentifierWithError._(
+      {required this.type, required this.identifier, this.error})
+      : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        type, r'LoginIdentifierWithError', 'type');
+    BuiltValueNullFieldError.checkNotNull(
+        identifier, r'LoginIdentifierWithError', 'identifier');
+  }
+
+  @override
+  LoginIdentifierWithError rebuild(
+          void Function(LoginIdentifierWithErrorBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  LoginIdentifierWithErrorBuilder toBuilder() =>
+      new LoginIdentifierWithErrorBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is LoginIdentifierWithError &&
+        type == other.type &&
+        identifier == other.identifier &&
+        error == other.error;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, type.hashCode);
+    _$hash = $jc(_$hash, identifier.hashCode);
+    _$hash = $jc(_$hash, error.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'LoginIdentifierWithError')
+          ..add('type', type)
+          ..add('identifier', identifier)
+          ..add('error', error))
+        .toString();
+  }
+}
+
+class LoginIdentifierWithErrorBuilder
+    implements
+        Builder<LoginIdentifierWithError, LoginIdentifierWithErrorBuilder> {
+  _$LoginIdentifierWithError? _$v;
+
+  LoginIdentifierType? _type;
+  LoginIdentifierType? get type => _$this._type;
+  set type(LoginIdentifierType? type) => _$this._type = type;
+
+  String? _identifier;
+  String? get identifier => _$this._identifier;
+  set identifier(String? identifier) => _$this._identifier = identifier;
+
+  RequestErrorBuilder? _error;
+  RequestErrorBuilder get error => _$this._error ??= new RequestErrorBuilder();
+  set error(RequestErrorBuilder? error) => _$this._error = error;
+
+  LoginIdentifierWithErrorBuilder() {
+    LoginIdentifierWithError._defaults(this);
+  }
+
+  LoginIdentifierWithErrorBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _type = $v.type;
+      _identifier = $v.identifier;
+      _error = $v.error?.toBuilder();
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(LoginIdentifierWithError other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$LoginIdentifierWithError;
+  }
+
+  @override
+  void update(void Function(LoginIdentifierWithErrorBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  LoginIdentifierWithError build() => _build();
+
+  _$LoginIdentifierWithError _build() {
+    _$LoginIdentifierWithError _$result;
+    try {
+      _$result = _$v ??
+          new _$LoginIdentifierWithError._(
+              type: BuiltValueNullFieldError.checkNotNull(
+                  type, r'LoginIdentifierWithError', 'type'),
+              identifier: BuiltValueNullFieldError.checkNotNull(
+                  identifier, r'LoginIdentifierWithError', 'identifier'),
+              error: _error?.build());
+    } catch (_) {
+      late String _$failedField;
+      try {
+        _$failedField = 'error';
+        _error?.build();
+      } catch (e) {
+        throw new BuiltValueNestedFieldError(
+            r'LoginIdentifierWithError', _$failedField, e.toString());
+      }
+      rethrow;
+    }
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/login_init_req.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/login_init_req.dart
new file mode 100644
index 0000000..c9a9614
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/login_init_req.dart
@@ -0,0 +1,124 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'login_init_req.g.dart';
+
+/// tbd.
+///
+/// Properties:
+/// * [identifierValue]
+/// * [isPhone]
+@BuiltValue()
+abstract class LoginInitReq
+    implements Built<LoginInitReq, LoginInitReqBuilder> {
+  @BuiltValueField(wireName: r'identifierValue')
+  String get identifierValue;
+
+  @BuiltValueField(wireName: r'isPhone')
+  bool get isPhone;
+
+  LoginInitReq._();
+
+  factory LoginInitReq([void updates(LoginInitReqBuilder b)]) = _$LoginInitReq;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(LoginInitReqBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<LoginInitReq> get serializer => _$LoginInitReqSerializer();
+}
+
+class _$LoginInitReqSerializer implements PrimitiveSerializer<LoginInitReq> {
+  @override
+  final Iterable<Type> types = const [LoginInitReq, _$LoginInitReq];
+
+  @override
+  final String wireName = r'LoginInitReq';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    LoginInitReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'identifierValue';
+    yield serializers.serialize(
+      object.identifierValue,
+      specifiedType: const FullType(String),
+    );
+    yield r'isPhone';
+    yield serializers.serialize(
+      object.isPhone,
+      specifiedType: const FullType(bool),
+    );
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    LoginInitReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required LoginInitReqBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'identifierValue':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.identifierValue = valueDes;
+          break;
+        case r'isPhone':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(bool),
+          ) as bool;
+          result.isPhone = valueDes;
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  LoginInitReq deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = LoginInitReqBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/login_init_req.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/login_init_req.g.dart
new file mode 100644
index 0000000..6471a83
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/login_init_req.g.dart
@@ -0,0 +1,111 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'login_init_req.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$LoginInitReq extends LoginInitReq {
+  @override
+  final String identifierValue;
+  @override
+  final bool isPhone;
+
+  factory _$LoginInitReq([void Function(LoginInitReqBuilder)? updates]) =>
+      (new LoginInitReqBuilder()..update(updates))._build();
+
+  _$LoginInitReq._({required this.identifierValue, required this.isPhone})
+      : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        identifierValue, r'LoginInitReq', 'identifierValue');
+    BuiltValueNullFieldError.checkNotNull(isPhone, r'LoginInitReq', 'isPhone');
+  }
+
+  @override
+  LoginInitReq rebuild(void Function(LoginInitReqBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  LoginInitReqBuilder toBuilder() => new LoginInitReqBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is LoginInitReq &&
+        identifierValue == other.identifierValue &&
+        isPhone == other.isPhone;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, identifierValue.hashCode);
+    _$hash = $jc(_$hash, isPhone.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'LoginInitReq')
+          ..add('identifierValue', identifierValue)
+          ..add('isPhone', isPhone))
+        .toString();
+  }
+}
+
+class LoginInitReqBuilder
+    implements Builder<LoginInitReq, LoginInitReqBuilder> {
+  _$LoginInitReq? _$v;
+
+  String? _identifierValue;
+  String? get identifierValue => _$this._identifierValue;
+  set identifierValue(String? identifierValue) =>
+      _$this._identifierValue = identifierValue;
+
+  bool? _isPhone;
+  bool? get isPhone => _$this._isPhone;
+  set isPhone(bool? isPhone) => _$this._isPhone = isPhone;
+
+  LoginInitReqBuilder() {
+    LoginInitReq._defaults(this);
+  }
+
+  LoginInitReqBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _identifierValue = $v.identifierValue;
+      _isPhone = $v.isPhone;
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(LoginInitReq other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$LoginInitReq;
+  }
+
+  @override
+  void update(void Function(LoginInitReqBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  LoginInitReq build() => _build();
+
+  _$LoginInitReq _build() {
+    final _$result = _$v ??
+        new _$LoginInitReq._(
+            identifierValue: BuiltValueNullFieldError.checkNotNull(
+                identifierValue, r'LoginInitReq', 'identifierValue'),
+            isPhone: BuiltValueNullFieldError.checkNotNull(
+                isPhone, r'LoginInitReq', 'isPhone'));
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_identifier_create_req.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_identifier_create_req.dart
new file mode 100644
index 0000000..79f7586
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_identifier_create_req.dart
@@ -0,0 +1,132 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:corbado_frontend_api_client/src/model/login_identifier_type.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'me_identifier_create_req.g.dart';
+
+/// MeIdentifierCreateReq
+///
+/// Properties:
+/// * [identifierType]
+/// * [value]
+@BuiltValue()
+abstract class MeIdentifierCreateReq
+    implements Built<MeIdentifierCreateReq, MeIdentifierCreateReqBuilder> {
+  @BuiltValueField(wireName: r'identifierType')
+  LoginIdentifierType get identifierType;
+  // enum identifierTypeEnum {  email,  phone,  username,  };
+
+  @BuiltValueField(wireName: r'value')
+  String get value;
+
+  MeIdentifierCreateReq._();
+
+  factory MeIdentifierCreateReq(
+      [void updates(MeIdentifierCreateReqBuilder b)]) = _$MeIdentifierCreateReq;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(MeIdentifierCreateReqBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<MeIdentifierCreateReq> get serializer =>
+      _$MeIdentifierCreateReqSerializer();
+}
+
+class _$MeIdentifierCreateReqSerializer
+    implements PrimitiveSerializer<MeIdentifierCreateReq> {
+  @override
+  final Iterable<Type> types = const [
+    MeIdentifierCreateReq,
+    _$MeIdentifierCreateReq
+  ];
+
+  @override
+  final String wireName = r'MeIdentifierCreateReq';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    MeIdentifierCreateReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'identifierType';
+    yield serializers.serialize(
+      object.identifierType,
+      specifiedType: const FullType(LoginIdentifierType),
+    );
+    yield r'value';
+    yield serializers.serialize(
+      object.value,
+      specifiedType: const FullType(String),
+    );
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    MeIdentifierCreateReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required MeIdentifierCreateReqBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'identifierType':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(LoginIdentifierType),
+          ) as LoginIdentifierType;
+          result.identifierType = valueDes;
+          break;
+        case r'value':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.value = valueDes;
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  MeIdentifierCreateReq deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = MeIdentifierCreateReqBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_identifier_create_req.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_identifier_create_req.g.dart
new file mode 100644
index 0000000..3664513
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_identifier_create_req.g.dart
@@ -0,0 +1,115 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'me_identifier_create_req.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$MeIdentifierCreateReq extends MeIdentifierCreateReq {
+  @override
+  final LoginIdentifierType identifierType;
+  @override
+  final String value;
+
+  factory _$MeIdentifierCreateReq(
+          [void Function(MeIdentifierCreateReqBuilder)? updates]) =>
+      (new MeIdentifierCreateReqBuilder()..update(updates))._build();
+
+  _$MeIdentifierCreateReq._({required this.identifierType, required this.value})
+      : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        identifierType, r'MeIdentifierCreateReq', 'identifierType');
+    BuiltValueNullFieldError.checkNotNull(
+        value, r'MeIdentifierCreateReq', 'value');
+  }
+
+  @override
+  MeIdentifierCreateReq rebuild(
+          void Function(MeIdentifierCreateReqBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  MeIdentifierCreateReqBuilder toBuilder() =>
+      new MeIdentifierCreateReqBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is MeIdentifierCreateReq &&
+        identifierType == other.identifierType &&
+        value == other.value;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, identifierType.hashCode);
+    _$hash = $jc(_$hash, value.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'MeIdentifierCreateReq')
+          ..add('identifierType', identifierType)
+          ..add('value', value))
+        .toString();
+  }
+}
+
+class MeIdentifierCreateReqBuilder
+    implements Builder<MeIdentifierCreateReq, MeIdentifierCreateReqBuilder> {
+  _$MeIdentifierCreateReq? _$v;
+
+  LoginIdentifierType? _identifierType;
+  LoginIdentifierType? get identifierType => _$this._identifierType;
+  set identifierType(LoginIdentifierType? identifierType) =>
+      _$this._identifierType = identifierType;
+
+  String? _value;
+  String? get value => _$this._value;
+  set value(String? value) => _$this._value = value;
+
+  MeIdentifierCreateReqBuilder() {
+    MeIdentifierCreateReq._defaults(this);
+  }
+
+  MeIdentifierCreateReqBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _identifierType = $v.identifierType;
+      _value = $v.value;
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(MeIdentifierCreateReq other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$MeIdentifierCreateReq;
+  }
+
+  @override
+  void update(void Function(MeIdentifierCreateReqBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  MeIdentifierCreateReq build() => _build();
+
+  _$MeIdentifierCreateReq _build() {
+    final _$result = _$v ??
+        new _$MeIdentifierCreateReq._(
+            identifierType: BuiltValueNullFieldError.checkNotNull(
+                identifierType, r'MeIdentifierCreateReq', 'identifierType'),
+            value: BuiltValueNullFieldError.checkNotNull(
+                value, r'MeIdentifierCreateReq', 'value'));
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_identifier_delete_req.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_identifier_delete_req.dart
new file mode 100644
index 0000000..9dc5cfc
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_identifier_delete_req.dart
@@ -0,0 +1,114 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'me_identifier_delete_req.g.dart';
+
+/// MeIdentifierDeleteReq
+///
+/// Properties:
+/// * [identifierID]
+@BuiltValue()
+abstract class MeIdentifierDeleteReq
+    implements Built<MeIdentifierDeleteReq, MeIdentifierDeleteReqBuilder> {
+  @BuiltValueField(wireName: r'identifierID')
+  String get identifierID;
+
+  MeIdentifierDeleteReq._();
+
+  factory MeIdentifierDeleteReq(
+      [void updates(MeIdentifierDeleteReqBuilder b)]) = _$MeIdentifierDeleteReq;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(MeIdentifierDeleteReqBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<MeIdentifierDeleteReq> get serializer =>
+      _$MeIdentifierDeleteReqSerializer();
+}
+
+class _$MeIdentifierDeleteReqSerializer
+    implements PrimitiveSerializer<MeIdentifierDeleteReq> {
+  @override
+  final Iterable<Type> types = const [
+    MeIdentifierDeleteReq,
+    _$MeIdentifierDeleteReq
+  ];
+
+  @override
+  final String wireName = r'MeIdentifierDeleteReq';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    MeIdentifierDeleteReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'identifierID';
+    yield serializers.serialize(
+      object.identifierID,
+      specifiedType: const FullType(String),
+    );
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    MeIdentifierDeleteReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required MeIdentifierDeleteReqBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'identifierID':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.identifierID = valueDes;
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  MeIdentifierDeleteReq deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = MeIdentifierDeleteReqBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_identifier_delete_req.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_identifier_delete_req.g.dart
new file mode 100644
index 0000000..06cf9f3
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_identifier_delete_req.g.dart
@@ -0,0 +1,98 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'me_identifier_delete_req.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$MeIdentifierDeleteReq extends MeIdentifierDeleteReq {
+  @override
+  final String identifierID;
+
+  factory _$MeIdentifierDeleteReq(
+          [void Function(MeIdentifierDeleteReqBuilder)? updates]) =>
+      (new MeIdentifierDeleteReqBuilder()..update(updates))._build();
+
+  _$MeIdentifierDeleteReq._({required this.identifierID}) : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        identifierID, r'MeIdentifierDeleteReq', 'identifierID');
+  }
+
+  @override
+  MeIdentifierDeleteReq rebuild(
+          void Function(MeIdentifierDeleteReqBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  MeIdentifierDeleteReqBuilder toBuilder() =>
+      new MeIdentifierDeleteReqBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is MeIdentifierDeleteReq && identifierID == other.identifierID;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, identifierID.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'MeIdentifierDeleteReq')
+          ..add('identifierID', identifierID))
+        .toString();
+  }
+}
+
+class MeIdentifierDeleteReqBuilder
+    implements Builder<MeIdentifierDeleteReq, MeIdentifierDeleteReqBuilder> {
+  _$MeIdentifierDeleteReq? _$v;
+
+  String? _identifierID;
+  String? get identifierID => _$this._identifierID;
+  set identifierID(String? identifierID) => _$this._identifierID = identifierID;
+
+  MeIdentifierDeleteReqBuilder() {
+    MeIdentifierDeleteReq._defaults(this);
+  }
+
+  MeIdentifierDeleteReqBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _identifierID = $v.identifierID;
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(MeIdentifierDeleteReq other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$MeIdentifierDeleteReq;
+  }
+
+  @override
+  void update(void Function(MeIdentifierDeleteReqBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  MeIdentifierDeleteReq build() => _build();
+
+  _$MeIdentifierDeleteReq _build() {
+    final _$result = _$v ??
+        new _$MeIdentifierDeleteReq._(
+            identifierID: BuiltValueNullFieldError.checkNotNull(
+                identifierID, r'MeIdentifierDeleteReq', 'identifierID'));
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_identifier_update_req.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_identifier_update_req.dart
new file mode 100644
index 0000000..6cba5e3
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_identifier_update_req.dart
@@ -0,0 +1,148 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:corbado_frontend_api_client/src/model/login_identifier_type.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'me_identifier_update_req.g.dart';
+
+/// MeIdentifierUpdateReq
+///
+/// Properties:
+/// * [identifierID]
+/// * [identifierType]
+/// * [value]
+@BuiltValue()
+abstract class MeIdentifierUpdateReq
+    implements Built<MeIdentifierUpdateReq, MeIdentifierUpdateReqBuilder> {
+  @BuiltValueField(wireName: r'identifierID')
+  String get identifierID;
+
+  @BuiltValueField(wireName: r'identifierType')
+  LoginIdentifierType get identifierType;
+  // enum identifierTypeEnum {  email,  phone,  username,  };
+
+  @BuiltValueField(wireName: r'value')
+  String get value;
+
+  MeIdentifierUpdateReq._();
+
+  factory MeIdentifierUpdateReq(
+      [void updates(MeIdentifierUpdateReqBuilder b)]) = _$MeIdentifierUpdateReq;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(MeIdentifierUpdateReqBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<MeIdentifierUpdateReq> get serializer =>
+      _$MeIdentifierUpdateReqSerializer();
+}
+
+class _$MeIdentifierUpdateReqSerializer
+    implements PrimitiveSerializer<MeIdentifierUpdateReq> {
+  @override
+  final Iterable<Type> types = const [
+    MeIdentifierUpdateReq,
+    _$MeIdentifierUpdateReq
+  ];
+
+  @override
+  final String wireName = r'MeIdentifierUpdateReq';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    MeIdentifierUpdateReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'identifierID';
+    yield serializers.serialize(
+      object.identifierID,
+      specifiedType: const FullType(String),
+    );
+    yield r'identifierType';
+    yield serializers.serialize(
+      object.identifierType,
+      specifiedType: const FullType(LoginIdentifierType),
+    );
+    yield r'value';
+    yield serializers.serialize(
+      object.value,
+      specifiedType: const FullType(String),
+    );
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    MeIdentifierUpdateReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required MeIdentifierUpdateReqBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'identifierID':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.identifierID = valueDes;
+          break;
+        case r'identifierType':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(LoginIdentifierType),
+          ) as LoginIdentifierType;
+          result.identifierType = valueDes;
+          break;
+        case r'value':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.value = valueDes;
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  MeIdentifierUpdateReq deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = MeIdentifierUpdateReqBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_identifier_update_req.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_identifier_update_req.g.dart
new file mode 100644
index 0000000..4f980ee
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_identifier_update_req.g.dart
@@ -0,0 +1,132 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'me_identifier_update_req.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$MeIdentifierUpdateReq extends MeIdentifierUpdateReq {
+  @override
+  final String identifierID;
+  @override
+  final LoginIdentifierType identifierType;
+  @override
+  final String value;
+
+  factory _$MeIdentifierUpdateReq(
+          [void Function(MeIdentifierUpdateReqBuilder)? updates]) =>
+      (new MeIdentifierUpdateReqBuilder()..update(updates))._build();
+
+  _$MeIdentifierUpdateReq._(
+      {required this.identifierID,
+      required this.identifierType,
+      required this.value})
+      : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        identifierID, r'MeIdentifierUpdateReq', 'identifierID');
+    BuiltValueNullFieldError.checkNotNull(
+        identifierType, r'MeIdentifierUpdateReq', 'identifierType');
+    BuiltValueNullFieldError.checkNotNull(
+        value, r'MeIdentifierUpdateReq', 'value');
+  }
+
+  @override
+  MeIdentifierUpdateReq rebuild(
+          void Function(MeIdentifierUpdateReqBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  MeIdentifierUpdateReqBuilder toBuilder() =>
+      new MeIdentifierUpdateReqBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is MeIdentifierUpdateReq &&
+        identifierID == other.identifierID &&
+        identifierType == other.identifierType &&
+        value == other.value;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, identifierID.hashCode);
+    _$hash = $jc(_$hash, identifierType.hashCode);
+    _$hash = $jc(_$hash, value.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'MeIdentifierUpdateReq')
+          ..add('identifierID', identifierID)
+          ..add('identifierType', identifierType)
+          ..add('value', value))
+        .toString();
+  }
+}
+
+class MeIdentifierUpdateReqBuilder
+    implements Builder<MeIdentifierUpdateReq, MeIdentifierUpdateReqBuilder> {
+  _$MeIdentifierUpdateReq? _$v;
+
+  String? _identifierID;
+  String? get identifierID => _$this._identifierID;
+  set identifierID(String? identifierID) => _$this._identifierID = identifierID;
+
+  LoginIdentifierType? _identifierType;
+  LoginIdentifierType? get identifierType => _$this._identifierType;
+  set identifierType(LoginIdentifierType? identifierType) =>
+      _$this._identifierType = identifierType;
+
+  String? _value;
+  String? get value => _$this._value;
+  set value(String? value) => _$this._value = value;
+
+  MeIdentifierUpdateReqBuilder() {
+    MeIdentifierUpdateReq._defaults(this);
+  }
+
+  MeIdentifierUpdateReqBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _identifierID = $v.identifierID;
+      _identifierType = $v.identifierType;
+      _value = $v.value;
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(MeIdentifierUpdateReq other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$MeIdentifierUpdateReq;
+  }
+
+  @override
+  void update(void Function(MeIdentifierUpdateReqBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  MeIdentifierUpdateReq build() => _build();
+
+  _$MeIdentifierUpdateReq _build() {
+    final _$result = _$v ??
+        new _$MeIdentifierUpdateReq._(
+            identifierID: BuiltValueNullFieldError.checkNotNull(
+                identifierID, r'MeIdentifierUpdateReq', 'identifierID'),
+            identifierType: BuiltValueNullFieldError.checkNotNull(
+                identifierType, r'MeIdentifierUpdateReq', 'identifierType'),
+            value: BuiltValueNullFieldError.checkNotNull(
+                value, r'MeIdentifierUpdateReq', 'value'));
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_identifier_verify_finish_req.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_identifier_verify_finish_req.dart
new file mode 100644
index 0000000..5f5d553
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_identifier_verify_finish_req.dart
@@ -0,0 +1,132 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'me_identifier_verify_finish_req.g.dart';
+
+/// MeIdentifierVerifyFinishReq
+///
+/// Properties:
+/// * [identifierID]
+/// * [code]
+@BuiltValue()
+abstract class MeIdentifierVerifyFinishReq
+    implements
+        Built<MeIdentifierVerifyFinishReq, MeIdentifierVerifyFinishReqBuilder> {
+  @BuiltValueField(wireName: r'identifierID')
+  String get identifierID;
+
+  @BuiltValueField(wireName: r'code')
+  String get code;
+
+  MeIdentifierVerifyFinishReq._();
+
+  factory MeIdentifierVerifyFinishReq(
+          [void updates(MeIdentifierVerifyFinishReqBuilder b)]) =
+      _$MeIdentifierVerifyFinishReq;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(MeIdentifierVerifyFinishReqBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<MeIdentifierVerifyFinishReq> get serializer =>
+      _$MeIdentifierVerifyFinishReqSerializer();
+}
+
+class _$MeIdentifierVerifyFinishReqSerializer
+    implements PrimitiveSerializer<MeIdentifierVerifyFinishReq> {
+  @override
+  final Iterable<Type> types = const [
+    MeIdentifierVerifyFinishReq,
+    _$MeIdentifierVerifyFinishReq
+  ];
+
+  @override
+  final String wireName = r'MeIdentifierVerifyFinishReq';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    MeIdentifierVerifyFinishReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'identifierID';
+    yield serializers.serialize(
+      object.identifierID,
+      specifiedType: const FullType(String),
+    );
+    yield r'code';
+    yield serializers.serialize(
+      object.code,
+      specifiedType: const FullType(String),
+    );
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    MeIdentifierVerifyFinishReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required MeIdentifierVerifyFinishReqBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'identifierID':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.identifierID = valueDes;
+          break;
+        case r'code':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.code = valueDes;
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  MeIdentifierVerifyFinishReq deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = MeIdentifierVerifyFinishReqBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_identifier_verify_finish_req.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_identifier_verify_finish_req.g.dart
new file mode 100644
index 0000000..15b75be
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_identifier_verify_finish_req.g.dart
@@ -0,0 +1,117 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'me_identifier_verify_finish_req.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$MeIdentifierVerifyFinishReq extends MeIdentifierVerifyFinishReq {
+  @override
+  final String identifierID;
+  @override
+  final String code;
+
+  factory _$MeIdentifierVerifyFinishReq(
+          [void Function(MeIdentifierVerifyFinishReqBuilder)? updates]) =>
+      (new MeIdentifierVerifyFinishReqBuilder()..update(updates))._build();
+
+  _$MeIdentifierVerifyFinishReq._(
+      {required this.identifierID, required this.code})
+      : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        identifierID, r'MeIdentifierVerifyFinishReq', 'identifierID');
+    BuiltValueNullFieldError.checkNotNull(
+        code, r'MeIdentifierVerifyFinishReq', 'code');
+  }
+
+  @override
+  MeIdentifierVerifyFinishReq rebuild(
+          void Function(MeIdentifierVerifyFinishReqBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  MeIdentifierVerifyFinishReqBuilder toBuilder() =>
+      new MeIdentifierVerifyFinishReqBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is MeIdentifierVerifyFinishReq &&
+        identifierID == other.identifierID &&
+        code == other.code;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, identifierID.hashCode);
+    _$hash = $jc(_$hash, code.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'MeIdentifierVerifyFinishReq')
+          ..add('identifierID', identifierID)
+          ..add('code', code))
+        .toString();
+  }
+}
+
+class MeIdentifierVerifyFinishReqBuilder
+    implements
+        Builder<MeIdentifierVerifyFinishReq,
+            MeIdentifierVerifyFinishReqBuilder> {
+  _$MeIdentifierVerifyFinishReq? _$v;
+
+  String? _identifierID;
+  String? get identifierID => _$this._identifierID;
+  set identifierID(String? identifierID) => _$this._identifierID = identifierID;
+
+  String? _code;
+  String? get code => _$this._code;
+  set code(String? code) => _$this._code = code;
+
+  MeIdentifierVerifyFinishReqBuilder() {
+    MeIdentifierVerifyFinishReq._defaults(this);
+  }
+
+  MeIdentifierVerifyFinishReqBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _identifierID = $v.identifierID;
+      _code = $v.code;
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(MeIdentifierVerifyFinishReq other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$MeIdentifierVerifyFinishReq;
+  }
+
+  @override
+  void update(void Function(MeIdentifierVerifyFinishReqBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  MeIdentifierVerifyFinishReq build() => _build();
+
+  _$MeIdentifierVerifyFinishReq _build() {
+    final _$result = _$v ??
+        new _$MeIdentifierVerifyFinishReq._(
+            identifierID: BuiltValueNullFieldError.checkNotNull(
+                identifierID, r'MeIdentifierVerifyFinishReq', 'identifierID'),
+            code: BuiltValueNullFieldError.checkNotNull(
+                code, r'MeIdentifierVerifyFinishReq', 'code'));
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_identifier_verify_start_req.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_identifier_verify_start_req.dart
new file mode 100644
index 0000000..e5ed107
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_identifier_verify_start_req.dart
@@ -0,0 +1,133 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:corbado_frontend_api_client/src/model/client_information.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'me_identifier_verify_start_req.g.dart';
+
+/// tbd.
+///
+/// Properties:
+/// * [identifierID]
+/// * [clientInformation]
+@BuiltValue()
+abstract class MeIdentifierVerifyStartReq
+    implements
+        Built<MeIdentifierVerifyStartReq, MeIdentifierVerifyStartReqBuilder> {
+  @BuiltValueField(wireName: r'identifierID')
+  String get identifierID;
+
+  @BuiltValueField(wireName: r'clientInformation')
+  ClientInformation get clientInformation;
+
+  MeIdentifierVerifyStartReq._();
+
+  factory MeIdentifierVerifyStartReq(
+          [void updates(MeIdentifierVerifyStartReqBuilder b)]) =
+      _$MeIdentifierVerifyStartReq;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(MeIdentifierVerifyStartReqBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<MeIdentifierVerifyStartReq> get serializer =>
+      _$MeIdentifierVerifyStartReqSerializer();
+}
+
+class _$MeIdentifierVerifyStartReqSerializer
+    implements PrimitiveSerializer<MeIdentifierVerifyStartReq> {
+  @override
+  final Iterable<Type> types = const [
+    MeIdentifierVerifyStartReq,
+    _$MeIdentifierVerifyStartReq
+  ];
+
+  @override
+  final String wireName = r'MeIdentifierVerifyStartReq';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    MeIdentifierVerifyStartReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'identifierID';
+    yield serializers.serialize(
+      object.identifierID,
+      specifiedType: const FullType(String),
+    );
+    yield r'clientInformation';
+    yield serializers.serialize(
+      object.clientInformation,
+      specifiedType: const FullType(ClientInformation),
+    );
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    MeIdentifierVerifyStartReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required MeIdentifierVerifyStartReqBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'identifierID':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.identifierID = valueDes;
+          break;
+        case r'clientInformation':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(ClientInformation),
+          ) as ClientInformation;
+          result.clientInformation.replace(valueDes);
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  MeIdentifierVerifyStartReq deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = MeIdentifierVerifyStartReqBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_identifier_verify_start_req.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_identifier_verify_start_req.g.dart
new file mode 100644
index 0000000..5c9a8ca
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_identifier_verify_start_req.g.dart
@@ -0,0 +1,130 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'me_identifier_verify_start_req.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$MeIdentifierVerifyStartReq extends MeIdentifierVerifyStartReq {
+  @override
+  final String identifierID;
+  @override
+  final ClientInformation clientInformation;
+
+  factory _$MeIdentifierVerifyStartReq(
+          [void Function(MeIdentifierVerifyStartReqBuilder)? updates]) =>
+      (new MeIdentifierVerifyStartReqBuilder()..update(updates))._build();
+
+  _$MeIdentifierVerifyStartReq._(
+      {required this.identifierID, required this.clientInformation})
+      : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        identifierID, r'MeIdentifierVerifyStartReq', 'identifierID');
+    BuiltValueNullFieldError.checkNotNull(
+        clientInformation, r'MeIdentifierVerifyStartReq', 'clientInformation');
+  }
+
+  @override
+  MeIdentifierVerifyStartReq rebuild(
+          void Function(MeIdentifierVerifyStartReqBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  MeIdentifierVerifyStartReqBuilder toBuilder() =>
+      new MeIdentifierVerifyStartReqBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is MeIdentifierVerifyStartReq &&
+        identifierID == other.identifierID &&
+        clientInformation == other.clientInformation;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, identifierID.hashCode);
+    _$hash = $jc(_$hash, clientInformation.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'MeIdentifierVerifyStartReq')
+          ..add('identifierID', identifierID)
+          ..add('clientInformation', clientInformation))
+        .toString();
+  }
+}
+
+class MeIdentifierVerifyStartReqBuilder
+    implements
+        Builder<MeIdentifierVerifyStartReq, MeIdentifierVerifyStartReqBuilder> {
+  _$MeIdentifierVerifyStartReq? _$v;
+
+  String? _identifierID;
+  String? get identifierID => _$this._identifierID;
+  set identifierID(String? identifierID) => _$this._identifierID = identifierID;
+
+  ClientInformationBuilder? _clientInformation;
+  ClientInformationBuilder get clientInformation =>
+      _$this._clientInformation ??= new ClientInformationBuilder();
+  set clientInformation(ClientInformationBuilder? clientInformation) =>
+      _$this._clientInformation = clientInformation;
+
+  MeIdentifierVerifyStartReqBuilder() {
+    MeIdentifierVerifyStartReq._defaults(this);
+  }
+
+  MeIdentifierVerifyStartReqBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _identifierID = $v.identifierID;
+      _clientInformation = $v.clientInformation.toBuilder();
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(MeIdentifierVerifyStartReq other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$MeIdentifierVerifyStartReq;
+  }
+
+  @override
+  void update(void Function(MeIdentifierVerifyStartReqBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  MeIdentifierVerifyStartReq build() => _build();
+
+  _$MeIdentifierVerifyStartReq _build() {
+    _$MeIdentifierVerifyStartReq _$result;
+    try {
+      _$result = _$v ??
+          new _$MeIdentifierVerifyStartReq._(
+              identifierID: BuiltValueNullFieldError.checkNotNull(
+                  identifierID, r'MeIdentifierVerifyStartReq', 'identifierID'),
+              clientInformation: clientInformation.build());
+    } catch (_) {
+      late String _$failedField;
+      try {
+        _$failedField = 'clientInformation';
+        clientInformation.build();
+      } catch (e) {
+        throw new BuiltValueNestedFieldError(
+            r'MeIdentifierVerifyStartReq', _$failedField, e.toString());
+      }
+      rethrow;
+    }
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_passkey_delete_rsp.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_passkey_delete_rsp.dart
new file mode 100644
index 0000000..6c577c2
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_passkey_delete_rsp.dart
@@ -0,0 +1,111 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'me_passkey_delete_rsp.g.dart';
+
+/// MePasskeyDeleteRsp
+///
+/// Properties:
+/// * [id]
+@BuiltValue()
+abstract class MePasskeyDeleteRsp
+    implements Built<MePasskeyDeleteRsp, MePasskeyDeleteRspBuilder> {
+  @BuiltValueField(wireName: r'id')
+  String get id;
+
+  MePasskeyDeleteRsp._();
+
+  factory MePasskeyDeleteRsp([void updates(MePasskeyDeleteRspBuilder b)]) =
+      _$MePasskeyDeleteRsp;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(MePasskeyDeleteRspBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<MePasskeyDeleteRsp> get serializer =>
+      _$MePasskeyDeleteRspSerializer();
+}
+
+class _$MePasskeyDeleteRspSerializer
+    implements PrimitiveSerializer<MePasskeyDeleteRsp> {
+  @override
+  final Iterable<Type> types = const [MePasskeyDeleteRsp, _$MePasskeyDeleteRsp];
+
+  @override
+  final String wireName = r'MePasskeyDeleteRsp';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    MePasskeyDeleteRsp object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'id';
+    yield serializers.serialize(
+      object.id,
+      specifiedType: const FullType(String),
+    );
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    MePasskeyDeleteRsp object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required MePasskeyDeleteRspBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'id':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.id = valueDes;
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  MePasskeyDeleteRsp deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = MePasskeyDeleteRspBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_passkey_delete_rsp.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_passkey_delete_rsp.g.dart
new file mode 100644
index 0000000..856f00b
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_passkey_delete_rsp.g.dart
@@ -0,0 +1,96 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'me_passkey_delete_rsp.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$MePasskeyDeleteRsp extends MePasskeyDeleteRsp {
+  @override
+  final String id;
+
+  factory _$MePasskeyDeleteRsp(
+          [void Function(MePasskeyDeleteRspBuilder)? updates]) =>
+      (new MePasskeyDeleteRspBuilder()..update(updates))._build();
+
+  _$MePasskeyDeleteRsp._({required this.id}) : super._() {
+    BuiltValueNullFieldError.checkNotNull(id, r'MePasskeyDeleteRsp', 'id');
+  }
+
+  @override
+  MePasskeyDeleteRsp rebuild(
+          void Function(MePasskeyDeleteRspBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  MePasskeyDeleteRspBuilder toBuilder() =>
+      new MePasskeyDeleteRspBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is MePasskeyDeleteRsp && id == other.id;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, id.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'MePasskeyDeleteRsp')..add('id', id))
+        .toString();
+  }
+}
+
+class MePasskeyDeleteRspBuilder
+    implements Builder<MePasskeyDeleteRsp, MePasskeyDeleteRspBuilder> {
+  _$MePasskeyDeleteRsp? _$v;
+
+  String? _id;
+  String? get id => _$this._id;
+  set id(String? id) => _$this._id = id;
+
+  MePasskeyDeleteRspBuilder() {
+    MePasskeyDeleteRsp._defaults(this);
+  }
+
+  MePasskeyDeleteRspBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _id = $v.id;
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(MePasskeyDeleteRsp other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$MePasskeyDeleteRsp;
+  }
+
+  @override
+  void update(void Function(MePasskeyDeleteRspBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  MePasskeyDeleteRsp build() => _build();
+
+  _$MePasskeyDeleteRsp _build() {
+    final _$result = _$v ??
+        new _$MePasskeyDeleteRsp._(
+            id: BuiltValueNullFieldError.checkNotNull(
+                id, r'MePasskeyDeleteRsp', 'id'));
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_passkey_rsp.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_passkey_rsp.dart
new file mode 100644
index 0000000..8dc5c00
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_passkey_rsp.dart
@@ -0,0 +1,127 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:corbado_frontend_api_client/src/model/passkey.dart';
+import 'package:built_collection/built_collection.dart';
+import 'package:corbado_frontend_api_client/src/model/paging.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'me_passkey_rsp.g.dart';
+
+/// MePasskeyRsp
+///
+/// Properties:
+/// * [passkeys]
+/// * [paging]
+@BuiltValue()
+abstract class MePasskeyRsp
+    implements Built<MePasskeyRsp, MePasskeyRspBuilder> {
+  @BuiltValueField(wireName: r'passkeys')
+  BuiltList<Passkey> get passkeys;
+
+  @BuiltValueField(wireName: r'paging')
+  Paging get paging;
+
+  MePasskeyRsp._();
+
+  factory MePasskeyRsp([void updates(MePasskeyRspBuilder b)]) = _$MePasskeyRsp;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(MePasskeyRspBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<MePasskeyRsp> get serializer => _$MePasskeyRspSerializer();
+}
+
+class _$MePasskeyRspSerializer implements PrimitiveSerializer<MePasskeyRsp> {
+  @override
+  final Iterable<Type> types = const [MePasskeyRsp, _$MePasskeyRsp];
+
+  @override
+  final String wireName = r'MePasskeyRsp';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    MePasskeyRsp object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'passkeys';
+    yield serializers.serialize(
+      object.passkeys,
+      specifiedType: const FullType(BuiltList, [FullType(Passkey)]),
+    );
+    yield r'paging';
+    yield serializers.serialize(
+      object.paging,
+      specifiedType: const FullType(Paging),
+    );
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    MePasskeyRsp object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required MePasskeyRspBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'passkeys':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(BuiltList, [FullType(Passkey)]),
+          ) as BuiltList<Passkey>;
+          result.passkeys.replace(valueDes);
+          break;
+        case r'paging':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(Paging),
+          ) as Paging;
+          result.paging.replace(valueDes);
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  MePasskeyRsp deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = MePasskeyRspBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_passkey_rsp.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_passkey_rsp.g.dart
new file mode 100644
index 0000000..613bacd
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_passkey_rsp.g.dart
@@ -0,0 +1,122 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'me_passkey_rsp.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$MePasskeyRsp extends MePasskeyRsp {
+  @override
+  final BuiltList<Passkey> passkeys;
+  @override
+  final Paging paging;
+
+  factory _$MePasskeyRsp([void Function(MePasskeyRspBuilder)? updates]) =>
+      (new MePasskeyRspBuilder()..update(updates))._build();
+
+  _$MePasskeyRsp._({required this.passkeys, required this.paging}) : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        passkeys, r'MePasskeyRsp', 'passkeys');
+    BuiltValueNullFieldError.checkNotNull(paging, r'MePasskeyRsp', 'paging');
+  }
+
+  @override
+  MePasskeyRsp rebuild(void Function(MePasskeyRspBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  MePasskeyRspBuilder toBuilder() => new MePasskeyRspBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is MePasskeyRsp &&
+        passkeys == other.passkeys &&
+        paging == other.paging;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, passkeys.hashCode);
+    _$hash = $jc(_$hash, paging.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'MePasskeyRsp')
+          ..add('passkeys', passkeys)
+          ..add('paging', paging))
+        .toString();
+  }
+}
+
+class MePasskeyRspBuilder
+    implements Builder<MePasskeyRsp, MePasskeyRspBuilder> {
+  _$MePasskeyRsp? _$v;
+
+  ListBuilder<Passkey>? _passkeys;
+  ListBuilder<Passkey> get passkeys =>
+      _$this._passkeys ??= new ListBuilder<Passkey>();
+  set passkeys(ListBuilder<Passkey>? passkeys) => _$this._passkeys = passkeys;
+
+  PagingBuilder? _paging;
+  PagingBuilder get paging => _$this._paging ??= new PagingBuilder();
+  set paging(PagingBuilder? paging) => _$this._paging = paging;
+
+  MePasskeyRspBuilder() {
+    MePasskeyRsp._defaults(this);
+  }
+
+  MePasskeyRspBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _passkeys = $v.passkeys.toBuilder();
+      _paging = $v.paging.toBuilder();
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(MePasskeyRsp other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$MePasskeyRsp;
+  }
+
+  @override
+  void update(void Function(MePasskeyRspBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  MePasskeyRsp build() => _build();
+
+  _$MePasskeyRsp _build() {
+    _$MePasskeyRsp _$result;
+    try {
+      _$result = _$v ??
+          new _$MePasskeyRsp._(
+              passkeys: passkeys.build(), paging: paging.build());
+    } catch (_) {
+      late String _$failedField;
+      try {
+        _$failedField = 'passkeys';
+        passkeys.build();
+        _$failedField = 'paging';
+        paging.build();
+      } catch (e) {
+        throw new BuiltValueNestedFieldError(
+            r'MePasskeyRsp', _$failedField, e.toString());
+      }
+      rethrow;
+    }
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_passkeys_append_finish_req.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_passkeys_append_finish_req.dart
new file mode 100644
index 0000000..b6e6ab1
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_passkeys_append_finish_req.dart
@@ -0,0 +1,133 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:corbado_frontend_api_client/src/model/client_information.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'me_passkeys_append_finish_req.g.dart';
+
+/// MePasskeysAppendFinishReq
+///
+/// Properties:
+/// * [attestationResponse]
+/// * [clientInformation]
+@BuiltValue()
+abstract class MePasskeysAppendFinishReq
+    implements
+        Built<MePasskeysAppendFinishReq, MePasskeysAppendFinishReqBuilder> {
+  @BuiltValueField(wireName: r'attestationResponse')
+  String get attestationResponse;
+
+  @BuiltValueField(wireName: r'clientInformation')
+  ClientInformation get clientInformation;
+
+  MePasskeysAppendFinishReq._();
+
+  factory MePasskeysAppendFinishReq(
+          [void updates(MePasskeysAppendFinishReqBuilder b)]) =
+      _$MePasskeysAppendFinishReq;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(MePasskeysAppendFinishReqBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<MePasskeysAppendFinishReq> get serializer =>
+      _$MePasskeysAppendFinishReqSerializer();
+}
+
+class _$MePasskeysAppendFinishReqSerializer
+    implements PrimitiveSerializer<MePasskeysAppendFinishReq> {
+  @override
+  final Iterable<Type> types = const [
+    MePasskeysAppendFinishReq,
+    _$MePasskeysAppendFinishReq
+  ];
+
+  @override
+  final String wireName = r'MePasskeysAppendFinishReq';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    MePasskeysAppendFinishReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'attestationResponse';
+    yield serializers.serialize(
+      object.attestationResponse,
+      specifiedType: const FullType(String),
+    );
+    yield r'clientInformation';
+    yield serializers.serialize(
+      object.clientInformation,
+      specifiedType: const FullType(ClientInformation),
+    );
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    MePasskeysAppendFinishReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required MePasskeysAppendFinishReqBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'attestationResponse':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.attestationResponse = valueDes;
+          break;
+        case r'clientInformation':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(ClientInformation),
+          ) as ClientInformation;
+          result.clientInformation.replace(valueDes);
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  MePasskeysAppendFinishReq deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = MePasskeysAppendFinishReqBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_passkeys_append_finish_req.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_passkeys_append_finish_req.g.dart
new file mode 100644
index 0000000..d321547
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_passkeys_append_finish_req.g.dart
@@ -0,0 +1,133 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'me_passkeys_append_finish_req.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$MePasskeysAppendFinishReq extends MePasskeysAppendFinishReq {
+  @override
+  final String attestationResponse;
+  @override
+  final ClientInformation clientInformation;
+
+  factory _$MePasskeysAppendFinishReq(
+          [void Function(MePasskeysAppendFinishReqBuilder)? updates]) =>
+      (new MePasskeysAppendFinishReqBuilder()..update(updates))._build();
+
+  _$MePasskeysAppendFinishReq._(
+      {required this.attestationResponse, required this.clientInformation})
+      : super._() {
+    BuiltValueNullFieldError.checkNotNull(attestationResponse,
+        r'MePasskeysAppendFinishReq', 'attestationResponse');
+    BuiltValueNullFieldError.checkNotNull(
+        clientInformation, r'MePasskeysAppendFinishReq', 'clientInformation');
+  }
+
+  @override
+  MePasskeysAppendFinishReq rebuild(
+          void Function(MePasskeysAppendFinishReqBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  MePasskeysAppendFinishReqBuilder toBuilder() =>
+      new MePasskeysAppendFinishReqBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is MePasskeysAppendFinishReq &&
+        attestationResponse == other.attestationResponse &&
+        clientInformation == other.clientInformation;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, attestationResponse.hashCode);
+    _$hash = $jc(_$hash, clientInformation.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'MePasskeysAppendFinishReq')
+          ..add('attestationResponse', attestationResponse)
+          ..add('clientInformation', clientInformation))
+        .toString();
+  }
+}
+
+class MePasskeysAppendFinishReqBuilder
+    implements
+        Builder<MePasskeysAppendFinishReq, MePasskeysAppendFinishReqBuilder> {
+  _$MePasskeysAppendFinishReq? _$v;
+
+  String? _attestationResponse;
+  String? get attestationResponse => _$this._attestationResponse;
+  set attestationResponse(String? attestationResponse) =>
+      _$this._attestationResponse = attestationResponse;
+
+  ClientInformationBuilder? _clientInformation;
+  ClientInformationBuilder get clientInformation =>
+      _$this._clientInformation ??= new ClientInformationBuilder();
+  set clientInformation(ClientInformationBuilder? clientInformation) =>
+      _$this._clientInformation = clientInformation;
+
+  MePasskeysAppendFinishReqBuilder() {
+    MePasskeysAppendFinishReq._defaults(this);
+  }
+
+  MePasskeysAppendFinishReqBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _attestationResponse = $v.attestationResponse;
+      _clientInformation = $v.clientInformation.toBuilder();
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(MePasskeysAppendFinishReq other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$MePasskeysAppendFinishReq;
+  }
+
+  @override
+  void update(void Function(MePasskeysAppendFinishReqBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  MePasskeysAppendFinishReq build() => _build();
+
+  _$MePasskeysAppendFinishReq _build() {
+    _$MePasskeysAppendFinishReq _$result;
+    try {
+      _$result = _$v ??
+          new _$MePasskeysAppendFinishReq._(
+              attestationResponse: BuiltValueNullFieldError.checkNotNull(
+                  attestationResponse,
+                  r'MePasskeysAppendFinishReq',
+                  'attestationResponse'),
+              clientInformation: clientInformation.build());
+    } catch (_) {
+      late String _$failedField;
+      try {
+        _$failedField = 'clientInformation';
+        clientInformation.build();
+      } catch (e) {
+        throw new BuiltValueNestedFieldError(
+            r'MePasskeysAppendFinishReq', _$failedField, e.toString());
+      }
+      rethrow;
+    }
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_passkeys_append_start_req.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_passkeys_append_start_req.dart
new file mode 100644
index 0000000..6da1571
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_passkeys_append_start_req.dart
@@ -0,0 +1,117 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:corbado_frontend_api_client/src/model/client_information.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'me_passkeys_append_start_req.g.dart';
+
+/// MePasskeysAppendStartReq
+///
+/// Properties:
+/// * [clientInformation]
+@BuiltValue()
+abstract class MePasskeysAppendStartReq
+    implements
+        Built<MePasskeysAppendStartReq, MePasskeysAppendStartReqBuilder> {
+  @BuiltValueField(wireName: r'clientInformation')
+  ClientInformation get clientInformation;
+
+  MePasskeysAppendStartReq._();
+
+  factory MePasskeysAppendStartReq(
+          [void updates(MePasskeysAppendStartReqBuilder b)]) =
+      _$MePasskeysAppendStartReq;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(MePasskeysAppendStartReqBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<MePasskeysAppendStartReq> get serializer =>
+      _$MePasskeysAppendStartReqSerializer();
+}
+
+class _$MePasskeysAppendStartReqSerializer
+    implements PrimitiveSerializer<MePasskeysAppendStartReq> {
+  @override
+  final Iterable<Type> types = const [
+    MePasskeysAppendStartReq,
+    _$MePasskeysAppendStartReq
+  ];
+
+  @override
+  final String wireName = r'MePasskeysAppendStartReq';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    MePasskeysAppendStartReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'clientInformation';
+    yield serializers.serialize(
+      object.clientInformation,
+      specifiedType: const FullType(ClientInformation),
+    );
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    MePasskeysAppendStartReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required MePasskeysAppendStartReqBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'clientInformation':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(ClientInformation),
+          ) as ClientInformation;
+          result.clientInformation.replace(valueDes);
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  MePasskeysAppendStartReq deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = MePasskeysAppendStartReqBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_passkeys_append_start_req.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_passkeys_append_start_req.g.dart
new file mode 100644
index 0000000..854ebc1
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_passkeys_append_start_req.g.dart
@@ -0,0 +1,114 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'me_passkeys_append_start_req.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$MePasskeysAppendStartReq extends MePasskeysAppendStartReq {
+  @override
+  final ClientInformation clientInformation;
+
+  factory _$MePasskeysAppendStartReq(
+          [void Function(MePasskeysAppendStartReqBuilder)? updates]) =>
+      (new MePasskeysAppendStartReqBuilder()..update(updates))._build();
+
+  _$MePasskeysAppendStartReq._({required this.clientInformation}) : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        clientInformation, r'MePasskeysAppendStartReq', 'clientInformation');
+  }
+
+  @override
+  MePasskeysAppendStartReq rebuild(
+          void Function(MePasskeysAppendStartReqBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  MePasskeysAppendStartReqBuilder toBuilder() =>
+      new MePasskeysAppendStartReqBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is MePasskeysAppendStartReq &&
+        clientInformation == other.clientInformation;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, clientInformation.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'MePasskeysAppendStartReq')
+          ..add('clientInformation', clientInformation))
+        .toString();
+  }
+}
+
+class MePasskeysAppendStartReqBuilder
+    implements
+        Builder<MePasskeysAppendStartReq, MePasskeysAppendStartReqBuilder> {
+  _$MePasskeysAppendStartReq? _$v;
+
+  ClientInformationBuilder? _clientInformation;
+  ClientInformationBuilder get clientInformation =>
+      _$this._clientInformation ??= new ClientInformationBuilder();
+  set clientInformation(ClientInformationBuilder? clientInformation) =>
+      _$this._clientInformation = clientInformation;
+
+  MePasskeysAppendStartReqBuilder() {
+    MePasskeysAppendStartReq._defaults(this);
+  }
+
+  MePasskeysAppendStartReqBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _clientInformation = $v.clientInformation.toBuilder();
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(MePasskeysAppendStartReq other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$MePasskeysAppendStartReq;
+  }
+
+  @override
+  void update(void Function(MePasskeysAppendStartReqBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  MePasskeysAppendStartReq build() => _build();
+
+  _$MePasskeysAppendStartReq _build() {
+    _$MePasskeysAppendStartReq _$result;
+    try {
+      _$result = _$v ??
+          new _$MePasskeysAppendStartReq._(
+              clientInformation: clientInformation.build());
+    } catch (_) {
+      late String _$failedField;
+      try {
+        _$failedField = 'clientInformation';
+        clientInformation.build();
+      } catch (e) {
+        throw new BuiltValueNestedFieldError(
+            r'MePasskeysAppendStartReq', _$failedField, e.toString());
+      }
+      rethrow;
+    }
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_passkeys_append_start_rsp.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_passkeys_append_start_rsp.dart
new file mode 100644
index 0000000..8e08003
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_passkeys_append_start_rsp.dart
@@ -0,0 +1,181 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:built_collection/built_collection.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'me_passkeys_append_start_rsp.g.dart';
+
+/// MePasskeysAppendStartRsp
+///
+/// Properties:
+/// * [attestationOptions]
+/// * [newClientEnvHandle]
+/// * [appendNotAllowedReason]
+@BuiltValue()
+abstract class MePasskeysAppendStartRsp
+    implements
+        Built<MePasskeysAppendStartRsp, MePasskeysAppendStartRspBuilder> {
+  @BuiltValueField(wireName: r'attestationOptions')
+  String get attestationOptions;
+
+  @BuiltValueField(wireName: r'newClientEnvHandle')
+  String? get newClientEnvHandle;
+
+  @BuiltValueField(wireName: r'appendNotAllowedReason')
+  MePasskeysAppendStartRspAppendNotAllowedReasonEnum?
+      get appendNotAllowedReason;
+  // enum appendNotAllowedReasonEnum {  passkey_already_exists,  passkeys_not_supported,  };
+
+  MePasskeysAppendStartRsp._();
+
+  factory MePasskeysAppendStartRsp(
+          [void updates(MePasskeysAppendStartRspBuilder b)]) =
+      _$MePasskeysAppendStartRsp;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(MePasskeysAppendStartRspBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<MePasskeysAppendStartRsp> get serializer =>
+      _$MePasskeysAppendStartRspSerializer();
+}
+
+class _$MePasskeysAppendStartRspSerializer
+    implements PrimitiveSerializer<MePasskeysAppendStartRsp> {
+  @override
+  final Iterable<Type> types = const [
+    MePasskeysAppendStartRsp,
+    _$MePasskeysAppendStartRsp
+  ];
+
+  @override
+  final String wireName = r'MePasskeysAppendStartRsp';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    MePasskeysAppendStartRsp object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'attestationOptions';
+    yield serializers.serialize(
+      object.attestationOptions,
+      specifiedType: const FullType(String),
+    );
+    if (object.newClientEnvHandle != null) {
+      yield r'newClientEnvHandle';
+      yield serializers.serialize(
+        object.newClientEnvHandle,
+        specifiedType: const FullType(String),
+      );
+    }
+    if (object.appendNotAllowedReason != null) {
+      yield r'appendNotAllowedReason';
+      yield serializers.serialize(
+        object.appendNotAllowedReason,
+        specifiedType:
+            const FullType(MePasskeysAppendStartRspAppendNotAllowedReasonEnum),
+      );
+    }
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    MePasskeysAppendStartRsp object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required MePasskeysAppendStartRspBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'attestationOptions':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.attestationOptions = valueDes;
+          break;
+        case r'newClientEnvHandle':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.newClientEnvHandle = valueDes;
+          break;
+        case r'appendNotAllowedReason':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(
+                MePasskeysAppendStartRspAppendNotAllowedReasonEnum),
+          ) as MePasskeysAppendStartRspAppendNotAllowedReasonEnum;
+          result.appendNotAllowedReason = valueDes;
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  MePasskeysAppendStartRsp deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = MePasskeysAppendStartRspBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
+
+class MePasskeysAppendStartRspAppendNotAllowedReasonEnum extends EnumClass {
+  @BuiltValueEnumConst(wireName: r'passkey_already_exists')
+  static const MePasskeysAppendStartRspAppendNotAllowedReasonEnum
+      passkeyAlreadyExists =
+      _$mePasskeysAppendStartRspAppendNotAllowedReasonEnum_passkeyAlreadyExists;
+  @BuiltValueEnumConst(wireName: r'passkeys_not_supported', fallback: true)
+  static const MePasskeysAppendStartRspAppendNotAllowedReasonEnum
+      passkeysNotSupported =
+      _$mePasskeysAppendStartRspAppendNotAllowedReasonEnum_passkeysNotSupported;
+
+  static Serializer<MePasskeysAppendStartRspAppendNotAllowedReasonEnum>
+      get serializer =>
+          _$mePasskeysAppendStartRspAppendNotAllowedReasonEnumSerializer;
+
+  const MePasskeysAppendStartRspAppendNotAllowedReasonEnum._(String name)
+      : super(name);
+
+  static BuiltSet<MePasskeysAppendStartRspAppendNotAllowedReasonEnum>
+      get values => _$mePasskeysAppendStartRspAppendNotAllowedReasonEnumValues;
+  static MePasskeysAppendStartRspAppendNotAllowedReasonEnum valueOf(
+          String name) =>
+      _$mePasskeysAppendStartRspAppendNotAllowedReasonEnumValueOf(name);
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_passkeys_append_start_rsp.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_passkeys_append_start_rsp.g.dart
new file mode 100644
index 0000000..15eab5e
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_passkeys_append_start_rsp.g.dart
@@ -0,0 +1,201 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'me_passkeys_append_start_rsp.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+const MePasskeysAppendStartRspAppendNotAllowedReasonEnum
+    _$mePasskeysAppendStartRspAppendNotAllowedReasonEnum_passkeyAlreadyExists =
+    const MePasskeysAppendStartRspAppendNotAllowedReasonEnum._(
+        'passkeyAlreadyExists');
+const MePasskeysAppendStartRspAppendNotAllowedReasonEnum
+    _$mePasskeysAppendStartRspAppendNotAllowedReasonEnum_passkeysNotSupported =
+    const MePasskeysAppendStartRspAppendNotAllowedReasonEnum._(
+        'passkeysNotSupported');
+
+MePasskeysAppendStartRspAppendNotAllowedReasonEnum
+    _$mePasskeysAppendStartRspAppendNotAllowedReasonEnumValueOf(String name) {
+  switch (name) {
+    case 'passkeyAlreadyExists':
+      return _$mePasskeysAppendStartRspAppendNotAllowedReasonEnum_passkeyAlreadyExists;
+    case 'passkeysNotSupported':
+      return _$mePasskeysAppendStartRspAppendNotAllowedReasonEnum_passkeysNotSupported;
+    default:
+      return _$mePasskeysAppendStartRspAppendNotAllowedReasonEnum_passkeysNotSupported;
+  }
+}
+
+final BuiltSet<MePasskeysAppendStartRspAppendNotAllowedReasonEnum>
+    _$mePasskeysAppendStartRspAppendNotAllowedReasonEnumValues = new BuiltSet<
+        MePasskeysAppendStartRspAppendNotAllowedReasonEnum>(const <MePasskeysAppendStartRspAppendNotAllowedReasonEnum>[
+  _$mePasskeysAppendStartRspAppendNotAllowedReasonEnum_passkeyAlreadyExists,
+  _$mePasskeysAppendStartRspAppendNotAllowedReasonEnum_passkeysNotSupported,
+]);
+
+Serializer<MePasskeysAppendStartRspAppendNotAllowedReasonEnum>
+    _$mePasskeysAppendStartRspAppendNotAllowedReasonEnumSerializer =
+    new _$MePasskeysAppendStartRspAppendNotAllowedReasonEnumSerializer();
+
+class _$MePasskeysAppendStartRspAppendNotAllowedReasonEnumSerializer
+    implements
+        PrimitiveSerializer<
+            MePasskeysAppendStartRspAppendNotAllowedReasonEnum> {
+  static const Map<String, Object> _toWire = const <String, Object>{
+    'passkeyAlreadyExists': 'passkey_already_exists',
+    'passkeysNotSupported': 'passkeys_not_supported',
+  };
+  static const Map<Object, String> _fromWire = const <Object, String>{
+    'passkey_already_exists': 'passkeyAlreadyExists',
+    'passkeys_not_supported': 'passkeysNotSupported',
+  };
+
+  @override
+  final Iterable<Type> types = const <Type>[
+    MePasskeysAppendStartRspAppendNotAllowedReasonEnum
+  ];
+  @override
+  final String wireName = 'MePasskeysAppendStartRspAppendNotAllowedReasonEnum';
+
+  @override
+  Object serialize(Serializers serializers,
+          MePasskeysAppendStartRspAppendNotAllowedReasonEnum object,
+          {FullType specifiedType = FullType.unspecified}) =>
+      _toWire[object.name] ?? object.name;
+
+  @override
+  MePasskeysAppendStartRspAppendNotAllowedReasonEnum deserialize(
+          Serializers serializers, Object serialized,
+          {FullType specifiedType = FullType.unspecified}) =>
+      MePasskeysAppendStartRspAppendNotAllowedReasonEnum.valueOf(
+          _fromWire[serialized] ?? (serialized is String ? serialized : ''));
+}
+
+class _$MePasskeysAppendStartRsp extends MePasskeysAppendStartRsp {
+  @override
+  final String attestationOptions;
+  @override
+  final String? newClientEnvHandle;
+  @override
+  final MePasskeysAppendStartRspAppendNotAllowedReasonEnum?
+      appendNotAllowedReason;
+
+  factory _$MePasskeysAppendStartRsp(
+          [void Function(MePasskeysAppendStartRspBuilder)? updates]) =>
+      (new MePasskeysAppendStartRspBuilder()..update(updates))._build();
+
+  _$MePasskeysAppendStartRsp._(
+      {required this.attestationOptions,
+      this.newClientEnvHandle,
+      this.appendNotAllowedReason})
+      : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        attestationOptions, r'MePasskeysAppendStartRsp', 'attestationOptions');
+  }
+
+  @override
+  MePasskeysAppendStartRsp rebuild(
+          void Function(MePasskeysAppendStartRspBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  MePasskeysAppendStartRspBuilder toBuilder() =>
+      new MePasskeysAppendStartRspBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is MePasskeysAppendStartRsp &&
+        attestationOptions == other.attestationOptions &&
+        newClientEnvHandle == other.newClientEnvHandle &&
+        appendNotAllowedReason == other.appendNotAllowedReason;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, attestationOptions.hashCode);
+    _$hash = $jc(_$hash, newClientEnvHandle.hashCode);
+    _$hash = $jc(_$hash, appendNotAllowedReason.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'MePasskeysAppendStartRsp')
+          ..add('attestationOptions', attestationOptions)
+          ..add('newClientEnvHandle', newClientEnvHandle)
+          ..add('appendNotAllowedReason', appendNotAllowedReason))
+        .toString();
+  }
+}
+
+class MePasskeysAppendStartRspBuilder
+    implements
+        Builder<MePasskeysAppendStartRsp, MePasskeysAppendStartRspBuilder> {
+  _$MePasskeysAppendStartRsp? _$v;
+
+  String? _attestationOptions;
+  String? get attestationOptions => _$this._attestationOptions;
+  set attestationOptions(String? attestationOptions) =>
+      _$this._attestationOptions = attestationOptions;
+
+  String? _newClientEnvHandle;
+  String? get newClientEnvHandle => _$this._newClientEnvHandle;
+  set newClientEnvHandle(String? newClientEnvHandle) =>
+      _$this._newClientEnvHandle = newClientEnvHandle;
+
+  MePasskeysAppendStartRspAppendNotAllowedReasonEnum? _appendNotAllowedReason;
+  MePasskeysAppendStartRspAppendNotAllowedReasonEnum?
+      get appendNotAllowedReason => _$this._appendNotAllowedReason;
+  set appendNotAllowedReason(
+          MePasskeysAppendStartRspAppendNotAllowedReasonEnum?
+              appendNotAllowedReason) =>
+      _$this._appendNotAllowedReason = appendNotAllowedReason;
+
+  MePasskeysAppendStartRspBuilder() {
+    MePasskeysAppendStartRsp._defaults(this);
+  }
+
+  MePasskeysAppendStartRspBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _attestationOptions = $v.attestationOptions;
+      _newClientEnvHandle = $v.newClientEnvHandle;
+      _appendNotAllowedReason = $v.appendNotAllowedReason;
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(MePasskeysAppendStartRsp other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$MePasskeysAppendStartRsp;
+  }
+
+  @override
+  void update(void Function(MePasskeysAppendStartRspBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  MePasskeysAppendStartRsp build() => _build();
+
+  _$MePasskeysAppendStartRsp _build() {
+    final _$result = _$v ??
+        new _$MePasskeysAppendStartRsp._(
+            attestationOptions: BuiltValueNullFieldError.checkNotNull(
+                attestationOptions,
+                r'MePasskeysAppendStartRsp',
+                'attestationOptions'),
+            newClientEnvHandle: newClientEnvHandle,
+            appendNotAllowedReason: appendNotAllowedReason);
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_refresh_rsp.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_refresh_rsp.dart
new file mode 100644
index 0000000..7cc1f01
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_refresh_rsp.dart
@@ -0,0 +1,108 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'me_refresh_rsp.g.dart';
+
+/// MeRefreshRsp
+///
+/// Properties:
+/// * [shortSession]
+@BuiltValue()
+abstract class MeRefreshRsp
+    implements Built<MeRefreshRsp, MeRefreshRspBuilder> {
+  @BuiltValueField(wireName: r'shortSession')
+  String get shortSession;
+
+  MeRefreshRsp._();
+
+  factory MeRefreshRsp([void updates(MeRefreshRspBuilder b)]) = _$MeRefreshRsp;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(MeRefreshRspBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<MeRefreshRsp> get serializer => _$MeRefreshRspSerializer();
+}
+
+class _$MeRefreshRspSerializer implements PrimitiveSerializer<MeRefreshRsp> {
+  @override
+  final Iterable<Type> types = const [MeRefreshRsp, _$MeRefreshRsp];
+
+  @override
+  final String wireName = r'MeRefreshRsp';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    MeRefreshRsp object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'shortSession';
+    yield serializers.serialize(
+      object.shortSession,
+      specifiedType: const FullType(String),
+    );
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    MeRefreshRsp object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required MeRefreshRspBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'shortSession':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.shortSession = valueDes;
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  MeRefreshRsp deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = MeRefreshRspBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_refresh_rsp.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_refresh_rsp.g.dart
new file mode 100644
index 0000000..e2c78ad
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_refresh_rsp.g.dart
@@ -0,0 +1,95 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'me_refresh_rsp.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$MeRefreshRsp extends MeRefreshRsp {
+  @override
+  final String shortSession;
+
+  factory _$MeRefreshRsp([void Function(MeRefreshRspBuilder)? updates]) =>
+      (new MeRefreshRspBuilder()..update(updates))._build();
+
+  _$MeRefreshRsp._({required this.shortSession}) : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        shortSession, r'MeRefreshRsp', 'shortSession');
+  }
+
+  @override
+  MeRefreshRsp rebuild(void Function(MeRefreshRspBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  MeRefreshRspBuilder toBuilder() => new MeRefreshRspBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is MeRefreshRsp && shortSession == other.shortSession;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, shortSession.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'MeRefreshRsp')
+          ..add('shortSession', shortSession))
+        .toString();
+  }
+}
+
+class MeRefreshRspBuilder
+    implements Builder<MeRefreshRsp, MeRefreshRspBuilder> {
+  _$MeRefreshRsp? _$v;
+
+  String? _shortSession;
+  String? get shortSession => _$this._shortSession;
+  set shortSession(String? shortSession) => _$this._shortSession = shortSession;
+
+  MeRefreshRspBuilder() {
+    MeRefreshRsp._defaults(this);
+  }
+
+  MeRefreshRspBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _shortSession = $v.shortSession;
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(MeRefreshRsp other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$MeRefreshRsp;
+  }
+
+  @override
+  void update(void Function(MeRefreshRspBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  MeRefreshRsp build() => _build();
+
+  _$MeRefreshRsp _build() {
+    final _$result = _$v ??
+        new _$MeRefreshRsp._(
+            shortSession: BuiltValueNullFieldError.checkNotNull(
+                shortSession, r'MeRefreshRsp', 'shortSession'));
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_rsp.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_rsp.dart
new file mode 100644
index 0000000..e44f6f3
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_rsp.dart
@@ -0,0 +1,158 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:built_collection/built_collection.dart';
+import 'package:corbado_frontend_api_client/src/model/identifier.dart';
+import 'package:corbado_frontend_api_client/src/model/social_account.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'me_rsp.g.dart';
+
+/// MeRsp
+///
+/// Properties:
+/// * [id]
+/// * [fullName]
+/// * [identifiers]
+/// * [socialAccounts]
+@BuiltValue()
+abstract class MeRsp implements Built<MeRsp, MeRspBuilder> {
+  @BuiltValueField(wireName: r'id')
+  String get id;
+
+  @BuiltValueField(wireName: r'fullName')
+  String get fullName;
+
+  @BuiltValueField(wireName: r'identifiers')
+  BuiltList<Identifier> get identifiers;
+
+  @BuiltValueField(wireName: r'socialAccounts')
+  BuiltList<SocialAccount> get socialAccounts;
+
+  MeRsp._();
+
+  factory MeRsp([void updates(MeRspBuilder b)]) = _$MeRsp;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(MeRspBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<MeRsp> get serializer => _$MeRspSerializer();
+}
+
+class _$MeRspSerializer implements PrimitiveSerializer<MeRsp> {
+  @override
+  final Iterable<Type> types = const [MeRsp, _$MeRsp];
+
+  @override
+  final String wireName = r'MeRsp';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    MeRsp object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'id';
+    yield serializers.serialize(
+      object.id,
+      specifiedType: const FullType(String),
+    );
+    yield r'fullName';
+    yield serializers.serialize(
+      object.fullName,
+      specifiedType: const FullType(String),
+    );
+    yield r'identifiers';
+    yield serializers.serialize(
+      object.identifiers,
+      specifiedType: const FullType(BuiltList, [FullType(Identifier)]),
+    );
+    yield r'socialAccounts';
+    yield serializers.serialize(
+      object.socialAccounts,
+      specifiedType: const FullType(BuiltList, [FullType(SocialAccount)]),
+    );
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    MeRsp object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required MeRspBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'id':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.id = valueDes;
+          break;
+        case r'fullName':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.fullName = valueDes;
+          break;
+        case r'identifiers':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(BuiltList, [FullType(Identifier)]),
+          ) as BuiltList<Identifier>;
+          result.identifiers.replace(valueDes);
+          break;
+        case r'socialAccounts':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(BuiltList, [FullType(SocialAccount)]),
+          ) as BuiltList<SocialAccount>;
+          result.socialAccounts.replace(valueDes);
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  MeRsp deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = MeRspBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_rsp.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_rsp.g.dart
new file mode 100644
index 0000000..f4fb942
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_rsp.g.dart
@@ -0,0 +1,155 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'me_rsp.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$MeRsp extends MeRsp {
+  @override
+  final String id;
+  @override
+  final String fullName;
+  @override
+  final BuiltList<Identifier> identifiers;
+  @override
+  final BuiltList<SocialAccount> socialAccounts;
+
+  factory _$MeRsp([void Function(MeRspBuilder)? updates]) =>
+      (new MeRspBuilder()..update(updates))._build();
+
+  _$MeRsp._(
+      {required this.id,
+      required this.fullName,
+      required this.identifiers,
+      required this.socialAccounts})
+      : super._() {
+    BuiltValueNullFieldError.checkNotNull(id, r'MeRsp', 'id');
+    BuiltValueNullFieldError.checkNotNull(fullName, r'MeRsp', 'fullName');
+    BuiltValueNullFieldError.checkNotNull(identifiers, r'MeRsp', 'identifiers');
+    BuiltValueNullFieldError.checkNotNull(
+        socialAccounts, r'MeRsp', 'socialAccounts');
+  }
+
+  @override
+  MeRsp rebuild(void Function(MeRspBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  MeRspBuilder toBuilder() => new MeRspBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is MeRsp &&
+        id == other.id &&
+        fullName == other.fullName &&
+        identifiers == other.identifiers &&
+        socialAccounts == other.socialAccounts;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, id.hashCode);
+    _$hash = $jc(_$hash, fullName.hashCode);
+    _$hash = $jc(_$hash, identifiers.hashCode);
+    _$hash = $jc(_$hash, socialAccounts.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'MeRsp')
+          ..add('id', id)
+          ..add('fullName', fullName)
+          ..add('identifiers', identifiers)
+          ..add('socialAccounts', socialAccounts))
+        .toString();
+  }
+}
+
+class MeRspBuilder implements Builder<MeRsp, MeRspBuilder> {
+  _$MeRsp? _$v;
+
+  String? _id;
+  String? get id => _$this._id;
+  set id(String? id) => _$this._id = id;
+
+  String? _fullName;
+  String? get fullName => _$this._fullName;
+  set fullName(String? fullName) => _$this._fullName = fullName;
+
+  ListBuilder<Identifier>? _identifiers;
+  ListBuilder<Identifier> get identifiers =>
+      _$this._identifiers ??= new ListBuilder<Identifier>();
+  set identifiers(ListBuilder<Identifier>? identifiers) =>
+      _$this._identifiers = identifiers;
+
+  ListBuilder<SocialAccount>? _socialAccounts;
+  ListBuilder<SocialAccount> get socialAccounts =>
+      _$this._socialAccounts ??= new ListBuilder<SocialAccount>();
+  set socialAccounts(ListBuilder<SocialAccount>? socialAccounts) =>
+      _$this._socialAccounts = socialAccounts;
+
+  MeRspBuilder() {
+    MeRsp._defaults(this);
+  }
+
+  MeRspBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _id = $v.id;
+      _fullName = $v.fullName;
+      _identifiers = $v.identifiers.toBuilder();
+      _socialAccounts = $v.socialAccounts.toBuilder();
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(MeRsp other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$MeRsp;
+  }
+
+  @override
+  void update(void Function(MeRspBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  MeRsp build() => _build();
+
+  _$MeRsp _build() {
+    _$MeRsp _$result;
+    try {
+      _$result = _$v ??
+          new _$MeRsp._(
+              id: BuiltValueNullFieldError.checkNotNull(id, r'MeRsp', 'id'),
+              fullName: BuiltValueNullFieldError.checkNotNull(
+                  fullName, r'MeRsp', 'fullName'),
+              identifiers: identifiers.build(),
+              socialAccounts: socialAccounts.build());
+    } catch (_) {
+      late String _$failedField;
+      try {
+        _$failedField = 'identifiers';
+        identifiers.build();
+        _$failedField = 'socialAccounts';
+        socialAccounts.build();
+      } catch (e) {
+        throw new BuiltValueNestedFieldError(
+            r'MeRsp', _$failedField, e.toString());
+      }
+      rethrow;
+    }
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_update_req.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_update_req.dart
new file mode 100644
index 0000000..8e0b934
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_update_req.dart
@@ -0,0 +1,107 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'me_update_req.g.dart';
+
+/// MeUpdateReq
+///
+/// Properties:
+/// * [fullName]
+@BuiltValue()
+abstract class MeUpdateReq implements Built<MeUpdateReq, MeUpdateReqBuilder> {
+  @BuiltValueField(wireName: r'fullName')
+  String get fullName;
+
+  MeUpdateReq._();
+
+  factory MeUpdateReq([void updates(MeUpdateReqBuilder b)]) = _$MeUpdateReq;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(MeUpdateReqBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<MeUpdateReq> get serializer => _$MeUpdateReqSerializer();
+}
+
+class _$MeUpdateReqSerializer implements PrimitiveSerializer<MeUpdateReq> {
+  @override
+  final Iterable<Type> types = const [MeUpdateReq, _$MeUpdateReq];
+
+  @override
+  final String wireName = r'MeUpdateReq';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    MeUpdateReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'fullName';
+    yield serializers.serialize(
+      object.fullName,
+      specifiedType: const FullType(String),
+    );
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    MeUpdateReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required MeUpdateReqBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'fullName':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.fullName = valueDes;
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  MeUpdateReq deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = MeUpdateReqBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_update_req.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_update_req.g.dart
new file mode 100644
index 0000000..c6c9204
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/me_update_req.g.dart
@@ -0,0 +1,93 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'me_update_req.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$MeUpdateReq extends MeUpdateReq {
+  @override
+  final String fullName;
+
+  factory _$MeUpdateReq([void Function(MeUpdateReqBuilder)? updates]) =>
+      (new MeUpdateReqBuilder()..update(updates))._build();
+
+  _$MeUpdateReq._({required this.fullName}) : super._() {
+    BuiltValueNullFieldError.checkNotNull(fullName, r'MeUpdateReq', 'fullName');
+  }
+
+  @override
+  MeUpdateReq rebuild(void Function(MeUpdateReqBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  MeUpdateReqBuilder toBuilder() => new MeUpdateReqBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is MeUpdateReq && fullName == other.fullName;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, fullName.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'MeUpdateReq')
+          ..add('fullName', fullName))
+        .toString();
+  }
+}
+
+class MeUpdateReqBuilder implements Builder<MeUpdateReq, MeUpdateReqBuilder> {
+  _$MeUpdateReq? _$v;
+
+  String? _fullName;
+  String? get fullName => _$this._fullName;
+  set fullName(String? fullName) => _$this._fullName = fullName;
+
+  MeUpdateReqBuilder() {
+    MeUpdateReq._defaults(this);
+  }
+
+  MeUpdateReqBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _fullName = $v.fullName;
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(MeUpdateReq other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$MeUpdateReq;
+  }
+
+  @override
+  void update(void Function(MeUpdateReqBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  MeUpdateReq build() => _build();
+
+  _$MeUpdateReq _build() {
+    final _$result = _$v ??
+        new _$MeUpdateReq._(
+            fullName: BuiltValueNullFieldError.checkNotNull(
+                fullName, r'MeUpdateReq', 'fullName'));
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/paging.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/paging.dart
new file mode 100644
index 0000000..3b2a0a5
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/paging.dart
@@ -0,0 +1,142 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'paging.g.dart';
+
+/// Paging
+///
+/// Properties:
+/// * [page] - current page returned in response
+/// * [totalPages] - total number of pages available
+/// * [totalItems] - total number of items available
+@BuiltValue()
+abstract class Paging implements Built<Paging, PagingBuilder> {
+  /// current page returned in response
+  @BuiltValueField(wireName: r'page')
+  int get page;
+
+  /// total number of pages available
+  @BuiltValueField(wireName: r'totalPages')
+  int get totalPages;
+
+  /// total number of items available
+  @BuiltValueField(wireName: r'totalItems')
+  int get totalItems;
+
+  Paging._();
+
+  factory Paging([void updates(PagingBuilder b)]) = _$Paging;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(PagingBuilder b) => b..page = 1;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<Paging> get serializer => _$PagingSerializer();
+}
+
+class _$PagingSerializer implements PrimitiveSerializer<Paging> {
+  @override
+  final Iterable<Type> types = const [Paging, _$Paging];
+
+  @override
+  final String wireName = r'Paging';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    Paging object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'page';
+    yield serializers.serialize(
+      object.page,
+      specifiedType: const FullType(int),
+    );
+    yield r'totalPages';
+    yield serializers.serialize(
+      object.totalPages,
+      specifiedType: const FullType(int),
+    );
+    yield r'totalItems';
+    yield serializers.serialize(
+      object.totalItems,
+      specifiedType: const FullType(int),
+    );
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    Paging object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required PagingBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'page':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(int),
+          ) as int;
+          result.page = valueDes;
+          break;
+        case r'totalPages':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(int),
+          ) as int;
+          result.totalPages = valueDes;
+          break;
+        case r'totalItems':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(int),
+          ) as int;
+          result.totalItems = valueDes;
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  Paging deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = PagingBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/paging.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/paging.g.dart
new file mode 100644
index 0000000..9d37fb6
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/paging.g.dart
@@ -0,0 +1,122 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'paging.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$Paging extends Paging {
+  @override
+  final int page;
+  @override
+  final int totalPages;
+  @override
+  final int totalItems;
+
+  factory _$Paging([void Function(PagingBuilder)? updates]) =>
+      (new PagingBuilder()..update(updates))._build();
+
+  _$Paging._(
+      {required this.page, required this.totalPages, required this.totalItems})
+      : super._() {
+    BuiltValueNullFieldError.checkNotNull(page, r'Paging', 'page');
+    BuiltValueNullFieldError.checkNotNull(totalPages, r'Paging', 'totalPages');
+    BuiltValueNullFieldError.checkNotNull(totalItems, r'Paging', 'totalItems');
+  }
+
+  @override
+  Paging rebuild(void Function(PagingBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  PagingBuilder toBuilder() => new PagingBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is Paging &&
+        page == other.page &&
+        totalPages == other.totalPages &&
+        totalItems == other.totalItems;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, page.hashCode);
+    _$hash = $jc(_$hash, totalPages.hashCode);
+    _$hash = $jc(_$hash, totalItems.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'Paging')
+          ..add('page', page)
+          ..add('totalPages', totalPages)
+          ..add('totalItems', totalItems))
+        .toString();
+  }
+}
+
+class PagingBuilder implements Builder<Paging, PagingBuilder> {
+  _$Paging? _$v;
+
+  int? _page;
+  int? get page => _$this._page;
+  set page(int? page) => _$this._page = page;
+
+  int? _totalPages;
+  int? get totalPages => _$this._totalPages;
+  set totalPages(int? totalPages) => _$this._totalPages = totalPages;
+
+  int? _totalItems;
+  int? get totalItems => _$this._totalItems;
+  set totalItems(int? totalItems) => _$this._totalItems = totalItems;
+
+  PagingBuilder() {
+    Paging._defaults(this);
+  }
+
+  PagingBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _page = $v.page;
+      _totalPages = $v.totalPages;
+      _totalItems = $v.totalItems;
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(Paging other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$Paging;
+  }
+
+  @override
+  void update(void Function(PagingBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  Paging build() => _build();
+
+  _$Paging _build() {
+    final _$result = _$v ??
+        new _$Paging._(
+            page:
+                BuiltValueNullFieldError.checkNotNull(page, r'Paging', 'page'),
+            totalPages: BuiltValueNullFieldError.checkNotNull(
+                totalPages, r'Paging', 'totalPages'),
+            totalItems: BuiltValueNullFieldError.checkNotNull(
+                totalItems, r'Paging', 'totalItems'));
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/passkey.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/passkey.dart
new file mode 100644
index 0000000..e921e5f
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/passkey.dart
@@ -0,0 +1,336 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:built_collection/built_collection.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'passkey.g.dart';
+
+/// Passkey
+///
+/// Properties:
+/// * [id]
+/// * [credentialID]
+/// * [attestationType]
+/// * [transport]
+/// * [backupEligible]
+/// * [backupState]
+/// * [authenticatorAAGUID]
+/// * [sourceOS]
+/// * [sourceBrowser]
+/// * [lastUsed] - Timestamp of when the passkey was last used in yyyy-MM-dd'T'HH:mm:ss format
+/// * [created] - Timestamp of when the entity was created in yyyy-MM-dd'T'HH:mm:ss format
+/// * [status] - Status
+@BuiltValue()
+abstract class Passkey implements Built<Passkey, PasskeyBuilder> {
+  @BuiltValueField(wireName: r'id')
+  String get id;
+
+  @BuiltValueField(wireName: r'credentialID')
+  String get credentialID;
+
+  @BuiltValueField(wireName: r'attestationType')
+  String get attestationType;
+
+  @BuiltValueField(wireName: r'transport')
+  BuiltList<PasskeyTransportEnum> get transport;
+  // enum transportEnum {  usb,  nfc,  ble,  internal,  hybrid,  smart-card,  };
+
+  @BuiltValueField(wireName: r'backupEligible')
+  bool get backupEligible;
+
+  @BuiltValueField(wireName: r'backupState')
+  bool get backupState;
+
+  @BuiltValueField(wireName: r'authenticatorAAGUID')
+  String get authenticatorAAGUID;
+
+  @BuiltValueField(wireName: r'sourceOS')
+  String get sourceOS;
+
+  @BuiltValueField(wireName: r'sourceBrowser')
+  String get sourceBrowser;
+
+  /// Timestamp of when the passkey was last used in yyyy-MM-dd'T'HH:mm:ss format
+  @BuiltValueField(wireName: r'lastUsed')
+  String get lastUsed;
+
+  /// Timestamp of when the entity was created in yyyy-MM-dd'T'HH:mm:ss format
+  @BuiltValueField(wireName: r'created')
+  String get created;
+
+  /// Status
+  @BuiltValueField(wireName: r'status')
+  PasskeyStatusEnum get status;
+  // enum statusEnum {  pending,  active,  };
+
+  Passkey._();
+
+  factory Passkey([void updates(PasskeyBuilder b)]) = _$Passkey;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(PasskeyBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<Passkey> get serializer => _$PasskeySerializer();
+}
+
+class _$PasskeySerializer implements PrimitiveSerializer<Passkey> {
+  @override
+  final Iterable<Type> types = const [Passkey, _$Passkey];
+
+  @override
+  final String wireName = r'Passkey';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    Passkey object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'id';
+    yield serializers.serialize(
+      object.id,
+      specifiedType: const FullType(String),
+    );
+    yield r'credentialID';
+    yield serializers.serialize(
+      object.credentialID,
+      specifiedType: const FullType(String),
+    );
+    yield r'attestationType';
+    yield serializers.serialize(
+      object.attestationType,
+      specifiedType: const FullType(String),
+    );
+    yield r'transport';
+    yield serializers.serialize(
+      object.transport,
+      specifiedType:
+          const FullType(BuiltList, [FullType(PasskeyTransportEnum)]),
+    );
+    yield r'backupEligible';
+    yield serializers.serialize(
+      object.backupEligible,
+      specifiedType: const FullType(bool),
+    );
+    yield r'backupState';
+    yield serializers.serialize(
+      object.backupState,
+      specifiedType: const FullType(bool),
+    );
+    yield r'authenticatorAAGUID';
+    yield serializers.serialize(
+      object.authenticatorAAGUID,
+      specifiedType: const FullType(String),
+    );
+    yield r'sourceOS';
+    yield serializers.serialize(
+      object.sourceOS,
+      specifiedType: const FullType(String),
+    );
+    yield r'sourceBrowser';
+    yield serializers.serialize(
+      object.sourceBrowser,
+      specifiedType: const FullType(String),
+    );
+    yield r'lastUsed';
+    yield serializers.serialize(
+      object.lastUsed,
+      specifiedType: const FullType(String),
+    );
+    yield r'created';
+    yield serializers.serialize(
+      object.created,
+      specifiedType: const FullType(String),
+    );
+    yield r'status';
+    yield serializers.serialize(
+      object.status,
+      specifiedType: const FullType(PasskeyStatusEnum),
+    );
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    Passkey object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required PasskeyBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'id':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.id = valueDes;
+          break;
+        case r'credentialID':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.credentialID = valueDes;
+          break;
+        case r'attestationType':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.attestationType = valueDes;
+          break;
+        case r'transport':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType:
+                const FullType(BuiltList, [FullType(PasskeyTransportEnum)]),
+          ) as BuiltList<PasskeyTransportEnum>;
+          result.transport.replace(valueDes);
+          break;
+        case r'backupEligible':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(bool),
+          ) as bool;
+          result.backupEligible = valueDes;
+          break;
+        case r'backupState':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(bool),
+          ) as bool;
+          result.backupState = valueDes;
+          break;
+        case r'authenticatorAAGUID':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.authenticatorAAGUID = valueDes;
+          break;
+        case r'sourceOS':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.sourceOS = valueDes;
+          break;
+        case r'sourceBrowser':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.sourceBrowser = valueDes;
+          break;
+        case r'lastUsed':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.lastUsed = valueDes;
+          break;
+        case r'created':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.created = valueDes;
+          break;
+        case r'status':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(PasskeyStatusEnum),
+          ) as PasskeyStatusEnum;
+          result.status = valueDes;
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  Passkey deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = PasskeyBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
+
+class PasskeyTransportEnum extends EnumClass {
+  @BuiltValueEnumConst(wireName: r'usb')
+  static const PasskeyTransportEnum usb = _$passkeyTransportEnum_usb;
+  @BuiltValueEnumConst(wireName: r'nfc')
+  static const PasskeyTransportEnum nfc = _$passkeyTransportEnum_nfc;
+  @BuiltValueEnumConst(wireName: r'ble')
+  static const PasskeyTransportEnum ble = _$passkeyTransportEnum_ble;
+  @BuiltValueEnumConst(wireName: r'internal')
+  static const PasskeyTransportEnum internal = _$passkeyTransportEnum_internal;
+  @BuiltValueEnumConst(wireName: r'hybrid')
+  static const PasskeyTransportEnum hybrid = _$passkeyTransportEnum_hybrid;
+  @BuiltValueEnumConst(wireName: r'smart-card', fallback: true)
+  static const PasskeyTransportEnum smartCard =
+      _$passkeyTransportEnum_smartCard;
+
+  static Serializer<PasskeyTransportEnum> get serializer =>
+      _$passkeyTransportEnumSerializer;
+
+  const PasskeyTransportEnum._(String name) : super(name);
+
+  static BuiltSet<PasskeyTransportEnum> get values =>
+      _$passkeyTransportEnumValues;
+  static PasskeyTransportEnum valueOf(String name) =>
+      _$passkeyTransportEnumValueOf(name);
+}
+
+class PasskeyStatusEnum extends EnumClass {
+  /// Status
+  @BuiltValueEnumConst(wireName: r'pending')
+  static const PasskeyStatusEnum pending = _$passkeyStatusEnum_pending;
+
+  /// Status
+  @BuiltValueEnumConst(wireName: r'active', fallback: true)
+  static const PasskeyStatusEnum active = _$passkeyStatusEnum_active;
+
+  static Serializer<PasskeyStatusEnum> get serializer =>
+      _$passkeyStatusEnumSerializer;
+
+  const PasskeyStatusEnum._(String name) : super(name);
+
+  static BuiltSet<PasskeyStatusEnum> get values => _$passkeyStatusEnumValues;
+  static PasskeyStatusEnum valueOf(String name) =>
+      _$passkeyStatusEnumValueOf(name);
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/passkey.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/passkey.g.dart
new file mode 100644
index 0000000..c5d836f
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/passkey.g.dart
@@ -0,0 +1,404 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'passkey.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+const PasskeyTransportEnum _$passkeyTransportEnum_usb =
+    const PasskeyTransportEnum._('usb');
+const PasskeyTransportEnum _$passkeyTransportEnum_nfc =
+    const PasskeyTransportEnum._('nfc');
+const PasskeyTransportEnum _$passkeyTransportEnum_ble =
+    const PasskeyTransportEnum._('ble');
+const PasskeyTransportEnum _$passkeyTransportEnum_internal =
+    const PasskeyTransportEnum._('internal');
+const PasskeyTransportEnum _$passkeyTransportEnum_hybrid =
+    const PasskeyTransportEnum._('hybrid');
+const PasskeyTransportEnum _$passkeyTransportEnum_smartCard =
+    const PasskeyTransportEnum._('smartCard');
+
+PasskeyTransportEnum _$passkeyTransportEnumValueOf(String name) {
+  switch (name) {
+    case 'usb':
+      return _$passkeyTransportEnum_usb;
+    case 'nfc':
+      return _$passkeyTransportEnum_nfc;
+    case 'ble':
+      return _$passkeyTransportEnum_ble;
+    case 'internal':
+      return _$passkeyTransportEnum_internal;
+    case 'hybrid':
+      return _$passkeyTransportEnum_hybrid;
+    case 'smartCard':
+      return _$passkeyTransportEnum_smartCard;
+    default:
+      return _$passkeyTransportEnum_smartCard;
+  }
+}
+
+final BuiltSet<PasskeyTransportEnum> _$passkeyTransportEnumValues =
+    new BuiltSet<PasskeyTransportEnum>(const <PasskeyTransportEnum>[
+  _$passkeyTransportEnum_usb,
+  _$passkeyTransportEnum_nfc,
+  _$passkeyTransportEnum_ble,
+  _$passkeyTransportEnum_internal,
+  _$passkeyTransportEnum_hybrid,
+  _$passkeyTransportEnum_smartCard,
+]);
+
+const PasskeyStatusEnum _$passkeyStatusEnum_pending =
+    const PasskeyStatusEnum._('pending');
+const PasskeyStatusEnum _$passkeyStatusEnum_active =
+    const PasskeyStatusEnum._('active');
+
+PasskeyStatusEnum _$passkeyStatusEnumValueOf(String name) {
+  switch (name) {
+    case 'pending':
+      return _$passkeyStatusEnum_pending;
+    case 'active':
+      return _$passkeyStatusEnum_active;
+    default:
+      return _$passkeyStatusEnum_active;
+  }
+}
+
+final BuiltSet<PasskeyStatusEnum> _$passkeyStatusEnumValues =
+    new BuiltSet<PasskeyStatusEnum>(const <PasskeyStatusEnum>[
+  _$passkeyStatusEnum_pending,
+  _$passkeyStatusEnum_active,
+]);
+
+Serializer<PasskeyTransportEnum> _$passkeyTransportEnumSerializer =
+    new _$PasskeyTransportEnumSerializer();
+Serializer<PasskeyStatusEnum> _$passkeyStatusEnumSerializer =
+    new _$PasskeyStatusEnumSerializer();
+
+class _$PasskeyTransportEnumSerializer
+    implements PrimitiveSerializer<PasskeyTransportEnum> {
+  static const Map<String, Object> _toWire = const <String, Object>{
+    'usb': 'usb',
+    'nfc': 'nfc',
+    'ble': 'ble',
+    'internal': 'internal',
+    'hybrid': 'hybrid',
+    'smartCard': 'smart-card',
+  };
+  static const Map<Object, String> _fromWire = const <Object, String>{
+    'usb': 'usb',
+    'nfc': 'nfc',
+    'ble': 'ble',
+    'internal': 'internal',
+    'hybrid': 'hybrid',
+    'smart-card': 'smartCard',
+  };
+
+  @override
+  final Iterable<Type> types = const <Type>[PasskeyTransportEnum];
+  @override
+  final String wireName = 'PasskeyTransportEnum';
+
+  @override
+  Object serialize(Serializers serializers, PasskeyTransportEnum object,
+          {FullType specifiedType = FullType.unspecified}) =>
+      _toWire[object.name] ?? object.name;
+
+  @override
+  PasskeyTransportEnum deserialize(Serializers serializers, Object serialized,
+          {FullType specifiedType = FullType.unspecified}) =>
+      PasskeyTransportEnum.valueOf(
+          _fromWire[serialized] ?? (serialized is String ? serialized : ''));
+}
+
+class _$PasskeyStatusEnumSerializer
+    implements PrimitiveSerializer<PasskeyStatusEnum> {
+  static const Map<String, Object> _toWire = const <String, Object>{
+    'pending': 'pending',
+    'active': 'active',
+  };
+  static const Map<Object, String> _fromWire = const <Object, String>{
+    'pending': 'pending',
+    'active': 'active',
+  };
+
+  @override
+  final Iterable<Type> types = const <Type>[PasskeyStatusEnum];
+  @override
+  final String wireName = 'PasskeyStatusEnum';
+
+  @override
+  Object serialize(Serializers serializers, PasskeyStatusEnum object,
+          {FullType specifiedType = FullType.unspecified}) =>
+      _toWire[object.name] ?? object.name;
+
+  @override
+  PasskeyStatusEnum deserialize(Serializers serializers, Object serialized,
+          {FullType specifiedType = FullType.unspecified}) =>
+      PasskeyStatusEnum.valueOf(
+          _fromWire[serialized] ?? (serialized is String ? serialized : ''));
+}
+
+class _$Passkey extends Passkey {
+  @override
+  final String id;
+  @override
+  final String credentialID;
+  @override
+  final String attestationType;
+  @override
+  final BuiltList<PasskeyTransportEnum> transport;
+  @override
+  final bool backupEligible;
+  @override
+  final bool backupState;
+  @override
+  final String authenticatorAAGUID;
+  @override
+  final String sourceOS;
+  @override
+  final String sourceBrowser;
+  @override
+  final String lastUsed;
+  @override
+  final String created;
+  @override
+  final PasskeyStatusEnum status;
+
+  factory _$Passkey([void Function(PasskeyBuilder)? updates]) =>
+      (new PasskeyBuilder()..update(updates))._build();
+
+  _$Passkey._(
+      {required this.id,
+      required this.credentialID,
+      required this.attestationType,
+      required this.transport,
+      required this.backupEligible,
+      required this.backupState,
+      required this.authenticatorAAGUID,
+      required this.sourceOS,
+      required this.sourceBrowser,
+      required this.lastUsed,
+      required this.created,
+      required this.status})
+      : super._() {
+    BuiltValueNullFieldError.checkNotNull(id, r'Passkey', 'id');
+    BuiltValueNullFieldError.checkNotNull(
+        credentialID, r'Passkey', 'credentialID');
+    BuiltValueNullFieldError.checkNotNull(
+        attestationType, r'Passkey', 'attestationType');
+    BuiltValueNullFieldError.checkNotNull(transport, r'Passkey', 'transport');
+    BuiltValueNullFieldError.checkNotNull(
+        backupEligible, r'Passkey', 'backupEligible');
+    BuiltValueNullFieldError.checkNotNull(
+        backupState, r'Passkey', 'backupState');
+    BuiltValueNullFieldError.checkNotNull(
+        authenticatorAAGUID, r'Passkey', 'authenticatorAAGUID');
+    BuiltValueNullFieldError.checkNotNull(sourceOS, r'Passkey', 'sourceOS');
+    BuiltValueNullFieldError.checkNotNull(
+        sourceBrowser, r'Passkey', 'sourceBrowser');
+    BuiltValueNullFieldError.checkNotNull(lastUsed, r'Passkey', 'lastUsed');
+    BuiltValueNullFieldError.checkNotNull(created, r'Passkey', 'created');
+    BuiltValueNullFieldError.checkNotNull(status, r'Passkey', 'status');
+  }
+
+  @override
+  Passkey rebuild(void Function(PasskeyBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  PasskeyBuilder toBuilder() => new PasskeyBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is Passkey &&
+        id == other.id &&
+        credentialID == other.credentialID &&
+        attestationType == other.attestationType &&
+        transport == other.transport &&
+        backupEligible == other.backupEligible &&
+        backupState == other.backupState &&
+        authenticatorAAGUID == other.authenticatorAAGUID &&
+        sourceOS == other.sourceOS &&
+        sourceBrowser == other.sourceBrowser &&
+        lastUsed == other.lastUsed &&
+        created == other.created &&
+        status == other.status;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, id.hashCode);
+    _$hash = $jc(_$hash, credentialID.hashCode);
+    _$hash = $jc(_$hash, attestationType.hashCode);
+    _$hash = $jc(_$hash, transport.hashCode);
+    _$hash = $jc(_$hash, backupEligible.hashCode);
+    _$hash = $jc(_$hash, backupState.hashCode);
+    _$hash = $jc(_$hash, authenticatorAAGUID.hashCode);
+    _$hash = $jc(_$hash, sourceOS.hashCode);
+    _$hash = $jc(_$hash, sourceBrowser.hashCode);
+    _$hash = $jc(_$hash, lastUsed.hashCode);
+    _$hash = $jc(_$hash, created.hashCode);
+    _$hash = $jc(_$hash, status.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'Passkey')
+          ..add('id', id)
+          ..add('credentialID', credentialID)
+          ..add('attestationType', attestationType)
+          ..add('transport', transport)
+          ..add('backupEligible', backupEligible)
+          ..add('backupState', backupState)
+          ..add('authenticatorAAGUID', authenticatorAAGUID)
+          ..add('sourceOS', sourceOS)
+          ..add('sourceBrowser', sourceBrowser)
+          ..add('lastUsed', lastUsed)
+          ..add('created', created)
+          ..add('status', status))
+        .toString();
+  }
+}
+
+class PasskeyBuilder implements Builder<Passkey, PasskeyBuilder> {
+  _$Passkey? _$v;
+
+  String? _id;
+  String? get id => _$this._id;
+  set id(String? id) => _$this._id = id;
+
+  String? _credentialID;
+  String? get credentialID => _$this._credentialID;
+  set credentialID(String? credentialID) => _$this._credentialID = credentialID;
+
+  String? _attestationType;
+  String? get attestationType => _$this._attestationType;
+  set attestationType(String? attestationType) =>
+      _$this._attestationType = attestationType;
+
+  ListBuilder<PasskeyTransportEnum>? _transport;
+  ListBuilder<PasskeyTransportEnum> get transport =>
+      _$this._transport ??= new ListBuilder<PasskeyTransportEnum>();
+  set transport(ListBuilder<PasskeyTransportEnum>? transport) =>
+      _$this._transport = transport;
+
+  bool? _backupEligible;
+  bool? get backupEligible => _$this._backupEligible;
+  set backupEligible(bool? backupEligible) =>
+      _$this._backupEligible = backupEligible;
+
+  bool? _backupState;
+  bool? get backupState => _$this._backupState;
+  set backupState(bool? backupState) => _$this._backupState = backupState;
+
+  String? _authenticatorAAGUID;
+  String? get authenticatorAAGUID => _$this._authenticatorAAGUID;
+  set authenticatorAAGUID(String? authenticatorAAGUID) =>
+      _$this._authenticatorAAGUID = authenticatorAAGUID;
+
+  String? _sourceOS;
+  String? get sourceOS => _$this._sourceOS;
+  set sourceOS(String? sourceOS) => _$this._sourceOS = sourceOS;
+
+  String? _sourceBrowser;
+  String? get sourceBrowser => _$this._sourceBrowser;
+  set sourceBrowser(String? sourceBrowser) =>
+      _$this._sourceBrowser = sourceBrowser;
+
+  String? _lastUsed;
+  String? get lastUsed => _$this._lastUsed;
+  set lastUsed(String? lastUsed) => _$this._lastUsed = lastUsed;
+
+  String? _created;
+  String? get created => _$this._created;
+  set created(String? created) => _$this._created = created;
+
+  PasskeyStatusEnum? _status;
+  PasskeyStatusEnum? get status => _$this._status;
+  set status(PasskeyStatusEnum? status) => _$this._status = status;
+
+  PasskeyBuilder() {
+    Passkey._defaults(this);
+  }
+
+  PasskeyBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _id = $v.id;
+      _credentialID = $v.credentialID;
+      _attestationType = $v.attestationType;
+      _transport = $v.transport.toBuilder();
+      _backupEligible = $v.backupEligible;
+      _backupState = $v.backupState;
+      _authenticatorAAGUID = $v.authenticatorAAGUID;
+      _sourceOS = $v.sourceOS;
+      _sourceBrowser = $v.sourceBrowser;
+      _lastUsed = $v.lastUsed;
+      _created = $v.created;
+      _status = $v.status;
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(Passkey other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$Passkey;
+  }
+
+  @override
+  void update(void Function(PasskeyBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  Passkey build() => _build();
+
+  _$Passkey _build() {
+    _$Passkey _$result;
+    try {
+      _$result = _$v ??
+          new _$Passkey._(
+              id: BuiltValueNullFieldError.checkNotNull(id, r'Passkey', 'id'),
+              credentialID: BuiltValueNullFieldError.checkNotNull(
+                  credentialID, r'Passkey', 'credentialID'),
+              attestationType: BuiltValueNullFieldError.checkNotNull(
+                  attestationType, r'Passkey', 'attestationType'),
+              transport: transport.build(),
+              backupEligible: BuiltValueNullFieldError.checkNotNull(
+                  backupEligible, r'Passkey', 'backupEligible'),
+              backupState: BuiltValueNullFieldError.checkNotNull(
+                  backupState, r'Passkey', 'backupState'),
+              authenticatorAAGUID: BuiltValueNullFieldError.checkNotNull(
+                  authenticatorAAGUID, r'Passkey', 'authenticatorAAGUID'),
+              sourceOS: BuiltValueNullFieldError.checkNotNull(
+                  sourceOS, r'Passkey', 'sourceOS'),
+              sourceBrowser: BuiltValueNullFieldError.checkNotNull(
+                  sourceBrowser, r'Passkey', 'sourceBrowser'),
+              lastUsed: BuiltValueNullFieldError.checkNotNull(
+                  lastUsed, r'Passkey', 'lastUsed'),
+              created: BuiltValueNullFieldError.checkNotNull(created, r'Passkey', 'created'),
+              status: BuiltValueNullFieldError.checkNotNull(status, r'Passkey', 'status'));
+    } catch (_) {
+      late String _$failedField;
+      try {
+        _$failedField = 'transport';
+        transport.build();
+      } catch (e) {
+        throw new BuiltValueNestedFieldError(
+            r'Passkey', _$failedField, e.toString());
+      }
+      rethrow;
+    }
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/passkey_append_finish_req.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/passkey_append_finish_req.dart
new file mode 100644
index 0000000..3ee7e9a
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/passkey_append_finish_req.dart
@@ -0,0 +1,115 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'passkey_append_finish_req.g.dart';
+
+/// tbd.
+///
+/// Properties:
+/// * [signedChallenge]
+@BuiltValue()
+abstract class PasskeyAppendFinishReq
+    implements Built<PasskeyAppendFinishReq, PasskeyAppendFinishReqBuilder> {
+  @BuiltValueField(wireName: r'signedChallenge')
+  String get signedChallenge;
+
+  PasskeyAppendFinishReq._();
+
+  factory PasskeyAppendFinishReq(
+          [void updates(PasskeyAppendFinishReqBuilder b)]) =
+      _$PasskeyAppendFinishReq;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(PasskeyAppendFinishReqBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<PasskeyAppendFinishReq> get serializer =>
+      _$PasskeyAppendFinishReqSerializer();
+}
+
+class _$PasskeyAppendFinishReqSerializer
+    implements PrimitiveSerializer<PasskeyAppendFinishReq> {
+  @override
+  final Iterable<Type> types = const [
+    PasskeyAppendFinishReq,
+    _$PasskeyAppendFinishReq
+  ];
+
+  @override
+  final String wireName = r'PasskeyAppendFinishReq';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    PasskeyAppendFinishReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'signedChallenge';
+    yield serializers.serialize(
+      object.signedChallenge,
+      specifiedType: const FullType(String),
+    );
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    PasskeyAppendFinishReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required PasskeyAppendFinishReqBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'signedChallenge':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.signedChallenge = valueDes;
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  PasskeyAppendFinishReq deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = PasskeyAppendFinishReqBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/passkey_append_finish_req.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/passkey_append_finish_req.g.dart
new file mode 100644
index 0000000..cca6530
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/passkey_append_finish_req.g.dart
@@ -0,0 +1,100 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'passkey_append_finish_req.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$PasskeyAppendFinishReq extends PasskeyAppendFinishReq {
+  @override
+  final String signedChallenge;
+
+  factory _$PasskeyAppendFinishReq(
+          [void Function(PasskeyAppendFinishReqBuilder)? updates]) =>
+      (new PasskeyAppendFinishReqBuilder()..update(updates))._build();
+
+  _$PasskeyAppendFinishReq._({required this.signedChallenge}) : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        signedChallenge, r'PasskeyAppendFinishReq', 'signedChallenge');
+  }
+
+  @override
+  PasskeyAppendFinishReq rebuild(
+          void Function(PasskeyAppendFinishReqBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  PasskeyAppendFinishReqBuilder toBuilder() =>
+      new PasskeyAppendFinishReqBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is PasskeyAppendFinishReq &&
+        signedChallenge == other.signedChallenge;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, signedChallenge.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'PasskeyAppendFinishReq')
+          ..add('signedChallenge', signedChallenge))
+        .toString();
+  }
+}
+
+class PasskeyAppendFinishReqBuilder
+    implements Builder<PasskeyAppendFinishReq, PasskeyAppendFinishReqBuilder> {
+  _$PasskeyAppendFinishReq? _$v;
+
+  String? _signedChallenge;
+  String? get signedChallenge => _$this._signedChallenge;
+  set signedChallenge(String? signedChallenge) =>
+      _$this._signedChallenge = signedChallenge;
+
+  PasskeyAppendFinishReqBuilder() {
+    PasskeyAppendFinishReq._defaults(this);
+  }
+
+  PasskeyAppendFinishReqBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _signedChallenge = $v.signedChallenge;
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(PasskeyAppendFinishReq other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$PasskeyAppendFinishReq;
+  }
+
+  @override
+  void update(void Function(PasskeyAppendFinishReqBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  PasskeyAppendFinishReq build() => _build();
+
+  _$PasskeyAppendFinishReq _build() {
+    final _$result = _$v ??
+        new _$PasskeyAppendFinishReq._(
+            signedChallenge: BuiltValueNullFieldError.checkNotNull(
+                signedChallenge, r'PasskeyAppendFinishReq', 'signedChallenge'));
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/passkey_append_start_req.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/passkey_append_start_req.dart
new file mode 100644
index 0000000..71f0765
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/passkey_append_start_req.dart
@@ -0,0 +1,117 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:corbado_frontend_api_client/src/model/client_information.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'passkey_append_start_req.g.dart';
+
+/// PasskeyAppendStartReq
+///
+/// Properties:
+/// * [clientInformation]
+@BuiltValue()
+abstract class PasskeyAppendStartReq
+    implements Built<PasskeyAppendStartReq, PasskeyAppendStartReqBuilder> {
+  @BuiltValueField(wireName: r'clientInformation')
+  ClientInformation? get clientInformation;
+
+  PasskeyAppendStartReq._();
+
+  factory PasskeyAppendStartReq(
+      [void updates(PasskeyAppendStartReqBuilder b)]) = _$PasskeyAppendStartReq;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(PasskeyAppendStartReqBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<PasskeyAppendStartReq> get serializer =>
+      _$PasskeyAppendStartReqSerializer();
+}
+
+class _$PasskeyAppendStartReqSerializer
+    implements PrimitiveSerializer<PasskeyAppendStartReq> {
+  @override
+  final Iterable<Type> types = const [
+    PasskeyAppendStartReq,
+    _$PasskeyAppendStartReq
+  ];
+
+  @override
+  final String wireName = r'PasskeyAppendStartReq';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    PasskeyAppendStartReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    if (object.clientInformation != null) {
+      yield r'clientInformation';
+      yield serializers.serialize(
+        object.clientInformation,
+        specifiedType: const FullType(ClientInformation),
+      );
+    }
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    PasskeyAppendStartReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required PasskeyAppendStartReqBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'clientInformation':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(ClientInformation),
+          ) as ClientInformation;
+          result.clientInformation.replace(valueDes);
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  PasskeyAppendStartReq deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = PasskeyAppendStartReqBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/passkey_append_start_req.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/passkey_append_start_req.g.dart
new file mode 100644
index 0000000..62b51fe
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/passkey_append_start_req.g.dart
@@ -0,0 +1,110 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'passkey_append_start_req.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$PasskeyAppendStartReq extends PasskeyAppendStartReq {
+  @override
+  final ClientInformation? clientInformation;
+
+  factory _$PasskeyAppendStartReq(
+          [void Function(PasskeyAppendStartReqBuilder)? updates]) =>
+      (new PasskeyAppendStartReqBuilder()..update(updates))._build();
+
+  _$PasskeyAppendStartReq._({this.clientInformation}) : super._();
+
+  @override
+  PasskeyAppendStartReq rebuild(
+          void Function(PasskeyAppendStartReqBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  PasskeyAppendStartReqBuilder toBuilder() =>
+      new PasskeyAppendStartReqBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is PasskeyAppendStartReq &&
+        clientInformation == other.clientInformation;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, clientInformation.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'PasskeyAppendStartReq')
+          ..add('clientInformation', clientInformation))
+        .toString();
+  }
+}
+
+class PasskeyAppendStartReqBuilder
+    implements Builder<PasskeyAppendStartReq, PasskeyAppendStartReqBuilder> {
+  _$PasskeyAppendStartReq? _$v;
+
+  ClientInformationBuilder? _clientInformation;
+  ClientInformationBuilder get clientInformation =>
+      _$this._clientInformation ??= new ClientInformationBuilder();
+  set clientInformation(ClientInformationBuilder? clientInformation) =>
+      _$this._clientInformation = clientInformation;
+
+  PasskeyAppendStartReqBuilder() {
+    PasskeyAppendStartReq._defaults(this);
+  }
+
+  PasskeyAppendStartReqBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _clientInformation = $v.clientInformation?.toBuilder();
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(PasskeyAppendStartReq other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$PasskeyAppendStartReq;
+  }
+
+  @override
+  void update(void Function(PasskeyAppendStartReqBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  PasskeyAppendStartReq build() => _build();
+
+  _$PasskeyAppendStartReq _build() {
+    _$PasskeyAppendStartReq _$result;
+    try {
+      _$result = _$v ??
+          new _$PasskeyAppendStartReq._(
+              clientInformation: _clientInformation?.build());
+    } catch (_) {
+      late String _$failedField;
+      try {
+        _$failedField = 'clientInformation';
+        _clientInformation?.build();
+      } catch (e) {
+        throw new BuiltValueNestedFieldError(
+            r'PasskeyAppendStartReq', _$failedField, e.toString());
+      }
+      rethrow;
+    }
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/passkey_event_type.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/passkey_event_type.dart
new file mode 100644
index 0000000..19100f6
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/passkey_event_type.dart
@@ -0,0 +1,51 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:built_collection/built_collection.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'passkey_event_type.g.dart';
+
+class PasskeyEventType extends EnumClass {
+  @BuiltValueEnumConst(wireName: r'login-explicit-abort')
+  static const PasskeyEventType loginExplicitAbort = _$loginExplicitAbort;
+  @BuiltValueEnumConst(wireName: r'login-error')
+  static const PasskeyEventType loginError = _$loginError;
+  @BuiltValueEnumConst(wireName: r'login-error-untyped')
+  static const PasskeyEventType loginErrorUntyped = _$loginErrorUntyped;
+  @BuiltValueEnumConst(wireName: r'login-one-tap-switch')
+  static const PasskeyEventType loginOneTapSwitch = _$loginOneTapSwitch;
+  @BuiltValueEnumConst(
+      wireName: r'user-append-after-cross-platform-blacklisted')
+  static const PasskeyEventType userAppendAfterCrossPlatformBlacklisted =
+      _$userAppendAfterCrossPlatformBlacklisted;
+  @BuiltValueEnumConst(wireName: r'user-append-after-login-error-blacklisted')
+  static const PasskeyEventType userAppendAfterLoginErrorBlacklisted =
+      _$userAppendAfterLoginErrorBlacklisted;
+  @BuiltValueEnumConst(wireName: r'append-credential-exists')
+  static const PasskeyEventType appendCredentialExists =
+      _$appendCredentialExists;
+  @BuiltValueEnumConst(wireName: r'append-explicit-abort')
+  static const PasskeyEventType appendExplicitAbort = _$appendExplicitAbort;
+  @BuiltValueEnumConst(wireName: r'append-error', fallback: true)
+  static const PasskeyEventType appendError = _$appendError;
+
+  static Serializer<PasskeyEventType> get serializer =>
+      _$passkeyEventTypeSerializer;
+
+  const PasskeyEventType._(String name) : super(name);
+
+  static BuiltSet<PasskeyEventType> get values => _$values;
+  static PasskeyEventType valueOf(String name) => _$valueOf(name);
+}
+
+/// Optionally, enum_class can generate a mixin to go with your enum for use
+/// with Angular. It exposes your enum constants as getters. So, if you mix it
+/// in to your Dart component class, the values become available to the
+/// corresponding Angular template.
+///
+/// Trigger mixin generation by writing a line like this one next to your enum.
+abstract class PasskeyEventTypeMixin = Object with _$PasskeyEventTypeMixin;
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/passkey_event_type.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/passkey_event_type.g.dart
new file mode 100644
index 0000000..e0e0ee0
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/passkey_event_type.g.dart
@@ -0,0 +1,135 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'passkey_event_type.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+const PasskeyEventType _$loginExplicitAbort =
+    const PasskeyEventType._('loginExplicitAbort');
+const PasskeyEventType _$loginError = const PasskeyEventType._('loginError');
+const PasskeyEventType _$loginErrorUntyped =
+    const PasskeyEventType._('loginErrorUntyped');
+const PasskeyEventType _$loginOneTapSwitch =
+    const PasskeyEventType._('loginOneTapSwitch');
+const PasskeyEventType _$userAppendAfterCrossPlatformBlacklisted =
+    const PasskeyEventType._('userAppendAfterCrossPlatformBlacklisted');
+const PasskeyEventType _$userAppendAfterLoginErrorBlacklisted =
+    const PasskeyEventType._('userAppendAfterLoginErrorBlacklisted');
+const PasskeyEventType _$appendCredentialExists =
+    const PasskeyEventType._('appendCredentialExists');
+const PasskeyEventType _$appendExplicitAbort =
+    const PasskeyEventType._('appendExplicitAbort');
+const PasskeyEventType _$appendError = const PasskeyEventType._('appendError');
+
+PasskeyEventType _$valueOf(String name) {
+  switch (name) {
+    case 'loginExplicitAbort':
+      return _$loginExplicitAbort;
+    case 'loginError':
+      return _$loginError;
+    case 'loginErrorUntyped':
+      return _$loginErrorUntyped;
+    case 'loginOneTapSwitch':
+      return _$loginOneTapSwitch;
+    case 'userAppendAfterCrossPlatformBlacklisted':
+      return _$userAppendAfterCrossPlatformBlacklisted;
+    case 'userAppendAfterLoginErrorBlacklisted':
+      return _$userAppendAfterLoginErrorBlacklisted;
+    case 'appendCredentialExists':
+      return _$appendCredentialExists;
+    case 'appendExplicitAbort':
+      return _$appendExplicitAbort;
+    case 'appendError':
+      return _$appendError;
+    default:
+      return _$appendError;
+  }
+}
+
+final BuiltSet<PasskeyEventType> _$values =
+    new BuiltSet<PasskeyEventType>(const <PasskeyEventType>[
+  _$loginExplicitAbort,
+  _$loginError,
+  _$loginErrorUntyped,
+  _$loginOneTapSwitch,
+  _$userAppendAfterCrossPlatformBlacklisted,
+  _$userAppendAfterLoginErrorBlacklisted,
+  _$appendCredentialExists,
+  _$appendExplicitAbort,
+  _$appendError,
+]);
+
+class _$PasskeyEventTypeMeta {
+  const _$PasskeyEventTypeMeta();
+  PasskeyEventType get loginExplicitAbort => _$loginExplicitAbort;
+  PasskeyEventType get loginError => _$loginError;
+  PasskeyEventType get loginErrorUntyped => _$loginErrorUntyped;
+  PasskeyEventType get loginOneTapSwitch => _$loginOneTapSwitch;
+  PasskeyEventType get userAppendAfterCrossPlatformBlacklisted =>
+      _$userAppendAfterCrossPlatformBlacklisted;
+  PasskeyEventType get userAppendAfterLoginErrorBlacklisted =>
+      _$userAppendAfterLoginErrorBlacklisted;
+  PasskeyEventType get appendCredentialExists => _$appendCredentialExists;
+  PasskeyEventType get appendExplicitAbort => _$appendExplicitAbort;
+  PasskeyEventType get appendError => _$appendError;
+  PasskeyEventType valueOf(String name) => _$valueOf(name);
+  BuiltSet<PasskeyEventType> get values => _$values;
+}
+
+abstract class _$PasskeyEventTypeMixin {
+  // ignore: non_constant_identifier_names
+  _$PasskeyEventTypeMeta get PasskeyEventType => const _$PasskeyEventTypeMeta();
+}
+
+Serializer<PasskeyEventType> _$passkeyEventTypeSerializer =
+    new _$PasskeyEventTypeSerializer();
+
+class _$PasskeyEventTypeSerializer
+    implements PrimitiveSerializer<PasskeyEventType> {
+  static const Map<String, Object> _toWire = const <String, Object>{
+    'loginExplicitAbort': 'login-explicit-abort',
+    'loginError': 'login-error',
+    'loginErrorUntyped': 'login-error-untyped',
+    'loginOneTapSwitch': 'login-one-tap-switch',
+    'userAppendAfterCrossPlatformBlacklisted':
+        'user-append-after-cross-platform-blacklisted',
+    'userAppendAfterLoginErrorBlacklisted':
+        'user-append-after-login-error-blacklisted',
+    'appendCredentialExists': 'append-credential-exists',
+    'appendExplicitAbort': 'append-explicit-abort',
+    'appendError': 'append-error',
+  };
+  static const Map<Object, String> _fromWire = const <Object, String>{
+    'login-explicit-abort': 'loginExplicitAbort',
+    'login-error': 'loginError',
+    'login-error-untyped': 'loginErrorUntyped',
+    'login-one-tap-switch': 'loginOneTapSwitch',
+    'user-append-after-cross-platform-blacklisted':
+        'userAppendAfterCrossPlatformBlacklisted',
+    'user-append-after-login-error-blacklisted':
+        'userAppendAfterLoginErrorBlacklisted',
+    'append-credential-exists': 'appendCredentialExists',
+    'append-explicit-abort': 'appendExplicitAbort',
+    'append-error': 'appendError',
+  };
+
+  @override
+  final Iterable<Type> types = const <Type>[PasskeyEventType];
+  @override
+  final String wireName = 'PasskeyEventType';
+
+  @override
+  Object serialize(Serializers serializers, PasskeyEventType object,
+          {FullType specifiedType = FullType.unspecified}) =>
+      _toWire[object.name] ?? object.name;
+
+  @override
+  PasskeyEventType deserialize(Serializers serializers, Object serialized,
+          {FullType specifiedType = FullType.unspecified}) =>
+      PasskeyEventType.valueOf(
+          _fromWire[serialized] ?? (serialized is String ? serialized : ''));
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/passkey_icon_set.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/passkey_icon_set.dart
new file mode 100644
index 0000000..f0cd550
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/passkey_icon_set.dart
@@ -0,0 +1,37 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:built_collection/built_collection.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'passkey_icon_set.g.dart';
+
+class PasskeyIconSet extends EnumClass {
+  @BuiltValueEnumConst(wireName: r'default')
+  static const PasskeyIconSet default_ = _$default_;
+  @BuiltValueEnumConst(wireName: r'apple')
+  static const PasskeyIconSet apple = _$apple;
+  @BuiltValueEnumConst(wireName: r'android')
+  static const PasskeyIconSet android = _$android;
+  @BuiltValueEnumConst(wireName: r'windows', fallback: true)
+  static const PasskeyIconSet windows = _$windows;
+
+  static Serializer<PasskeyIconSet> get serializer =>
+      _$passkeyIconSetSerializer;
+
+  const PasskeyIconSet._(String name) : super(name);
+
+  static BuiltSet<PasskeyIconSet> get values => _$values;
+  static PasskeyIconSet valueOf(String name) => _$valueOf(name);
+}
+
+/// Optionally, enum_class can generate a mixin to go with your enum for use
+/// with Angular. It exposes your enum constants as getters. So, if you mix it
+/// in to your Dart component class, the values become available to the
+/// corresponding Angular template.
+///
+/// Trigger mixin generation by writing a line like this one next to your enum.
+abstract class PasskeyIconSetMixin = Object with _$PasskeyIconSetMixin;
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/passkey_icon_set.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/passkey_icon_set.g.dart
new file mode 100644
index 0000000..8443eab
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/passkey_icon_set.g.dart
@@ -0,0 +1,87 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'passkey_icon_set.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+const PasskeyIconSet _$default_ = const PasskeyIconSet._('default_');
+const PasskeyIconSet _$apple = const PasskeyIconSet._('apple');
+const PasskeyIconSet _$android = const PasskeyIconSet._('android');
+const PasskeyIconSet _$windows = const PasskeyIconSet._('windows');
+
+PasskeyIconSet _$valueOf(String name) {
+  switch (name) {
+    case 'default_':
+      return _$default_;
+    case 'apple':
+      return _$apple;
+    case 'android':
+      return _$android;
+    case 'windows':
+      return _$windows;
+    default:
+      return _$windows;
+  }
+}
+
+final BuiltSet<PasskeyIconSet> _$values =
+    new BuiltSet<PasskeyIconSet>(const <PasskeyIconSet>[
+  _$default_,
+  _$apple,
+  _$android,
+  _$windows,
+]);
+
+class _$PasskeyIconSetMeta {
+  const _$PasskeyIconSetMeta();
+  PasskeyIconSet get default_ => _$default_;
+  PasskeyIconSet get apple => _$apple;
+  PasskeyIconSet get android => _$android;
+  PasskeyIconSet get windows => _$windows;
+  PasskeyIconSet valueOf(String name) => _$valueOf(name);
+  BuiltSet<PasskeyIconSet> get values => _$values;
+}
+
+abstract class _$PasskeyIconSetMixin {
+  // ignore: non_constant_identifier_names
+  _$PasskeyIconSetMeta get PasskeyIconSet => const _$PasskeyIconSetMeta();
+}
+
+Serializer<PasskeyIconSet> _$passkeyIconSetSerializer =
+    new _$PasskeyIconSetSerializer();
+
+class _$PasskeyIconSetSerializer
+    implements PrimitiveSerializer<PasskeyIconSet> {
+  static const Map<String, Object> _toWire = const <String, Object>{
+    'default_': 'default',
+    'apple': 'apple',
+    'android': 'android',
+    'windows': 'windows',
+  };
+  static const Map<Object, String> _fromWire = const <Object, String>{
+    'default': 'default_',
+    'apple': 'apple',
+    'android': 'android',
+    'windows': 'windows',
+  };
+
+  @override
+  final Iterable<Type> types = const <Type>[PasskeyIconSet];
+  @override
+  final String wireName = 'PasskeyIconSet';
+
+  @override
+  Object serialize(Serializers serializers, PasskeyIconSet object,
+          {FullType specifiedType = FullType.unspecified}) =>
+      _toWire[object.name] ?? object.name;
+
+  @override
+  PasskeyIconSet deserialize(Serializers serializers, Object serialized,
+          {FullType specifiedType = FullType.unspecified}) =>
+      PasskeyIconSet.valueOf(
+          _fromWire[serialized] ?? (serialized is String ? serialized : ''));
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/passkey_login_finish_req.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/passkey_login_finish_req.dart
new file mode 100644
index 0000000..773e0a1
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/passkey_login_finish_req.dart
@@ -0,0 +1,114 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'passkey_login_finish_req.g.dart';
+
+/// tbd.
+///
+/// Properties:
+/// * [signedChallenge]
+@BuiltValue()
+abstract class PasskeyLoginFinishReq
+    implements Built<PasskeyLoginFinishReq, PasskeyLoginFinishReqBuilder> {
+  @BuiltValueField(wireName: r'signedChallenge')
+  String get signedChallenge;
+
+  PasskeyLoginFinishReq._();
+
+  factory PasskeyLoginFinishReq(
+      [void updates(PasskeyLoginFinishReqBuilder b)]) = _$PasskeyLoginFinishReq;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(PasskeyLoginFinishReqBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<PasskeyLoginFinishReq> get serializer =>
+      _$PasskeyLoginFinishReqSerializer();
+}
+
+class _$PasskeyLoginFinishReqSerializer
+    implements PrimitiveSerializer<PasskeyLoginFinishReq> {
+  @override
+  final Iterable<Type> types = const [
+    PasskeyLoginFinishReq,
+    _$PasskeyLoginFinishReq
+  ];
+
+  @override
+  final String wireName = r'PasskeyLoginFinishReq';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    PasskeyLoginFinishReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'signedChallenge';
+    yield serializers.serialize(
+      object.signedChallenge,
+      specifiedType: const FullType(String),
+    );
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    PasskeyLoginFinishReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required PasskeyLoginFinishReqBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'signedChallenge':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.signedChallenge = valueDes;
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  PasskeyLoginFinishReq deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = PasskeyLoginFinishReqBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/passkey_login_finish_req.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/passkey_login_finish_req.g.dart
new file mode 100644
index 0000000..f771afa
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/passkey_login_finish_req.g.dart
@@ -0,0 +1,100 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'passkey_login_finish_req.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$PasskeyLoginFinishReq extends PasskeyLoginFinishReq {
+  @override
+  final String signedChallenge;
+
+  factory _$PasskeyLoginFinishReq(
+          [void Function(PasskeyLoginFinishReqBuilder)? updates]) =>
+      (new PasskeyLoginFinishReqBuilder()..update(updates))._build();
+
+  _$PasskeyLoginFinishReq._({required this.signedChallenge}) : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        signedChallenge, r'PasskeyLoginFinishReq', 'signedChallenge');
+  }
+
+  @override
+  PasskeyLoginFinishReq rebuild(
+          void Function(PasskeyLoginFinishReqBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  PasskeyLoginFinishReqBuilder toBuilder() =>
+      new PasskeyLoginFinishReqBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is PasskeyLoginFinishReq &&
+        signedChallenge == other.signedChallenge;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, signedChallenge.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'PasskeyLoginFinishReq')
+          ..add('signedChallenge', signedChallenge))
+        .toString();
+  }
+}
+
+class PasskeyLoginFinishReqBuilder
+    implements Builder<PasskeyLoginFinishReq, PasskeyLoginFinishReqBuilder> {
+  _$PasskeyLoginFinishReq? _$v;
+
+  String? _signedChallenge;
+  String? get signedChallenge => _$this._signedChallenge;
+  set signedChallenge(String? signedChallenge) =>
+      _$this._signedChallenge = signedChallenge;
+
+  PasskeyLoginFinishReqBuilder() {
+    PasskeyLoginFinishReq._defaults(this);
+  }
+
+  PasskeyLoginFinishReqBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _signedChallenge = $v.signedChallenge;
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(PasskeyLoginFinishReq other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$PasskeyLoginFinishReq;
+  }
+
+  @override
+  void update(void Function(PasskeyLoginFinishReqBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  PasskeyLoginFinishReq build() => _build();
+
+  _$PasskeyLoginFinishReq _build() {
+    final _$result = _$v ??
+        new _$PasskeyLoginFinishReq._(
+            signedChallenge: BuiltValueNullFieldError.checkNotNull(
+                signedChallenge, r'PasskeyLoginFinishReq', 'signedChallenge'));
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/passkey_login_start_req.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/passkey_login_start_req.dart
new file mode 100644
index 0000000..c45d42c
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/passkey_login_start_req.dart
@@ -0,0 +1,117 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:corbado_frontend_api_client/src/model/client_information.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'passkey_login_start_req.g.dart';
+
+/// PasskeyLoginStartReq
+///
+/// Properties:
+/// * [clientInformation]
+@BuiltValue()
+abstract class PasskeyLoginStartReq
+    implements Built<PasskeyLoginStartReq, PasskeyLoginStartReqBuilder> {
+  @BuiltValueField(wireName: r'clientInformation')
+  ClientInformation? get clientInformation;
+
+  PasskeyLoginStartReq._();
+
+  factory PasskeyLoginStartReq([void updates(PasskeyLoginStartReqBuilder b)]) =
+      _$PasskeyLoginStartReq;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(PasskeyLoginStartReqBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<PasskeyLoginStartReq> get serializer =>
+      _$PasskeyLoginStartReqSerializer();
+}
+
+class _$PasskeyLoginStartReqSerializer
+    implements PrimitiveSerializer<PasskeyLoginStartReq> {
+  @override
+  final Iterable<Type> types = const [
+    PasskeyLoginStartReq,
+    _$PasskeyLoginStartReq
+  ];
+
+  @override
+  final String wireName = r'PasskeyLoginStartReq';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    PasskeyLoginStartReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    if (object.clientInformation != null) {
+      yield r'clientInformation';
+      yield serializers.serialize(
+        object.clientInformation,
+        specifiedType: const FullType(ClientInformation),
+      );
+    }
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    PasskeyLoginStartReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required PasskeyLoginStartReqBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'clientInformation':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(ClientInformation),
+          ) as ClientInformation;
+          result.clientInformation.replace(valueDes);
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  PasskeyLoginStartReq deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = PasskeyLoginStartReqBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/passkey_login_start_req.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/passkey_login_start_req.g.dart
new file mode 100644
index 0000000..9da261d
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/passkey_login_start_req.g.dart
@@ -0,0 +1,110 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'passkey_login_start_req.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$PasskeyLoginStartReq extends PasskeyLoginStartReq {
+  @override
+  final ClientInformation? clientInformation;
+
+  factory _$PasskeyLoginStartReq(
+          [void Function(PasskeyLoginStartReqBuilder)? updates]) =>
+      (new PasskeyLoginStartReqBuilder()..update(updates))._build();
+
+  _$PasskeyLoginStartReq._({this.clientInformation}) : super._();
+
+  @override
+  PasskeyLoginStartReq rebuild(
+          void Function(PasskeyLoginStartReqBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  PasskeyLoginStartReqBuilder toBuilder() =>
+      new PasskeyLoginStartReqBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is PasskeyLoginStartReq &&
+        clientInformation == other.clientInformation;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, clientInformation.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'PasskeyLoginStartReq')
+          ..add('clientInformation', clientInformation))
+        .toString();
+  }
+}
+
+class PasskeyLoginStartReqBuilder
+    implements Builder<PasskeyLoginStartReq, PasskeyLoginStartReqBuilder> {
+  _$PasskeyLoginStartReq? _$v;
+
+  ClientInformationBuilder? _clientInformation;
+  ClientInformationBuilder get clientInformation =>
+      _$this._clientInformation ??= new ClientInformationBuilder();
+  set clientInformation(ClientInformationBuilder? clientInformation) =>
+      _$this._clientInformation = clientInformation;
+
+  PasskeyLoginStartReqBuilder() {
+    PasskeyLoginStartReq._defaults(this);
+  }
+
+  PasskeyLoginStartReqBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _clientInformation = $v.clientInformation?.toBuilder();
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(PasskeyLoginStartReq other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$PasskeyLoginStartReq;
+  }
+
+  @override
+  void update(void Function(PasskeyLoginStartReqBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  PasskeyLoginStartReq build() => _build();
+
+  _$PasskeyLoginStartReq _build() {
+    _$PasskeyLoginStartReq _$result;
+    try {
+      _$result = _$v ??
+          new _$PasskeyLoginStartReq._(
+              clientInformation: _clientInformation?.build());
+    } catch (_) {
+      late String _$failedField;
+      try {
+        _$failedField = 'clientInformation';
+        _clientInformation?.build();
+      } catch (e) {
+        throw new BuiltValueNestedFieldError(
+            r'PasskeyLoginStartReq', _$failedField, e.toString());
+      }
+      rethrow;
+    }
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/passkey_mediation_finish_req.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/passkey_mediation_finish_req.dart
new file mode 100644
index 0000000..ea7e0fa
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/passkey_mediation_finish_req.dart
@@ -0,0 +1,116 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'passkey_mediation_finish_req.g.dart';
+
+/// tbd.
+///
+/// Properties:
+/// * [signedChallenge]
+@BuiltValue()
+abstract class PasskeyMediationFinishReq
+    implements
+        Built<PasskeyMediationFinishReq, PasskeyMediationFinishReqBuilder> {
+  @BuiltValueField(wireName: r'signedChallenge')
+  String get signedChallenge;
+
+  PasskeyMediationFinishReq._();
+
+  factory PasskeyMediationFinishReq(
+          [void updates(PasskeyMediationFinishReqBuilder b)]) =
+      _$PasskeyMediationFinishReq;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(PasskeyMediationFinishReqBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<PasskeyMediationFinishReq> get serializer =>
+      _$PasskeyMediationFinishReqSerializer();
+}
+
+class _$PasskeyMediationFinishReqSerializer
+    implements PrimitiveSerializer<PasskeyMediationFinishReq> {
+  @override
+  final Iterable<Type> types = const [
+    PasskeyMediationFinishReq,
+    _$PasskeyMediationFinishReq
+  ];
+
+  @override
+  final String wireName = r'PasskeyMediationFinishReq';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    PasskeyMediationFinishReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'signedChallenge';
+    yield serializers.serialize(
+      object.signedChallenge,
+      specifiedType: const FullType(String),
+    );
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    PasskeyMediationFinishReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required PasskeyMediationFinishReqBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'signedChallenge':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.signedChallenge = valueDes;
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  PasskeyMediationFinishReq deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = PasskeyMediationFinishReqBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/passkey_mediation_finish_req.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/passkey_mediation_finish_req.g.dart
new file mode 100644
index 0000000..f27bd6e
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/passkey_mediation_finish_req.g.dart
@@ -0,0 +1,103 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'passkey_mediation_finish_req.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$PasskeyMediationFinishReq extends PasskeyMediationFinishReq {
+  @override
+  final String signedChallenge;
+
+  factory _$PasskeyMediationFinishReq(
+          [void Function(PasskeyMediationFinishReqBuilder)? updates]) =>
+      (new PasskeyMediationFinishReqBuilder()..update(updates))._build();
+
+  _$PasskeyMediationFinishReq._({required this.signedChallenge}) : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        signedChallenge, r'PasskeyMediationFinishReq', 'signedChallenge');
+  }
+
+  @override
+  PasskeyMediationFinishReq rebuild(
+          void Function(PasskeyMediationFinishReqBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  PasskeyMediationFinishReqBuilder toBuilder() =>
+      new PasskeyMediationFinishReqBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is PasskeyMediationFinishReq &&
+        signedChallenge == other.signedChallenge;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, signedChallenge.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'PasskeyMediationFinishReq')
+          ..add('signedChallenge', signedChallenge))
+        .toString();
+  }
+}
+
+class PasskeyMediationFinishReqBuilder
+    implements
+        Builder<PasskeyMediationFinishReq, PasskeyMediationFinishReqBuilder> {
+  _$PasskeyMediationFinishReq? _$v;
+
+  String? _signedChallenge;
+  String? get signedChallenge => _$this._signedChallenge;
+  set signedChallenge(String? signedChallenge) =>
+      _$this._signedChallenge = signedChallenge;
+
+  PasskeyMediationFinishReqBuilder() {
+    PasskeyMediationFinishReq._defaults(this);
+  }
+
+  PasskeyMediationFinishReqBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _signedChallenge = $v.signedChallenge;
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(PasskeyMediationFinishReq other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$PasskeyMediationFinishReq;
+  }
+
+  @override
+  void update(void Function(PasskeyMediationFinishReqBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  PasskeyMediationFinishReq build() => _build();
+
+  _$PasskeyMediationFinishReq _build() {
+    final _$result = _$v ??
+        new _$PasskeyMediationFinishReq._(
+            signedChallenge: BuiltValueNullFieldError.checkNotNull(
+                signedChallenge,
+                r'PasskeyMediationFinishReq',
+                'signedChallenge'));
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/passkey_operation.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/passkey_operation.dart
new file mode 100644
index 0000000..4b055b5
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/passkey_operation.dart
@@ -0,0 +1,205 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:built_collection/built_collection.dart';
+import 'package:corbado_frontend_api_client/src/model/login_identifier_type.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'passkey_operation.g.dart';
+
+/// PasskeyOperation
+///
+/// Properties:
+/// * [operationType]
+/// * [identifierValue]
+/// * [identifierType]
+/// * [ceremonyType]
+@BuiltValue()
+abstract class PasskeyOperation
+    implements Built<PasskeyOperation, PasskeyOperationBuilder> {
+  @BuiltValueField(wireName: r'operationType')
+  PasskeyOperationOperationTypeEnum get operationType;
+  // enum operationTypeEnum {  append,  verify,  };
+
+  @BuiltValueField(wireName: r'identifierValue')
+  String get identifierValue;
+
+  @BuiltValueField(wireName: r'identifierType')
+  LoginIdentifierType get identifierType;
+  // enum identifierTypeEnum {  email,  phone,  username,  };
+
+  @BuiltValueField(wireName: r'ceremonyType')
+  PasskeyOperationCeremonyTypeEnum get ceremonyType;
+  // enum ceremonyTypeEnum {  local,  cda,  security-key,  };
+
+  PasskeyOperation._();
+
+  factory PasskeyOperation([void updates(PasskeyOperationBuilder b)]) =
+      _$PasskeyOperation;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(PasskeyOperationBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<PasskeyOperation> get serializer =>
+      _$PasskeyOperationSerializer();
+}
+
+class _$PasskeyOperationSerializer
+    implements PrimitiveSerializer<PasskeyOperation> {
+  @override
+  final Iterable<Type> types = const [PasskeyOperation, _$PasskeyOperation];
+
+  @override
+  final String wireName = r'PasskeyOperation';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    PasskeyOperation object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'operationType';
+    yield serializers.serialize(
+      object.operationType,
+      specifiedType: const FullType(PasskeyOperationOperationTypeEnum),
+    );
+    yield r'identifierValue';
+    yield serializers.serialize(
+      object.identifierValue,
+      specifiedType: const FullType(String),
+    );
+    yield r'identifierType';
+    yield serializers.serialize(
+      object.identifierType,
+      specifiedType: const FullType(LoginIdentifierType),
+    );
+    yield r'ceremonyType';
+    yield serializers.serialize(
+      object.ceremonyType,
+      specifiedType: const FullType(PasskeyOperationCeremonyTypeEnum),
+    );
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    PasskeyOperation object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required PasskeyOperationBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'operationType':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(PasskeyOperationOperationTypeEnum),
+          ) as PasskeyOperationOperationTypeEnum;
+          result.operationType = valueDes;
+          break;
+        case r'identifierValue':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.identifierValue = valueDes;
+          break;
+        case r'identifierType':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(LoginIdentifierType),
+          ) as LoginIdentifierType;
+          result.identifierType = valueDes;
+          break;
+        case r'ceremonyType':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(PasskeyOperationCeremonyTypeEnum),
+          ) as PasskeyOperationCeremonyTypeEnum;
+          result.ceremonyType = valueDes;
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  PasskeyOperation deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = PasskeyOperationBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
+
+class PasskeyOperationOperationTypeEnum extends EnumClass {
+  @BuiltValueEnumConst(wireName: r'append')
+  static const PasskeyOperationOperationTypeEnum append =
+      _$passkeyOperationOperationTypeEnum_append;
+  @BuiltValueEnumConst(wireName: r'verify', fallback: true)
+  static const PasskeyOperationOperationTypeEnum verify =
+      _$passkeyOperationOperationTypeEnum_verify;
+
+  static Serializer<PasskeyOperationOperationTypeEnum> get serializer =>
+      _$passkeyOperationOperationTypeEnumSerializer;
+
+  const PasskeyOperationOperationTypeEnum._(String name) : super(name);
+
+  static BuiltSet<PasskeyOperationOperationTypeEnum> get values =>
+      _$passkeyOperationOperationTypeEnumValues;
+  static PasskeyOperationOperationTypeEnum valueOf(String name) =>
+      _$passkeyOperationOperationTypeEnumValueOf(name);
+}
+
+class PasskeyOperationCeremonyTypeEnum extends EnumClass {
+  @BuiltValueEnumConst(wireName: r'local')
+  static const PasskeyOperationCeremonyTypeEnum local =
+      _$passkeyOperationCeremonyTypeEnum_local;
+  @BuiltValueEnumConst(wireName: r'cda')
+  static const PasskeyOperationCeremonyTypeEnum cda =
+      _$passkeyOperationCeremonyTypeEnum_cda;
+  @BuiltValueEnumConst(wireName: r'security-key', fallback: true)
+  static const PasskeyOperationCeremonyTypeEnum securityKey =
+      _$passkeyOperationCeremonyTypeEnum_securityKey;
+
+  static Serializer<PasskeyOperationCeremonyTypeEnum> get serializer =>
+      _$passkeyOperationCeremonyTypeEnumSerializer;
+
+  const PasskeyOperationCeremonyTypeEnum._(String name) : super(name);
+
+  static BuiltSet<PasskeyOperationCeremonyTypeEnum> get values =>
+      _$passkeyOperationCeremonyTypeEnumValues;
+  static PasskeyOperationCeremonyTypeEnum valueOf(String name) =>
+      _$passkeyOperationCeremonyTypeEnumValueOf(name);
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/passkey_operation.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/passkey_operation.g.dart
new file mode 100644
index 0000000..0b50c71
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/passkey_operation.g.dart
@@ -0,0 +1,275 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'passkey_operation.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+const PasskeyOperationOperationTypeEnum
+    _$passkeyOperationOperationTypeEnum_append =
+    const PasskeyOperationOperationTypeEnum._('append');
+const PasskeyOperationOperationTypeEnum
+    _$passkeyOperationOperationTypeEnum_verify =
+    const PasskeyOperationOperationTypeEnum._('verify');
+
+PasskeyOperationOperationTypeEnum _$passkeyOperationOperationTypeEnumValueOf(
+    String name) {
+  switch (name) {
+    case 'append':
+      return _$passkeyOperationOperationTypeEnum_append;
+    case 'verify':
+      return _$passkeyOperationOperationTypeEnum_verify;
+    default:
+      return _$passkeyOperationOperationTypeEnum_verify;
+  }
+}
+
+final BuiltSet<PasskeyOperationOperationTypeEnum>
+    _$passkeyOperationOperationTypeEnumValues = new BuiltSet<
+        PasskeyOperationOperationTypeEnum>(const <PasskeyOperationOperationTypeEnum>[
+  _$passkeyOperationOperationTypeEnum_append,
+  _$passkeyOperationOperationTypeEnum_verify,
+]);
+
+const PasskeyOperationCeremonyTypeEnum
+    _$passkeyOperationCeremonyTypeEnum_local =
+    const PasskeyOperationCeremonyTypeEnum._('local');
+const PasskeyOperationCeremonyTypeEnum _$passkeyOperationCeremonyTypeEnum_cda =
+    const PasskeyOperationCeremonyTypeEnum._('cda');
+const PasskeyOperationCeremonyTypeEnum
+    _$passkeyOperationCeremonyTypeEnum_securityKey =
+    const PasskeyOperationCeremonyTypeEnum._('securityKey');
+
+PasskeyOperationCeremonyTypeEnum _$passkeyOperationCeremonyTypeEnumValueOf(
+    String name) {
+  switch (name) {
+    case 'local':
+      return _$passkeyOperationCeremonyTypeEnum_local;
+    case 'cda':
+      return _$passkeyOperationCeremonyTypeEnum_cda;
+    case 'securityKey':
+      return _$passkeyOperationCeremonyTypeEnum_securityKey;
+    default:
+      return _$passkeyOperationCeremonyTypeEnum_securityKey;
+  }
+}
+
+final BuiltSet<PasskeyOperationCeremonyTypeEnum>
+    _$passkeyOperationCeremonyTypeEnumValues = new BuiltSet<
+        PasskeyOperationCeremonyTypeEnum>(const <PasskeyOperationCeremonyTypeEnum>[
+  _$passkeyOperationCeremonyTypeEnum_local,
+  _$passkeyOperationCeremonyTypeEnum_cda,
+  _$passkeyOperationCeremonyTypeEnum_securityKey,
+]);
+
+Serializer<PasskeyOperationOperationTypeEnum>
+    _$passkeyOperationOperationTypeEnumSerializer =
+    new _$PasskeyOperationOperationTypeEnumSerializer();
+Serializer<PasskeyOperationCeremonyTypeEnum>
+    _$passkeyOperationCeremonyTypeEnumSerializer =
+    new _$PasskeyOperationCeremonyTypeEnumSerializer();
+
+class _$PasskeyOperationOperationTypeEnumSerializer
+    implements PrimitiveSerializer<PasskeyOperationOperationTypeEnum> {
+  static const Map<String, Object> _toWire = const <String, Object>{
+    'append': 'append',
+    'verify': 'verify',
+  };
+  static const Map<Object, String> _fromWire = const <Object, String>{
+    'append': 'append',
+    'verify': 'verify',
+  };
+
+  @override
+  final Iterable<Type> types = const <Type>[PasskeyOperationOperationTypeEnum];
+  @override
+  final String wireName = 'PasskeyOperationOperationTypeEnum';
+
+  @override
+  Object serialize(
+          Serializers serializers, PasskeyOperationOperationTypeEnum object,
+          {FullType specifiedType = FullType.unspecified}) =>
+      _toWire[object.name] ?? object.name;
+
+  @override
+  PasskeyOperationOperationTypeEnum deserialize(
+          Serializers serializers, Object serialized,
+          {FullType specifiedType = FullType.unspecified}) =>
+      PasskeyOperationOperationTypeEnum.valueOf(
+          _fromWire[serialized] ?? (serialized is String ? serialized : ''));
+}
+
+class _$PasskeyOperationCeremonyTypeEnumSerializer
+    implements PrimitiveSerializer<PasskeyOperationCeremonyTypeEnum> {
+  static const Map<String, Object> _toWire = const <String, Object>{
+    'local': 'local',
+    'cda': 'cda',
+    'securityKey': 'security-key',
+  };
+  static const Map<Object, String> _fromWire = const <Object, String>{
+    'local': 'local',
+    'cda': 'cda',
+    'security-key': 'securityKey',
+  };
+
+  @override
+  final Iterable<Type> types = const <Type>[PasskeyOperationCeremonyTypeEnum];
+  @override
+  final String wireName = 'PasskeyOperationCeremonyTypeEnum';
+
+  @override
+  Object serialize(
+          Serializers serializers, PasskeyOperationCeremonyTypeEnum object,
+          {FullType specifiedType = FullType.unspecified}) =>
+      _toWire[object.name] ?? object.name;
+
+  @override
+  PasskeyOperationCeremonyTypeEnum deserialize(
+          Serializers serializers, Object serialized,
+          {FullType specifiedType = FullType.unspecified}) =>
+      PasskeyOperationCeremonyTypeEnum.valueOf(
+          _fromWire[serialized] ?? (serialized is String ? serialized : ''));
+}
+
+class _$PasskeyOperation extends PasskeyOperation {
+  @override
+  final PasskeyOperationOperationTypeEnum operationType;
+  @override
+  final String identifierValue;
+  @override
+  final LoginIdentifierType identifierType;
+  @override
+  final PasskeyOperationCeremonyTypeEnum ceremonyType;
+
+  factory _$PasskeyOperation(
+          [void Function(PasskeyOperationBuilder)? updates]) =>
+      (new PasskeyOperationBuilder()..update(updates))._build();
+
+  _$PasskeyOperation._(
+      {required this.operationType,
+      required this.identifierValue,
+      required this.identifierType,
+      required this.ceremonyType})
+      : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        operationType, r'PasskeyOperation', 'operationType');
+    BuiltValueNullFieldError.checkNotNull(
+        identifierValue, r'PasskeyOperation', 'identifierValue');
+    BuiltValueNullFieldError.checkNotNull(
+        identifierType, r'PasskeyOperation', 'identifierType');
+    BuiltValueNullFieldError.checkNotNull(
+        ceremonyType, r'PasskeyOperation', 'ceremonyType');
+  }
+
+  @override
+  PasskeyOperation rebuild(void Function(PasskeyOperationBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  PasskeyOperationBuilder toBuilder() =>
+      new PasskeyOperationBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is PasskeyOperation &&
+        operationType == other.operationType &&
+        identifierValue == other.identifierValue &&
+        identifierType == other.identifierType &&
+        ceremonyType == other.ceremonyType;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, operationType.hashCode);
+    _$hash = $jc(_$hash, identifierValue.hashCode);
+    _$hash = $jc(_$hash, identifierType.hashCode);
+    _$hash = $jc(_$hash, ceremonyType.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'PasskeyOperation')
+          ..add('operationType', operationType)
+          ..add('identifierValue', identifierValue)
+          ..add('identifierType', identifierType)
+          ..add('ceremonyType', ceremonyType))
+        .toString();
+  }
+}
+
+class PasskeyOperationBuilder
+    implements Builder<PasskeyOperation, PasskeyOperationBuilder> {
+  _$PasskeyOperation? _$v;
+
+  PasskeyOperationOperationTypeEnum? _operationType;
+  PasskeyOperationOperationTypeEnum? get operationType => _$this._operationType;
+  set operationType(PasskeyOperationOperationTypeEnum? operationType) =>
+      _$this._operationType = operationType;
+
+  String? _identifierValue;
+  String? get identifierValue => _$this._identifierValue;
+  set identifierValue(String? identifierValue) =>
+      _$this._identifierValue = identifierValue;
+
+  LoginIdentifierType? _identifierType;
+  LoginIdentifierType? get identifierType => _$this._identifierType;
+  set identifierType(LoginIdentifierType? identifierType) =>
+      _$this._identifierType = identifierType;
+
+  PasskeyOperationCeremonyTypeEnum? _ceremonyType;
+  PasskeyOperationCeremonyTypeEnum? get ceremonyType => _$this._ceremonyType;
+  set ceremonyType(PasskeyOperationCeremonyTypeEnum? ceremonyType) =>
+      _$this._ceremonyType = ceremonyType;
+
+  PasskeyOperationBuilder() {
+    PasskeyOperation._defaults(this);
+  }
+
+  PasskeyOperationBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _operationType = $v.operationType;
+      _identifierValue = $v.identifierValue;
+      _identifierType = $v.identifierType;
+      _ceremonyType = $v.ceremonyType;
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(PasskeyOperation other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$PasskeyOperation;
+  }
+
+  @override
+  void update(void Function(PasskeyOperationBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  PasskeyOperation build() => _build();
+
+  _$PasskeyOperation _build() {
+    final _$result = _$v ??
+        new _$PasskeyOperation._(
+            operationType: BuiltValueNullFieldError.checkNotNull(
+                operationType, r'PasskeyOperation', 'operationType'),
+            identifierValue: BuiltValueNullFieldError.checkNotNull(
+                identifierValue, r'PasskeyOperation', 'identifierValue'),
+            identifierType: BuiltValueNullFieldError.checkNotNull(
+                identifierType, r'PasskeyOperation', 'identifierType'),
+            ceremonyType: BuiltValueNullFieldError.checkNotNull(
+                ceremonyType, r'PasskeyOperation', 'ceremonyType'));
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/process_common.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/process_common.dart
new file mode 100644
index 0000000..538d89e
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/process_common.dart
@@ -0,0 +1,142 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'process_common.g.dart';
+
+/// ProcessCommon
+///
+/// Properties:
+/// * [appName]
+/// * [frontendApiUrl]
+/// * [hideBadge]
+@BuiltValue()
+abstract class ProcessCommon
+    implements Built<ProcessCommon, ProcessCommonBuilder> {
+  @BuiltValueField(wireName: r'appName')
+  String get appName;
+
+  @BuiltValueField(wireName: r'frontendApiUrl')
+  String get frontendApiUrl;
+
+  @BuiltValueField(wireName: r'hideBadge')
+  bool get hideBadge;
+
+  ProcessCommon._();
+
+  factory ProcessCommon([void updates(ProcessCommonBuilder b)]) =
+      _$ProcessCommon;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(ProcessCommonBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<ProcessCommon> get serializer =>
+      _$ProcessCommonSerializer();
+}
+
+class _$ProcessCommonSerializer implements PrimitiveSerializer<ProcessCommon> {
+  @override
+  final Iterable<Type> types = const [ProcessCommon, _$ProcessCommon];
+
+  @override
+  final String wireName = r'ProcessCommon';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    ProcessCommon object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'appName';
+    yield serializers.serialize(
+      object.appName,
+      specifiedType: const FullType(String),
+    );
+    yield r'frontendApiUrl';
+    yield serializers.serialize(
+      object.frontendApiUrl,
+      specifiedType: const FullType(String),
+    );
+    yield r'hideBadge';
+    yield serializers.serialize(
+      object.hideBadge,
+      specifiedType: const FullType(bool),
+    );
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    ProcessCommon object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required ProcessCommonBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'appName':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.appName = valueDes;
+          break;
+        case r'frontendApiUrl':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.frontendApiUrl = valueDes;
+          break;
+        case r'hideBadge':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(bool),
+          ) as bool;
+          result.hideBadge = valueDes;
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  ProcessCommon deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = ProcessCommonBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/process_common.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/process_common.g.dart
new file mode 100644
index 0000000..b22da98
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/process_common.g.dart
@@ -0,0 +1,128 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'process_common.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$ProcessCommon extends ProcessCommon {
+  @override
+  final String appName;
+  @override
+  final String frontendApiUrl;
+  @override
+  final bool hideBadge;
+
+  factory _$ProcessCommon([void Function(ProcessCommonBuilder)? updates]) =>
+      (new ProcessCommonBuilder()..update(updates))._build();
+
+  _$ProcessCommon._(
+      {required this.appName,
+      required this.frontendApiUrl,
+      required this.hideBadge})
+      : super._() {
+    BuiltValueNullFieldError.checkNotNull(appName, r'ProcessCommon', 'appName');
+    BuiltValueNullFieldError.checkNotNull(
+        frontendApiUrl, r'ProcessCommon', 'frontendApiUrl');
+    BuiltValueNullFieldError.checkNotNull(
+        hideBadge, r'ProcessCommon', 'hideBadge');
+  }
+
+  @override
+  ProcessCommon rebuild(void Function(ProcessCommonBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  ProcessCommonBuilder toBuilder() => new ProcessCommonBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is ProcessCommon &&
+        appName == other.appName &&
+        frontendApiUrl == other.frontendApiUrl &&
+        hideBadge == other.hideBadge;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, appName.hashCode);
+    _$hash = $jc(_$hash, frontendApiUrl.hashCode);
+    _$hash = $jc(_$hash, hideBadge.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'ProcessCommon')
+          ..add('appName', appName)
+          ..add('frontendApiUrl', frontendApiUrl)
+          ..add('hideBadge', hideBadge))
+        .toString();
+  }
+}
+
+class ProcessCommonBuilder
+    implements Builder<ProcessCommon, ProcessCommonBuilder> {
+  _$ProcessCommon? _$v;
+
+  String? _appName;
+  String? get appName => _$this._appName;
+  set appName(String? appName) => _$this._appName = appName;
+
+  String? _frontendApiUrl;
+  String? get frontendApiUrl => _$this._frontendApiUrl;
+  set frontendApiUrl(String? frontendApiUrl) =>
+      _$this._frontendApiUrl = frontendApiUrl;
+
+  bool? _hideBadge;
+  bool? get hideBadge => _$this._hideBadge;
+  set hideBadge(bool? hideBadge) => _$this._hideBadge = hideBadge;
+
+  ProcessCommonBuilder() {
+    ProcessCommon._defaults(this);
+  }
+
+  ProcessCommonBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _appName = $v.appName;
+      _frontendApiUrl = $v.frontendApiUrl;
+      _hideBadge = $v.hideBadge;
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(ProcessCommon other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$ProcessCommon;
+  }
+
+  @override
+  void update(void Function(ProcessCommonBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  ProcessCommon build() => _build();
+
+  _$ProcessCommon _build() {
+    final _$result = _$v ??
+        new _$ProcessCommon._(
+            appName: BuiltValueNullFieldError.checkNotNull(
+                appName, r'ProcessCommon', 'appName'),
+            frontendApiUrl: BuiltValueNullFieldError.checkNotNull(
+                frontendApiUrl, r'ProcessCommon', 'frontendApiUrl'),
+            hideBadge: BuiltValueNullFieldError.checkNotNull(
+                hideBadge, r'ProcessCommon', 'hideBadge'));
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/process_init_req.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/process_init_req.dart
new file mode 100644
index 0000000..5737bcc
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/process_init_req.dart
@@ -0,0 +1,169 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:corbado_frontend_api_client/src/model/block_type.dart';
+import 'package:corbado_frontend_api_client/src/model/client_information.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'process_init_req.g.dart';
+
+/// tbd.
+///
+/// Properties:
+/// * [clientInformation]
+/// * [passkeyAppendShown]
+/// * [optOutOfPasskeyAppendAfterHybrid] - deprecated
+/// * [preferredBlock]
+@BuiltValue()
+abstract class ProcessInitReq
+    implements Built<ProcessInitReq, ProcessInitReqBuilder> {
+  @BuiltValueField(wireName: r'clientInformation')
+  ClientInformation get clientInformation;
+
+  @BuiltValueField(wireName: r'passkeyAppendShown')
+  int? get passkeyAppendShown;
+
+  /// deprecated
+  @BuiltValueField(wireName: r'optOutOfPasskeyAppendAfterHybrid')
+  bool? get optOutOfPasskeyAppendAfterHybrid;
+
+  @BuiltValueField(wireName: r'preferredBlock')
+  BlockType? get preferredBlock;
+  // enum preferredBlockEnum {  signup-init,  passkey-append,  phone-verify,  email-verify,  passkey-appended,  completed,  social-verify,  login-init,  passkey-verify,  conditional-ui-completed,  post-signup-email-verify,  passkey-append-after-hybrid,  };
+
+  ProcessInitReq._();
+
+  factory ProcessInitReq([void updates(ProcessInitReqBuilder b)]) =
+      _$ProcessInitReq;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(ProcessInitReqBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<ProcessInitReq> get serializer =>
+      _$ProcessInitReqSerializer();
+}
+
+class _$ProcessInitReqSerializer
+    implements PrimitiveSerializer<ProcessInitReq> {
+  @override
+  final Iterable<Type> types = const [ProcessInitReq, _$ProcessInitReq];
+
+  @override
+  final String wireName = r'ProcessInitReq';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    ProcessInitReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'clientInformation';
+    yield serializers.serialize(
+      object.clientInformation,
+      specifiedType: const FullType(ClientInformation),
+    );
+    if (object.passkeyAppendShown != null) {
+      yield r'passkeyAppendShown';
+      yield serializers.serialize(
+        object.passkeyAppendShown,
+        specifiedType: const FullType(int),
+      );
+    }
+    if (object.optOutOfPasskeyAppendAfterHybrid != null) {
+      yield r'optOutOfPasskeyAppendAfterHybrid';
+      yield serializers.serialize(
+        object.optOutOfPasskeyAppendAfterHybrid,
+        specifiedType: const FullType(bool),
+      );
+    }
+    if (object.preferredBlock != null) {
+      yield r'preferredBlock';
+      yield serializers.serialize(
+        object.preferredBlock,
+        specifiedType: const FullType(BlockType),
+      );
+    }
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    ProcessInitReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required ProcessInitReqBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'clientInformation':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(ClientInformation),
+          ) as ClientInformation;
+          result.clientInformation.replace(valueDes);
+          break;
+        case r'passkeyAppendShown':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(int),
+          ) as int;
+          result.passkeyAppendShown = valueDes;
+          break;
+        case r'optOutOfPasskeyAppendAfterHybrid':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(bool),
+          ) as bool;
+          result.optOutOfPasskeyAppendAfterHybrid = valueDes;
+          break;
+        case r'preferredBlock':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(BlockType),
+          ) as BlockType;
+          result.preferredBlock = valueDes;
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  ProcessInitReq deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = ProcessInitReqBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/process_init_req.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/process_init_req.g.dart
new file mode 100644
index 0000000..ce6e95f
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/process_init_req.g.dart
@@ -0,0 +1,158 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'process_init_req.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$ProcessInitReq extends ProcessInitReq {
+  @override
+  final ClientInformation clientInformation;
+  @override
+  final int? passkeyAppendShown;
+  @override
+  final bool? optOutOfPasskeyAppendAfterHybrid;
+  @override
+  final BlockType? preferredBlock;
+
+  factory _$ProcessInitReq([void Function(ProcessInitReqBuilder)? updates]) =>
+      (new ProcessInitReqBuilder()..update(updates))._build();
+
+  _$ProcessInitReq._(
+      {required this.clientInformation,
+      this.passkeyAppendShown,
+      this.optOutOfPasskeyAppendAfterHybrid,
+      this.preferredBlock})
+      : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        clientInformation, r'ProcessInitReq', 'clientInformation');
+  }
+
+  @override
+  ProcessInitReq rebuild(void Function(ProcessInitReqBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  ProcessInitReqBuilder toBuilder() =>
+      new ProcessInitReqBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is ProcessInitReq &&
+        clientInformation == other.clientInformation &&
+        passkeyAppendShown == other.passkeyAppendShown &&
+        optOutOfPasskeyAppendAfterHybrid ==
+            other.optOutOfPasskeyAppendAfterHybrid &&
+        preferredBlock == other.preferredBlock;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, clientInformation.hashCode);
+    _$hash = $jc(_$hash, passkeyAppendShown.hashCode);
+    _$hash = $jc(_$hash, optOutOfPasskeyAppendAfterHybrid.hashCode);
+    _$hash = $jc(_$hash, preferredBlock.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'ProcessInitReq')
+          ..add('clientInformation', clientInformation)
+          ..add('passkeyAppendShown', passkeyAppendShown)
+          ..add('optOutOfPasskeyAppendAfterHybrid',
+              optOutOfPasskeyAppendAfterHybrid)
+          ..add('preferredBlock', preferredBlock))
+        .toString();
+  }
+}
+
+class ProcessInitReqBuilder
+    implements Builder<ProcessInitReq, ProcessInitReqBuilder> {
+  _$ProcessInitReq? _$v;
+
+  ClientInformationBuilder? _clientInformation;
+  ClientInformationBuilder get clientInformation =>
+      _$this._clientInformation ??= new ClientInformationBuilder();
+  set clientInformation(ClientInformationBuilder? clientInformation) =>
+      _$this._clientInformation = clientInformation;
+
+  int? _passkeyAppendShown;
+  int? get passkeyAppendShown => _$this._passkeyAppendShown;
+  set passkeyAppendShown(int? passkeyAppendShown) =>
+      _$this._passkeyAppendShown = passkeyAppendShown;
+
+  bool? _optOutOfPasskeyAppendAfterHybrid;
+  bool? get optOutOfPasskeyAppendAfterHybrid =>
+      _$this._optOutOfPasskeyAppendAfterHybrid;
+  set optOutOfPasskeyAppendAfterHybrid(
+          bool? optOutOfPasskeyAppendAfterHybrid) =>
+      _$this._optOutOfPasskeyAppendAfterHybrid =
+          optOutOfPasskeyAppendAfterHybrid;
+
+  BlockType? _preferredBlock;
+  BlockType? get preferredBlock => _$this._preferredBlock;
+  set preferredBlock(BlockType? preferredBlock) =>
+      _$this._preferredBlock = preferredBlock;
+
+  ProcessInitReqBuilder() {
+    ProcessInitReq._defaults(this);
+  }
+
+  ProcessInitReqBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _clientInformation = $v.clientInformation.toBuilder();
+      _passkeyAppendShown = $v.passkeyAppendShown;
+      _optOutOfPasskeyAppendAfterHybrid = $v.optOutOfPasskeyAppendAfterHybrid;
+      _preferredBlock = $v.preferredBlock;
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(ProcessInitReq other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$ProcessInitReq;
+  }
+
+  @override
+  void update(void Function(ProcessInitReqBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  ProcessInitReq build() => _build();
+
+  _$ProcessInitReq _build() {
+    _$ProcessInitReq _$result;
+    try {
+      _$result = _$v ??
+          new _$ProcessInitReq._(
+              clientInformation: clientInformation.build(),
+              passkeyAppendShown: passkeyAppendShown,
+              optOutOfPasskeyAppendAfterHybrid:
+                  optOutOfPasskeyAppendAfterHybrid,
+              preferredBlock: preferredBlock);
+    } catch (_) {
+      late String _$failedField;
+      try {
+        _$failedField = 'clientInformation';
+        clientInformation.build();
+      } catch (e) {
+        throw new BuiltValueNestedFieldError(
+            r'ProcessInitReq', _$failedField, e.toString());
+      }
+      rethrow;
+    }
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/process_init_rsp.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/process_init_rsp.dart
new file mode 100644
index 0000000..23e1aa3
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/process_init_rsp.dart
@@ -0,0 +1,162 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:corbado_frontend_api_client/src/model/process_response.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'process_init_rsp.g.dart';
+
+/// tbd.
+///
+/// Properties:
+/// * [token]
+/// * [expiresAt]
+/// * [processResponse]
+/// * [newClientEnvHandle]
+@BuiltValue()
+abstract class ProcessInitRsp
+    implements Built<ProcessInitRsp, ProcessInitRspBuilder> {
+  @BuiltValueField(wireName: r'token')
+  String get token;
+
+  @BuiltValueField(wireName: r'expiresAt')
+  int get expiresAt;
+
+  @BuiltValueField(wireName: r'processResponse')
+  ProcessResponse get processResponse;
+
+  @BuiltValueField(wireName: r'newClientEnvHandle')
+  String? get newClientEnvHandle;
+
+  ProcessInitRsp._();
+
+  factory ProcessInitRsp([void updates(ProcessInitRspBuilder b)]) =
+      _$ProcessInitRsp;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(ProcessInitRspBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<ProcessInitRsp> get serializer =>
+      _$ProcessInitRspSerializer();
+}
+
+class _$ProcessInitRspSerializer
+    implements PrimitiveSerializer<ProcessInitRsp> {
+  @override
+  final Iterable<Type> types = const [ProcessInitRsp, _$ProcessInitRsp];
+
+  @override
+  final String wireName = r'ProcessInitRsp';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    ProcessInitRsp object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'token';
+    yield serializers.serialize(
+      object.token,
+      specifiedType: const FullType(String),
+    );
+    yield r'expiresAt';
+    yield serializers.serialize(
+      object.expiresAt,
+      specifiedType: const FullType(int),
+    );
+    yield r'processResponse';
+    yield serializers.serialize(
+      object.processResponse,
+      specifiedType: const FullType(ProcessResponse),
+    );
+    if (object.newClientEnvHandle != null) {
+      yield r'newClientEnvHandle';
+      yield serializers.serialize(
+        object.newClientEnvHandle,
+        specifiedType: const FullType(String),
+      );
+    }
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    ProcessInitRsp object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required ProcessInitRspBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'token':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.token = valueDes;
+          break;
+        case r'expiresAt':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(int),
+          ) as int;
+          result.expiresAt = valueDes;
+          break;
+        case r'processResponse':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(ProcessResponse),
+          ) as ProcessResponse;
+          result.processResponse.replace(valueDes);
+          break;
+        case r'newClientEnvHandle':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.newClientEnvHandle = valueDes;
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  ProcessInitRsp deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = ProcessInitRspBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/process_init_rsp.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/process_init_rsp.g.dart
new file mode 100644
index 0000000..b4f0e6b
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/process_init_rsp.g.dart
@@ -0,0 +1,155 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'process_init_rsp.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$ProcessInitRsp extends ProcessInitRsp {
+  @override
+  final String token;
+  @override
+  final int expiresAt;
+  @override
+  final ProcessResponse processResponse;
+  @override
+  final String? newClientEnvHandle;
+
+  factory _$ProcessInitRsp([void Function(ProcessInitRspBuilder)? updates]) =>
+      (new ProcessInitRspBuilder()..update(updates))._build();
+
+  _$ProcessInitRsp._(
+      {required this.token,
+      required this.expiresAt,
+      required this.processResponse,
+      this.newClientEnvHandle})
+      : super._() {
+    BuiltValueNullFieldError.checkNotNull(token, r'ProcessInitRsp', 'token');
+    BuiltValueNullFieldError.checkNotNull(
+        expiresAt, r'ProcessInitRsp', 'expiresAt');
+    BuiltValueNullFieldError.checkNotNull(
+        processResponse, r'ProcessInitRsp', 'processResponse');
+  }
+
+  @override
+  ProcessInitRsp rebuild(void Function(ProcessInitRspBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  ProcessInitRspBuilder toBuilder() =>
+      new ProcessInitRspBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is ProcessInitRsp &&
+        token == other.token &&
+        expiresAt == other.expiresAt &&
+        processResponse == other.processResponse &&
+        newClientEnvHandle == other.newClientEnvHandle;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, token.hashCode);
+    _$hash = $jc(_$hash, expiresAt.hashCode);
+    _$hash = $jc(_$hash, processResponse.hashCode);
+    _$hash = $jc(_$hash, newClientEnvHandle.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'ProcessInitRsp')
+          ..add('token', token)
+          ..add('expiresAt', expiresAt)
+          ..add('processResponse', processResponse)
+          ..add('newClientEnvHandle', newClientEnvHandle))
+        .toString();
+  }
+}
+
+class ProcessInitRspBuilder
+    implements Builder<ProcessInitRsp, ProcessInitRspBuilder> {
+  _$ProcessInitRsp? _$v;
+
+  String? _token;
+  String? get token => _$this._token;
+  set token(String? token) => _$this._token = token;
+
+  int? _expiresAt;
+  int? get expiresAt => _$this._expiresAt;
+  set expiresAt(int? expiresAt) => _$this._expiresAt = expiresAt;
+
+  ProcessResponseBuilder? _processResponse;
+  ProcessResponseBuilder get processResponse =>
+      _$this._processResponse ??= new ProcessResponseBuilder();
+  set processResponse(ProcessResponseBuilder? processResponse) =>
+      _$this._processResponse = processResponse;
+
+  String? _newClientEnvHandle;
+  String? get newClientEnvHandle => _$this._newClientEnvHandle;
+  set newClientEnvHandle(String? newClientEnvHandle) =>
+      _$this._newClientEnvHandle = newClientEnvHandle;
+
+  ProcessInitRspBuilder() {
+    ProcessInitRsp._defaults(this);
+  }
+
+  ProcessInitRspBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _token = $v.token;
+      _expiresAt = $v.expiresAt;
+      _processResponse = $v.processResponse.toBuilder();
+      _newClientEnvHandle = $v.newClientEnvHandle;
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(ProcessInitRsp other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$ProcessInitRsp;
+  }
+
+  @override
+  void update(void Function(ProcessInitRspBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  ProcessInitRsp build() => _build();
+
+  _$ProcessInitRsp _build() {
+    _$ProcessInitRsp _$result;
+    try {
+      _$result = _$v ??
+          new _$ProcessInitRsp._(
+              token: BuiltValueNullFieldError.checkNotNull(
+                  token, r'ProcessInitRsp', 'token'),
+              expiresAt: BuiltValueNullFieldError.checkNotNull(
+                  expiresAt, r'ProcessInitRsp', 'expiresAt'),
+              processResponse: processResponse.build(),
+              newClientEnvHandle: newClientEnvHandle);
+    } catch (_) {
+      late String _$failedField;
+      try {
+        _$failedField = 'processResponse';
+        processResponse.build();
+      } catch (e) {
+        throw new BuiltValueNestedFieldError(
+            r'ProcessInitRsp', _$failedField, e.toString());
+      }
+      rethrow;
+    }
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/process_response.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/process_response.dart
new file mode 100644
index 0000000..4bc1836
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/process_response.dart
@@ -0,0 +1,148 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:corbado_frontend_api_client/src/model/process_common.dart';
+import 'package:corbado_frontend_api_client/src/model/process_static_info.dart';
+import 'package:corbado_frontend_api_client/src/model/block_body.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'process_response.g.dart';
+
+/// ProcessResponse
+///
+/// Properties:
+/// * [blockBody]
+/// * [common]
+/// * [newProcess]
+@BuiltValue()
+abstract class ProcessResponse
+    implements Built<ProcessResponse, ProcessResponseBuilder> {
+  @BuiltValueField(wireName: r'blockBody')
+  BlockBody get blockBody;
+
+  @BuiltValueField(wireName: r'common')
+  ProcessCommon get common;
+
+  @BuiltValueField(wireName: r'newProcess')
+  ProcessStaticInfo? get newProcess;
+
+  ProcessResponse._();
+
+  factory ProcessResponse([void updates(ProcessResponseBuilder b)]) =
+      _$ProcessResponse;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(ProcessResponseBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<ProcessResponse> get serializer =>
+      _$ProcessResponseSerializer();
+}
+
+class _$ProcessResponseSerializer
+    implements PrimitiveSerializer<ProcessResponse> {
+  @override
+  final Iterable<Type> types = const [ProcessResponse, _$ProcessResponse];
+
+  @override
+  final String wireName = r'ProcessResponse';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    ProcessResponse object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'blockBody';
+    yield serializers.serialize(
+      object.blockBody,
+      specifiedType: const FullType(BlockBody),
+    );
+    yield r'common';
+    yield serializers.serialize(
+      object.common,
+      specifiedType: const FullType(ProcessCommon),
+    );
+    if (object.newProcess != null) {
+      yield r'newProcess';
+      yield serializers.serialize(
+        object.newProcess,
+        specifiedType: const FullType(ProcessStaticInfo),
+      );
+    }
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    ProcessResponse object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required ProcessResponseBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'blockBody':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(BlockBody),
+          ) as BlockBody;
+          result.blockBody.replace(valueDes);
+          break;
+        case r'common':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(ProcessCommon),
+          ) as ProcessCommon;
+          result.common.replace(valueDes);
+          break;
+        case r'newProcess':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(ProcessStaticInfo),
+          ) as ProcessStaticInfo;
+          result.newProcess.replace(valueDes);
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  ProcessResponse deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = ProcessResponseBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/process_response.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/process_response.g.dart
new file mode 100644
index 0000000..bfdf93f
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/process_response.g.dart
@@ -0,0 +1,142 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'process_response.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$ProcessResponse extends ProcessResponse {
+  @override
+  final BlockBody blockBody;
+  @override
+  final ProcessCommon common;
+  @override
+  final ProcessStaticInfo? newProcess;
+
+  factory _$ProcessResponse([void Function(ProcessResponseBuilder)? updates]) =>
+      (new ProcessResponseBuilder()..update(updates))._build();
+
+  _$ProcessResponse._(
+      {required this.blockBody, required this.common, this.newProcess})
+      : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        blockBody, r'ProcessResponse', 'blockBody');
+    BuiltValueNullFieldError.checkNotNull(common, r'ProcessResponse', 'common');
+  }
+
+  @override
+  ProcessResponse rebuild(void Function(ProcessResponseBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  ProcessResponseBuilder toBuilder() =>
+      new ProcessResponseBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is ProcessResponse &&
+        blockBody == other.blockBody &&
+        common == other.common &&
+        newProcess == other.newProcess;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, blockBody.hashCode);
+    _$hash = $jc(_$hash, common.hashCode);
+    _$hash = $jc(_$hash, newProcess.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'ProcessResponse')
+          ..add('blockBody', blockBody)
+          ..add('common', common)
+          ..add('newProcess', newProcess))
+        .toString();
+  }
+}
+
+class ProcessResponseBuilder
+    implements Builder<ProcessResponse, ProcessResponseBuilder> {
+  _$ProcessResponse? _$v;
+
+  BlockBodyBuilder? _blockBody;
+  BlockBodyBuilder get blockBody =>
+      _$this._blockBody ??= new BlockBodyBuilder();
+  set blockBody(BlockBodyBuilder? blockBody) => _$this._blockBody = blockBody;
+
+  ProcessCommonBuilder? _common;
+  ProcessCommonBuilder get common =>
+      _$this._common ??= new ProcessCommonBuilder();
+  set common(ProcessCommonBuilder? common) => _$this._common = common;
+
+  ProcessStaticInfoBuilder? _newProcess;
+  ProcessStaticInfoBuilder get newProcess =>
+      _$this._newProcess ??= new ProcessStaticInfoBuilder();
+  set newProcess(ProcessStaticInfoBuilder? newProcess) =>
+      _$this._newProcess = newProcess;
+
+  ProcessResponseBuilder() {
+    ProcessResponse._defaults(this);
+  }
+
+  ProcessResponseBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _blockBody = $v.blockBody.toBuilder();
+      _common = $v.common.toBuilder();
+      _newProcess = $v.newProcess?.toBuilder();
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(ProcessResponse other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$ProcessResponse;
+  }
+
+  @override
+  void update(void Function(ProcessResponseBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  ProcessResponse build() => _build();
+
+  _$ProcessResponse _build() {
+    _$ProcessResponse _$result;
+    try {
+      _$result = _$v ??
+          new _$ProcessResponse._(
+              blockBody: blockBody.build(),
+              common: common.build(),
+              newProcess: _newProcess?.build());
+    } catch (_) {
+      late String _$failedField;
+      try {
+        _$failedField = 'blockBody';
+        blockBody.build();
+        _$failedField = 'common';
+        common.build();
+        _$failedField = 'newProcess';
+        _newProcess?.build();
+      } catch (e) {
+        throw new BuiltValueNestedFieldError(
+            r'ProcessResponse', _$failedField, e.toString());
+      }
+      rethrow;
+    }
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/process_static_info.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/process_static_info.dart
new file mode 100644
index 0000000..1492773
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/process_static_info.dart
@@ -0,0 +1,127 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'process_static_info.g.dart';
+
+/// ProcessStaticInfo
+///
+/// Properties:
+/// * [token]
+/// * [expiresAt]
+@BuiltValue()
+abstract class ProcessStaticInfo
+    implements Built<ProcessStaticInfo, ProcessStaticInfoBuilder> {
+  @BuiltValueField(wireName: r'token')
+  String get token;
+
+  @BuiltValueField(wireName: r'expiresAt')
+  int get expiresAt;
+
+  ProcessStaticInfo._();
+
+  factory ProcessStaticInfo([void updates(ProcessStaticInfoBuilder b)]) =
+      _$ProcessStaticInfo;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(ProcessStaticInfoBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<ProcessStaticInfo> get serializer =>
+      _$ProcessStaticInfoSerializer();
+}
+
+class _$ProcessStaticInfoSerializer
+    implements PrimitiveSerializer<ProcessStaticInfo> {
+  @override
+  final Iterable<Type> types = const [ProcessStaticInfo, _$ProcessStaticInfo];
+
+  @override
+  final String wireName = r'ProcessStaticInfo';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    ProcessStaticInfo object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'token';
+    yield serializers.serialize(
+      object.token,
+      specifiedType: const FullType(String),
+    );
+    yield r'expiresAt';
+    yield serializers.serialize(
+      object.expiresAt,
+      specifiedType: const FullType(int),
+    );
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    ProcessStaticInfo object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required ProcessStaticInfoBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'token':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.token = valueDes;
+          break;
+        case r'expiresAt':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(int),
+          ) as int;
+          result.expiresAt = valueDes;
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  ProcessStaticInfo deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = ProcessStaticInfoBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/process_static_info.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/process_static_info.g.dart
new file mode 100644
index 0000000..2178af1
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/process_static_info.g.dart
@@ -0,0 +1,112 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'process_static_info.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$ProcessStaticInfo extends ProcessStaticInfo {
+  @override
+  final String token;
+  @override
+  final int expiresAt;
+
+  factory _$ProcessStaticInfo(
+          [void Function(ProcessStaticInfoBuilder)? updates]) =>
+      (new ProcessStaticInfoBuilder()..update(updates))._build();
+
+  _$ProcessStaticInfo._({required this.token, required this.expiresAt})
+      : super._() {
+    BuiltValueNullFieldError.checkNotNull(token, r'ProcessStaticInfo', 'token');
+    BuiltValueNullFieldError.checkNotNull(
+        expiresAt, r'ProcessStaticInfo', 'expiresAt');
+  }
+
+  @override
+  ProcessStaticInfo rebuild(void Function(ProcessStaticInfoBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  ProcessStaticInfoBuilder toBuilder() =>
+      new ProcessStaticInfoBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is ProcessStaticInfo &&
+        token == other.token &&
+        expiresAt == other.expiresAt;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, token.hashCode);
+    _$hash = $jc(_$hash, expiresAt.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'ProcessStaticInfo')
+          ..add('token', token)
+          ..add('expiresAt', expiresAt))
+        .toString();
+  }
+}
+
+class ProcessStaticInfoBuilder
+    implements Builder<ProcessStaticInfo, ProcessStaticInfoBuilder> {
+  _$ProcessStaticInfo? _$v;
+
+  String? _token;
+  String? get token => _$this._token;
+  set token(String? token) => _$this._token = token;
+
+  int? _expiresAt;
+  int? get expiresAt => _$this._expiresAt;
+  set expiresAt(int? expiresAt) => _$this._expiresAt = expiresAt;
+
+  ProcessStaticInfoBuilder() {
+    ProcessStaticInfo._defaults(this);
+  }
+
+  ProcessStaticInfoBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _token = $v.token;
+      _expiresAt = $v.expiresAt;
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(ProcessStaticInfo other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$ProcessStaticInfo;
+  }
+
+  @override
+  void update(void Function(ProcessStaticInfoBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  ProcessStaticInfo build() => _build();
+
+  _$ProcessStaticInfo _build() {
+    final _$result = _$v ??
+        new _$ProcessStaticInfo._(
+            token: BuiltValueNullFieldError.checkNotNull(
+                token, r'ProcessStaticInfo', 'token'),
+            expiresAt: BuiltValueNullFieldError.checkNotNull(
+                expiresAt, r'ProcessStaticInfo', 'expiresAt'));
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/request_data.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/request_data.dart
new file mode 100644
index 0000000..bd9b32c
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/request_data.dart
@@ -0,0 +1,125 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'request_data.g.dart';
+
+/// Data about the request itself, can be used for debugging
+///
+/// Properties:
+/// * [requestID] - Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side
+/// * [link] - Link to dashboard with details about request
+@BuiltValue()
+abstract class RequestData implements Built<RequestData, RequestDataBuilder> {
+  /// Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side
+  @BuiltValueField(wireName: r'requestID')
+  String get requestID;
+
+  /// Link to dashboard with details about request
+  @BuiltValueField(wireName: r'link')
+  String get link;
+
+  RequestData._();
+
+  factory RequestData([void updates(RequestDataBuilder b)]) = _$RequestData;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(RequestDataBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<RequestData> get serializer => _$RequestDataSerializer();
+}
+
+class _$RequestDataSerializer implements PrimitiveSerializer<RequestData> {
+  @override
+  final Iterable<Type> types = const [RequestData, _$RequestData];
+
+  @override
+  final String wireName = r'RequestData';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    RequestData object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'requestID';
+    yield serializers.serialize(
+      object.requestID,
+      specifiedType: const FullType(String),
+    );
+    yield r'link';
+    yield serializers.serialize(
+      object.link,
+      specifiedType: const FullType(String),
+    );
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    RequestData object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required RequestDataBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'requestID':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.requestID = valueDes;
+          break;
+        case r'link':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.link = valueDes;
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  RequestData deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = RequestDataBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/request_data.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/request_data.g.dart
new file mode 100644
index 0000000..7181ebf
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/request_data.g.dart
@@ -0,0 +1,108 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'request_data.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$RequestData extends RequestData {
+  @override
+  final String requestID;
+  @override
+  final String link;
+
+  factory _$RequestData([void Function(RequestDataBuilder)? updates]) =>
+      (new RequestDataBuilder()..update(updates))._build();
+
+  _$RequestData._({required this.requestID, required this.link}) : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        requestID, r'RequestData', 'requestID');
+    BuiltValueNullFieldError.checkNotNull(link, r'RequestData', 'link');
+  }
+
+  @override
+  RequestData rebuild(void Function(RequestDataBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  RequestDataBuilder toBuilder() => new RequestDataBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is RequestData &&
+        requestID == other.requestID &&
+        link == other.link;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, requestID.hashCode);
+    _$hash = $jc(_$hash, link.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'RequestData')
+          ..add('requestID', requestID)
+          ..add('link', link))
+        .toString();
+  }
+}
+
+class RequestDataBuilder implements Builder<RequestData, RequestDataBuilder> {
+  _$RequestData? _$v;
+
+  String? _requestID;
+  String? get requestID => _$this._requestID;
+  set requestID(String? requestID) => _$this._requestID = requestID;
+
+  String? _link;
+  String? get link => _$this._link;
+  set link(String? link) => _$this._link = link;
+
+  RequestDataBuilder() {
+    RequestData._defaults(this);
+  }
+
+  RequestDataBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _requestID = $v.requestID;
+      _link = $v.link;
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(RequestData other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$RequestData;
+  }
+
+  @override
+  void update(void Function(RequestDataBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  RequestData build() => _build();
+
+  _$RequestData _build() {
+    final _$result = _$v ??
+        new _$RequestData._(
+            requestID: BuiltValueNullFieldError.checkNotNull(
+                requestID, r'RequestData', 'requestID'),
+            link: BuiltValueNullFieldError.checkNotNull(
+                link, r'RequestData', 'link'));
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/request_error.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/request_error.dart
new file mode 100644
index 0000000..0167ada
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/request_error.dart
@@ -0,0 +1,124 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'request_error.g.dart';
+
+/// RequestError
+///
+/// Properties:
+/// * [code]
+/// * [message]
+@BuiltValue()
+abstract class RequestError
+    implements Built<RequestError, RequestErrorBuilder> {
+  @BuiltValueField(wireName: r'code')
+  String get code;
+
+  @BuiltValueField(wireName: r'message')
+  String get message;
+
+  RequestError._();
+
+  factory RequestError([void updates(RequestErrorBuilder b)]) = _$RequestError;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(RequestErrorBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<RequestError> get serializer => _$RequestErrorSerializer();
+}
+
+class _$RequestErrorSerializer implements PrimitiveSerializer<RequestError> {
+  @override
+  final Iterable<Type> types = const [RequestError, _$RequestError];
+
+  @override
+  final String wireName = r'RequestError';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    RequestError object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'code';
+    yield serializers.serialize(
+      object.code,
+      specifiedType: const FullType(String),
+    );
+    yield r'message';
+    yield serializers.serialize(
+      object.message,
+      specifiedType: const FullType(String),
+    );
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    RequestError object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required RequestErrorBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'code':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.code = valueDes;
+          break;
+        case r'message':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.message = valueDes;
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  RequestError deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = RequestErrorBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/request_error.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/request_error.g.dart
new file mode 100644
index 0000000..694efc4
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/request_error.g.dart
@@ -0,0 +1,108 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'request_error.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$RequestError extends RequestError {
+  @override
+  final String code;
+  @override
+  final String message;
+
+  factory _$RequestError([void Function(RequestErrorBuilder)? updates]) =>
+      (new RequestErrorBuilder()..update(updates))._build();
+
+  _$RequestError._({required this.code, required this.message}) : super._() {
+    BuiltValueNullFieldError.checkNotNull(code, r'RequestError', 'code');
+    BuiltValueNullFieldError.checkNotNull(message, r'RequestError', 'message');
+  }
+
+  @override
+  RequestError rebuild(void Function(RequestErrorBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  RequestErrorBuilder toBuilder() => new RequestErrorBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is RequestError &&
+        code == other.code &&
+        message == other.message;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, code.hashCode);
+    _$hash = $jc(_$hash, message.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'RequestError')
+          ..add('code', code)
+          ..add('message', message))
+        .toString();
+  }
+}
+
+class RequestErrorBuilder
+    implements Builder<RequestError, RequestErrorBuilder> {
+  _$RequestError? _$v;
+
+  String? _code;
+  String? get code => _$this._code;
+  set code(String? code) => _$this._code = code;
+
+  String? _message;
+  String? get message => _$this._message;
+  set message(String? message) => _$this._message = message;
+
+  RequestErrorBuilder() {
+    RequestError._defaults(this);
+  }
+
+  RequestErrorBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _code = $v.code;
+      _message = $v.message;
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(RequestError other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$RequestError;
+  }
+
+  @override
+  void update(void Function(RequestErrorBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  RequestError build() => _build();
+
+  _$RequestError _build() {
+    final _$result = _$v ??
+        new _$RequestError._(
+            code: BuiltValueNullFieldError.checkNotNull(
+                code, r'RequestError', 'code'),
+            message: BuiltValueNullFieldError.checkNotNull(
+                message, r'RequestError', 'message'));
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/session_config_rsp.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/session_config_rsp.dart
new file mode 100644
index 0000000..549dfe7
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/session_config_rsp.dart
@@ -0,0 +1,148 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:corbado_frontend_api_client/src/model/short_session_cookie_config.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'session_config_rsp.g.dart';
+
+/// SessionConfigRsp
+///
+/// Properties:
+/// * [useSessionManagement]
+/// * [shortSessionCookieConfig]
+/// * [frontendApiUrl]
+@BuiltValue()
+abstract class SessionConfigRsp
+    implements Built<SessionConfigRsp, SessionConfigRspBuilder> {
+  @BuiltValueField(wireName: r'useSessionManagement')
+  bool get useSessionManagement;
+
+  @BuiltValueField(wireName: r'shortSessionCookieConfig')
+  ShortSessionCookieConfig? get shortSessionCookieConfig;
+
+  @BuiltValueField(wireName: r'frontendApiUrl')
+  String? get frontendApiUrl;
+
+  SessionConfigRsp._();
+
+  factory SessionConfigRsp([void updates(SessionConfigRspBuilder b)]) =
+      _$SessionConfigRsp;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(SessionConfigRspBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<SessionConfigRsp> get serializer =>
+      _$SessionConfigRspSerializer();
+}
+
+class _$SessionConfigRspSerializer
+    implements PrimitiveSerializer<SessionConfigRsp> {
+  @override
+  final Iterable<Type> types = const [SessionConfigRsp, _$SessionConfigRsp];
+
+  @override
+  final String wireName = r'SessionConfigRsp';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    SessionConfigRsp object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'useSessionManagement';
+    yield serializers.serialize(
+      object.useSessionManagement,
+      specifiedType: const FullType(bool),
+    );
+    if (object.shortSessionCookieConfig != null) {
+      yield r'shortSessionCookieConfig';
+      yield serializers.serialize(
+        object.shortSessionCookieConfig,
+        specifiedType: const FullType(ShortSessionCookieConfig),
+      );
+    }
+    if (object.frontendApiUrl != null) {
+      yield r'frontendApiUrl';
+      yield serializers.serialize(
+        object.frontendApiUrl,
+        specifiedType: const FullType(String),
+      );
+    }
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    SessionConfigRsp object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required SessionConfigRspBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'useSessionManagement':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(bool),
+          ) as bool;
+          result.useSessionManagement = valueDes;
+          break;
+        case r'shortSessionCookieConfig':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(ShortSessionCookieConfig),
+          ) as ShortSessionCookieConfig;
+          result.shortSessionCookieConfig.replace(valueDes);
+          break;
+        case r'frontendApiUrl':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.frontendApiUrl = valueDes;
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  SessionConfigRsp deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = SessionConfigRspBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/session_config_rsp.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/session_config_rsp.g.dart
new file mode 100644
index 0000000..3c5c919
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/session_config_rsp.g.dart
@@ -0,0 +1,145 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'session_config_rsp.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$SessionConfigRsp extends SessionConfigRsp {
+  @override
+  final bool useSessionManagement;
+  @override
+  final ShortSessionCookieConfig? shortSessionCookieConfig;
+  @override
+  final String? frontendApiUrl;
+
+  factory _$SessionConfigRsp(
+          [void Function(SessionConfigRspBuilder)? updates]) =>
+      (new SessionConfigRspBuilder()..update(updates))._build();
+
+  _$SessionConfigRsp._(
+      {required this.useSessionManagement,
+      this.shortSessionCookieConfig,
+      this.frontendApiUrl})
+      : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        useSessionManagement, r'SessionConfigRsp', 'useSessionManagement');
+  }
+
+  @override
+  SessionConfigRsp rebuild(void Function(SessionConfigRspBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  SessionConfigRspBuilder toBuilder() =>
+      new SessionConfigRspBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is SessionConfigRsp &&
+        useSessionManagement == other.useSessionManagement &&
+        shortSessionCookieConfig == other.shortSessionCookieConfig &&
+        frontendApiUrl == other.frontendApiUrl;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, useSessionManagement.hashCode);
+    _$hash = $jc(_$hash, shortSessionCookieConfig.hashCode);
+    _$hash = $jc(_$hash, frontendApiUrl.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'SessionConfigRsp')
+          ..add('useSessionManagement', useSessionManagement)
+          ..add('shortSessionCookieConfig', shortSessionCookieConfig)
+          ..add('frontendApiUrl', frontendApiUrl))
+        .toString();
+  }
+}
+
+class SessionConfigRspBuilder
+    implements Builder<SessionConfigRsp, SessionConfigRspBuilder> {
+  _$SessionConfigRsp? _$v;
+
+  bool? _useSessionManagement;
+  bool? get useSessionManagement => _$this._useSessionManagement;
+  set useSessionManagement(bool? useSessionManagement) =>
+      _$this._useSessionManagement = useSessionManagement;
+
+  ShortSessionCookieConfigBuilder? _shortSessionCookieConfig;
+  ShortSessionCookieConfigBuilder get shortSessionCookieConfig =>
+      _$this._shortSessionCookieConfig ??=
+          new ShortSessionCookieConfigBuilder();
+  set shortSessionCookieConfig(
+          ShortSessionCookieConfigBuilder? shortSessionCookieConfig) =>
+      _$this._shortSessionCookieConfig = shortSessionCookieConfig;
+
+  String? _frontendApiUrl;
+  String? get frontendApiUrl => _$this._frontendApiUrl;
+  set frontendApiUrl(String? frontendApiUrl) =>
+      _$this._frontendApiUrl = frontendApiUrl;
+
+  SessionConfigRspBuilder() {
+    SessionConfigRsp._defaults(this);
+  }
+
+  SessionConfigRspBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _useSessionManagement = $v.useSessionManagement;
+      _shortSessionCookieConfig = $v.shortSessionCookieConfig?.toBuilder();
+      _frontendApiUrl = $v.frontendApiUrl;
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(SessionConfigRsp other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$SessionConfigRsp;
+  }
+
+  @override
+  void update(void Function(SessionConfigRspBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  SessionConfigRsp build() => _build();
+
+  _$SessionConfigRsp _build() {
+    _$SessionConfigRsp _$result;
+    try {
+      _$result = _$v ??
+          new _$SessionConfigRsp._(
+              useSessionManagement: BuiltValueNullFieldError.checkNotNull(
+                  useSessionManagement,
+                  r'SessionConfigRsp',
+                  'useSessionManagement'),
+              shortSessionCookieConfig: _shortSessionCookieConfig?.build(),
+              frontendApiUrl: frontendApiUrl);
+    } catch (_) {
+      late String _$failedField;
+      try {
+        _$failedField = 'shortSessionCookieConfig';
+        _shortSessionCookieConfig?.build();
+      } catch (e) {
+        throw new BuiltValueNestedFieldError(
+            r'SessionConfigRsp', _$failedField, e.toString());
+      }
+      rethrow;
+    }
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/short_session_cookie_config.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/short_session_cookie_config.dart
new file mode 100644
index 0000000..68153ec
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/short_session_cookie_config.dart
@@ -0,0 +1,204 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:built_collection/built_collection.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'short_session_cookie_config.g.dart';
+
+/// ShortSessionCookieConfig
+///
+/// Properties:
+/// * [domain]
+/// * [secure]
+/// * [sameSite]
+/// * [path]
+/// * [lifetimeSeconds]
+@BuiltValue()
+abstract class ShortSessionCookieConfig
+    implements
+        Built<ShortSessionCookieConfig, ShortSessionCookieConfigBuilder> {
+  @BuiltValueField(wireName: r'domain')
+  String get domain;
+
+  @BuiltValueField(wireName: r'secure')
+  bool get secure;
+
+  @BuiltValueField(wireName: r'sameSite')
+  ShortSessionCookieConfigSameSiteEnum get sameSite;
+  // enum sameSiteEnum {  lax,  strict,  none,  };
+
+  @BuiltValueField(wireName: r'path')
+  String get path;
+
+  @BuiltValueField(wireName: r'lifetimeSeconds')
+  int get lifetimeSeconds;
+
+  ShortSessionCookieConfig._();
+
+  factory ShortSessionCookieConfig(
+          [void updates(ShortSessionCookieConfigBuilder b)]) =
+      _$ShortSessionCookieConfig;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(ShortSessionCookieConfigBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<ShortSessionCookieConfig> get serializer =>
+      _$ShortSessionCookieConfigSerializer();
+}
+
+class _$ShortSessionCookieConfigSerializer
+    implements PrimitiveSerializer<ShortSessionCookieConfig> {
+  @override
+  final Iterable<Type> types = const [
+    ShortSessionCookieConfig,
+    _$ShortSessionCookieConfig
+  ];
+
+  @override
+  final String wireName = r'ShortSessionCookieConfig';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    ShortSessionCookieConfig object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'domain';
+    yield serializers.serialize(
+      object.domain,
+      specifiedType: const FullType(String),
+    );
+    yield r'secure';
+    yield serializers.serialize(
+      object.secure,
+      specifiedType: const FullType(bool),
+    );
+    yield r'sameSite';
+    yield serializers.serialize(
+      object.sameSite,
+      specifiedType: const FullType(ShortSessionCookieConfigSameSiteEnum),
+    );
+    yield r'path';
+    yield serializers.serialize(
+      object.path,
+      specifiedType: const FullType(String),
+    );
+    yield r'lifetimeSeconds';
+    yield serializers.serialize(
+      object.lifetimeSeconds,
+      specifiedType: const FullType(int),
+    );
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    ShortSessionCookieConfig object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required ShortSessionCookieConfigBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'domain':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.domain = valueDes;
+          break;
+        case r'secure':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(bool),
+          ) as bool;
+          result.secure = valueDes;
+          break;
+        case r'sameSite':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(ShortSessionCookieConfigSameSiteEnum),
+          ) as ShortSessionCookieConfigSameSiteEnum;
+          result.sameSite = valueDes;
+          break;
+        case r'path':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.path = valueDes;
+          break;
+        case r'lifetimeSeconds':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(int),
+          ) as int;
+          result.lifetimeSeconds = valueDes;
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  ShortSessionCookieConfig deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = ShortSessionCookieConfigBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
+
+class ShortSessionCookieConfigSameSiteEnum extends EnumClass {
+  @BuiltValueEnumConst(wireName: r'lax')
+  static const ShortSessionCookieConfigSameSiteEnum lax =
+      _$shortSessionCookieConfigSameSiteEnum_lax;
+  @BuiltValueEnumConst(wireName: r'strict')
+  static const ShortSessionCookieConfigSameSiteEnum strict =
+      _$shortSessionCookieConfigSameSiteEnum_strict;
+  @BuiltValueEnumConst(wireName: r'none', fallback: true)
+  static const ShortSessionCookieConfigSameSiteEnum none =
+      _$shortSessionCookieConfigSameSiteEnum_none;
+
+  static Serializer<ShortSessionCookieConfigSameSiteEnum> get serializer =>
+      _$shortSessionCookieConfigSameSiteEnumSerializer;
+
+  const ShortSessionCookieConfigSameSiteEnum._(String name) : super(name);
+
+  static BuiltSet<ShortSessionCookieConfigSameSiteEnum> get values =>
+      _$shortSessionCookieConfigSameSiteEnumValues;
+  static ShortSessionCookieConfigSameSiteEnum valueOf(String name) =>
+      _$shortSessionCookieConfigSameSiteEnumValueOf(name);
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/short_session_cookie_config.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/short_session_cookie_config.g.dart
new file mode 100644
index 0000000..f0aa949
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/short_session_cookie_config.g.dart
@@ -0,0 +1,236 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'short_session_cookie_config.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+const ShortSessionCookieConfigSameSiteEnum
+    _$shortSessionCookieConfigSameSiteEnum_lax =
+    const ShortSessionCookieConfigSameSiteEnum._('lax');
+const ShortSessionCookieConfigSameSiteEnum
+    _$shortSessionCookieConfigSameSiteEnum_strict =
+    const ShortSessionCookieConfigSameSiteEnum._('strict');
+const ShortSessionCookieConfigSameSiteEnum
+    _$shortSessionCookieConfigSameSiteEnum_none =
+    const ShortSessionCookieConfigSameSiteEnum._('none');
+
+ShortSessionCookieConfigSameSiteEnum
+    _$shortSessionCookieConfigSameSiteEnumValueOf(String name) {
+  switch (name) {
+    case 'lax':
+      return _$shortSessionCookieConfigSameSiteEnum_lax;
+    case 'strict':
+      return _$shortSessionCookieConfigSameSiteEnum_strict;
+    case 'none':
+      return _$shortSessionCookieConfigSameSiteEnum_none;
+    default:
+      return _$shortSessionCookieConfigSameSiteEnum_none;
+  }
+}
+
+final BuiltSet<ShortSessionCookieConfigSameSiteEnum>
+    _$shortSessionCookieConfigSameSiteEnumValues = new BuiltSet<
+        ShortSessionCookieConfigSameSiteEnum>(const <ShortSessionCookieConfigSameSiteEnum>[
+  _$shortSessionCookieConfigSameSiteEnum_lax,
+  _$shortSessionCookieConfigSameSiteEnum_strict,
+  _$shortSessionCookieConfigSameSiteEnum_none,
+]);
+
+Serializer<ShortSessionCookieConfigSameSiteEnum>
+    _$shortSessionCookieConfigSameSiteEnumSerializer =
+    new _$ShortSessionCookieConfigSameSiteEnumSerializer();
+
+class _$ShortSessionCookieConfigSameSiteEnumSerializer
+    implements PrimitiveSerializer<ShortSessionCookieConfigSameSiteEnum> {
+  static const Map<String, Object> _toWire = const <String, Object>{
+    'lax': 'lax',
+    'strict': 'strict',
+    'none': 'none',
+  };
+  static const Map<Object, String> _fromWire = const <Object, String>{
+    'lax': 'lax',
+    'strict': 'strict',
+    'none': 'none',
+  };
+
+  @override
+  final Iterable<Type> types = const <Type>[
+    ShortSessionCookieConfigSameSiteEnum
+  ];
+  @override
+  final String wireName = 'ShortSessionCookieConfigSameSiteEnum';
+
+  @override
+  Object serialize(
+          Serializers serializers, ShortSessionCookieConfigSameSiteEnum object,
+          {FullType specifiedType = FullType.unspecified}) =>
+      _toWire[object.name] ?? object.name;
+
+  @override
+  ShortSessionCookieConfigSameSiteEnum deserialize(
+          Serializers serializers, Object serialized,
+          {FullType specifiedType = FullType.unspecified}) =>
+      ShortSessionCookieConfigSameSiteEnum.valueOf(
+          _fromWire[serialized] ?? (serialized is String ? serialized : ''));
+}
+
+class _$ShortSessionCookieConfig extends ShortSessionCookieConfig {
+  @override
+  final String domain;
+  @override
+  final bool secure;
+  @override
+  final ShortSessionCookieConfigSameSiteEnum sameSite;
+  @override
+  final String path;
+  @override
+  final int lifetimeSeconds;
+
+  factory _$ShortSessionCookieConfig(
+          [void Function(ShortSessionCookieConfigBuilder)? updates]) =>
+      (new ShortSessionCookieConfigBuilder()..update(updates))._build();
+
+  _$ShortSessionCookieConfig._(
+      {required this.domain,
+      required this.secure,
+      required this.sameSite,
+      required this.path,
+      required this.lifetimeSeconds})
+      : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        domain, r'ShortSessionCookieConfig', 'domain');
+    BuiltValueNullFieldError.checkNotNull(
+        secure, r'ShortSessionCookieConfig', 'secure');
+    BuiltValueNullFieldError.checkNotNull(
+        sameSite, r'ShortSessionCookieConfig', 'sameSite');
+    BuiltValueNullFieldError.checkNotNull(
+        path, r'ShortSessionCookieConfig', 'path');
+    BuiltValueNullFieldError.checkNotNull(
+        lifetimeSeconds, r'ShortSessionCookieConfig', 'lifetimeSeconds');
+  }
+
+  @override
+  ShortSessionCookieConfig rebuild(
+          void Function(ShortSessionCookieConfigBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  ShortSessionCookieConfigBuilder toBuilder() =>
+      new ShortSessionCookieConfigBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is ShortSessionCookieConfig &&
+        domain == other.domain &&
+        secure == other.secure &&
+        sameSite == other.sameSite &&
+        path == other.path &&
+        lifetimeSeconds == other.lifetimeSeconds;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, domain.hashCode);
+    _$hash = $jc(_$hash, secure.hashCode);
+    _$hash = $jc(_$hash, sameSite.hashCode);
+    _$hash = $jc(_$hash, path.hashCode);
+    _$hash = $jc(_$hash, lifetimeSeconds.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'ShortSessionCookieConfig')
+          ..add('domain', domain)
+          ..add('secure', secure)
+          ..add('sameSite', sameSite)
+          ..add('path', path)
+          ..add('lifetimeSeconds', lifetimeSeconds))
+        .toString();
+  }
+}
+
+class ShortSessionCookieConfigBuilder
+    implements
+        Builder<ShortSessionCookieConfig, ShortSessionCookieConfigBuilder> {
+  _$ShortSessionCookieConfig? _$v;
+
+  String? _domain;
+  String? get domain => _$this._domain;
+  set domain(String? domain) => _$this._domain = domain;
+
+  bool? _secure;
+  bool? get secure => _$this._secure;
+  set secure(bool? secure) => _$this._secure = secure;
+
+  ShortSessionCookieConfigSameSiteEnum? _sameSite;
+  ShortSessionCookieConfigSameSiteEnum? get sameSite => _$this._sameSite;
+  set sameSite(ShortSessionCookieConfigSameSiteEnum? sameSite) =>
+      _$this._sameSite = sameSite;
+
+  String? _path;
+  String? get path => _$this._path;
+  set path(String? path) => _$this._path = path;
+
+  int? _lifetimeSeconds;
+  int? get lifetimeSeconds => _$this._lifetimeSeconds;
+  set lifetimeSeconds(int? lifetimeSeconds) =>
+      _$this._lifetimeSeconds = lifetimeSeconds;
+
+  ShortSessionCookieConfigBuilder() {
+    ShortSessionCookieConfig._defaults(this);
+  }
+
+  ShortSessionCookieConfigBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _domain = $v.domain;
+      _secure = $v.secure;
+      _sameSite = $v.sameSite;
+      _path = $v.path;
+      _lifetimeSeconds = $v.lifetimeSeconds;
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(ShortSessionCookieConfig other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$ShortSessionCookieConfig;
+  }
+
+  @override
+  void update(void Function(ShortSessionCookieConfigBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  ShortSessionCookieConfig build() => _build();
+
+  _$ShortSessionCookieConfig _build() {
+    final _$result = _$v ??
+        new _$ShortSessionCookieConfig._(
+            domain: BuiltValueNullFieldError.checkNotNull(
+                domain, r'ShortSessionCookieConfig', 'domain'),
+            secure: BuiltValueNullFieldError.checkNotNull(
+                secure, r'ShortSessionCookieConfig', 'secure'),
+            sameSite: BuiltValueNullFieldError.checkNotNull(
+                sameSite, r'ShortSessionCookieConfig', 'sameSite'),
+            path: BuiltValueNullFieldError.checkNotNull(
+                path, r'ShortSessionCookieConfig', 'path'),
+            lifetimeSeconds: BuiltValueNullFieldError.checkNotNull(
+                lifetimeSeconds,
+                r'ShortSessionCookieConfig',
+                'lifetimeSeconds'));
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/signup_init_req.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/signup_init_req.dart
new file mode 100644
index 0000000..bec2de5
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/signup_init_req.dart
@@ -0,0 +1,131 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:built_collection/built_collection.dart';
+import 'package:corbado_frontend_api_client/src/model/login_identifier.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'signup_init_req.g.dart';
+
+/// tbd.
+///
+/// Properties:
+/// * [identifiers]
+/// * [fullName]
+@BuiltValue()
+abstract class SignupInitReq
+    implements Built<SignupInitReq, SignupInitReqBuilder> {
+  @BuiltValueField(wireName: r'identifiers')
+  BuiltList<LoginIdentifier> get identifiers;
+
+  @BuiltValueField(wireName: r'fullName')
+  String? get fullName;
+
+  SignupInitReq._();
+
+  factory SignupInitReq([void updates(SignupInitReqBuilder b)]) =
+      _$SignupInitReq;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(SignupInitReqBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<SignupInitReq> get serializer =>
+      _$SignupInitReqSerializer();
+}
+
+class _$SignupInitReqSerializer implements PrimitiveSerializer<SignupInitReq> {
+  @override
+  final Iterable<Type> types = const [SignupInitReq, _$SignupInitReq];
+
+  @override
+  final String wireName = r'SignupInitReq';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    SignupInitReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'identifiers';
+    yield serializers.serialize(
+      object.identifiers,
+      specifiedType: const FullType(BuiltList, [FullType(LoginIdentifier)]),
+    );
+    if (object.fullName != null) {
+      yield r'fullName';
+      yield serializers.serialize(
+        object.fullName,
+        specifiedType: const FullType(String),
+      );
+    }
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    SignupInitReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required SignupInitReqBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'identifiers':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType:
+                const FullType(BuiltList, [FullType(LoginIdentifier)]),
+          ) as BuiltList<LoginIdentifier>;
+          result.identifiers.replace(valueDes);
+          break;
+        case r'fullName':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.fullName = valueDes;
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  SignupInitReq deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = SignupInitReqBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/signup_init_req.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/signup_init_req.g.dart
new file mode 100644
index 0000000..6ced808
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/signup_init_req.g.dart
@@ -0,0 +1,120 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'signup_init_req.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$SignupInitReq extends SignupInitReq {
+  @override
+  final BuiltList<LoginIdentifier> identifiers;
+  @override
+  final String? fullName;
+
+  factory _$SignupInitReq([void Function(SignupInitReqBuilder)? updates]) =>
+      (new SignupInitReqBuilder()..update(updates))._build();
+
+  _$SignupInitReq._({required this.identifiers, this.fullName}) : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        identifiers, r'SignupInitReq', 'identifiers');
+  }
+
+  @override
+  SignupInitReq rebuild(void Function(SignupInitReqBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  SignupInitReqBuilder toBuilder() => new SignupInitReqBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is SignupInitReq &&
+        identifiers == other.identifiers &&
+        fullName == other.fullName;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, identifiers.hashCode);
+    _$hash = $jc(_$hash, fullName.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'SignupInitReq')
+          ..add('identifiers', identifiers)
+          ..add('fullName', fullName))
+        .toString();
+  }
+}
+
+class SignupInitReqBuilder
+    implements Builder<SignupInitReq, SignupInitReqBuilder> {
+  _$SignupInitReq? _$v;
+
+  ListBuilder<LoginIdentifier>? _identifiers;
+  ListBuilder<LoginIdentifier> get identifiers =>
+      _$this._identifiers ??= new ListBuilder<LoginIdentifier>();
+  set identifiers(ListBuilder<LoginIdentifier>? identifiers) =>
+      _$this._identifiers = identifiers;
+
+  String? _fullName;
+  String? get fullName => _$this._fullName;
+  set fullName(String? fullName) => _$this._fullName = fullName;
+
+  SignupInitReqBuilder() {
+    SignupInitReq._defaults(this);
+  }
+
+  SignupInitReqBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _identifiers = $v.identifiers.toBuilder();
+      _fullName = $v.fullName;
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(SignupInitReq other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$SignupInitReq;
+  }
+
+  @override
+  void update(void Function(SignupInitReqBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  SignupInitReq build() => _build();
+
+  _$SignupInitReq _build() {
+    _$SignupInitReq _$result;
+    try {
+      _$result = _$v ??
+          new _$SignupInitReq._(
+              identifiers: identifiers.build(), fullName: fullName);
+    } catch (_) {
+      late String _$failedField;
+      try {
+        _$failedField = 'identifiers';
+        identifiers.build();
+      } catch (e) {
+        throw new BuiltValueNestedFieldError(
+            r'SignupInitReq', _$failedField, e.toString());
+      }
+      rethrow;
+    }
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/social_account.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/social_account.dart
new file mode 100644
index 0000000..941e0ba
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/social_account.dart
@@ -0,0 +1,160 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:corbado_frontend_api_client/src/model/social_provider_type.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'social_account.g.dart';
+
+/// SocialAccount
+///
+/// Properties:
+/// * [providerType]
+/// * [identifierValue]
+/// * [avatarUrl]
+/// * [fullName]
+@BuiltValue()
+abstract class SocialAccount
+    implements Built<SocialAccount, SocialAccountBuilder> {
+  @BuiltValueField(wireName: r'providerType')
+  SocialProviderType get providerType;
+  // enum providerTypeEnum {  google,  microsoft,  github,  };
+
+  @BuiltValueField(wireName: r'identifierValue')
+  String get identifierValue;
+
+  @BuiltValueField(wireName: r'avatarUrl')
+  String get avatarUrl;
+
+  @BuiltValueField(wireName: r'fullName')
+  String get fullName;
+
+  SocialAccount._();
+
+  factory SocialAccount([void updates(SocialAccountBuilder b)]) =
+      _$SocialAccount;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(SocialAccountBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<SocialAccount> get serializer =>
+      _$SocialAccountSerializer();
+}
+
+class _$SocialAccountSerializer implements PrimitiveSerializer<SocialAccount> {
+  @override
+  final Iterable<Type> types = const [SocialAccount, _$SocialAccount];
+
+  @override
+  final String wireName = r'SocialAccount';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    SocialAccount object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'providerType';
+    yield serializers.serialize(
+      object.providerType,
+      specifiedType: const FullType(SocialProviderType),
+    );
+    yield r'identifierValue';
+    yield serializers.serialize(
+      object.identifierValue,
+      specifiedType: const FullType(String),
+    );
+    yield r'avatarUrl';
+    yield serializers.serialize(
+      object.avatarUrl,
+      specifiedType: const FullType(String),
+    );
+    yield r'fullName';
+    yield serializers.serialize(
+      object.fullName,
+      specifiedType: const FullType(String),
+    );
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    SocialAccount object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required SocialAccountBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'providerType':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(SocialProviderType),
+          ) as SocialProviderType;
+          result.providerType = valueDes;
+          break;
+        case r'identifierValue':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.identifierValue = valueDes;
+          break;
+        case r'avatarUrl':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.avatarUrl = valueDes;
+          break;
+        case r'fullName':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.fullName = valueDes;
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  SocialAccount deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = SocialAccountBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/social_account.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/social_account.g.dart
new file mode 100644
index 0000000..b0bc514
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/social_account.g.dart
@@ -0,0 +1,145 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'social_account.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$SocialAccount extends SocialAccount {
+  @override
+  final SocialProviderType providerType;
+  @override
+  final String identifierValue;
+  @override
+  final String avatarUrl;
+  @override
+  final String fullName;
+
+  factory _$SocialAccount([void Function(SocialAccountBuilder)? updates]) =>
+      (new SocialAccountBuilder()..update(updates))._build();
+
+  _$SocialAccount._(
+      {required this.providerType,
+      required this.identifierValue,
+      required this.avatarUrl,
+      required this.fullName})
+      : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        providerType, r'SocialAccount', 'providerType');
+    BuiltValueNullFieldError.checkNotNull(
+        identifierValue, r'SocialAccount', 'identifierValue');
+    BuiltValueNullFieldError.checkNotNull(
+        avatarUrl, r'SocialAccount', 'avatarUrl');
+    BuiltValueNullFieldError.checkNotNull(
+        fullName, r'SocialAccount', 'fullName');
+  }
+
+  @override
+  SocialAccount rebuild(void Function(SocialAccountBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  SocialAccountBuilder toBuilder() => new SocialAccountBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is SocialAccount &&
+        providerType == other.providerType &&
+        identifierValue == other.identifierValue &&
+        avatarUrl == other.avatarUrl &&
+        fullName == other.fullName;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, providerType.hashCode);
+    _$hash = $jc(_$hash, identifierValue.hashCode);
+    _$hash = $jc(_$hash, avatarUrl.hashCode);
+    _$hash = $jc(_$hash, fullName.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'SocialAccount')
+          ..add('providerType', providerType)
+          ..add('identifierValue', identifierValue)
+          ..add('avatarUrl', avatarUrl)
+          ..add('fullName', fullName))
+        .toString();
+  }
+}
+
+class SocialAccountBuilder
+    implements Builder<SocialAccount, SocialAccountBuilder> {
+  _$SocialAccount? _$v;
+
+  SocialProviderType? _providerType;
+  SocialProviderType? get providerType => _$this._providerType;
+  set providerType(SocialProviderType? providerType) =>
+      _$this._providerType = providerType;
+
+  String? _identifierValue;
+  String? get identifierValue => _$this._identifierValue;
+  set identifierValue(String? identifierValue) =>
+      _$this._identifierValue = identifierValue;
+
+  String? _avatarUrl;
+  String? get avatarUrl => _$this._avatarUrl;
+  set avatarUrl(String? avatarUrl) => _$this._avatarUrl = avatarUrl;
+
+  String? _fullName;
+  String? get fullName => _$this._fullName;
+  set fullName(String? fullName) => _$this._fullName = fullName;
+
+  SocialAccountBuilder() {
+    SocialAccount._defaults(this);
+  }
+
+  SocialAccountBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _providerType = $v.providerType;
+      _identifierValue = $v.identifierValue;
+      _avatarUrl = $v.avatarUrl;
+      _fullName = $v.fullName;
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(SocialAccount other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$SocialAccount;
+  }
+
+  @override
+  void update(void Function(SocialAccountBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  SocialAccount build() => _build();
+
+  _$SocialAccount _build() {
+    final _$result = _$v ??
+        new _$SocialAccount._(
+            providerType: BuiltValueNullFieldError.checkNotNull(
+                providerType, r'SocialAccount', 'providerType'),
+            identifierValue: BuiltValueNullFieldError.checkNotNull(
+                identifierValue, r'SocialAccount', 'identifierValue'),
+            avatarUrl: BuiltValueNullFieldError.checkNotNull(
+                avatarUrl, r'SocialAccount', 'avatarUrl'),
+            fullName: BuiltValueNullFieldError.checkNotNull(
+                fullName, r'SocialAccount', 'fullName'));
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/social_data.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/social_data.dart
new file mode 100644
index 0000000..fa18be1
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/social_data.dart
@@ -0,0 +1,183 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:built_collection/built_collection.dart';
+import 'package:corbado_frontend_api_client/src/model/request_error.dart';
+import 'package:corbado_frontend_api_client/src/model/social_provider_type.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'social_data.g.dart';
+
+/// SocialData
+///
+/// Properties:
+/// * [providers]
+/// * [status]
+/// * [oauthUrl]
+/// * [error]
+@BuiltValue()
+abstract class SocialData implements Built<SocialData, SocialDataBuilder> {
+  @BuiltValueField(wireName: r'providers')
+  BuiltList<SocialProviderType> get providers;
+
+  @BuiltValueField(wireName: r'status')
+  SocialDataStatusEnum get status;
+  // enum statusEnum {  initial,  started,  finished,  };
+
+  @BuiltValueField(wireName: r'oauthUrl')
+  String? get oauthUrl;
+
+  @BuiltValueField(wireName: r'error')
+  RequestError? get error;
+
+  SocialData._();
+
+  factory SocialData([void updates(SocialDataBuilder b)]) = _$SocialData;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(SocialDataBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<SocialData> get serializer => _$SocialDataSerializer();
+}
+
+class _$SocialDataSerializer implements PrimitiveSerializer<SocialData> {
+  @override
+  final Iterable<Type> types = const [SocialData, _$SocialData];
+
+  @override
+  final String wireName = r'SocialData';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    SocialData object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'providers';
+    yield serializers.serialize(
+      object.providers,
+      specifiedType: const FullType(BuiltList, [FullType(SocialProviderType)]),
+    );
+    yield r'status';
+    yield serializers.serialize(
+      object.status,
+      specifiedType: const FullType(SocialDataStatusEnum),
+    );
+    if (object.oauthUrl != null) {
+      yield r'oauthUrl';
+      yield serializers.serialize(
+        object.oauthUrl,
+        specifiedType: const FullType(String),
+      );
+    }
+    if (object.error != null) {
+      yield r'error';
+      yield serializers.serialize(
+        object.error,
+        specifiedType: const FullType(RequestError),
+      );
+    }
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    SocialData object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required SocialDataBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'providers':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType:
+                const FullType(BuiltList, [FullType(SocialProviderType)]),
+          ) as BuiltList<SocialProviderType>;
+          result.providers.replace(valueDes);
+          break;
+        case r'status':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(SocialDataStatusEnum),
+          ) as SocialDataStatusEnum;
+          result.status = valueDes;
+          break;
+        case r'oauthUrl':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.oauthUrl = valueDes;
+          break;
+        case r'error':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(RequestError),
+          ) as RequestError;
+          result.error.replace(valueDes);
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  SocialData deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = SocialDataBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
+
+class SocialDataStatusEnum extends EnumClass {
+  @BuiltValueEnumConst(wireName: r'initial')
+  static const SocialDataStatusEnum initial = _$socialDataStatusEnum_initial;
+  @BuiltValueEnumConst(wireName: r'started')
+  static const SocialDataStatusEnum started = _$socialDataStatusEnum_started;
+  @BuiltValueEnumConst(wireName: r'finished', fallback: true)
+  static const SocialDataStatusEnum finished = _$socialDataStatusEnum_finished;
+
+  static Serializer<SocialDataStatusEnum> get serializer =>
+      _$socialDataStatusEnumSerializer;
+
+  const SocialDataStatusEnum._(String name) : super(name);
+
+  static BuiltSet<SocialDataStatusEnum> get values =>
+      _$socialDataStatusEnumValues;
+  static SocialDataStatusEnum valueOf(String name) =>
+      _$socialDataStatusEnumValueOf(name);
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/social_data.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/social_data.g.dart
new file mode 100644
index 0000000..00c1b99
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/social_data.g.dart
@@ -0,0 +1,212 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'social_data.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+const SocialDataStatusEnum _$socialDataStatusEnum_initial =
+    const SocialDataStatusEnum._('initial');
+const SocialDataStatusEnum _$socialDataStatusEnum_started =
+    const SocialDataStatusEnum._('started');
+const SocialDataStatusEnum _$socialDataStatusEnum_finished =
+    const SocialDataStatusEnum._('finished');
+
+SocialDataStatusEnum _$socialDataStatusEnumValueOf(String name) {
+  switch (name) {
+    case 'initial':
+      return _$socialDataStatusEnum_initial;
+    case 'started':
+      return _$socialDataStatusEnum_started;
+    case 'finished':
+      return _$socialDataStatusEnum_finished;
+    default:
+      return _$socialDataStatusEnum_finished;
+  }
+}
+
+final BuiltSet<SocialDataStatusEnum> _$socialDataStatusEnumValues =
+    new BuiltSet<SocialDataStatusEnum>(const <SocialDataStatusEnum>[
+  _$socialDataStatusEnum_initial,
+  _$socialDataStatusEnum_started,
+  _$socialDataStatusEnum_finished,
+]);
+
+Serializer<SocialDataStatusEnum> _$socialDataStatusEnumSerializer =
+    new _$SocialDataStatusEnumSerializer();
+
+class _$SocialDataStatusEnumSerializer
+    implements PrimitiveSerializer<SocialDataStatusEnum> {
+  static const Map<String, Object> _toWire = const <String, Object>{
+    'initial': 'initial',
+    'started': 'started',
+    'finished': 'finished',
+  };
+  static const Map<Object, String> _fromWire = const <Object, String>{
+    'initial': 'initial',
+    'started': 'started',
+    'finished': 'finished',
+  };
+
+  @override
+  final Iterable<Type> types = const <Type>[SocialDataStatusEnum];
+  @override
+  final String wireName = 'SocialDataStatusEnum';
+
+  @override
+  Object serialize(Serializers serializers, SocialDataStatusEnum object,
+          {FullType specifiedType = FullType.unspecified}) =>
+      _toWire[object.name] ?? object.name;
+
+  @override
+  SocialDataStatusEnum deserialize(Serializers serializers, Object serialized,
+          {FullType specifiedType = FullType.unspecified}) =>
+      SocialDataStatusEnum.valueOf(
+          _fromWire[serialized] ?? (serialized is String ? serialized : ''));
+}
+
+class _$SocialData extends SocialData {
+  @override
+  final BuiltList<SocialProviderType> providers;
+  @override
+  final SocialDataStatusEnum status;
+  @override
+  final String? oauthUrl;
+  @override
+  final RequestError? error;
+
+  factory _$SocialData([void Function(SocialDataBuilder)? updates]) =>
+      (new SocialDataBuilder()..update(updates))._build();
+
+  _$SocialData._(
+      {required this.providers,
+      required this.status,
+      this.oauthUrl,
+      this.error})
+      : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        providers, r'SocialData', 'providers');
+    BuiltValueNullFieldError.checkNotNull(status, r'SocialData', 'status');
+  }
+
+  @override
+  SocialData rebuild(void Function(SocialDataBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  SocialDataBuilder toBuilder() => new SocialDataBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is SocialData &&
+        providers == other.providers &&
+        status == other.status &&
+        oauthUrl == other.oauthUrl &&
+        error == other.error;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, providers.hashCode);
+    _$hash = $jc(_$hash, status.hashCode);
+    _$hash = $jc(_$hash, oauthUrl.hashCode);
+    _$hash = $jc(_$hash, error.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'SocialData')
+          ..add('providers', providers)
+          ..add('status', status)
+          ..add('oauthUrl', oauthUrl)
+          ..add('error', error))
+        .toString();
+  }
+}
+
+class SocialDataBuilder implements Builder<SocialData, SocialDataBuilder> {
+  _$SocialData? _$v;
+
+  ListBuilder<SocialProviderType>? _providers;
+  ListBuilder<SocialProviderType> get providers =>
+      _$this._providers ??= new ListBuilder<SocialProviderType>();
+  set providers(ListBuilder<SocialProviderType>? providers) =>
+      _$this._providers = providers;
+
+  SocialDataStatusEnum? _status;
+  SocialDataStatusEnum? get status => _$this._status;
+  set status(SocialDataStatusEnum? status) => _$this._status = status;
+
+  String? _oauthUrl;
+  String? get oauthUrl => _$this._oauthUrl;
+  set oauthUrl(String? oauthUrl) => _$this._oauthUrl = oauthUrl;
+
+  RequestErrorBuilder? _error;
+  RequestErrorBuilder get error => _$this._error ??= new RequestErrorBuilder();
+  set error(RequestErrorBuilder? error) => _$this._error = error;
+
+  SocialDataBuilder() {
+    SocialData._defaults(this);
+  }
+
+  SocialDataBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _providers = $v.providers.toBuilder();
+      _status = $v.status;
+      _oauthUrl = $v.oauthUrl;
+      _error = $v.error?.toBuilder();
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(SocialData other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$SocialData;
+  }
+
+  @override
+  void update(void Function(SocialDataBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  SocialData build() => _build();
+
+  _$SocialData _build() {
+    _$SocialData _$result;
+    try {
+      _$result = _$v ??
+          new _$SocialData._(
+              providers: providers.build(),
+              status: BuiltValueNullFieldError.checkNotNull(
+                  status, r'SocialData', 'status'),
+              oauthUrl: oauthUrl,
+              error: _error?.build());
+    } catch (_) {
+      late String _$failedField;
+      try {
+        _$failedField = 'providers';
+        providers.build();
+
+        _$failedField = 'error';
+        _error?.build();
+      } catch (e) {
+        throw new BuiltValueNestedFieldError(
+            r'SocialData', _$failedField, e.toString());
+      }
+      rethrow;
+    }
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/social_provider_type.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/social_provider_type.dart
new file mode 100644
index 0000000..339f25f
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/social_provider_type.dart
@@ -0,0 +1,35 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:built_collection/built_collection.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'social_provider_type.g.dart';
+
+class SocialProviderType extends EnumClass {
+  @BuiltValueEnumConst(wireName: r'google')
+  static const SocialProviderType google = _$google;
+  @BuiltValueEnumConst(wireName: r'microsoft')
+  static const SocialProviderType microsoft = _$microsoft;
+  @BuiltValueEnumConst(wireName: r'github', fallback: true)
+  static const SocialProviderType github = _$github;
+
+  static Serializer<SocialProviderType> get serializer =>
+      _$socialProviderTypeSerializer;
+
+  const SocialProviderType._(String name) : super(name);
+
+  static BuiltSet<SocialProviderType> get values => _$values;
+  static SocialProviderType valueOf(String name) => _$valueOf(name);
+}
+
+/// Optionally, enum_class can generate a mixin to go with your enum for use
+/// with Angular. It exposes your enum constants as getters. So, if you mix it
+/// in to your Dart component class, the values become available to the
+/// corresponding Angular template.
+///
+/// Trigger mixin generation by writing a line like this one next to your enum.
+abstract class SocialProviderTypeMixin = Object with _$SocialProviderTypeMixin;
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/social_provider_type.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/social_provider_type.g.dart
new file mode 100644
index 0000000..2ed78df
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/social_provider_type.g.dart
@@ -0,0 +1,81 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'social_provider_type.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+const SocialProviderType _$google = const SocialProviderType._('google');
+const SocialProviderType _$microsoft = const SocialProviderType._('microsoft');
+const SocialProviderType _$github = const SocialProviderType._('github');
+
+SocialProviderType _$valueOf(String name) {
+  switch (name) {
+    case 'google':
+      return _$google;
+    case 'microsoft':
+      return _$microsoft;
+    case 'github':
+      return _$github;
+    default:
+      return _$github;
+  }
+}
+
+final BuiltSet<SocialProviderType> _$values =
+    new BuiltSet<SocialProviderType>(const <SocialProviderType>[
+  _$google,
+  _$microsoft,
+  _$github,
+]);
+
+class _$SocialProviderTypeMeta {
+  const _$SocialProviderTypeMeta();
+  SocialProviderType get google => _$google;
+  SocialProviderType get microsoft => _$microsoft;
+  SocialProviderType get github => _$github;
+  SocialProviderType valueOf(String name) => _$valueOf(name);
+  BuiltSet<SocialProviderType> get values => _$values;
+}
+
+abstract class _$SocialProviderTypeMixin {
+  // ignore: non_constant_identifier_names
+  _$SocialProviderTypeMeta get SocialProviderType =>
+      const _$SocialProviderTypeMeta();
+}
+
+Serializer<SocialProviderType> _$socialProviderTypeSerializer =
+    new _$SocialProviderTypeSerializer();
+
+class _$SocialProviderTypeSerializer
+    implements PrimitiveSerializer<SocialProviderType> {
+  static const Map<String, Object> _toWire = const <String, Object>{
+    'google': 'google',
+    'microsoft': 'microsoft',
+    'github': 'github',
+  };
+  static const Map<Object, String> _fromWire = const <Object, String>{
+    'google': 'google',
+    'microsoft': 'microsoft',
+    'github': 'github',
+  };
+
+  @override
+  final Iterable<Type> types = const <Type>[SocialProviderType];
+  @override
+  final String wireName = 'SocialProviderType';
+
+  @override
+  Object serialize(Serializers serializers, SocialProviderType object,
+          {FullType specifiedType = FullType.unspecified}) =>
+      _toWire[object.name] ?? object.name;
+
+  @override
+  SocialProviderType deserialize(Serializers serializers, Object serialized,
+          {FullType specifiedType = FullType.unspecified}) =>
+      SocialProviderType.valueOf(
+          _fromWire[serialized] ?? (serialized is String ? serialized : ''));
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/social_verify_start_req.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/social_verify_start_req.dart
new file mode 100644
index 0000000..95eaecf
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/social_verify_start_req.dart
@@ -0,0 +1,150 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:corbado_frontend_api_client/src/model/auth_type.dart';
+import 'package:corbado_frontend_api_client/src/model/social_provider_type.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'social_verify_start_req.g.dart';
+
+/// SocialVerifyStartReq
+///
+/// Properties:
+/// * [providerType]
+/// * [redirectUrl]
+/// * [authType]
+@BuiltValue()
+abstract class SocialVerifyStartReq
+    implements Built<SocialVerifyStartReq, SocialVerifyStartReqBuilder> {
+  @BuiltValueField(wireName: r'providerType')
+  SocialProviderType get providerType;
+  // enum providerTypeEnum {  google,  microsoft,  github,  };
+
+  @BuiltValueField(wireName: r'redirectUrl')
+  String get redirectUrl;
+
+  @BuiltValueField(wireName: r'authType')
+  AuthType get authType;
+  // enum authTypeEnum {  signup,  login,  };
+
+  SocialVerifyStartReq._();
+
+  factory SocialVerifyStartReq([void updates(SocialVerifyStartReqBuilder b)]) =
+      _$SocialVerifyStartReq;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(SocialVerifyStartReqBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<SocialVerifyStartReq> get serializer =>
+      _$SocialVerifyStartReqSerializer();
+}
+
+class _$SocialVerifyStartReqSerializer
+    implements PrimitiveSerializer<SocialVerifyStartReq> {
+  @override
+  final Iterable<Type> types = const [
+    SocialVerifyStartReq,
+    _$SocialVerifyStartReq
+  ];
+
+  @override
+  final String wireName = r'SocialVerifyStartReq';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    SocialVerifyStartReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'providerType';
+    yield serializers.serialize(
+      object.providerType,
+      specifiedType: const FullType(SocialProviderType),
+    );
+    yield r'redirectUrl';
+    yield serializers.serialize(
+      object.redirectUrl,
+      specifiedType: const FullType(String),
+    );
+    yield r'authType';
+    yield serializers.serialize(
+      object.authType,
+      specifiedType: const FullType(AuthType),
+    );
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    SocialVerifyStartReq object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required SocialVerifyStartReqBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'providerType':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(SocialProviderType),
+          ) as SocialProviderType;
+          result.providerType = valueDes;
+          break;
+        case r'redirectUrl':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(String),
+          ) as String;
+          result.redirectUrl = valueDes;
+          break;
+        case r'authType':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(AuthType),
+          ) as AuthType;
+          result.authType = valueDes;
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  SocialVerifyStartReq deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = SocialVerifyStartReqBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/social_verify_start_req.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/social_verify_start_req.g.dart
new file mode 100644
index 0000000..03c02e0
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/social_verify_start_req.g.dart
@@ -0,0 +1,132 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'social_verify_start_req.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$SocialVerifyStartReq extends SocialVerifyStartReq {
+  @override
+  final SocialProviderType providerType;
+  @override
+  final String redirectUrl;
+  @override
+  final AuthType authType;
+
+  factory _$SocialVerifyStartReq(
+          [void Function(SocialVerifyStartReqBuilder)? updates]) =>
+      (new SocialVerifyStartReqBuilder()..update(updates))._build();
+
+  _$SocialVerifyStartReq._(
+      {required this.providerType,
+      required this.redirectUrl,
+      required this.authType})
+      : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        providerType, r'SocialVerifyStartReq', 'providerType');
+    BuiltValueNullFieldError.checkNotNull(
+        redirectUrl, r'SocialVerifyStartReq', 'redirectUrl');
+    BuiltValueNullFieldError.checkNotNull(
+        authType, r'SocialVerifyStartReq', 'authType');
+  }
+
+  @override
+  SocialVerifyStartReq rebuild(
+          void Function(SocialVerifyStartReqBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  SocialVerifyStartReqBuilder toBuilder() =>
+      new SocialVerifyStartReqBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is SocialVerifyStartReq &&
+        providerType == other.providerType &&
+        redirectUrl == other.redirectUrl &&
+        authType == other.authType;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, providerType.hashCode);
+    _$hash = $jc(_$hash, redirectUrl.hashCode);
+    _$hash = $jc(_$hash, authType.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'SocialVerifyStartReq')
+          ..add('providerType', providerType)
+          ..add('redirectUrl', redirectUrl)
+          ..add('authType', authType))
+        .toString();
+  }
+}
+
+class SocialVerifyStartReqBuilder
+    implements Builder<SocialVerifyStartReq, SocialVerifyStartReqBuilder> {
+  _$SocialVerifyStartReq? _$v;
+
+  SocialProviderType? _providerType;
+  SocialProviderType? get providerType => _$this._providerType;
+  set providerType(SocialProviderType? providerType) =>
+      _$this._providerType = providerType;
+
+  String? _redirectUrl;
+  String? get redirectUrl => _$this._redirectUrl;
+  set redirectUrl(String? redirectUrl) => _$this._redirectUrl = redirectUrl;
+
+  AuthType? _authType;
+  AuthType? get authType => _$this._authType;
+  set authType(AuthType? authType) => _$this._authType = authType;
+
+  SocialVerifyStartReqBuilder() {
+    SocialVerifyStartReq._defaults(this);
+  }
+
+  SocialVerifyStartReqBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _providerType = $v.providerType;
+      _redirectUrl = $v.redirectUrl;
+      _authType = $v.authType;
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(SocialVerifyStartReq other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$SocialVerifyStartReq;
+  }
+
+  @override
+  void update(void Function(SocialVerifyStartReqBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  SocialVerifyStartReq build() => _build();
+
+  _$SocialVerifyStartReq _build() {
+    final _$result = _$v ??
+        new _$SocialVerifyStartReq._(
+            providerType: BuiltValueNullFieldError.checkNotNull(
+                providerType, r'SocialVerifyStartReq', 'providerType'),
+            redirectUrl: BuiltValueNullFieldError.checkNotNull(
+                redirectUrl, r'SocialVerifyStartReq', 'redirectUrl'),
+            authType: BuiltValueNullFieldError.checkNotNull(
+                authType, r'SocialVerifyStartReq', 'authType'));
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/user_details_config_rsp.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/user_details_config_rsp.dart
new file mode 100644
index 0000000..f402c7d
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/user_details_config_rsp.dart
@@ -0,0 +1,134 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:built_collection/built_collection.dart';
+import 'package:corbado_frontend_api_client/src/model/login_identifier_config.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'user_details_config_rsp.g.dart';
+
+/// UserDetailsConfigRsp
+///
+/// Properties:
+/// * [fullNameRequired]
+/// * [identifiers]
+@BuiltValue()
+abstract class UserDetailsConfigRsp
+    implements Built<UserDetailsConfigRsp, UserDetailsConfigRspBuilder> {
+  @BuiltValueField(wireName: r'fullNameRequired')
+  bool get fullNameRequired;
+
+  @BuiltValueField(wireName: r'identifiers')
+  BuiltList<LoginIdentifierConfig> get identifiers;
+
+  UserDetailsConfigRsp._();
+
+  factory UserDetailsConfigRsp([void updates(UserDetailsConfigRspBuilder b)]) =
+      _$UserDetailsConfigRsp;
+
+  @BuiltValueHook(initializeBuilder: true)
+  static void _defaults(UserDetailsConfigRspBuilder b) => b;
+
+  @BuiltValueSerializer(custom: true)
+  static Serializer<UserDetailsConfigRsp> get serializer =>
+      _$UserDetailsConfigRspSerializer();
+}
+
+class _$UserDetailsConfigRspSerializer
+    implements PrimitiveSerializer<UserDetailsConfigRsp> {
+  @override
+  final Iterable<Type> types = const [
+    UserDetailsConfigRsp,
+    _$UserDetailsConfigRsp
+  ];
+
+  @override
+  final String wireName = r'UserDetailsConfigRsp';
+
+  Iterable<Object?> _serializeProperties(
+    Serializers serializers,
+    UserDetailsConfigRsp object, {
+    FullType specifiedType = FullType.unspecified,
+  }) sync* {
+    yield r'fullNameRequired';
+    yield serializers.serialize(
+      object.fullNameRequired,
+      specifiedType: const FullType(bool),
+    );
+    yield r'identifiers';
+    yield serializers.serialize(
+      object.identifiers,
+      specifiedType:
+          const FullType(BuiltList, [FullType(LoginIdentifierConfig)]),
+    );
+  }
+
+  @override
+  Object serialize(
+    Serializers serializers,
+    UserDetailsConfigRsp object, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    return _serializeProperties(serializers, object,
+            specifiedType: specifiedType)
+        .toList();
+  }
+
+  void _deserializeProperties(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+    required List<Object?> serializedList,
+    required UserDetailsConfigRspBuilder result,
+    required List<Object?> unhandled,
+  }) {
+    for (var i = 0; i < serializedList.length; i += 2) {
+      final key = serializedList[i] as String;
+      final value = serializedList[i + 1];
+      switch (key) {
+        case r'fullNameRequired':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType: const FullType(bool),
+          ) as bool;
+          result.fullNameRequired = valueDes;
+          break;
+        case r'identifiers':
+          final valueDes = serializers.deserialize(
+            value,
+            specifiedType:
+                const FullType(BuiltList, [FullType(LoginIdentifierConfig)]),
+          ) as BuiltList<LoginIdentifierConfig>;
+          result.identifiers.replace(valueDes);
+          break;
+        default:
+          unhandled.add(key);
+          unhandled.add(value);
+          break;
+      }
+    }
+  }
+
+  @override
+  UserDetailsConfigRsp deserialize(
+    Serializers serializers,
+    Object serialized, {
+    FullType specifiedType = FullType.unspecified,
+  }) {
+    final result = UserDetailsConfigRspBuilder();
+    final serializedList = (serialized as Iterable<Object?>).toList();
+    final unhandled = <Object?>[];
+    _deserializeProperties(
+      serializers,
+      serialized,
+      specifiedType: specifiedType,
+      serializedList: serializedList,
+      unhandled: unhandled,
+      result: result,
+    );
+    return result.build();
+  }
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/user_details_config_rsp.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/user_details_config_rsp.g.dart
new file mode 100644
index 0000000..0a570b4
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/user_details_config_rsp.g.dart
@@ -0,0 +1,132 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'user_details_config_rsp.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+class _$UserDetailsConfigRsp extends UserDetailsConfigRsp {
+  @override
+  final bool fullNameRequired;
+  @override
+  final BuiltList<LoginIdentifierConfig> identifiers;
+
+  factory _$UserDetailsConfigRsp(
+          [void Function(UserDetailsConfigRspBuilder)? updates]) =>
+      (new UserDetailsConfigRspBuilder()..update(updates))._build();
+
+  _$UserDetailsConfigRsp._(
+      {required this.fullNameRequired, required this.identifiers})
+      : super._() {
+    BuiltValueNullFieldError.checkNotNull(
+        fullNameRequired, r'UserDetailsConfigRsp', 'fullNameRequired');
+    BuiltValueNullFieldError.checkNotNull(
+        identifiers, r'UserDetailsConfigRsp', 'identifiers');
+  }
+
+  @override
+  UserDetailsConfigRsp rebuild(
+          void Function(UserDetailsConfigRspBuilder) updates) =>
+      (toBuilder()..update(updates)).build();
+
+  @override
+  UserDetailsConfigRspBuilder toBuilder() =>
+      new UserDetailsConfigRspBuilder()..replace(this);
+
+  @override
+  bool operator ==(Object other) {
+    if (identical(other, this)) return true;
+    return other is UserDetailsConfigRsp &&
+        fullNameRequired == other.fullNameRequired &&
+        identifiers == other.identifiers;
+  }
+
+  @override
+  int get hashCode {
+    var _$hash = 0;
+    _$hash = $jc(_$hash, fullNameRequired.hashCode);
+    _$hash = $jc(_$hash, identifiers.hashCode);
+    _$hash = $jf(_$hash);
+    return _$hash;
+  }
+
+  @override
+  String toString() {
+    return (newBuiltValueToStringHelper(r'UserDetailsConfigRsp')
+          ..add('fullNameRequired', fullNameRequired)
+          ..add('identifiers', identifiers))
+        .toString();
+  }
+}
+
+class UserDetailsConfigRspBuilder
+    implements Builder<UserDetailsConfigRsp, UserDetailsConfigRspBuilder> {
+  _$UserDetailsConfigRsp? _$v;
+
+  bool? _fullNameRequired;
+  bool? get fullNameRequired => _$this._fullNameRequired;
+  set fullNameRequired(bool? fullNameRequired) =>
+      _$this._fullNameRequired = fullNameRequired;
+
+  ListBuilder<LoginIdentifierConfig>? _identifiers;
+  ListBuilder<LoginIdentifierConfig> get identifiers =>
+      _$this._identifiers ??= new ListBuilder<LoginIdentifierConfig>();
+  set identifiers(ListBuilder<LoginIdentifierConfig>? identifiers) =>
+      _$this._identifiers = identifiers;
+
+  UserDetailsConfigRspBuilder() {
+    UserDetailsConfigRsp._defaults(this);
+  }
+
+  UserDetailsConfigRspBuilder get _$this {
+    final $v = _$v;
+    if ($v != null) {
+      _fullNameRequired = $v.fullNameRequired;
+      _identifiers = $v.identifiers.toBuilder();
+      _$v = null;
+    }
+    return this;
+  }
+
+  @override
+  void replace(UserDetailsConfigRsp other) {
+    ArgumentError.checkNotNull(other, 'other');
+    _$v = other as _$UserDetailsConfigRsp;
+  }
+
+  @override
+  void update(void Function(UserDetailsConfigRspBuilder)? updates) {
+    if (updates != null) updates(this);
+  }
+
+  @override
+  UserDetailsConfigRsp build() => _build();
+
+  _$UserDetailsConfigRsp _build() {
+    _$UserDetailsConfigRsp _$result;
+    try {
+      _$result = _$v ??
+          new _$UserDetailsConfigRsp._(
+              fullNameRequired: BuiltValueNullFieldError.checkNotNull(
+                  fullNameRequired,
+                  r'UserDetailsConfigRsp',
+                  'fullNameRequired'),
+              identifiers: identifiers.build());
+    } catch (_) {
+      late String _$failedField;
+      try {
+        _$failedField = 'identifiers';
+        identifiers.build();
+      } catch (e) {
+        throw new BuiltValueNestedFieldError(
+            r'UserDetailsConfigRsp', _$failedField, e.toString());
+      }
+      rethrow;
+    }
+    replace(_$result);
+    return _$result;
+  }
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/verification_method.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/verification_method.dart
new file mode 100644
index 0000000..d70924e
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/verification_method.dart
@@ -0,0 +1,35 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_element
+import 'package:built_collection/built_collection.dart';
+import 'package:built_value/built_value.dart';
+import 'package:built_value/serializer.dart';
+
+part 'verification_method.g.dart';
+
+class VerificationMethod extends EnumClass {
+  @BuiltValueEnumConst(wireName: r'email-link')
+  static const VerificationMethod emailLink = _$emailLink;
+  @BuiltValueEnumConst(wireName: r'email-otp')
+  static const VerificationMethod emailOtp = _$emailOtp;
+  @BuiltValueEnumConst(wireName: r'phone-otp', fallback: true)
+  static const VerificationMethod phoneOtp = _$phoneOtp;
+
+  static Serializer<VerificationMethod> get serializer =>
+      _$verificationMethodSerializer;
+
+  const VerificationMethod._(String name) : super(name);
+
+  static BuiltSet<VerificationMethod> get values => _$values;
+  static VerificationMethod valueOf(String name) => _$valueOf(name);
+}
+
+/// Optionally, enum_class can generate a mixin to go with your enum for use
+/// with Angular. It exposes your enum constants as getters. So, if you mix it
+/// in to your Dart component class, the values become available to the
+/// corresponding Angular template.
+///
+/// Trigger mixin generation by writing a line like this one next to your enum.
+abstract class VerificationMethodMixin = Object with _$VerificationMethodMixin;
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/model/verification_method.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/model/verification_method.g.dart
new file mode 100644
index 0000000..e9f0c56
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/model/verification_method.g.dart
@@ -0,0 +1,81 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'verification_method.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+const VerificationMethod _$emailLink = const VerificationMethod._('emailLink');
+const VerificationMethod _$emailOtp = const VerificationMethod._('emailOtp');
+const VerificationMethod _$phoneOtp = const VerificationMethod._('phoneOtp');
+
+VerificationMethod _$valueOf(String name) {
+  switch (name) {
+    case 'emailLink':
+      return _$emailLink;
+    case 'emailOtp':
+      return _$emailOtp;
+    case 'phoneOtp':
+      return _$phoneOtp;
+    default:
+      return _$phoneOtp;
+  }
+}
+
+final BuiltSet<VerificationMethod> _$values =
+    new BuiltSet<VerificationMethod>(const <VerificationMethod>[
+  _$emailLink,
+  _$emailOtp,
+  _$phoneOtp,
+]);
+
+class _$VerificationMethodMeta {
+  const _$VerificationMethodMeta();
+  VerificationMethod get emailLink => _$emailLink;
+  VerificationMethod get emailOtp => _$emailOtp;
+  VerificationMethod get phoneOtp => _$phoneOtp;
+  VerificationMethod valueOf(String name) => _$valueOf(name);
+  BuiltSet<VerificationMethod> get values => _$values;
+}
+
+abstract class _$VerificationMethodMixin {
+  // ignore: non_constant_identifier_names
+  _$VerificationMethodMeta get VerificationMethod =>
+      const _$VerificationMethodMeta();
+}
+
+Serializer<VerificationMethod> _$verificationMethodSerializer =
+    new _$VerificationMethodSerializer();
+
+class _$VerificationMethodSerializer
+    implements PrimitiveSerializer<VerificationMethod> {
+  static const Map<String, Object> _toWire = const <String, Object>{
+    'emailLink': 'email-link',
+    'emailOtp': 'email-otp',
+    'phoneOtp': 'phone-otp',
+  };
+  static const Map<Object, String> _fromWire = const <Object, String>{
+    'email-link': 'emailLink',
+    'email-otp': 'emailOtp',
+    'phone-otp': 'phoneOtp',
+  };
+
+  @override
+  final Iterable<Type> types = const <Type>[VerificationMethod];
+  @override
+  final String wireName = 'VerificationMethod';
+
+  @override
+  Object serialize(Serializers serializers, VerificationMethod object,
+          {FullType specifiedType = FullType.unspecified}) =>
+      _toWire[object.name] ?? object.name;
+
+  @override
+  VerificationMethod deserialize(Serializers serializers, Object serialized,
+          {FullType specifiedType = FullType.unspecified}) =>
+      VerificationMethod.valueOf(
+          _fromWire[serialized] ?? (serialized is String ? serialized : ''));
+}
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/serializers.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/serializers.dart
new file mode 100644
index 0000000..47f9c42
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/serializers.dart
@@ -0,0 +1,204 @@
+//
+// AUTO-GENERATED FILE, DO NOT MODIFY!
+//
+
+// ignore_for_file: unused_import
+
+import 'package:one_of_serializer/any_of_serializer.dart';
+import 'package:one_of_serializer/one_of_serializer.dart';
+import 'package:built_collection/built_collection.dart';
+import 'package:built_value/json_object.dart';
+import 'package:built_value/serializer.dart';
+import 'package:built_value/standard_json_plugin.dart';
+import 'package:built_value/iso_8601_date_time_serializer.dart';
+import 'package:corbado_frontend_api_client/src/date_serializer.dart';
+import 'package:corbado_frontend_api_client/src/model/date.dart';
+
+import 'package:corbado_frontend_api_client/src/model/auth_type.dart';
+import 'package:corbado_frontend_api_client/src/model/block_body.dart';
+import 'package:corbado_frontend_api_client/src/model/block_body_data.dart';
+import 'package:corbado_frontend_api_client/src/model/block_type.dart';
+import 'package:corbado_frontend_api_client/src/model/client_capabilities.dart';
+import 'package:corbado_frontend_api_client/src/model/client_information.dart';
+import 'package:corbado_frontend_api_client/src/model/connect_append_finish_req.dart';
+import 'package:corbado_frontend_api_client/src/model/connect_append_finish_rsp.dart';
+import 'package:corbado_frontend_api_client/src/model/connect_append_init_req.dart';
+import 'package:corbado_frontend_api_client/src/model/connect_append_init_rsp.dart';
+import 'package:corbado_frontend_api_client/src/model/connect_append_start_req.dart';
+import 'package:corbado_frontend_api_client/src/model/connect_append_start_rsp.dart';
+import 'package:corbado_frontend_api_client/src/model/connect_event_create_req.dart';
+import 'package:corbado_frontend_api_client/src/model/connect_login_finish_req.dart';
+import 'package:corbado_frontend_api_client/src/model/connect_login_finish_rsp.dart';
+import 'package:corbado_frontend_api_client/src/model/connect_login_init_req.dart';
+import 'package:corbado_frontend_api_client/src/model/connect_login_init_rsp.dart';
+import 'package:corbado_frontend_api_client/src/model/connect_login_start_req.dart';
+import 'package:corbado_frontend_api_client/src/model/connect_login_start_rsp.dart';
+import 'package:corbado_frontend_api_client/src/model/connect_manage_delete_req.dart';
+import 'package:corbado_frontend_api_client/src/model/connect_manage_delete_rsp.dart';
+import 'package:corbado_frontend_api_client/src/model/connect_manage_init_req.dart';
+import 'package:corbado_frontend_api_client/src/model/connect_manage_init_rsp.dart';
+import 'package:corbado_frontend_api_client/src/model/connect_manage_list_req.dart';
+import 'package:corbado_frontend_api_client/src/model/connect_manage_list_rsp.dart';
+import 'package:corbado_frontend_api_client/src/model/continue_on_other_device.dart';
+import 'package:corbado_frontend_api_client/src/model/event_create_req.dart';
+import 'package:corbado_frontend_api_client/src/model/full_name_with_error.dart';
+import 'package:corbado_frontend_api_client/src/model/general_block_completed.dart';
+import 'package:corbado_frontend_api_client/src/model/general_block_login_init.dart';
+import 'package:corbado_frontend_api_client/src/model/general_block_passkey_append.dart';
+import 'package:corbado_frontend_api_client/src/model/general_block_passkey_appended.dart';
+import 'package:corbado_frontend_api_client/src/model/general_block_passkey_verify.dart';
+import 'package:corbado_frontend_api_client/src/model/general_block_post_signup_email_verify.dart';
+import 'package:corbado_frontend_api_client/src/model/general_block_signup_init.dart';
+import 'package:corbado_frontend_api_client/src/model/general_block_verify_identifier.dart';
+import 'package:corbado_frontend_api_client/src/model/general_block_verify_identifier_alternative_verification_methods_inner.dart';
+import 'package:corbado_frontend_api_client/src/model/generic_rsp.dart';
+import 'package:corbado_frontend_api_client/src/model/identifier.dart';
+import 'package:corbado_frontend_api_client/src/model/identifier_update_req.dart';
+import 'package:corbado_frontend_api_client/src/model/identifier_verify_finish_req.dart';
+import 'package:corbado_frontend_api_client/src/model/identifier_verify_start_req.dart';
+import 'package:corbado_frontend_api_client/src/model/java_script_high_entropy.dart';
+import 'package:corbado_frontend_api_client/src/model/login_identifier.dart';
+import 'package:corbado_frontend_api_client/src/model/login_identifier_config.dart';
+import 'package:corbado_frontend_api_client/src/model/login_identifier_type.dart';
+import 'package:corbado_frontend_api_client/src/model/login_identifier_with_error.dart';
+import 'package:corbado_frontend_api_client/src/model/login_init_req.dart';
+import 'package:corbado_frontend_api_client/src/model/me_identifier_create_req.dart';
+import 'package:corbado_frontend_api_client/src/model/me_identifier_delete_req.dart';
+import 'package:corbado_frontend_api_client/src/model/me_identifier_update_req.dart';
+import 'package:corbado_frontend_api_client/src/model/me_identifier_verify_finish_req.dart';
+import 'package:corbado_frontend_api_client/src/model/me_identifier_verify_start_req.dart';
+import 'package:corbado_frontend_api_client/src/model/me_passkey_delete_rsp.dart';
+import 'package:corbado_frontend_api_client/src/model/me_passkey_rsp.dart';
+import 'package:corbado_frontend_api_client/src/model/me_passkeys_append_finish_req.dart';
+import 'package:corbado_frontend_api_client/src/model/me_passkeys_append_start_req.dart';
+import 'package:corbado_frontend_api_client/src/model/me_passkeys_append_start_rsp.dart';
+import 'package:corbado_frontend_api_client/src/model/me_refresh_rsp.dart';
+import 'package:corbado_frontend_api_client/src/model/me_rsp.dart';
+import 'package:corbado_frontend_api_client/src/model/me_update_req.dart';
+import 'package:corbado_frontend_api_client/src/model/paging.dart';
+import 'package:corbado_frontend_api_client/src/model/passkey.dart';
+import 'package:corbado_frontend_api_client/src/model/passkey_append_finish_req.dart';
+import 'package:corbado_frontend_api_client/src/model/passkey_append_start_req.dart';
+import 'package:corbado_frontend_api_client/src/model/passkey_event_type.dart';
+import 'package:corbado_frontend_api_client/src/model/passkey_icon_set.dart';
+import 'package:corbado_frontend_api_client/src/model/passkey_login_finish_req.dart';
+import 'package:corbado_frontend_api_client/src/model/passkey_login_start_req.dart';
+import 'package:corbado_frontend_api_client/src/model/passkey_mediation_finish_req.dart';
+import 'package:corbado_frontend_api_client/src/model/passkey_operation.dart';
+import 'package:corbado_frontend_api_client/src/model/process_common.dart';
+import 'package:corbado_frontend_api_client/src/model/process_init_req.dart';
+import 'package:corbado_frontend_api_client/src/model/process_init_rsp.dart';
+import 'package:corbado_frontend_api_client/src/model/process_response.dart';
+import 'package:corbado_frontend_api_client/src/model/process_static_info.dart';
+import 'package:corbado_frontend_api_client/src/model/request_data.dart';
+import 'package:corbado_frontend_api_client/src/model/request_error.dart';
+import 'package:corbado_frontend_api_client/src/model/session_config_rsp.dart';
+import 'package:corbado_frontend_api_client/src/model/short_session_cookie_config.dart';
+import 'package:corbado_frontend_api_client/src/model/signup_init_req.dart';
+import 'package:corbado_frontend_api_client/src/model/social_account.dart';
+import 'package:corbado_frontend_api_client/src/model/social_data.dart';
+import 'package:corbado_frontend_api_client/src/model/social_provider_type.dart';
+import 'package:corbado_frontend_api_client/src/model/social_verify_start_req.dart';
+import 'package:corbado_frontend_api_client/src/model/user_details_config_rsp.dart';
+import 'package:corbado_frontend_api_client/src/model/verification_method.dart';
+
+part 'serializers.g.dart';
+
+@SerializersFor([
+  AuthType,
+  BlockBody,
+  BlockBodyData,
+  BlockType,
+  ClientCapabilities,
+  ClientInformation,
+  ConnectAppendFinishReq,
+  ConnectAppendFinishRsp,
+  ConnectAppendInitReq,
+  ConnectAppendInitRsp,
+  ConnectAppendStartReq,
+  ConnectAppendStartRsp,
+  ConnectEventCreateReq,
+  ConnectLoginFinishReq,
+  ConnectLoginFinishRsp,
+  ConnectLoginInitReq,
+  ConnectLoginInitRsp,
+  ConnectLoginStartReq,
+  ConnectLoginStartRsp,
+  ConnectManageDeleteReq,
+  ConnectManageDeleteRsp,
+  ConnectManageInitReq,
+  ConnectManageInitRsp,
+  ConnectManageListReq,
+  ConnectManageListRsp,
+  ContinueOnOtherDevice,
+  EventCreateReq,
+  FullNameWithError,
+  GeneralBlockCompleted,
+  GeneralBlockLoginInit,
+  GeneralBlockPasskeyAppend,
+  GeneralBlockPasskeyAppended,
+  GeneralBlockPasskeyVerify,
+  GeneralBlockPostSignupEmailVerify,
+  GeneralBlockSignupInit,
+  GeneralBlockVerifyIdentifier,
+  GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner,
+  GenericRsp,
+  Identifier,
+  IdentifierUpdateReq,
+  IdentifierVerifyFinishReq,
+  IdentifierVerifyStartReq,
+  JavaScriptHighEntropy,
+  LoginIdentifier,
+  LoginIdentifierConfig,
+  LoginIdentifierType,
+  LoginIdentifierWithError,
+  LoginInitReq,
+  MeIdentifierCreateReq,
+  MeIdentifierDeleteReq,
+  MeIdentifierUpdateReq,
+  MeIdentifierVerifyFinishReq,
+  MeIdentifierVerifyStartReq,
+  MePasskeyDeleteRsp,
+  MePasskeyRsp,
+  MePasskeysAppendFinishReq,
+  MePasskeysAppendStartReq,
+  MePasskeysAppendStartRsp,
+  MeRefreshRsp,
+  MeRsp,
+  MeUpdateReq,
+  Paging,
+  Passkey,
+  PasskeyAppendFinishReq,
+  PasskeyAppendStartReq,
+  PasskeyEventType,
+  PasskeyIconSet,
+  PasskeyLoginFinishReq,
+  PasskeyLoginStartReq,
+  PasskeyMediationFinishReq,
+  PasskeyOperation,
+  ProcessCommon,
+  ProcessInitReq,
+  ProcessInitRsp,
+  ProcessResponse,
+  ProcessStaticInfo,
+  RequestData,
+  RequestError,
+  SessionConfigRsp,
+  ShortSessionCookieConfig,
+  SignupInitReq,
+  SocialAccount,
+  SocialData,
+  SocialProviderType,
+  SocialVerifyStartReq,
+  UserDetailsConfigRsp,
+  VerificationMethod,
+])
+Serializers serializers = (_$serializers.toBuilder()
+      ..add(const OneOfSerializer())
+      ..add(const AnyOfSerializer())
+      ..add(const DateSerializer())
+      ..add(Iso8601DateTimeSerializer()))
+    .build();
+
+Serializers standardSerializers =
+    (serializers.toBuilder()..addPlugin(StandardJsonPlugin())).build();
diff --git a/packages/corbado_api_client/lib/frontendapi/lib/src/serializers.g.dart b/packages/corbado_api_client/lib/frontendapi/lib/src/serializers.g.dart
new file mode 100644
index 0000000..7d42757
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/lib/src/serializers.g.dart
@@ -0,0 +1,176 @@
+// GENERATED CODE - DO NOT MODIFY BY HAND
+
+part of 'serializers.dart';
+
+// **************************************************************************
+// BuiltValueGenerator
+// **************************************************************************
+
+Serializers _$serializers = (new Serializers().toBuilder()
+      ..add(AuthType.serializer)
+      ..add(BlockBody.serializer)
+      ..add(BlockBodyData.serializer)
+      ..add(BlockType.serializer)
+      ..add(ClientCapabilities.serializer)
+      ..add(ClientInformation.serializer)
+      ..add(ConnectAppendFinishReq.serializer)
+      ..add(ConnectAppendFinishRsp.serializer)
+      ..add(ConnectAppendInitReq.serializer)
+      ..add(ConnectAppendInitRsp.serializer)
+      ..add(ConnectAppendStartReq.serializer)
+      ..add(ConnectAppendStartRsp.serializer)
+      ..add(ConnectAppendStartRspVariantEnum.serializer)
+      ..add(ConnectEventCreateReq.serializer)
+      ..add(ConnectLoginFinishReq.serializer)
+      ..add(ConnectLoginFinishRsp.serializer)
+      ..add(ConnectLoginInitReq.serializer)
+      ..add(ConnectLoginInitRsp.serializer)
+      ..add(ConnectLoginStartReq.serializer)
+      ..add(ConnectLoginStartReqSource_Enum.serializer)
+      ..add(ConnectLoginStartRsp.serializer)
+      ..add(ConnectManageDeleteReq.serializer)
+      ..add(ConnectManageDeleteRsp.serializer)
+      ..add(ConnectManageInitReq.serializer)
+      ..add(ConnectManageInitRsp.serializer)
+      ..add(ConnectManageListReq.serializer)
+      ..add(ConnectManageListRsp.serializer)
+      ..add(ContinueOnOtherDevice.serializer)
+      ..add(ContinueOnOtherDeviceReasonEnum.serializer)
+      ..add(EventCreateReq.serializer)
+      ..add(FullNameWithError.serializer)
+      ..add(GeneralBlockCompleted.serializer)
+      ..add(GeneralBlockLoginInit.serializer)
+      ..add(GeneralBlockPasskeyAppend.serializer)
+      ..add(GeneralBlockPasskeyAppendVariantEnum.serializer)
+      ..add(GeneralBlockPasskeyAppended.serializer)
+      ..add(GeneralBlockPasskeyVerify.serializer)
+      ..add(GeneralBlockPasskeyVerifyLoginHintEnum.serializer)
+      ..add(GeneralBlockPostSignupEmailVerify.serializer)
+      ..add(GeneralBlockSignupInit.serializer)
+      ..add(GeneralBlockVerifyIdentifier.serializer)
+      ..add(GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner
+          .serializer)
+      ..add(GenericRsp.serializer)
+      ..add(Identifier.serializer)
+      ..add(IdentifierUpdateReq.serializer)
+      ..add(IdentifierVerifyFinishReq.serializer)
+      ..add(IdentifierVerifyStartReq.serializer)
+      ..add(JavaScriptHighEntropy.serializer)
+      ..add(LoginIdentifier.serializer)
+      ..add(LoginIdentifierConfig.serializer)
+      ..add(LoginIdentifierType.serializer)
+      ..add(LoginIdentifierWithError.serializer)
+      ..add(LoginInitReq.serializer)
+      ..add(MeIdentifierCreateReq.serializer)
+      ..add(MeIdentifierDeleteReq.serializer)
+      ..add(MeIdentifierUpdateReq.serializer)
+      ..add(MeIdentifierVerifyFinishReq.serializer)
+      ..add(MeIdentifierVerifyStartReq.serializer)
+      ..add(MePasskeyDeleteRsp.serializer)
+      ..add(MePasskeyRsp.serializer)
+      ..add(MePasskeysAppendFinishReq.serializer)
+      ..add(MePasskeysAppendStartReq.serializer)
+      ..add(MePasskeysAppendStartRsp.serializer)
+      ..add(MePasskeysAppendStartRspAppendNotAllowedReasonEnum.serializer)
+      ..add(MeRefreshRsp.serializer)
+      ..add(MeRsp.serializer)
+      ..add(MeUpdateReq.serializer)
+      ..add(Paging.serializer)
+      ..add(Passkey.serializer)
+      ..add(PasskeyAppendFinishReq.serializer)
+      ..add(PasskeyAppendStartReq.serializer)
+      ..add(PasskeyEventType.serializer)
+      ..add(PasskeyIconSet.serializer)
+      ..add(PasskeyLoginFinishReq.serializer)
+      ..add(PasskeyLoginStartReq.serializer)
+      ..add(PasskeyMediationFinishReq.serializer)
+      ..add(PasskeyOperation.serializer)
+      ..add(PasskeyOperationCeremonyTypeEnum.serializer)
+      ..add(PasskeyOperationOperationTypeEnum.serializer)
+      ..add(PasskeyStatusEnum.serializer)
+      ..add(PasskeyTransportEnum.serializer)
+      ..add(ProcessCommon.serializer)
+      ..add(ProcessInitReq.serializer)
+      ..add(ProcessInitRsp.serializer)
+      ..add(ProcessResponse.serializer)
+      ..add(ProcessStaticInfo.serializer)
+      ..add(RequestData.serializer)
+      ..add(RequestError.serializer)
+      ..add(SessionConfigRsp.serializer)
+      ..add(ShortSessionCookieConfig.serializer)
+      ..add(ShortSessionCookieConfigSameSiteEnum.serializer)
+      ..add(SignupInitReq.serializer)
+      ..add(SocialAccount.serializer)
+      ..add(SocialData.serializer)
+      ..add(SocialDataStatusEnum.serializer)
+      ..add(SocialProviderType.serializer)
+      ..add(SocialVerifyStartReq.serializer)
+      ..add(UserDetailsConfigRsp.serializer)
+      ..add(VerificationMethod.serializer)
+      ..addBuilderFactory(
+          const FullType(BuiltList, const [const FullType(BlockBody)]),
+          () => new ListBuilder<BlockBody>())
+      ..addBuilderFactory(
+          const FullType(BuiltList, const [
+            const FullType(
+                GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner)
+          ]),
+          () => new ListBuilder<
+              GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner>())
+      ..addBuilderFactory(
+          const FullType(BuiltList, const [const FullType(Identifier)]),
+          () => new ListBuilder<Identifier>())
+      ..addBuilderFactory(
+          const FullType(BuiltList, const [const FullType(SocialAccount)]),
+          () => new ListBuilder<SocialAccount>())
+      ..addBuilderFactory(
+          const FullType(BuiltList, const [const FullType(LoginIdentifier)]),
+          () => new ListBuilder<LoginIdentifier>())
+      ..addBuilderFactory(
+          const FullType(
+              BuiltList, const [const FullType(LoginIdentifierConfig)]),
+          () => new ListBuilder<LoginIdentifierConfig>())
+      ..addBuilderFactory(
+          const FullType(
+              BuiltList, const [const FullType(LoginIdentifierWithError)]),
+          () => new ListBuilder<LoginIdentifierWithError>())
+      ..addBuilderFactory(
+          const FullType(BuiltList, const [const FullType(Passkey)]),
+          () => new ListBuilder<Passkey>())
+      ..addBuilderFactory(
+          const FullType(BuiltList, const [const FullType(Passkey)]),
+          () => new ListBuilder<Passkey>())
+      ..addBuilderFactory(
+          const FullType(
+              BuiltList, const [const FullType(PasskeyTransportEnum)]),
+          () => new ListBuilder<PasskeyTransportEnum>())
+      ..addBuilderFactory(
+          const FullType(BuiltList, const [const FullType(SocialProviderType)]),
+          () => new ListBuilder<SocialProviderType>())
+      ..addBuilderFactory(
+          const FullType(
+              BuiltMap, const [const FullType(String), const FullType(String)]),
+          () => new MapBuilder<String, String>())
+      ..addBuilderFactory(
+          const FullType(
+              BuiltMap, const [const FullType(String), const FullType(String)]),
+          () => new MapBuilder<String, String>())
+      ..addBuilderFactory(
+          const FullType(
+              BuiltMap, const [const FullType(String), const FullType(String)]),
+          () => new MapBuilder<String, String>())
+      ..addBuilderFactory(
+          const FullType(
+              BuiltMap, const [const FullType(String), const FullType(String)]),
+          () => new MapBuilder<String, String>())
+      ..addBuilderFactory(
+          const FullType(
+              BuiltMap, const [const FullType(String), const FullType(String)]),
+          () => new MapBuilder<String, String>())
+      ..addBuilderFactory(
+          const FullType(
+              BuiltMap, const [const FullType(String), const FullType(String)]),
+          () => new MapBuilder<String, String>()))
+    .build();
+
+// ignore_for_file: deprecated_member_use_from_same_package,type=lint
diff --git a/packages/corbado_api_client/lib/frontendapi/pubspec.yaml b/packages/corbado_api_client/lib/frontendapi/pubspec.yaml
index 402db83..f81fc48 100644
--- a/packages/corbado_api_client/lib/frontendapi/pubspec.yaml
+++ b/packages/corbado_api_client/lib/frontendapi/pubspec.yaml
@@ -1,17 +1,19 @@
-#
-# AUTO-GENERATED FILE, DO NOT MODIFY!
-#
+name: corbado_frontend_api_client
+version: 2.1.1
+description: Client for the Corbado Frontend API
+homepage: https://docs.corbado.com/overview/welcome
 
-name: 'corbado_api'
-version: '1.0.0'
-description: 'OpenAPI API client'
-homepage: 'homepage'
-publish_to: none
 environment:
-  sdk: '>=2.12.0 <3.0.0'
+  sdk: '>=2.15.0 <4.0.0'
+
 dependencies:
-  http: '>=0.13.0 <0.14.0'
-  intl: '^0.17.0'
-  meta: '^1.1.8'
+  dio: '^5.2.0'
+  one_of: '>=1.5.0 <2.0.0'
+  one_of_serializer: '>=1.5.0 <2.0.0'
+  built_value: '>=8.4.0 <9.0.0'
+  built_collection: '>=5.1.1 <6.0.0'
+
 dev_dependencies:
-  test: '>=1.16.0 <1.18.0'
+  built_value_generator: '>=8.4.0 <9.0.0'
+  build_runner: any
+  test: ^1.16.0
diff --git a/packages/corbado_api_client/lib/frontendapi/test/auth_api_test.dart b/packages/corbado_api_client/lib/frontendapi/test/auth_api_test.dart
new file mode 100644
index 0000000..da37381
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/auth_api_test.dart
@@ -0,0 +1,149 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+/// tests for AuthApi
+void main() {
+  final instance = CorbadoFrontendApiClient().getAuthApi();
+
+  group(AuthApi, () {
+    // tbd
+    //
+    //Future<ProcessResponse> blockSkip() async
+    test('test blockSkip', () async {
+      // TODO
+    });
+
+    // Creates a new user generated complete event.
+    //
+    //Future eventCreate(EventCreateReq eventCreateReq) async
+    test('test eventCreate', () async {
+      // TODO
+    });
+
+    // tbd
+    //
+    //Future<ProcessResponse> identifierUpdate(IdentifierUpdateReq identifierUpdateReq) async
+    test('test identifierUpdate', () async {
+      // TODO
+    });
+
+    // tbd
+    //
+    //Future<ProcessResponse> identifierVerifyFinish(IdentifierVerifyFinishReq identifierVerifyFinishReq) async
+    test('test identifierVerifyFinish', () async {
+      // TODO
+    });
+
+    // tbd
+    //
+    //Future<ProcessResponse> identifierVerifyStart(IdentifierVerifyStartReq identifierVerifyStartReq) async
+    test('test identifierVerifyStart', () async {
+      // TODO
+    });
+
+    // tbd
+    //
+    //Future<ProcessResponse> identifierVerifyStatus() async
+    test('test identifierVerifyStatus', () async {
+      // TODO
+    });
+
+    // tbd
+    //
+    //Future<ProcessResponse> loginInit(LoginInitReq loginInitReq) async
+    test('test loginInit', () async {
+      // TODO
+    });
+
+    // tbd
+    //
+    //Future<ProcessResponse> passkeyAppendFinish(PasskeyAppendFinishReq passkeyAppendFinishReq) async
+    test('test passkeyAppendFinish', () async {
+      // TODO
+    });
+
+    // tbd
+    //
+    //Future<ProcessResponse> passkeyAppendStart(PasskeyAppendStartReq passkeyAppendStartReq) async
+    test('test passkeyAppendStart', () async {
+      // TODO
+    });
+
+    // tbd
+    //
+    //Future<ProcessResponse> passkeyLoginFinish(PasskeyLoginFinishReq passkeyLoginFinishReq) async
+    test('test passkeyLoginFinish', () async {
+      // TODO
+    });
+
+    // tbd
+    //
+    //Future<ProcessResponse> passkeyLoginStart(PasskeyLoginStartReq passkeyLoginStartReq) async
+    test('test passkeyLoginStart', () async {
+      // TODO
+    });
+
+    // tbd
+    //
+    //Future<ProcessResponse> passkeyMediationFinish(PasskeyMediationFinishReq passkeyMediationFinishReq) async
+    test('test passkeyMediationFinish', () async {
+      // TODO
+    });
+
+    // tbd
+    //
+    //Future<ProcessResponse> processComplete() async
+    test('test processComplete', () async {
+      // TODO
+    });
+
+    // tbd
+    //
+    //Future<ProcessResponse> processGet({ BlockType preferredBlock }) async
+    test('test processGet', () async {
+      // TODO
+    });
+
+    // tbd
+    //
+    //Future<ProcessInitRsp> processInit(ProcessInitReq processInitReq) async
+    test('test processInit', () async {
+      // TODO
+    });
+
+    // tbd
+    //
+    //Future<ProcessResponse> processReset() async
+    test('test processReset', () async {
+      // TODO
+    });
+
+    // tbd
+    //
+    //Future<ProcessResponse> signupInit(SignupInitReq signupInitReq) async
+    test('test signupInit', () async {
+      // TODO
+    });
+
+    // tbd
+    //
+    //Future socialVerifyCallback() async
+    test('test socialVerifyCallback', () async {
+      // TODO
+    });
+
+    // tbd
+    //
+    //Future<ProcessResponse> socialVerifyFinish(JsonObject body) async
+    test('test socialVerifyFinish', () async {
+      // TODO
+    });
+
+    // tbd
+    //
+    //Future<ProcessResponse> socialVerifyStart(SocialVerifyStartReq socialVerifyStartReq) async
+    test('test socialVerifyStart', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/auth_type_test.dart b/packages/corbado_api_client/lib/frontendapi/test/auth_type_test.dart
new file mode 100644
index 0000000..6a0e180
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/auth_type_test.dart
@@ -0,0 +1,7 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for AuthType
+void main() {
+  group(AuthType, () {});
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/block_body_data_test.dart b/packages/corbado_api_client/lib/frontendapi/test/block_body_data_test.dart
new file mode 100644
index 0000000..fd068d6
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/block_body_data_test.dart
@@ -0,0 +1,141 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for BlockBodyData
+void main() {
+  final instance = BlockBodyDataBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(BlockBodyData, () {
+    // String blockType
+    test('to test the property `blockType`', () async {
+      // TODO
+    });
+
+    // String challenge
+    test('to test the property `challenge`', () async {
+      // TODO
+    });
+
+    // String identifierValue
+    test('to test the property `identifierValue`', () async {
+      // TODO
+    });
+
+    // LoginIdentifierType identifierType
+    test('to test the property `identifierType`', () async {
+      // TODO
+    });
+
+    // bool autoSubmit
+    test('to test the property `autoSubmit`', () async {
+      // TODO
+    });
+
+    // PasskeyIconSet passkeyIconSet
+    test('to test the property `passkeyIconSet`', () async {
+      // TODO
+    });
+
+    // String variant
+    test('to test the property `variant`', () async {
+      // TODO
+    });
+
+    // VerificationMethod verificationMethod
+    test('to test the property `verificationMethod`', () async {
+      // TODO
+    });
+
+    // String identifier
+    test('to test the property `identifier`', () async {
+      // TODO
+    });
+
+    // BuiltList<GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner> alternativeVerificationMethods
+    test('to test the property `alternativeVerificationMethods`', () async {
+      // TODO
+    });
+
+    // bool isPostLoginVerification
+    test('to test the property `isPostLoginVerification`', () async {
+      // TODO
+    });
+
+    // String shortSession
+    test('to test the property `shortSession`', () async {
+      // TODO
+    });
+
+    // BuiltList<LoginIdentifierWithError> identifiers
+    test('to test the property `identifiers`', () async {
+      // TODO
+    });
+
+    // SocialData socialData
+    test('to test the property `socialData`', () async {
+      // TODO
+    });
+
+    // bool isPhone
+    test('to test the property `isPhone`', () async {
+      // TODO
+    });
+
+    // bool isPhoneAvailable
+    test('to test the property `isPhoneAvailable`', () async {
+      // TODO
+    });
+
+    // bool isEmailAvailable
+    test('to test the property `isEmailAvailable`', () async {
+      // TODO
+    });
+
+    // bool isUsernameAvailable
+    test('to test the property `isUsernameAvailable`', () async {
+      // TODO
+    });
+
+    // String loginHint
+    test('to test the property `loginHint`', () async {
+      // TODO
+    });
+
+    // int retryNotBefore
+    test('to test the property `retryNotBefore`', () async {
+      // TODO
+    });
+
+    // RequestError error
+    test('to test the property `error`', () async {
+      // TODO
+    });
+
+    // Only given when project environment is dev 1
+    // String longSession
+    test('to test the property `longSession`', () async {
+      // TODO
+    });
+
+    // PasskeyOperation passkeyOperation
+    test('to test the property `passkeyOperation`', () async {
+      // TODO
+    });
+
+    // FullNameWithError fullName
+    test('to test the property `fullName`', () async {
+      // TODO
+    });
+
+    // String conditionalUIChallenge
+    test('to test the property `conditionalUIChallenge`', () async {
+      // TODO
+    });
+
+    // RequestError fieldError
+    test('to test the property `fieldError`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/block_body_test.dart b/packages/corbado_api_client/lib/frontendapi/test/block_body_test.dart
new file mode 100644
index 0000000..5c701db
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/block_body_test.dart
@@ -0,0 +1,40 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for BlockBody
+void main() {
+  final instance = BlockBodyBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(BlockBody, () {
+    // BlockType block
+    test('to test the property `block`', () async {
+      // TODO
+    });
+
+    // AuthType authType
+    test('to test the property `authType`', () async {
+      // TODO
+    });
+
+    // BlockBodyData data
+    test('to test the property `data`', () async {
+      // TODO
+    });
+
+    // BuiltList<BlockBody> alternatives
+    test('to test the property `alternatives`', () async {
+      // TODO
+    });
+
+    // RequestError error
+    test('to test the property `error`', () async {
+      // TODO
+    });
+
+    // ContinueOnOtherDevice continueOnOtherDevice
+    test('to test the property `continueOnOtherDevice`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/block_type_test.dart b/packages/corbado_api_client/lib/frontendapi/test/block_type_test.dart
new file mode 100644
index 0000000..57561bd
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/block_type_test.dart
@@ -0,0 +1,7 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for BlockType
+void main() {
+  group(BlockType, () {});
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/client_capabilities_test.dart b/packages/corbado_api_client/lib/frontendapi/test/client_capabilities_test.dart
new file mode 100644
index 0000000..38217dc
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/client_capabilities_test.dart
@@ -0,0 +1,35 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for ClientCapabilities
+void main() {
+  final instance = ClientCapabilitiesBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(ClientCapabilities, () {
+    // bool conditionalCreate
+    test('to test the property `conditionalCreate`', () async {
+      // TODO
+    });
+
+    // bool conditionalMediation
+    test('to test the property `conditionalMediation`', () async {
+      // TODO
+    });
+
+    // bool hybridTransport
+    test('to test the property `hybridTransport`', () async {
+      // TODO
+    });
+
+    // bool passkeyPlatformAuthenticator
+    test('to test the property `passkeyPlatformAuthenticator`', () async {
+      // TODO
+    });
+
+    // bool userVerifyingPlatformAuthenticator
+    test('to test the property `userVerifyingPlatformAuthenticator`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/client_information_test.dart b/packages/corbado_api_client/lib/frontendapi/test/client_information_test.dart
new file mode 100644
index 0000000..202aba3
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/client_information_test.dart
@@ -0,0 +1,57 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for ClientInformation
+void main() {
+  final instance = ClientInformationBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(ClientInformation, () {
+    // bool bluetoothAvailable
+    test('to test the property `bluetoothAvailable`', () async {
+      // TODO
+    });
+
+    // String clientEnvHandle
+    test('to test the property `clientEnvHandle`', () async {
+      // TODO
+    });
+
+    // String visitorId
+    test('to test the property `visitorId`', () async {
+      // TODO
+    });
+
+    // Deprecated, use isUserVerifyingPlatformAuthenticatorAvailable instead
+    // bool canUsePasskeys
+    test('to test the property `canUsePasskeys`', () async {
+      // TODO
+    });
+
+    // bool isUserVerifyingPlatformAuthenticatorAvailable
+    test('to test the property `isUserVerifyingPlatformAuthenticatorAvailable`',
+        () async {
+      // TODO
+    });
+
+    // bool isConditionalMediationAvailable
+    test('to test the property `isConditionalMediationAvailable`', () async {
+      // TODO
+    });
+
+    // ClientCapabilities clientCapabilities
+    test('to test the property `clientCapabilities`', () async {
+      // TODO
+    });
+
+    // JavaScriptHighEntropy javaScriptHighEntropy
+    test('to test the property `javaScriptHighEntropy`', () async {
+      // TODO
+    });
+
+    // bool isNative
+    test('to test the property `isNative`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/configs_api_test.dart b/packages/corbado_api_client/lib/frontendapi/test/configs_api_test.dart
new file mode 100644
index 0000000..f97b40a
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/configs_api_test.dart
@@ -0,0 +1,23 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+/// tests for ConfigsApi
+void main() {
+  final instance = CorbadoFrontendApiClient().getConfigsApi();
+
+  group(ConfigsApi, () {
+    // tbd
+    //
+    //Future<SessionConfigRsp> getSessionConfig() async
+    test('test getSessionConfig', () async {
+      // TODO
+    });
+
+    // Gets configs needed by the UserDetails component
+    //
+    //Future<UserDetailsConfigRsp> getUserDetailsConfig() async
+    test('test getUserDetailsConfig', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/connect_append_finish_req_test.dart b/packages/corbado_api_client/lib/frontendapi/test/connect_append_finish_req_test.dart
new file mode 100644
index 0000000..4564cd2
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/connect_append_finish_req_test.dart
@@ -0,0 +1,15 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for ConnectAppendFinishReq
+void main() {
+  final instance = ConnectAppendFinishReqBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(ConnectAppendFinishReq, () {
+    // String attestationResponse
+    test('to test the property `attestationResponse`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/connect_append_finish_rsp_test.dart b/packages/corbado_api_client/lib/frontendapi/test/connect_append_finish_rsp_test.dart
new file mode 100644
index 0000000..4c6c615
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/connect_append_finish_rsp_test.dart
@@ -0,0 +1,15 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for ConnectAppendFinishRsp
+void main() {
+  final instance = ConnectAppendFinishRspBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(ConnectAppendFinishRsp, () {
+    // PasskeyOperation passkeyOperation
+    test('to test the property `passkeyOperation`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/connect_append_init_req_test.dart b/packages/corbado_api_client/lib/frontendapi/test/connect_append_init_req_test.dart
new file mode 100644
index 0000000..4b64bb3
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/connect_append_init_req_test.dart
@@ -0,0 +1,20 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for ConnectAppendInitReq
+void main() {
+  final instance = ConnectAppendInitReqBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(ConnectAppendInitReq, () {
+    // ClientInformation clientInformation
+    test('to test the property `clientInformation`', () async {
+      // TODO
+    });
+
+    // BuiltMap<String, String> flags
+    test('to test the property `flags`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/connect_append_init_rsp_test.dart b/packages/corbado_api_client/lib/frontendapi/test/connect_append_init_rsp_test.dart
new file mode 100644
index 0000000..3605dae
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/connect_append_init_rsp_test.dart
@@ -0,0 +1,40 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for ConnectAppendInitRsp
+void main() {
+  final instance = ConnectAppendInitRspBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(ConnectAppendInitRsp, () {
+    // String processID
+    test('to test the property `processID`', () async {
+      // TODO
+    });
+
+    // int expiresAt
+    test('to test the property `expiresAt`', () async {
+      // TODO
+    });
+
+    // String frontendApiUrl
+    test('to test the property `frontendApiUrl`', () async {
+      // TODO
+    });
+
+    // bool appendAllowed
+    test('to test the property `appendAllowed`', () async {
+      // TODO
+    });
+
+    // BuiltMap<String, String> flags
+    test('to test the property `flags`', () async {
+      // TODO
+    });
+
+    // String newClientEnvHandle
+    test('to test the property `newClientEnvHandle`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/connect_append_start_req_test.dart b/packages/corbado_api_client/lib/frontendapi/test/connect_append_start_req_test.dart
new file mode 100644
index 0000000..50cbd6d
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/connect_append_start_req_test.dart
@@ -0,0 +1,25 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for ConnectAppendStartReq
+void main() {
+  final instance = ConnectAppendStartReqBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(ConnectAppendStartReq, () {
+    // String appendTokenValue
+    test('to test the property `appendTokenValue`', () async {
+      // TODO
+    });
+
+    // int loadedMs
+    test('to test the property `loadedMs`', () async {
+      // TODO
+    });
+
+    // bool forcePasskeyAppend
+    test('to test the property `forcePasskeyAppend`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/connect_append_start_rsp_test.dart b/packages/corbado_api_client/lib/frontendapi/test/connect_append_start_rsp_test.dart
new file mode 100644
index 0000000..99849f1
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/connect_append_start_rsp_test.dart
@@ -0,0 +1,20 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for ConnectAppendStartRsp
+void main() {
+  final instance = ConnectAppendStartRspBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(ConnectAppendStartRsp, () {
+    // String attestationOptions
+    test('to test the property `attestationOptions`', () async {
+      // TODO
+    });
+
+    // String variant
+    test('to test the property `variant`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/connect_event_create_req_test.dart b/packages/corbado_api_client/lib/frontendapi/test/connect_event_create_req_test.dart
new file mode 100644
index 0000000..5cbbabf
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/connect_event_create_req_test.dart
@@ -0,0 +1,15 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for ConnectEventCreateReq
+void main() {
+  final instance = ConnectEventCreateReqBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(ConnectEventCreateReq, () {
+    // PasskeyEventType eventType
+    test('to test the property `eventType`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/connect_login_finish_req_test.dart b/packages/corbado_api_client/lib/frontendapi/test/connect_login_finish_req_test.dart
new file mode 100644
index 0000000..8cd60a1
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/connect_login_finish_req_test.dart
@@ -0,0 +1,20 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for ConnectLoginFinishReq
+void main() {
+  final instance = ConnectLoginFinishReqBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(ConnectLoginFinishReq, () {
+    // bool isConditionalUI
+    test('to test the property `isConditionalUI`', () async {
+      // TODO
+    });
+
+    // String assertionResponse
+    test('to test the property `assertionResponse`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/connect_login_finish_rsp_test.dart b/packages/corbado_api_client/lib/frontendapi/test/connect_login_finish_rsp_test.dart
new file mode 100644
index 0000000..0f8ee54
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/connect_login_finish_rsp_test.dart
@@ -0,0 +1,20 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for ConnectLoginFinishRsp
+void main() {
+  final instance = ConnectLoginFinishRspBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(ConnectLoginFinishRsp, () {
+    // PasskeyOperation passkeyOperation
+    test('to test the property `passkeyOperation`', () async {
+      // TODO
+    });
+
+    // String session
+    test('to test the property `session`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/connect_login_init_req_test.dart b/packages/corbado_api_client/lib/frontendapi/test/connect_login_init_req_test.dart
new file mode 100644
index 0000000..d6da729
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/connect_login_init_req_test.dart
@@ -0,0 +1,20 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for ConnectLoginInitReq
+void main() {
+  final instance = ConnectLoginInitReqBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(ConnectLoginInitReq, () {
+    // ClientInformation clientInformation
+    test('to test the property `clientInformation`', () async {
+      // TODO
+    });
+
+    // BuiltMap<String, String> flags
+    test('to test the property `flags`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/connect_login_init_rsp_test.dart b/packages/corbado_api_client/lib/frontendapi/test/connect_login_init_rsp_test.dart
new file mode 100644
index 0000000..4a351dc
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/connect_login_init_rsp_test.dart
@@ -0,0 +1,45 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for ConnectLoginInitRsp
+void main() {
+  final instance = ConnectLoginInitRspBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(ConnectLoginInitRsp, () {
+    // String token
+    test('to test the property `token`', () async {
+      // TODO
+    });
+
+    // int expiresAt
+    test('to test the property `expiresAt`', () async {
+      // TODO
+    });
+
+    // String frontendApiUrl
+    test('to test the property `frontendApiUrl`', () async {
+      // TODO
+    });
+
+    // bool loginAllowed
+    test('to test the property `loginAllowed`', () async {
+      // TODO
+    });
+
+    // BuiltMap<String, String> flags
+    test('to test the property `flags`', () async {
+      // TODO
+    });
+
+    // String newClientEnvHandle
+    test('to test the property `newClientEnvHandle`', () async {
+      // TODO
+    });
+
+    // String conditionalUIChallenge
+    test('to test the property `conditionalUIChallenge`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/connect_login_start_req_test.dart b/packages/corbado_api_client/lib/frontendapi/test/connect_login_start_req_test.dart
new file mode 100644
index 0000000..a37cbc7
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/connect_login_start_req_test.dart
@@ -0,0 +1,25 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for ConnectLoginStartReq
+void main() {
+  final instance = ConnectLoginStartReqBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(ConnectLoginStartReq, () {
+    // String identifier
+    test('to test the property `identifier`', () async {
+      // TODO
+    });
+
+    // String source_
+    test('to test the property `source_`', () async {
+      // TODO
+    });
+
+    // int loadedMs
+    test('to test the property `loadedMs`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/connect_login_start_rsp_test.dart b/packages/corbado_api_client/lib/frontendapi/test/connect_login_start_rsp_test.dart
new file mode 100644
index 0000000..310e221
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/connect_login_start_rsp_test.dart
@@ -0,0 +1,20 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for ConnectLoginStartRsp
+void main() {
+  final instance = ConnectLoginStartRspBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(ConnectLoginStartRsp, () {
+    // String assertionOptions
+    test('to test the property `assertionOptions`', () async {
+      // TODO
+    });
+
+    // bool isCDA
+    test('to test the property `isCDA`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/connect_manage_delete_req_test.dart b/packages/corbado_api_client/lib/frontendapi/test/connect_manage_delete_req_test.dart
new file mode 100644
index 0000000..03ade84
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/connect_manage_delete_req_test.dart
@@ -0,0 +1,20 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for ConnectManageDeleteReq
+void main() {
+  final instance = ConnectManageDeleteReqBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(ConnectManageDeleteReq, () {
+    // String connectToken
+    test('to test the property `connectToken`', () async {
+      // TODO
+    });
+
+    // String credentialID
+    test('to test the property `credentialID`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/connect_manage_delete_rsp_test.dart b/packages/corbado_api_client/lib/frontendapi/test/connect_manage_delete_rsp_test.dart
new file mode 100644
index 0000000..1b86ea0
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/connect_manage_delete_rsp_test.dart
@@ -0,0 +1,15 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for ConnectManageDeleteRsp
+void main() {
+  final instance = ConnectManageDeleteRspBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(ConnectManageDeleteRsp, () {
+    // String credentialID
+    test('to test the property `credentialID`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/connect_manage_init_req_test.dart b/packages/corbado_api_client/lib/frontendapi/test/connect_manage_init_req_test.dart
new file mode 100644
index 0000000..9cacbd8
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/connect_manage_init_req_test.dart
@@ -0,0 +1,20 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for ConnectManageInitReq
+void main() {
+  final instance = ConnectManageInitReqBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(ConnectManageInitReq, () {
+    // ClientInformation clientInformation
+    test('to test the property `clientInformation`', () async {
+      // TODO
+    });
+
+    // BuiltMap<String, String> flags
+    test('to test the property `flags`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/connect_manage_init_rsp_test.dart b/packages/corbado_api_client/lib/frontendapi/test/connect_manage_init_rsp_test.dart
new file mode 100644
index 0000000..13bbd25
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/connect_manage_init_rsp_test.dart
@@ -0,0 +1,40 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for ConnectManageInitRsp
+void main() {
+  final instance = ConnectManageInitRspBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(ConnectManageInitRsp, () {
+    // String processID
+    test('to test the property `processID`', () async {
+      // TODO
+    });
+
+    // int expiresAt
+    test('to test the property `expiresAt`', () async {
+      // TODO
+    });
+
+    // String frontendApiUrl
+    test('to test the property `frontendApiUrl`', () async {
+      // TODO
+    });
+
+    // bool manageAllowed
+    test('to test the property `manageAllowed`', () async {
+      // TODO
+    });
+
+    // BuiltMap<String, String> flags
+    test('to test the property `flags`', () async {
+      // TODO
+    });
+
+    // String newClientEnvHandle
+    test('to test the property `newClientEnvHandle`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/connect_manage_list_req_test.dart b/packages/corbado_api_client/lib/frontendapi/test/connect_manage_list_req_test.dart
new file mode 100644
index 0000000..9925bb4
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/connect_manage_list_req_test.dart
@@ -0,0 +1,15 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for ConnectManageListReq
+void main() {
+  final instance = ConnectManageListReqBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(ConnectManageListReq, () {
+    // String connectToken
+    test('to test the property `connectToken`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/connect_manage_list_rsp_test.dart b/packages/corbado_api_client/lib/frontendapi/test/connect_manage_list_rsp_test.dart
new file mode 100644
index 0000000..0c35963
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/connect_manage_list_rsp_test.dart
@@ -0,0 +1,15 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for ConnectManageListRsp
+void main() {
+  final instance = ConnectManageListRspBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(ConnectManageListRsp, () {
+    // BuiltList<Passkey> passkeys
+    test('to test the property `passkeys`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/continue_on_other_device_test.dart b/packages/corbado_api_client/lib/frontendapi/test/continue_on_other_device_test.dart
new file mode 100644
index 0000000..be3d3ca
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/continue_on_other_device_test.dart
@@ -0,0 +1,15 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for ContinueOnOtherDevice
+void main() {
+  final instance = ContinueOnOtherDeviceBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(ContinueOnOtherDevice, () {
+    // String reason
+    test('to test the property `reason`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/corbado_connect_api_test.dart b/packages/corbado_api_client/lib/frontendapi/test/corbado_connect_api_test.dart
new file mode 100644
index 0000000..2195a20
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/corbado_connect_api_test.dart
@@ -0,0 +1,79 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+/// tests for CorbadoConnectApi
+void main() {
+  final instance = CorbadoFrontendApiClient().getCorbadoConnectApi();
+
+  group(CorbadoConnectApi, () {
+    // Finishes an initialized connect passkey append process.
+    //
+    //Future<ConnectAppendFinishRsp> connectAppendFinish(ConnectAppendFinishReq connectAppendFinishReq) async
+    test('test connectAppendFinish', () async {
+      // TODO
+    });
+
+    // Initializes a connect process for passkey append.
+    //
+    //Future<ConnectAppendInitRsp> connectAppendInit(ConnectAppendInitReq connectAppendInitReq) async
+    test('test connectAppendInit', () async {
+      // TODO
+    });
+
+    // Starts an initialized connect passkey append process.
+    //
+    //Future<ConnectAppendStartRsp> connectAppendStart(ConnectAppendStartReq connectAppendStartReq) async
+    test('test connectAppendStart', () async {
+      // TODO
+    });
+
+    // Creates a new user generated connect event.
+    //
+    //Future connectEventCreate(ConnectEventCreateReq connectEventCreateReq) async
+    test('test connectEventCreate', () async {
+      // TODO
+    });
+
+    // Finishes an initialized connect login process.
+    //
+    //Future<ConnectLoginFinishRsp> connectLoginFinish(ConnectLoginFinishReq connectLoginFinishReq) async
+    test('test connectLoginFinish', () async {
+      // TODO
+    });
+
+    // Initializes a connect process for login.
+    //
+    //Future<ConnectLoginInitRsp> connectLoginInit(ConnectLoginInitReq connectLoginInitReq) async
+    test('test connectLoginInit', () async {
+      // TODO
+    });
+
+    // Starts an initialized connect login process.
+    //
+    //Future<ConnectLoginStartRsp> connectLoginStart(ConnectLoginStartReq connectLoginStartReq) async
+    test('test connectLoginStart', () async {
+      // TODO
+    });
+
+    // Deletes a passkey for a user identified by a connect token
+    //
+    //Future<ConnectManageDeleteRsp> connectManageDelete(ConnectManageDeleteReq connectManageDeleteReq) async
+    test('test connectManageDelete', () async {
+      // TODO
+    });
+
+    // Initializes a connect process for passkey management.
+    //
+    //Future<ConnectManageInitRsp> connectManageInit(ConnectManageInitReq connectManageInitReq) async
+    test('test connectManageInit', () async {
+      // TODO
+    });
+
+    // Lists all passkeys for a user identifier by a connect token.
+    //
+    //Future<ConnectManageListRsp> connectManageList(ConnectManageListReq connectManageListReq) async
+    test('test connectManageList', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/event_create_req_test.dart b/packages/corbado_api_client/lib/frontendapi/test/event_create_req_test.dart
new file mode 100644
index 0000000..e61e85e
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/event_create_req_test.dart
@@ -0,0 +1,15 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for EventCreateReq
+void main() {
+  final instance = EventCreateReqBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(EventCreateReq, () {
+    // PasskeyEventType eventType
+    test('to test the property `eventType`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/full_name_with_error_test.dart b/packages/corbado_api_client/lib/frontendapi/test/full_name_with_error_test.dart
new file mode 100644
index 0000000..50329ff
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/full_name_with_error_test.dart
@@ -0,0 +1,20 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for FullNameWithError
+void main() {
+  final instance = FullNameWithErrorBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(FullNameWithError, () {
+    // String fullName
+    test('to test the property `fullName`', () async {
+      // TODO
+    });
+
+    // RequestError error
+    test('to test the property `error`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/general_block_completed_test.dart b/packages/corbado_api_client/lib/frontendapi/test/general_block_completed_test.dart
new file mode 100644
index 0000000..e446e2a
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/general_block_completed_test.dart
@@ -0,0 +1,31 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for GeneralBlockCompleted
+void main() {
+  final instance = GeneralBlockCompletedBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(GeneralBlockCompleted, () {
+    // String blockType
+    test('to test the property `blockType`', () async {
+      // TODO
+    });
+
+    // String shortSession
+    test('to test the property `shortSession`', () async {
+      // TODO
+    });
+
+    // Only given when project environment is dev 1
+    // String longSession
+    test('to test the property `longSession`', () async {
+      // TODO
+    });
+
+    // PasskeyOperation passkeyOperation
+    test('to test the property `passkeyOperation`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/general_block_login_init_test.dart b/packages/corbado_api_client/lib/frontendapi/test/general_block_login_init_test.dart
new file mode 100644
index 0000000..46699ee
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/general_block_login_init_test.dart
@@ -0,0 +1,60 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for GeneralBlockLoginInit
+void main() {
+  final instance = GeneralBlockLoginInitBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(GeneralBlockLoginInit, () {
+    // String blockType
+    test('to test the property `blockType`', () async {
+      // TODO
+    });
+
+    // String identifierValue
+    test('to test the property `identifierValue`', () async {
+      // TODO
+    });
+
+    // bool isPhone
+    test('to test the property `isPhone`', () async {
+      // TODO
+    });
+
+    // bool isPhoneAvailable
+    test('to test the property `isPhoneAvailable`', () async {
+      // TODO
+    });
+
+    // bool isEmailAvailable
+    test('to test the property `isEmailAvailable`', () async {
+      // TODO
+    });
+
+    // bool isUsernameAvailable
+    test('to test the property `isUsernameAvailable`', () async {
+      // TODO
+    });
+
+    // SocialData socialData
+    test('to test the property `socialData`', () async {
+      // TODO
+    });
+
+    // String conditionalUIChallenge
+    test('to test the property `conditionalUIChallenge`', () async {
+      // TODO
+    });
+
+    // RequestError fieldError
+    test('to test the property `fieldError`', () async {
+      // TODO
+    });
+
+    // RequestError error
+    test('to test the property `error`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/general_block_passkey_append_test.dart b/packages/corbado_api_client/lib/frontendapi/test/general_block_passkey_append_test.dart
new file mode 100644
index 0000000..021b7da
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/general_block_passkey_append_test.dart
@@ -0,0 +1,45 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for GeneralBlockPasskeyAppend
+void main() {
+  final instance = GeneralBlockPasskeyAppendBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(GeneralBlockPasskeyAppend, () {
+    // String blockType
+    test('to test the property `blockType`', () async {
+      // TODO
+    });
+
+    // String challenge
+    test('to test the property `challenge`', () async {
+      // TODO
+    });
+
+    // String identifierValue
+    test('to test the property `identifierValue`', () async {
+      // TODO
+    });
+
+    // LoginIdentifierType identifierType
+    test('to test the property `identifierType`', () async {
+      // TODO
+    });
+
+    // bool autoSubmit
+    test('to test the property `autoSubmit`', () async {
+      // TODO
+    });
+
+    // PasskeyIconSet passkeyIconSet
+    test('to test the property `passkeyIconSet`', () async {
+      // TODO
+    });
+
+    // String variant
+    test('to test the property `variant`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/general_block_passkey_appended_test.dart b/packages/corbado_api_client/lib/frontendapi/test/general_block_passkey_appended_test.dart
new file mode 100644
index 0000000..55d11a7
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/general_block_passkey_appended_test.dart
@@ -0,0 +1,15 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for GeneralBlockPasskeyAppended
+void main() {
+  final instance = GeneralBlockPasskeyAppendedBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(GeneralBlockPasskeyAppended, () {
+    // String blockType
+    test('to test the property `blockType`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/general_block_passkey_verify_test.dart b/packages/corbado_api_client/lib/frontendapi/test/general_block_passkey_verify_test.dart
new file mode 100644
index 0000000..247fd7a
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/general_block_passkey_verify_test.dart
@@ -0,0 +1,30 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for GeneralBlockPasskeyVerify
+void main() {
+  final instance = GeneralBlockPasskeyVerifyBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(GeneralBlockPasskeyVerify, () {
+    // String blockType
+    test('to test the property `blockType`', () async {
+      // TODO
+    });
+
+    // String challenge
+    test('to test the property `challenge`', () async {
+      // TODO
+    });
+
+    // String identifierValue
+    test('to test the property `identifierValue`', () async {
+      // TODO
+    });
+
+    // String loginHint
+    test('to test the property `loginHint`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/general_block_post_signup_email_verify_test.dart b/packages/corbado_api_client/lib/frontendapi/test/general_block_post_signup_email_verify_test.dart
new file mode 100644
index 0000000..1b3302b
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/general_block_post_signup_email_verify_test.dart
@@ -0,0 +1,20 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for GeneralBlockPostSignupEmailVerify
+void main() {
+  final instance = GeneralBlockPostSignupEmailVerifyBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(GeneralBlockPostSignupEmailVerify, () {
+    // String blockType
+    test('to test the property `blockType`', () async {
+      // TODO
+    });
+
+    // RequestError error
+    test('to test the property `error`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/general_block_signup_init_test.dart b/packages/corbado_api_client/lib/frontendapi/test/general_block_signup_init_test.dart
new file mode 100644
index 0000000..aefda5d
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/general_block_signup_init_test.dart
@@ -0,0 +1,35 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for GeneralBlockSignupInit
+void main() {
+  final instance = GeneralBlockSignupInitBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(GeneralBlockSignupInit, () {
+    // String blockType
+    test('to test the property `blockType`', () async {
+      // TODO
+    });
+
+    // BuiltList<LoginIdentifierWithError> identifiers
+    test('to test the property `identifiers`', () async {
+      // TODO
+    });
+
+    // FullNameWithError fullName
+    test('to test the property `fullName`', () async {
+      // TODO
+    });
+
+    // SocialData socialData
+    test('to test the property `socialData`', () async {
+      // TODO
+    });
+
+    // RequestError error
+    test('to test the property `error`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/general_block_verify_identifier_alternative_verification_methods_inner_test.dart b/packages/corbado_api_client/lib/frontendapi/test/general_block_verify_identifier_alternative_verification_methods_inner_test.dart
new file mode 100644
index 0000000..bdccf7d
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/general_block_verify_identifier_alternative_verification_methods_inner_test.dart
@@ -0,0 +1,21 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner
+void main() {
+  final instance =
+      GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInnerBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner, () {
+    // VerificationMethod verificationMethod
+    test('to test the property `verificationMethod`', () async {
+      // TODO
+    });
+
+    // String identifier
+    test('to test the property `identifier`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/general_block_verify_identifier_test.dart b/packages/corbado_api_client/lib/frontendapi/test/general_block_verify_identifier_test.dart
new file mode 100644
index 0000000..2ab63fa
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/general_block_verify_identifier_test.dart
@@ -0,0 +1,45 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for GeneralBlockVerifyIdentifier
+void main() {
+  final instance = GeneralBlockVerifyIdentifierBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(GeneralBlockVerifyIdentifier, () {
+    // String blockType
+    test('to test the property `blockType`', () async {
+      // TODO
+    });
+
+    // VerificationMethod verificationMethod
+    test('to test the property `verificationMethod`', () async {
+      // TODO
+    });
+
+    // String identifier
+    test('to test the property `identifier`', () async {
+      // TODO
+    });
+
+    // BuiltList<GeneralBlockVerifyIdentifierAlternativeVerificationMethodsInner> alternativeVerificationMethods
+    test('to test the property `alternativeVerificationMethods`', () async {
+      // TODO
+    });
+
+    // bool isPostLoginVerification
+    test('to test the property `isPostLoginVerification`', () async {
+      // TODO
+    });
+
+    // int retryNotBefore
+    test('to test the property `retryNotBefore`', () async {
+      // TODO
+    });
+
+    // RequestError error
+    test('to test the property `error`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/generic_rsp_test.dart b/packages/corbado_api_client/lib/frontendapi/test/generic_rsp_test.dart
new file mode 100644
index 0000000..4117d8c
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/generic_rsp_test.dart
@@ -0,0 +1,32 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for GenericRsp
+void main() {
+  final instance = GenericRspBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(GenericRsp, () {
+    // HTTP status code of operation
+    // int httpStatusCode
+    test('to test the property `httpStatusCode`', () async {
+      // TODO
+    });
+
+    // String message
+    test('to test the property `message`', () async {
+      // TODO
+    });
+
+    // RequestData requestData
+    test('to test the property `requestData`', () async {
+      // TODO
+    });
+
+    // Runtime in seconds for this request
+    // double runtime
+    test('to test the property `runtime`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/identifier_test.dart b/packages/corbado_api_client/lib/frontendapi/test/identifier_test.dart
new file mode 100644
index 0000000..a11204e
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/identifier_test.dart
@@ -0,0 +1,30 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for Identifier
+void main() {
+  final instance = IdentifierBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(Identifier, () {
+    // String id
+    test('to test the property `id`', () async {
+      // TODO
+    });
+
+    // String value
+    test('to test the property `value`', () async {
+      // TODO
+    });
+
+    // LoginIdentifierType type
+    test('to test the property `type`', () async {
+      // TODO
+    });
+
+    // String status
+    test('to test the property `status`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/identifier_update_req_test.dart b/packages/corbado_api_client/lib/frontendapi/test/identifier_update_req_test.dart
new file mode 100644
index 0000000..fde7c54
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/identifier_update_req_test.dart
@@ -0,0 +1,20 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for IdentifierUpdateReq
+void main() {
+  final instance = IdentifierUpdateReqBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(IdentifierUpdateReq, () {
+    // LoginIdentifierType identifierType
+    test('to test the property `identifierType`', () async {
+      // TODO
+    });
+
+    // String value
+    test('to test the property `value`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/identifier_verify_finish_req_test.dart b/packages/corbado_api_client/lib/frontendapi/test/identifier_verify_finish_req_test.dart
new file mode 100644
index 0000000..01c6307
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/identifier_verify_finish_req_test.dart
@@ -0,0 +1,30 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for IdentifierVerifyFinishReq
+void main() {
+  final instance = IdentifierVerifyFinishReqBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(IdentifierVerifyFinishReq, () {
+    // String code
+    test('to test the property `code`', () async {
+      // TODO
+    });
+
+    // LoginIdentifierType identifierType
+    test('to test the property `identifierType`', () async {
+      // TODO
+    });
+
+    // VerificationMethod verificationType
+    test('to test the property `verificationType`', () async {
+      // TODO
+    });
+
+    // bool isNewDevice
+    test('to test the property `isNewDevice`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/identifier_verify_start_req_test.dart b/packages/corbado_api_client/lib/frontendapi/test/identifier_verify_start_req_test.dart
new file mode 100644
index 0000000..2fd3e6d
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/identifier_verify_start_req_test.dart
@@ -0,0 +1,20 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for IdentifierVerifyStartReq
+void main() {
+  final instance = IdentifierVerifyStartReqBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(IdentifierVerifyStartReq, () {
+    // LoginIdentifierType identifierType
+    test('to test the property `identifierType`', () async {
+      // TODO
+    });
+
+    // VerificationMethod verificationType
+    test('to test the property `verificationType`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/java_script_high_entropy_test.dart b/packages/corbado_api_client/lib/frontendapi/test/java_script_high_entropy_test.dart
new file mode 100644
index 0000000..8b13931
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/java_script_high_entropy_test.dart
@@ -0,0 +1,25 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for JavaScriptHighEntropy
+void main() {
+  final instance = JavaScriptHighEntropyBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(JavaScriptHighEntropy, () {
+    // String platform
+    test('to test the property `platform`', () async {
+      // TODO
+    });
+
+    // String platformVersion
+    test('to test the property `platformVersion`', () async {
+      // TODO
+    });
+
+    // bool mobile
+    test('to test the property `mobile`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/login_identifier_config_test.dart b/packages/corbado_api_client/lib/frontendapi/test/login_identifier_config_test.dart
new file mode 100644
index 0000000..75848fe
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/login_identifier_config_test.dart
@@ -0,0 +1,15 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for LoginIdentifierConfig
+void main() {
+  final instance = LoginIdentifierConfigBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(LoginIdentifierConfig, () {
+    // LoginIdentifierType type
+    test('to test the property `type`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/login_identifier_test.dart b/packages/corbado_api_client/lib/frontendapi/test/login_identifier_test.dart
new file mode 100644
index 0000000..bb229a7
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/login_identifier_test.dart
@@ -0,0 +1,20 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for LoginIdentifier
+void main() {
+  final instance = LoginIdentifierBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(LoginIdentifier, () {
+    // LoginIdentifierType type
+    test('to test the property `type`', () async {
+      // TODO
+    });
+
+    // String identifier
+    test('to test the property `identifier`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/login_identifier_type_test.dart b/packages/corbado_api_client/lib/frontendapi/test/login_identifier_type_test.dart
new file mode 100644
index 0000000..710e337
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/login_identifier_type_test.dart
@@ -0,0 +1,7 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for LoginIdentifierType
+void main() {
+  group(LoginIdentifierType, () {});
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/login_identifier_with_error_test.dart b/packages/corbado_api_client/lib/frontendapi/test/login_identifier_with_error_test.dart
new file mode 100644
index 0000000..ed41427
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/login_identifier_with_error_test.dart
@@ -0,0 +1,25 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for LoginIdentifierWithError
+void main() {
+  final instance = LoginIdentifierWithErrorBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(LoginIdentifierWithError, () {
+    // LoginIdentifierType type
+    test('to test the property `type`', () async {
+      // TODO
+    });
+
+    // String identifier
+    test('to test the property `identifier`', () async {
+      // TODO
+    });
+
+    // RequestError error
+    test('to test the property `error`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/login_init_req_test.dart b/packages/corbado_api_client/lib/frontendapi/test/login_init_req_test.dart
new file mode 100644
index 0000000..14c0e10
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/login_init_req_test.dart
@@ -0,0 +1,20 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for LoginInitReq
+void main() {
+  final instance = LoginInitReqBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(LoginInitReq, () {
+    // String identifierValue
+    test('to test the property `identifierValue`', () async {
+      // TODO
+    });
+
+    // bool isPhone
+    test('to test the property `isPhone`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/me_identifier_create_req_test.dart b/packages/corbado_api_client/lib/frontendapi/test/me_identifier_create_req_test.dart
new file mode 100644
index 0000000..3f553da
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/me_identifier_create_req_test.dart
@@ -0,0 +1,20 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for MeIdentifierCreateReq
+void main() {
+  final instance = MeIdentifierCreateReqBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(MeIdentifierCreateReq, () {
+    // LoginIdentifierType identifierType
+    test('to test the property `identifierType`', () async {
+      // TODO
+    });
+
+    // String value
+    test('to test the property `value`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/me_identifier_delete_req_test.dart b/packages/corbado_api_client/lib/frontendapi/test/me_identifier_delete_req_test.dart
new file mode 100644
index 0000000..35229c5
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/me_identifier_delete_req_test.dart
@@ -0,0 +1,15 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for MeIdentifierDeleteReq
+void main() {
+  final instance = MeIdentifierDeleteReqBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(MeIdentifierDeleteReq, () {
+    // String identifierID
+    test('to test the property `identifierID`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/me_identifier_update_req_test.dart b/packages/corbado_api_client/lib/frontendapi/test/me_identifier_update_req_test.dart
new file mode 100644
index 0000000..94de416
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/me_identifier_update_req_test.dart
@@ -0,0 +1,25 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for MeIdentifierUpdateReq
+void main() {
+  final instance = MeIdentifierUpdateReqBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(MeIdentifierUpdateReq, () {
+    // String identifierID
+    test('to test the property `identifierID`', () async {
+      // TODO
+    });
+
+    // LoginIdentifierType identifierType
+    test('to test the property `identifierType`', () async {
+      // TODO
+    });
+
+    // String value
+    test('to test the property `value`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/me_identifier_verify_finish_req_test.dart b/packages/corbado_api_client/lib/frontendapi/test/me_identifier_verify_finish_req_test.dart
new file mode 100644
index 0000000..d22677a
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/me_identifier_verify_finish_req_test.dart
@@ -0,0 +1,20 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for MeIdentifierVerifyFinishReq
+void main() {
+  final instance = MeIdentifierVerifyFinishReqBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(MeIdentifierVerifyFinishReq, () {
+    // String identifierID
+    test('to test the property `identifierID`', () async {
+      // TODO
+    });
+
+    // String code
+    test('to test the property `code`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/me_identifier_verify_start_req_test.dart b/packages/corbado_api_client/lib/frontendapi/test/me_identifier_verify_start_req_test.dart
new file mode 100644
index 0000000..8c81480
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/me_identifier_verify_start_req_test.dart
@@ -0,0 +1,20 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for MeIdentifierVerifyStartReq
+void main() {
+  final instance = MeIdentifierVerifyStartReqBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(MeIdentifierVerifyStartReq, () {
+    // String identifierID
+    test('to test the property `identifierID`', () async {
+      // TODO
+    });
+
+    // ClientInformation clientInformation
+    test('to test the property `clientInformation`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/me_passkey_delete_rsp_test.dart b/packages/corbado_api_client/lib/frontendapi/test/me_passkey_delete_rsp_test.dart
new file mode 100644
index 0000000..4216095
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/me_passkey_delete_rsp_test.dart
@@ -0,0 +1,15 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for MePasskeyDeleteRsp
+void main() {
+  final instance = MePasskeyDeleteRspBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(MePasskeyDeleteRsp, () {
+    // String id
+    test('to test the property `id`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/me_passkey_rsp_test.dart b/packages/corbado_api_client/lib/frontendapi/test/me_passkey_rsp_test.dart
new file mode 100644
index 0000000..fed70d1
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/me_passkey_rsp_test.dart
@@ -0,0 +1,20 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for MePasskeyRsp
+void main() {
+  final instance = MePasskeyRspBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(MePasskeyRsp, () {
+    // BuiltList<Passkey> passkeys
+    test('to test the property `passkeys`', () async {
+      // TODO
+    });
+
+    // Paging paging
+    test('to test the property `paging`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/me_passkeys_append_finish_req_test.dart b/packages/corbado_api_client/lib/frontendapi/test/me_passkeys_append_finish_req_test.dart
new file mode 100644
index 0000000..311ce9c
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/me_passkeys_append_finish_req_test.dart
@@ -0,0 +1,20 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for MePasskeysAppendFinishReq
+void main() {
+  final instance = MePasskeysAppendFinishReqBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(MePasskeysAppendFinishReq, () {
+    // String attestationResponse
+    test('to test the property `attestationResponse`', () async {
+      // TODO
+    });
+
+    // ClientInformation clientInformation
+    test('to test the property `clientInformation`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/me_passkeys_append_start_req_test.dart b/packages/corbado_api_client/lib/frontendapi/test/me_passkeys_append_start_req_test.dart
new file mode 100644
index 0000000..3a74877
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/me_passkeys_append_start_req_test.dart
@@ -0,0 +1,15 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for MePasskeysAppendStartReq
+void main() {
+  final instance = MePasskeysAppendStartReqBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(MePasskeysAppendStartReq, () {
+    // ClientInformation clientInformation
+    test('to test the property `clientInformation`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/me_passkeys_append_start_rsp_test.dart b/packages/corbado_api_client/lib/frontendapi/test/me_passkeys_append_start_rsp_test.dart
new file mode 100644
index 0000000..2a19bff
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/me_passkeys_append_start_rsp_test.dart
@@ -0,0 +1,25 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for MePasskeysAppendStartRsp
+void main() {
+  final instance = MePasskeysAppendStartRspBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(MePasskeysAppendStartRsp, () {
+    // String attestationOptions
+    test('to test the property `attestationOptions`', () async {
+      // TODO
+    });
+
+    // String newClientEnvHandle
+    test('to test the property `newClientEnvHandle`', () async {
+      // TODO
+    });
+
+    // String appendNotAllowedReason
+    test('to test the property `appendNotAllowedReason`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/me_refresh_rsp_test.dart b/packages/corbado_api_client/lib/frontendapi/test/me_refresh_rsp_test.dart
new file mode 100644
index 0000000..365e32c
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/me_refresh_rsp_test.dart
@@ -0,0 +1,15 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for MeRefreshRsp
+void main() {
+  final instance = MeRefreshRspBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(MeRefreshRsp, () {
+    // String shortSession
+    test('to test the property `shortSession`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/me_rsp_test.dart b/packages/corbado_api_client/lib/frontendapi/test/me_rsp_test.dart
new file mode 100644
index 0000000..7dc2bd8
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/me_rsp_test.dart
@@ -0,0 +1,30 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for MeRsp
+void main() {
+  final instance = MeRspBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(MeRsp, () {
+    // String id
+    test('to test the property `id`', () async {
+      // TODO
+    });
+
+    // String fullName
+    test('to test the property `fullName`', () async {
+      // TODO
+    });
+
+    // BuiltList<Identifier> identifiers
+    test('to test the property `identifiers`', () async {
+      // TODO
+    });
+
+    // BuiltList<SocialAccount> socialAccounts
+    test('to test the property `socialAccounts`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/me_update_req_test.dart b/packages/corbado_api_client/lib/frontendapi/test/me_update_req_test.dart
new file mode 100644
index 0000000..cbbe9e2
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/me_update_req_test.dart
@@ -0,0 +1,15 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for MeUpdateReq
+void main() {
+  final instance = MeUpdateReqBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(MeUpdateReq, () {
+    // String fullName
+    test('to test the property `fullName`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/paging_test.dart b/packages/corbado_api_client/lib/frontendapi/test/paging_test.dart
new file mode 100644
index 0000000..f98c450
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/paging_test.dart
@@ -0,0 +1,28 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for Paging
+void main() {
+  final instance = PagingBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(Paging, () {
+    // current page returned in response
+    // int page (default value: 1)
+    test('to test the property `page`', () async {
+      // TODO
+    });
+
+    // total number of pages available
+    // int totalPages
+    test('to test the property `totalPages`', () async {
+      // TODO
+    });
+
+    // total number of items available
+    // int totalItems
+    test('to test the property `totalItems`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/passkey_append_finish_req_test.dart b/packages/corbado_api_client/lib/frontendapi/test/passkey_append_finish_req_test.dart
new file mode 100644
index 0000000..bb0130d
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/passkey_append_finish_req_test.dart
@@ -0,0 +1,15 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for PasskeyAppendFinishReq
+void main() {
+  final instance = PasskeyAppendFinishReqBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(PasskeyAppendFinishReq, () {
+    // String signedChallenge
+    test('to test the property `signedChallenge`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/passkey_append_start_req_test.dart b/packages/corbado_api_client/lib/frontendapi/test/passkey_append_start_req_test.dart
new file mode 100644
index 0000000..22a6254
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/passkey_append_start_req_test.dart
@@ -0,0 +1,15 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for PasskeyAppendStartReq
+void main() {
+  final instance = PasskeyAppendStartReqBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(PasskeyAppendStartReq, () {
+    // ClientInformation clientInformation
+    test('to test the property `clientInformation`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/passkey_event_type_test.dart b/packages/corbado_api_client/lib/frontendapi/test/passkey_event_type_test.dart
new file mode 100644
index 0000000..ff635a5
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/passkey_event_type_test.dart
@@ -0,0 +1,7 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for PasskeyEventType
+void main() {
+  group(PasskeyEventType, () {});
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/passkey_icon_set_test.dart b/packages/corbado_api_client/lib/frontendapi/test/passkey_icon_set_test.dart
new file mode 100644
index 0000000..372bf7b
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/passkey_icon_set_test.dart
@@ -0,0 +1,7 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for PasskeyIconSet
+void main() {
+  group(PasskeyIconSet, () {});
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/passkey_login_finish_req_test.dart b/packages/corbado_api_client/lib/frontendapi/test/passkey_login_finish_req_test.dart
new file mode 100644
index 0000000..a2e0e8d
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/passkey_login_finish_req_test.dart
@@ -0,0 +1,15 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for PasskeyLoginFinishReq
+void main() {
+  final instance = PasskeyLoginFinishReqBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(PasskeyLoginFinishReq, () {
+    // String signedChallenge
+    test('to test the property `signedChallenge`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/passkey_login_start_req_test.dart b/packages/corbado_api_client/lib/frontendapi/test/passkey_login_start_req_test.dart
new file mode 100644
index 0000000..e87d605
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/passkey_login_start_req_test.dart
@@ -0,0 +1,15 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for PasskeyLoginStartReq
+void main() {
+  final instance = PasskeyLoginStartReqBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(PasskeyLoginStartReq, () {
+    // ClientInformation clientInformation
+    test('to test the property `clientInformation`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/passkey_mediation_finish_req_test.dart b/packages/corbado_api_client/lib/frontendapi/test/passkey_mediation_finish_req_test.dart
new file mode 100644
index 0000000..bb2631c
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/passkey_mediation_finish_req_test.dart
@@ -0,0 +1,15 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for PasskeyMediationFinishReq
+void main() {
+  final instance = PasskeyMediationFinishReqBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(PasskeyMediationFinishReq, () {
+    // String signedChallenge
+    test('to test the property `signedChallenge`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/passkey_operation_test.dart b/packages/corbado_api_client/lib/frontendapi/test/passkey_operation_test.dart
new file mode 100644
index 0000000..23e1780
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/passkey_operation_test.dart
@@ -0,0 +1,30 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for PasskeyOperation
+void main() {
+  final instance = PasskeyOperationBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(PasskeyOperation, () {
+    // String operationType
+    test('to test the property `operationType`', () async {
+      // TODO
+    });
+
+    // String identifierValue
+    test('to test the property `identifierValue`', () async {
+      // TODO
+    });
+
+    // LoginIdentifierType identifierType
+    test('to test the property `identifierType`', () async {
+      // TODO
+    });
+
+    // String ceremonyType
+    test('to test the property `ceremonyType`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/passkey_test.dart b/packages/corbado_api_client/lib/frontendapi/test/passkey_test.dart
new file mode 100644
index 0000000..9ad7831
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/passkey_test.dart
@@ -0,0 +1,73 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for Passkey
+void main() {
+  final instance = PasskeyBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(Passkey, () {
+    // String id
+    test('to test the property `id`', () async {
+      // TODO
+    });
+
+    // String credentialID
+    test('to test the property `credentialID`', () async {
+      // TODO
+    });
+
+    // String attestationType
+    test('to test the property `attestationType`', () async {
+      // TODO
+    });
+
+    // BuiltList<String> transport
+    test('to test the property `transport`', () async {
+      // TODO
+    });
+
+    // bool backupEligible
+    test('to test the property `backupEligible`', () async {
+      // TODO
+    });
+
+    // bool backupState
+    test('to test the property `backupState`', () async {
+      // TODO
+    });
+
+    // String authenticatorAAGUID
+    test('to test the property `authenticatorAAGUID`', () async {
+      // TODO
+    });
+
+    // String sourceOS
+    test('to test the property `sourceOS`', () async {
+      // TODO
+    });
+
+    // String sourceBrowser
+    test('to test the property `sourceBrowser`', () async {
+      // TODO
+    });
+
+    // Timestamp of when the passkey was last used in yyyy-MM-dd'T'HH:mm:ss format
+    // String lastUsed
+    test('to test the property `lastUsed`', () async {
+      // TODO
+    });
+
+    // Timestamp of when the entity was created in yyyy-MM-dd'T'HH:mm:ss format
+    // String created
+    test('to test the property `created`', () async {
+      // TODO
+    });
+
+    // Status
+    // String status
+    test('to test the property `status`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/process_common_test.dart b/packages/corbado_api_client/lib/frontendapi/test/process_common_test.dart
new file mode 100644
index 0000000..42a4cec
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/process_common_test.dart
@@ -0,0 +1,25 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for ProcessCommon
+void main() {
+  final instance = ProcessCommonBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(ProcessCommon, () {
+    // String appName
+    test('to test the property `appName`', () async {
+      // TODO
+    });
+
+    // String frontendApiUrl
+    test('to test the property `frontendApiUrl`', () async {
+      // TODO
+    });
+
+    // bool hideBadge
+    test('to test the property `hideBadge`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/process_init_req_test.dart b/packages/corbado_api_client/lib/frontendapi/test/process_init_req_test.dart
new file mode 100644
index 0000000..c7beb37
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/process_init_req_test.dart
@@ -0,0 +1,31 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for ProcessInitReq
+void main() {
+  final instance = ProcessInitReqBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(ProcessInitReq, () {
+    // ClientInformation clientInformation
+    test('to test the property `clientInformation`', () async {
+      // TODO
+    });
+
+    // int passkeyAppendShown
+    test('to test the property `passkeyAppendShown`', () async {
+      // TODO
+    });
+
+    // deprecated
+    // bool optOutOfPasskeyAppendAfterHybrid
+    test('to test the property `optOutOfPasskeyAppendAfterHybrid`', () async {
+      // TODO
+    });
+
+    // BlockType preferredBlock
+    test('to test the property `preferredBlock`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/process_init_rsp_test.dart b/packages/corbado_api_client/lib/frontendapi/test/process_init_rsp_test.dart
new file mode 100644
index 0000000..32d15ad
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/process_init_rsp_test.dart
@@ -0,0 +1,30 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for ProcessInitRsp
+void main() {
+  final instance = ProcessInitRspBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(ProcessInitRsp, () {
+    // String token
+    test('to test the property `token`', () async {
+      // TODO
+    });
+
+    // int expiresAt
+    test('to test the property `expiresAt`', () async {
+      // TODO
+    });
+
+    // ProcessResponse processResponse
+    test('to test the property `processResponse`', () async {
+      // TODO
+    });
+
+    // String newClientEnvHandle
+    test('to test the property `newClientEnvHandle`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/process_response_test.dart b/packages/corbado_api_client/lib/frontendapi/test/process_response_test.dart
new file mode 100644
index 0000000..6631f34
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/process_response_test.dart
@@ -0,0 +1,25 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for ProcessResponse
+void main() {
+  final instance = ProcessResponseBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(ProcessResponse, () {
+    // BlockBody blockBody
+    test('to test the property `blockBody`', () async {
+      // TODO
+    });
+
+    // ProcessCommon common
+    test('to test the property `common`', () async {
+      // TODO
+    });
+
+    // ProcessStaticInfo newProcess
+    test('to test the property `newProcess`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/process_static_info_test.dart b/packages/corbado_api_client/lib/frontendapi/test/process_static_info_test.dart
new file mode 100644
index 0000000..d19f404
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/process_static_info_test.dart
@@ -0,0 +1,20 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for ProcessStaticInfo
+void main() {
+  final instance = ProcessStaticInfoBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(ProcessStaticInfo, () {
+    // String token
+    test('to test the property `token`', () async {
+      // TODO
+    });
+
+    // int expiresAt
+    test('to test the property `expiresAt`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/request_data_test.dart b/packages/corbado_api_client/lib/frontendapi/test/request_data_test.dart
new file mode 100644
index 0000000..65a9080
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/request_data_test.dart
@@ -0,0 +1,22 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for RequestData
+void main() {
+  final instance = RequestDataBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(RequestData, () {
+    // Unique ID of request, you can provide your own while making the request, if not the ID will be randomly generated on server side
+    // String requestID
+    test('to test the property `requestID`', () async {
+      // TODO
+    });
+
+    // Link to dashboard with details about request
+    // String link
+    test('to test the property `link`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/request_error_test.dart b/packages/corbado_api_client/lib/frontendapi/test/request_error_test.dart
new file mode 100644
index 0000000..ffbf543
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/request_error_test.dart
@@ -0,0 +1,20 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for RequestError
+void main() {
+  final instance = RequestErrorBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(RequestError, () {
+    // String code
+    test('to test the property `code`', () async {
+      // TODO
+    });
+
+    // String message
+    test('to test the property `message`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/session_config_rsp_test.dart b/packages/corbado_api_client/lib/frontendapi/test/session_config_rsp_test.dart
new file mode 100644
index 0000000..ddc550e
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/session_config_rsp_test.dart
@@ -0,0 +1,25 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for SessionConfigRsp
+void main() {
+  final instance = SessionConfigRspBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(SessionConfigRsp, () {
+    // bool useSessionManagement
+    test('to test the property `useSessionManagement`', () async {
+      // TODO
+    });
+
+    // ShortSessionCookieConfig shortSessionCookieConfig
+    test('to test the property `shortSessionCookieConfig`', () async {
+      // TODO
+    });
+
+    // String frontendApiUrl
+    test('to test the property `frontendApiUrl`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/short_session_cookie_config_test.dart b/packages/corbado_api_client/lib/frontendapi/test/short_session_cookie_config_test.dart
new file mode 100644
index 0000000..826ee5b
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/short_session_cookie_config_test.dart
@@ -0,0 +1,35 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for ShortSessionCookieConfig
+void main() {
+  final instance = ShortSessionCookieConfigBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(ShortSessionCookieConfig, () {
+    // String domain
+    test('to test the property `domain`', () async {
+      // TODO
+    });
+
+    // bool secure
+    test('to test the property `secure`', () async {
+      // TODO
+    });
+
+    // String sameSite
+    test('to test the property `sameSite`', () async {
+      // TODO
+    });
+
+    // String path
+    test('to test the property `path`', () async {
+      // TODO
+    });
+
+    // int lifetimeSeconds
+    test('to test the property `lifetimeSeconds`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/signup_init_req_test.dart b/packages/corbado_api_client/lib/frontendapi/test/signup_init_req_test.dart
new file mode 100644
index 0000000..98d5fbd
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/signup_init_req_test.dart
@@ -0,0 +1,20 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for SignupInitReq
+void main() {
+  final instance = SignupInitReqBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(SignupInitReq, () {
+    // BuiltList<LoginIdentifier> identifiers
+    test('to test the property `identifiers`', () async {
+      // TODO
+    });
+
+    // String fullName
+    test('to test the property `fullName`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/social_account_test.dart b/packages/corbado_api_client/lib/frontendapi/test/social_account_test.dart
new file mode 100644
index 0000000..90e0712
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/social_account_test.dart
@@ -0,0 +1,30 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for SocialAccount
+void main() {
+  final instance = SocialAccountBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(SocialAccount, () {
+    // SocialProviderType providerType
+    test('to test the property `providerType`', () async {
+      // TODO
+    });
+
+    // String identifierValue
+    test('to test the property `identifierValue`', () async {
+      // TODO
+    });
+
+    // String avatarUrl
+    test('to test the property `avatarUrl`', () async {
+      // TODO
+    });
+
+    // String fullName
+    test('to test the property `fullName`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/social_data_test.dart b/packages/corbado_api_client/lib/frontendapi/test/social_data_test.dart
new file mode 100644
index 0000000..cbbb6ac
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/social_data_test.dart
@@ -0,0 +1,30 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for SocialData
+void main() {
+  final instance = SocialDataBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(SocialData, () {
+    // BuiltList<SocialProviderType> providers
+    test('to test the property `providers`', () async {
+      // TODO
+    });
+
+    // String status
+    test('to test the property `status`', () async {
+      // TODO
+    });
+
+    // String oauthUrl
+    test('to test the property `oauthUrl`', () async {
+      // TODO
+    });
+
+    // RequestError error
+    test('to test the property `error`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/social_provider_type_test.dart b/packages/corbado_api_client/lib/frontendapi/test/social_provider_type_test.dart
new file mode 100644
index 0000000..9782b1c
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/social_provider_type_test.dart
@@ -0,0 +1,7 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for SocialProviderType
+void main() {
+  group(SocialProviderType, () {});
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/social_verify_start_req_test.dart b/packages/corbado_api_client/lib/frontendapi/test/social_verify_start_req_test.dart
new file mode 100644
index 0000000..ad01617
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/social_verify_start_req_test.dart
@@ -0,0 +1,25 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for SocialVerifyStartReq
+void main() {
+  final instance = SocialVerifyStartReqBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(SocialVerifyStartReq, () {
+    // SocialProviderType providerType
+    test('to test the property `providerType`', () async {
+      // TODO
+    });
+
+    // String redirectUrl
+    test('to test the property `redirectUrl`', () async {
+      // TODO
+    });
+
+    // AuthType authType
+    test('to test the property `authType`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/user_details_config_rsp_test.dart b/packages/corbado_api_client/lib/frontendapi/test/user_details_config_rsp_test.dart
new file mode 100644
index 0000000..93d58ad
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/user_details_config_rsp_test.dart
@@ -0,0 +1,20 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for UserDetailsConfigRsp
+void main() {
+  final instance = UserDetailsConfigRspBuilder();
+  // TODO add properties to the builder and call build()
+
+  group(UserDetailsConfigRsp, () {
+    // bool fullNameRequired
+    test('to test the property `fullNameRequired`', () async {
+      // TODO
+    });
+
+    // BuiltList<LoginIdentifierConfig> identifiers
+    test('to test the property `identifiers`', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/users_api_test.dart b/packages/corbado_api_client/lib/frontendapi/test/users_api_test.dart
new file mode 100644
index 0000000..e2992e5
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/users_api_test.dart
@@ -0,0 +1,107 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+/// tests for UsersApi
+void main() {
+  final instance = CorbadoFrontendApiClient().getUsersApi();
+
+  group(UsersApi, () {
+    // Deletes current user
+    //
+    //Future<GenericRsp> currentUserDelete() async
+    test('test currentUserDelete', () async {
+      // TODO
+    });
+
+    // Gets current user
+    //
+    //Future<MeRsp> currentUserGet() async
+    test('test currentUserGet', () async {
+      // TODO
+    });
+
+    // Creates an identifier
+    //
+    //Future<GenericRsp> currentUserIdentifierCreate(MeIdentifierCreateReq meIdentifierCreateReq) async
+    test('test currentUserIdentifierCreate', () async {
+      // TODO
+    });
+
+    // Deletes an identifier
+    //
+    //Future<GenericRsp> currentUserIdentifierDelete(MeIdentifierDeleteReq meIdentifierDeleteReq) async
+    test('test currentUserIdentifierDelete', () async {
+      // TODO
+    });
+
+    // Modifies an identifier (only permitted for username; identifierID will change)
+    //
+    //Future<GenericRsp> currentUserIdentifierUpdate(MeIdentifierUpdateReq meIdentifierUpdateReq) async
+    test('test currentUserIdentifierUpdate', () async {
+      // TODO
+    });
+
+    // Verifies challenge
+    //
+    //Future<GenericRsp> currentUserIdentifierVerifyFinish(MeIdentifierVerifyFinishReq meIdentifierVerifyFinishReq) async
+    test('test currentUserIdentifierVerifyFinish', () async {
+      // TODO
+    });
+
+    // Creates challenge (only email otp and phone otp supported for now)
+    //
+    //Future<GenericRsp> currentUserIdentifierVerifyStart(MeIdentifierVerifyStartReq meIdentifierVerifyStartReq) async
+    test('test currentUserIdentifierVerifyStart', () async {
+      // TODO
+    });
+
+    // Finishes passkey append for current user
+    //
+    //Future currentUserPasskeyAppendFinish(MePasskeysAppendFinishReq mePasskeysAppendFinishReq) async
+    test('test currentUserPasskeyAppendFinish', () async {
+      // TODO
+    });
+
+    // Starts passkey append for current user
+    //
+    //Future<MePasskeysAppendStartRsp> currentUserPasskeyAppendStart(MePasskeysAppendStartReq mePasskeysAppendStartReq) async
+    test('test currentUserPasskeyAppendStart', () async {
+      // TODO
+    });
+
+    // Delete current user's passkeys
+    //
+    //Future<MePasskeyDeleteRsp> currentUserPasskeyDelete(String credentialID) async
+    test('test currentUserPasskeyDelete', () async {
+      // TODO
+    });
+
+    // Gets current user's passkeys
+    //
+    //Future<MePasskeyRsp> currentUserPasskeyGet() async
+    test('test currentUserPasskeyGet', () async {
+      // TODO
+    });
+
+    // Performs session logout
+    //
+    //Future currentUserSessionLogout() async
+    test('test currentUserSessionLogout', () async {
+      // TODO
+    });
+
+    // Performs session refresh
+    //
+    //Future<MeRefreshRsp> currentUserSessionRefresh() async
+    test('test currentUserSessionRefresh', () async {
+      // TODO
+    });
+
+    // Updates current user
+    //
+    //Future<GenericRsp> currentUserUpdate(MeUpdateReq meUpdateReq) async
+    test('test currentUserUpdate', () async {
+      // TODO
+    });
+  });
+}
diff --git a/packages/corbado_api_client/lib/frontendapi/test/verification_method_test.dart b/packages/corbado_api_client/lib/frontendapi/test/verification_method_test.dart
new file mode 100644
index 0000000..42f0819
--- /dev/null
+++ b/packages/corbado_api_client/lib/frontendapi/test/verification_method_test.dart
@@ -0,0 +1,7 @@
+import 'package:test/test.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+// tests for VerificationMethod
+void main() {
+  group(VerificationMethod, () {});
+}
diff --git a/packages/corbado_api_client/lib/openapi/common.yml b/packages/corbado_api_client/lib/openapi/common.yml
index c7524c7..c1852e0 100644
--- a/packages/corbado_api_client/lib/openapi/common.yml
+++ b/packages/corbado_api_client/lib/openapi/common.yml
@@ -89,7 +89,8 @@ components:
         filterEmail:
           summary: Filter for one email address
           value:
-            - name:eq:mail@exammple.com
+            - identifierType:eq:email
+            - identifierValue:eq:mail@example.com
         filterTimepoint:
           summary: timePoint after 20/07/2021
           value:
@@ -184,6 +185,8 @@ components:
         - status
         - emails
         - phoneNumbers
+        - usernames
+        - socialAccounts
       properties:
         ID:
           $ref: '#/components/schemas/userID'
@@ -205,6 +208,15 @@ components:
           type: array
           items:
             $ref: '#/components/schemas/userPhoneNumber'
+        usernames:
+          type: array
+          items:
+            $ref: '#/components/schemas/userUsername'
+        socialAccounts:
+          type: array
+          items:
+            $ref: '#/components/schemas/userSocialAccount'
+
 
     userEmail:
       type: object
@@ -227,6 +239,24 @@ components:
         status:
           $ref: '#/components/schemas/status'
 
+    userSocialAccount:
+      type: object
+      description: User's social account
+      required:
+        - providerType
+        - identifierValue
+        - avatarUrl
+        - fullName
+      properties:
+        providerType:
+          $ref: '#/components/schemas/socialProviderType'
+        identifierValue:
+          type: string
+        avatarUrl:
+          type: string
+        fullName:
+          type: string
+
     userPhoneNumber:
       type: object
       description: User's phone number
@@ -248,6 +278,47 @@ components:
         status:
           $ref: '#/components/schemas/status'
 
+    userUsername:
+      type: object
+      description: User's username
+      required:
+        - ID
+        - username
+        - created
+        - updated
+        - status
+      properties:
+        ID:
+          $ref: '#/components/schemas/ID'
+        username:
+          type: string
+        created:
+          $ref: '#/components/schemas/created'
+        updated:
+          $ref: '#/components/schemas/updated'
+        status:
+          $ref: '#/components/schemas/status'
+
+    highEntropyValues:
+      description: High entropy values from browser
+      type: object
+      required:
+        - platform
+        - platformVersion
+        - mobile
+      properties:
+        platform:
+          description: Platform
+          type: string
+          example: 'macOS'
+        platformVersion:
+          description: Platform version
+          type: string
+          example: '14.1.2'
+        mobile:
+          description: Mobile
+          type: boolean
+
     ID:
       description: generic ID
       type: string
@@ -303,10 +374,25 @@ components:
       type: string
 
     loginIdentifierType:
-      description: Login Identifier type
+      description: Login Identifier type (deprecated)
       type: string
       enum: [ 'email', 'phone_number', 'custom' ]
 
+    identifierType:
+      description: Login Identifier type
+      type: string
+      enum: [ 'email', 'phone', 'username' ]
+
+    appType:
+      description: Application type
+      type: string
+      enum: [ 'empty', 'web', 'native' ]
+
+    sessionManagement:
+      description: What session management should be used
+      type: string
+      enum: [ 'SessionManagementCorbado', 'SessionManagementOwn' ]
+
     requestData:
       description: Data about the request itself, can be used for debugging
       type: object
@@ -321,6 +407,27 @@ components:
           type: string
           example: 'https://my.corbado.com/requests/req-xxxxxxxxxxxxxxxxxxx'
 
+    loginIdentifierConfig:
+      type: object
+      required:
+        - type
+        - enforceVerification
+        - useAsLoginIdentifier
+      properties:
+        type:
+          $ref: '#/components/schemas/identifierType'
+        enforceVerification:
+          type: string
+          enum: [ none, signup, at_first_login ]
+        useAsLoginIdentifier:
+          type: boolean
+        metadata:
+          type: object
+
+    socialProviderType:
+      type: string
+      enum: [ 'google', 'microsoft', 'github' ]
+
     # this is necessary so that code generator doesn't ignore "unused" types
     allTypes:
       type: object
@@ -365,6 +472,18 @@ components:
           $ref: '#/components/schemas/loginIdentifierType'
         p20:
           $ref: '#/components/schemas/emailCodeID'
+        p21:
+          $ref: '#/components/schemas/appType'
+        p22:
+          $ref: '#/components/schemas/sessionManagement'
+        p23:
+          $ref: '#/components/schemas/highEntropyValues'
+        p24:
+          $ref: '#/components/schemas/loginIdentifierConfig'
+        p25:
+          $ref: '#/components/schemas/socialProviderType'
+        p26:
+          $ref: '#/components/schemas/identifierType'
 
     genericRsp:
       type: object
@@ -398,6 +517,8 @@ components:
           required:
             - error
           properties:
+            data:
+              type: object
             error:
               type: object
               required:
diff --git a/packages/corbado_api_client/lib/openapi/corbado_public_api.yml b/packages/corbado_api_client/lib/openapi/corbado_public_api.yml
index 60b72b1..9b09e06 100644
--- a/packages/corbado_api_client/lib/openapi/corbado_public_api.yml
+++ b/packages/corbado_api_client/lib/openapi/corbado_public_api.yml
@@ -7,7 +7,7 @@ openapi: 3.0.3
 # General                                                         #
 ###################################################################
 info:
-  version: 1.0.0
+  version: 2.0.4
   title: Corbado Frontend API
   description: Overview of all Corbado Frontend API calls to implement passwordless authentication.
   contact:
@@ -19,23 +19,45 @@ servers:
   - url: https://<project ID>.frontendapi.corbado.io
 
 tags:
+  - name: Auth
+    description: All API calls that are related to an authentication process.
+  - name: Configs
+    description: All API calls to manage configurations
   - name: Users
-    description: All API calls to handle users
+    description: All API calls to manage users
+  - name: CorbadoConnect
+    description: All API calls that are related to a connect process
 
-  - name: Projects
-    description: All API calls to handle project
-
-  - name: Assets
-    description: All asset calls
+paths:
+  /v2/session-config:
+    get:
+      description: tbd
+      operationId: GetSessionConfig
+      tags:
+        - Configs
+      responses:
+        '200':
+          description: tbd
+          content:
+            application/json:
+              schema:
+                $ref: '#/components/schemas/sessionConfigRsp'
 
-  - name: Sessions
-    description: All API calls to handle session management
+  /v2/user-details-config:
+    get:
+      description: Gets configs needed by the UserDetails component
+      operationId: GetUserDetailsConfig
+      tags:
+        - Configs
+      responses:
+        '200':
+          description: tbd
+          content:
+            application/json:
+              schema:
+                $ref: '#/components/schemas/userDetailsConfigRsp'
 
-paths:
-  ###################################################################
-  # Paths: Users                                                    #
-  ###################################################################
-  /v1/me:
+  /v2/me:
     get:
       description: Gets current user
       operationId: CurrentUserGet
@@ -43,34 +65,90 @@ paths:
         - Users
       responses:
         '200':
-          description: Provides current user data
+          description: tbd
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/meRsp'
-        default:
-          $ref: '#/components/responses/error'
+    patch:
+      description: Updates current user
+      operationId: CurrentUserUpdate
+      tags:
+        - Users
+      requestBody:
+        required: true
+        content:
+          application/json:
+            schema:
+              $ref: '#/components/schemas/meUpdateReq'
+      responses:
+        '200':
+          $ref: '#/components/responses/200'
+    delete:
+      description: Deletes current user
+      operationId: CurrentUserDelete
+      tags:
+        - Users
+      responses:
+        '200':
+          $ref: '#/components/responses/200'
 
-  /v1/me/passkeys:
+  /v2/me/passkeys:
     get:
       description: Gets current user's passkeys
-      operationId: CurrentUserPassKeyGet
+      operationId: CurrentUserPasskeyGet
+      tags:
+        - Users
+      responses:
+        '200':
+          description: tbd
+          content:
+            application/json:
+              schema:
+                $ref: '#/components/schemas/mePasskeyRsp'
+
+  /v2/me/passkeys/append/start:
+    post:
+      description: Starts passkey append for current user
+      operationId: CurrentUserPasskeyAppendStart
       tags:
         - Users
+      requestBody:
+        required: true
+        content:
+          application/json:
+            schema:
+              $ref: '#/components/schemas/mePasskeysAppendStartReq'
       responses:
         '200':
-          description: Provides current user data
+          description: tbd
           content:
             application/json:
               schema:
-                $ref: '#/components/schemas/mePassKeyRsp'
-        default:
-          $ref: '#/components/responses/error'
+                $ref: '#/components/schemas/mePasskeysAppendStartRsp'
+
+  /v2/me/passkeys/append/finish:
+    post:
+      description: Finishes passkey append for current user
+      operationId: CurrentUserPasskeyAppendFinish
+      tags:
+        - Users
+      requestBody:
+        required: true
+        content:
+          application/json:
+            schema:
+              $ref: '#/components/schemas/mePasskeysAppendFinishReq'
+      responses:
+        '200':
+          description: tbd
 
-  /v1/me/passkeys/{credentialID}:
+  /v2/me/passkeys/{credentialID}:
     delete:
       description: Delete current user's passkeys
-      operationId: CurrentUserPassKeyDelete
+      operationId: CurrentUserPasskeyDelete
+      tags:
+        - Users
       parameters:
         - in: path
           required: true
@@ -79,18 +157,42 @@ paths:
             type: string
           description: 'Credential ID from passkeys'
           example: 'cre-abc123'
+      responses:
+        '200':
+          description: tbs
+          content:
+            application/json:
+              schema:
+                $ref: '#/components/schemas/mePasskeyDeleteRsp'
+
+  /v2/me/refresh:
+    post:
+      description: Performs session refresh
+      operationId: CurrentUserSessionRefresh
       tags:
         - Users
       responses:
         '200':
-          $ref: '#/components/responses/200'
-        default:
-          $ref: '#/components/responses/error'
+          description: tbd
+          content:
+            application/json:
+              schema:
+                $ref: '#/components/schemas/meRefreshRsp'
+
+  /v2/me/logout:
+    post:
+      description: Performs session logout
+      operationId: CurrentUserSessionLogout
+      tags:
+        - Users
+      responses:
+        '204':
+          description: tbd
 
-  /v1/users/authmethods:
+  /v2/me/identifier:
     post:
-      description: Lists user's available authentication methods
-      operationId: AuthMethodsList
+      description: Creates an identifier
+      operationId: CurrentUserIdentifierCreate
       tags:
         - Users
       requestBody:
@@ -98,25 +200,13 @@ paths:
         content:
           application/json:
             schema:
-              $ref: '#/components/schemas/authMethodsListReq'
+              $ref: '#/components/schemas/meIdentifierCreateReq'
       responses:
         '200':
-          description: Authentication methods retrieved
-          content:
-            application/json:
-              schema:
-                $ref: '#/components/schemas/authMethodsListRsp'
-        default:
-          $ref: '#/components/responses/error'
-
-  ################
-  ### PassKeys ###
-  ################
-
-  /v1/users/passkey/login/start:
-    post:
-      description: Performs passkey login start
-      operationId: PassKeyLoginStart
+          $ref: '#/components/responses/200'
+    delete:
+      description: Deletes an identifier
+      operationId: CurrentUserIdentifierDelete
       tags:
         - Users
       requestBody:
@@ -124,21 +214,29 @@ paths:
         content:
           application/json:
             schema:
-              $ref: '#/components/schemas/passKeyLoginStartReq'
+              $ref: '#/components/schemas/meIdentifierDeleteReq'
       responses:
         '200':
-          description: Provides challenge for perform PassKey ceremony
-          content:
-            application/json:
-              schema:
-                $ref: '#/components/schemas/passKeyStartRsp'
-        default:
-          $ref: '#/components/responses/error'
+          $ref: '#/components/responses/200'
+    patch:
+      description: Modifies an identifier (only permitted for username; identifierID will change)
+      operationId: CurrentUserIdentifierUpdate
+      tags:
+        - Users
+      requestBody:
+        required: true
+        content:
+          application/json:
+            schema:
+              $ref: '#/components/schemas/meIdentifierUpdateReq'
+      responses:
+        '200':
+          $ref: '#/components/responses/200'
 
-  /v1/users/passkey/login/finish:
+  /v2/me/identifier/verify/start:
     post:
-      description: Performs passkey login finish
-      operationId: PassKeyLoginFinish
+      description: Creates challenge (only email otp and phone otp supported for now)
+      operationId: CurrentUserIdentifierVerifyStart
       tags:
         - Users
       requestBody:
@@ -146,21 +244,15 @@ paths:
         content:
           application/json:
             schema:
-              $ref: '#/components/schemas/passKeyFinishReq'
+              $ref: '#/components/schemas/meIdentifierVerifyStartReq'
       responses:
         '200':
-          description: Provides a session token to initialize your session
-          content:
-            application/json:
-              schema:
-                $ref: '#/components/schemas/passKeyLoginFinishRsp'
-        default:
-          $ref: '#/components/responses/error'
+          $ref: '#/components/responses/200'
 
-  /v1/users/passkey/mediation/start:
+  /v2/me/identifier/verify/finish:
     post:
-      description: Performs passkey mediation start
-      operationId: PassKeyMediationStart
+      description: Verifies challenge
+      operationId: CurrentUserIdentifierVerifyFinish
       tags:
         - Users
       requestBody:
@@ -168,491 +260,572 @@ paths:
         content:
           application/json:
             schema:
-              $ref: '#/components/schemas/passKeyMediationStartReq'
+              $ref: '#/components/schemas/meIdentifierVerifyFinishReq'
       responses:
         '200':
-          description: Provides challenge for perform PassKey ceremony
-          content:
-            application/json:
-              schema:
-                $ref: '#/components/schemas/passKeyMediationStartRsp'
-        default:
-          $ref: '#/components/responses/error'
+          $ref: '#/components/responses/200'
 
-  /v1/users/passkey/register/start:
+  /v2/auth/process/init:
     post:
-      description: Performs passkey register start
-      operationId: PassKeyRegisterStart
+      description: tbd
+      operationId: ProcessInit
       tags:
-        - Users
+        - Auth
       requestBody:
         required: true
         content:
           application/json:
             schema:
-              $ref: '#/components/schemas/passKeyRegisterStartReq'
+              $ref: '#/components/schemas/processInitReq'
+      responses:
+        '200':
+          description: tbd
+          content:
+            application/json:
+              schema:
+                $ref: '#/components/schemas/processInitRsp'
+
+  /v2/auth/process:
+    get:
+      description: tbd
+      operationId: ProcessGet
+      tags:
+        - Auth
+      parameters:
+        - in: query
+          required: false
+          name: preferredBlock
+          schema:
+            $ref: '#/components/schemas/blockType'
       responses:
         '200':
-          description: Provides challenge for perform PassKey ceremony
+          description: tbd
           content:
             application/json:
               schema:
-                $ref: '#/components/schemas/passKeyStartRsp'
-        default:
-          $ref: '#/components/responses/error'
+                $ref: '#/components/schemas/processResponse'
 
-  /v1/users/passkey/register/finish:
+  /v2/auth/process/complete:
     post:
-      description: Performs passkey register finish
-      operationId: PassKeyRegisterFinish
+      description: tbd
+      operationId: ProcessComplete
       tags:
-        - Users
+        - Auth
+      responses:
+        '200':
+          description: tbd
+          content:
+            application/json:
+              schema:
+                $ref: '#/components/schemas/processResponse'
+
+  /v2/auth/process/reset:
+    post:
+      description: tbd
+      operationId: ProcessReset
+      tags:
+        - Auth
+      responses:
+        '200':
+          description: tbd
+          content:
+            application/json:
+              schema:
+                $ref: '#/components/schemas/processResponse'
+
+  /v2/auth/signup/init:
+    post:
+      description: tbd
+      operationId: SignupInit
+      tags:
+        - Auth
       requestBody:
         required: true
         content:
           application/json:
             schema:
-              $ref: '#/components/schemas/passKeyFinishReq'
+              $ref: '#/components/schemas/signupInitReq'
       responses:
         '200':
-          description: Provides a session token to initialize your session
+          description: tbd
           content:
             application/json:
               schema:
-                $ref: '#/components/schemas/passKeyRegisterFinishRsp'
-        default:
-          $ref: '#/components/responses/error'
+                $ref: '#/components/schemas/processResponse'
 
-  /v1/users/passkey/append/start:
+  /v2/auth/login/init:
     post:
-      description: Performs passkey append start
-      operationId: PassKeyAppendStart
+      description: tbd
+      operationId: LoginInit
       tags:
-        - Users
+        - Auth
       requestBody:
         required: true
         content:
           application/json:
             schema:
-              $ref: '#/components/schemas/emptyReq'
+              $ref: '#/components/schemas/loginInitReq'
       responses:
         '200':
-          description: Provides challenge for perform PassKey ceremony
+          description: tbd
           content:
             application/json:
               schema:
-                $ref: '#/components/schemas/passKeyStartRsp'
-        default:
-          $ref: '#/components/responses/error'
+                $ref: '#/components/schemas/processResponse'
 
-  /v1/users/passkey/append/finish:
+  /v2/auth/block/skip:
     post:
-      description: Performs passkey append finish
-      operationId: PassKeyAppendFinish
+      description: tbd
+      operationId: BlockSkip
       tags:
-        - Users
+        - Auth
+      responses:
+        '200':
+          description: tbd
+          content:
+            application/json:
+              schema:
+                $ref: '#/components/schemas/processResponse'
+
+  /v2/auth/passkey/append/start:
+    post:
+      description: tbd
+      operationId: PasskeyAppendStart
+      tags:
+        - Auth
       requestBody:
         required: true
         content:
           application/json:
             schema:
-              $ref: '#/components/schemas/passKeyFinishReq'
+              $ref: '#/components/schemas/passkeyAppendStartReq'
       responses:
         '200':
-          description: Provides a session token to initialize your session
+          description: tbd
           content:
             application/json:
               schema:
-                $ref: '#/components/schemas/passKeyAppendFinishRsp'
-        default:
-          $ref: '#/components/responses/error'
+                $ref: '#/components/schemas/processResponse'
 
-  /v1/users/passkey/associate/start:
+  /v2/auth/passkey/append/finish:
     post:
-      description: Performs passkey associate start
-      operationId: PassKeyAssociateStart
+      description: tbd
+      operationId: PasskeyAppendFinish
       tags:
-        - Users
+        - Auth
       requestBody:
         required: true
         content:
           application/json:
             schema:
-              $ref: '#/components/schemas/passKeyAssociateStartReq'
+              $ref: '#/components/schemas/passkeyAppendFinishReq'
       responses:
         '200':
-          description: Provides challenge for perform PassKey ceremony
+          description: tbd
           content:
             application/json:
               schema:
-                $ref: '#/components/schemas/passKeyStartRsp'
-        default:
-          $ref: '#/components/responses/error'
-
-  ###################
-  ### Email links ###
-  ###################
-  /v1/users/emaillinks/register/start:
+                $ref: '#/components/schemas/processResponse'
+
+  /v2/auth/passkey/login/start:
     post:
-      description: Performs email link register start
-      operationId: EmailLinkRegisterStart
+      description: tbd
+      operationId: PasskeyLoginStart
       tags:
-        - Users
+        - Auth
       requestBody:
         required: true
         content:
           application/json:
             schema:
-              $ref: '#/components/schemas/emailLinkRegisterStartReq'
+              $ref: '#/components/schemas/passkeyLoginStartReq'
       responses:
         '200':
-          description: Successfully started register
+          description: tbd
           content:
             application/json:
               schema:
-                $ref: '#/components/schemas/emailLinkRegisterStartRsp'
-        default:
-          $ref: '#/components/responses/error'
+                $ref: '#/components/schemas/processResponse'
 
-  /v1/users/emaillinks/confirm:
+  /v2/auth/passkey/login/finish:
     post:
-      description: Performs email link register confirm
-      operationId: EmailLinkConfirm
+      description: tbd
+      operationId: PasskeyLoginFinish
       tags:
-        - Users
+        - Auth
       requestBody:
         required: true
         content:
           application/json:
             schema:
-              $ref: '#/components/schemas/emailLinkConfirmReq'
+              $ref: '#/components/schemas/passkeyLoginFinishReq'
       responses:
         '200':
-          description: Successfully confirmed email link
+          description: tbd
           content:
             application/json:
               schema:
-                $ref: '#/components/schemas/emailLinkConfirmRsp'
-        default:
-          $ref: '#/components/responses/error'
+                $ref: '#/components/schemas/processResponse'
 
-  /v1/users/emaillinks/login/start:
+  /v2/auth/passkey/mediation/finish:
     post:
-      description: Performs email link login start
-      operationId: EmailLinkLoginStart
+      description: tbd
+      operationId: PasskeyMediationFinish
       tags:
-        - Users
+        - Auth
       requestBody:
         required: true
         content:
           application/json:
             schema:
-              $ref: '#/components/schemas/emailLinkLoginStartReq'
+              $ref: '#/components/schemas/passkeyMediationFinishReq'
       responses:
         '200':
-          description: Provides a session token to initialize your session
+          description: tbd
           content:
             application/json:
               schema:
-                $ref: '#/components/schemas/emailLinkLoginStartRsp'
-        default:
-          $ref: '#/components/responses/error'
+                $ref: '#/components/schemas/processResponse'
 
-  /v1/users/emaillinks/status:
+  /v2/auth/identifier/verify/start:
     post:
-      description: Performs email link login status check
-      operationId: EmailLinkStatus
+      description: tbd
+      operationId: IdentifierVerifyStart
       tags:
-        - Users
+        - Auth
       requestBody:
         required: true
         content:
           application/json:
             schema:
-              $ref: '#/components/schemas/emailLinkStatusReq'
+              $ref: '#/components/schemas/identifierVerifyStartReq'
       responses:
         '200':
-          description: Provides a session token to initialize your session
+          description: tbd
           content:
             application/json:
               schema:
-                $ref: '#/components/schemas/emailLinkStatusRsp'
-        default:
-          $ref: '#/components/responses/error'
-
-  ###################
-  ### Email OTP   ###
-  ###################
-  /v1/users/emailcodes/register/start:
+                $ref: '#/components/schemas/processResponse'
+
+  /v2/auth/identifier/verify/finish:
     post:
-      description: Performs email OTP register start
-      operationId: EmailCodeRegisterStart
+      description: tbd
+      operationId: IdentifierVerifyFinish
       tags:
-        - Users
+        - Auth
       requestBody:
         required: true
         content:
           application/json:
             schema:
-              $ref: '#/components/schemas/emailCodeRegisterStartReq'
+              $ref: '#/components/schemas/identifierVerifyFinishReq'
+      responses:
+        '200':
+          description: tbd
+          content:
+            application/json:
+              schema:
+                $ref: '#/components/schemas/processResponse'
+
+  /v2/auth/identifier/verify/status:
+    get:
+      description: tbd
+      operationId: IdentifierVerifyStatus
+      tags:
+        - Auth
       responses:
         '200':
-          description: Successfully started register
+          description: tbd
           content:
             application/json:
               schema:
-                $ref: '#/components/schemas/emailCodeRegisterStartRsp'
-        default:
-          $ref: '#/components/responses/error'
+                $ref: '#/components/schemas/processResponse'
 
-  /v1/users/emailcodes/confirm:
+  /v2/auth/identifier/update:
     post:
-      description: Performs email OTP register confirm
-      operationId: EmailCodeConfirm
+      description: tbd
+      operationId: IdentifierUpdate
       tags:
-        - Users
+        - Auth
       requestBody:
         required: true
         content:
           application/json:
             schema:
-              $ref: '#/components/schemas/emailCodeConfirmReq'
+              $ref: '#/components/schemas/identifierUpdateReq'
       responses:
         '200':
-          description: Successfully confirmed email OTP
+          description: tbd
           content:
             application/json:
               schema:
-                $ref: '#/components/schemas/emailCodeConfirmRsp'
-        default:
-          $ref: '#/components/responses/error'
+                $ref: '#/components/schemas/processResponse'
 
-  /v1/users/emailcodes/login/start:
+  /v2/auth/social/verify/start:
     post:
-      description: Performs email OTP login start
-      operationId: EmailCodeLoginStart
+      description: tbd
+      operationId: SocialVerifyStart
       tags:
-        - Users
+        - Auth
       requestBody:
         required: true
         content:
           application/json:
             schema:
-              $ref: '#/components/schemas/emailCodeLoginStartReq'
+              $ref: '#/components/schemas/socialVerifyStartReq'
       responses:
         '200':
-          description: Provides a session token to initialize your session
+          description: tbd
           content:
             application/json:
               schema:
-                $ref: '#/components/schemas/emailCodeLoginStartRsp'
-        default:
-          $ref: '#/components/responses/error'
+                $ref: '#/components/schemas/processResponse'
+
+  /v2/auth/social/verify/callback:
+    get:
+      description: tbd
+      operationId: SocialVerifyCallback
+      tags:
+        - Auth
+      responses:
+        '200':
+          description: tbd
 
-  /v1/users/emailcodes/status:
+  /v2/auth/social/verify/finish:
     post:
-      description: Performs email OTP login status check
-      operationId: EmailCodeStatus
+      description: tbd
+      operationId: SocialVerifyFinish
       tags:
-        - Users
+        - Auth
       requestBody:
         required: true
         content:
           application/json:
             schema:
-              $ref: '#/components/schemas/emailCodeStatusReq'
+              $ref: '#/components/schemas/socialVerifyFinishReq'
       responses:
         '200':
-          description: Provides a session token to initialize your session
+          description: tbd
           content:
             application/json:
               schema:
-                $ref: '#/components/schemas/emailCodeStatusRsp'
-        default:
-          $ref: '#/components/responses/error'
-
-  ###################
-  #### Password  ####
-  ###################
-  /v1/users/password/verify:
+                $ref: '#/components/schemas/processResponse'
+
+  /v2/auth/events:
     post:
-      description: Performs password verify
-      operationId: Password
+      description: Creates a new user generated complete event.
+      operationId: EventCreate
       tags:
-        - Users
+        - Auth
+      requestBody:
+        required: true
+        content:
+          application/json:
+            schema:
+              $ref: '#/components/schemas/eventCreateReq'
+      responses:
+        '204':
+          description: tbd
+
+  /v2/connect/login/init:
+    post:
+      description: Initializes a connect process for login.
+      operationId: ConnectLoginInit
+      tags:
+        - CorbadoConnect
       requestBody:
         required: true
         content:
           application/json:
             schema:
-              $ref: '#/components/schemas/passwordVerifyReq'
+              $ref: '#/components/schemas/connectLoginInitReq'
       responses:
         '200':
-          description: Provides a session token to initialize your session
+          description: Contains information about if and how a passkey login can be started.
           content:
             application/json:
               schema:
-                $ref: '#/components/schemas/passwordVerifyRsp'
-        default:
-          $ref: '#/components/responses/error'
-
-  ############
-  ### MISC ###
-  ############
-  /v1/users/logintoken:
+                $ref: '#/components/schemas/connectLoginInitRsp'
+
+  /v2/connect/login/start:
     post:
-      description: Performs login for given token
-      operationId: LoginToken
+      description: Starts an initialized connect login process.
+      operationId: ConnectLoginStart
       tags:
-        - Users
+        - CorbadoConnect
       requestBody:
         required: true
         content:
           application/json:
             schema:
-              $ref: '#/components/schemas/loginTokenReq'
+              $ref: '#/components/schemas/connectLoginStartReq'
       responses:
         '200':
-          description: Provides a session token to initialize your session
+          description: Contains the challenge for the passkey login.
           content:
             application/json:
               schema:
-                $ref: '#/components/schemas/loginTokenRsp'
-        default:
-          $ref: '#/components/responses/error'
+                $ref: '#/components/schemas/connectLoginStartRsp'
+        '404':
+          description: No user was found for the identifier
 
-  /v1/users/device/passkey:
+  /v2/connect/login/finish:
     post:
-      description: Checks if active passkey credential exists for provided user and device
-      operationId: PassKeyCredentialExists
+      description: Finishes an initialized connect login process.
+      operationId: ConnectLoginFinish
       tags:
-        - Users
+        - CorbadoConnect
       requestBody:
         required: true
         content:
           application/json:
             schema:
-              $ref: '#/components/schemas/passKeyCredentialExistsReq'
+              $ref: '#/components/schemas/connectLoginFinishReq'
       responses:
         '200':
-          description: PassKeys credentials check completed
+          description: Data about the passkey login and the session.
           content:
             application/json:
               schema:
-                $ref: '#/components/schemas/passKeyCredentialExistsRsp'
-        default:
-          $ref: '#/components/responses/error'
+                $ref: '#/components/schemas/connectLoginFinishRsp'
+        '404':
+          description: No credential was found for the identifier
 
-  /v1/projects/projectConfig:
-    get:
-      description: Get project configuration
-      operationId: ProjectConfig
+  /v2/connect/append/init:
+    post:
+      description: Initializes a connect process for passkey append.
+      operationId: ConnectAppendInit
       tags:
-        - Projects
+        - CorbadoConnect
+      requestBody:
+        required: true
+        content:
+          application/json:
+            schema:
+              $ref: '#/components/schemas/connectAppendInitReq'
       responses:
         '200':
-          description: Project Configuration successfully retrieved
+          description: Contains information about if and how a passkey append can be started.
           content:
             application/json:
               schema:
-                $ref: '#/components/schemas/projectConfigRsp'
-        default:
-          $ref: '#/components/responses/error'
+                $ref: '#/components/schemas/connectAppendInitRsp'
 
-  /.well-known/assetlinks.json:
-    get:
-      description: Provides asset links for android devices
-      operationId: AssetLinks
+  /v2/connect/append/start:
+    post:
+      description: Starts an initialized connect passkey append process.
+      operationId: ConnectAppendStart
       tags:
-        - Assets
+        - CorbadoConnect
+      requestBody:
+        required: true
+        content:
+          application/json:
+            schema:
+              $ref: '#/components/schemas/connectAppendStartReq'
       responses:
         '200':
-          description: Provides a list of assets links
+          description: Contains the challenge for the passkey append.
           content:
             application/json:
               schema:
-                $ref: '#/components/schemas/assetLinksRsp'
-        default:
-          $ref: '#/components/responses/error'
+                $ref: '#/components/schemas/connectAppendStartRsp'
 
-  /.well-known/apple-app-site-association:
-    get:
-      description: Provides apple app site association
-      operationId: AppleAppSiteAssociation
+  /v2/connect/append/finish:
+    post:
+      description: Finishes an initialized connect passkey append process.
+      operationId: ConnectAppendFinish
       tags:
-        - Assets
+        - CorbadoConnect
+      requestBody:
+        required: true
+        content:
+          application/json:
+            schema:
+              $ref: '#/components/schemas/connectAppendFinishReq'
       responses:
         '200':
-          description: Provides a list of site association
+          description: Data about the new passkey.
           content:
             application/json:
               schema:
-                $ref: '#/components/schemas/appleAppSiteAssociationRsp'
-        default:
-          $ref: '#/components/responses/error'
-
-  ###############
-  ### Session ###
-  ###############
-  /v1/sessions/logout:
-    delete:
-      description: Performs session logout
-      operationId: SessionLogout
+                $ref: '#/components/schemas/connectAppendFinishRsp'
+
+  /v2/connect/manage/init:
+    post:
+      description: Initializes a connect process for passkey management.
+      operationId: ConnectManageInit
       tags:
-        - Sessions
+        - CorbadoConnect
       requestBody:
         required: true
         content:
           application/json:
             schema:
-              $ref: '#/components/schemas/emptyReq'
+              $ref: '#/components/schemas/connectManageInitReq'
       responses:
         '200':
-          description: Successful performed logout
+          description: Contains information about if and how passkey management can be started.
           content:
             application/json:
               schema:
-                $ref: '#/components/schemas/logoutRsp'
-        default:
-          $ref: '#/components/responses/error'
+                $ref: '#/components/schemas/connectManageInitRsp'
 
-  /v1/sessions/refresh:
-    put:
-      description: Performs session refresh
-      operationId: SessionRefresh
+  /v2/connect/manage/delete:
+    post:
+      description: Deletes a passkey for a user identified by a connect token
+      operationId: ConnectManageDelete
       tags:
-        - Sessions
+        - CorbadoConnect
       requestBody:
         required: true
         content:
           application/json:
             schema:
-              $ref: '#/components/schemas/emptyReq'
+              $ref: '#/components/schemas/connectManageDeleteReq'
       responses:
         '200':
-          description: Provides a session token to initialize your session
+          description: Contains the ID of the deleted passkey.
           content:
             application/json:
               schema:
-                $ref: '#/components/schemas/sessionRefreshRsp'
-        default:
-          $ref: '#/components/responses/error'
+                $ref: '#/components/schemas/connectManageDeleteRsp'
 
-  /.well-known/jwks:
-    get:
-      description: Retrieves well-known JWKS for Project ID
-      operationId: WellKnownJWKSList
+  /v2/connect/manage/list:
+    post:
+      description: Lists all passkeys for a user identifier by a connect token.
+      operationId: ConnectManageList
       tags:
-        - Sessions
+        - CorbadoConnect
+      requestBody:
+        required: true
+        content:
+          application/json:
+            schema:
+              $ref: '#/components/schemas/connectManageListReq'
       responses:
         '200':
-          description: JWKS successfully retrieved
+          description: Contains all passkeys for a user.
           content:
             application/json:
               schema:
-                $ref: '#/components/schemas/wellKnownJWKSListRsp'
-        default:
-          $ref: '#/components/responses/error'
+                $ref: '#/components/schemas/connectManageListRsp'
+
+  /v2/connect/events:
+    post:
+      description: Creates a new user generated connect event.
+      operationId: ConnectEventCreate
+      tags:
+        - CorbadoConnect
+      requestBody:
+        required: true
+        content:
+          application/json:
+            schema:
+              $ref: '#/components/schemas/connectEventCreateReq'
+      responses:
+        '204':
+          description: tbd
 
 components:
   ###################################################################
@@ -672,739 +845,1125 @@ components:
       type: apiKey
 
   schemas:
-    ###################################################################
-    # Schemas: Users                                                  #
-    ###################################################################
-    meRsp:
-      allOf:
-        - $ref: 'common.yml#/components/schemas/genericRsp'
-        - type: object
-          required:
-            - data
-          properties:
-            data:
-              $ref: 'common.yml#/components/schemas/fullUser'
-
-    mePassKeyRsp:
-      allOf:
-        - $ref: 'common.yml#/components/schemas/genericRsp'
-        - type: object
-          required:
-            - data
-          properties:
-            data:
-              $ref: '#/components/schemas/passKeyList'
-
-    passKeyList:
+    processInitReq:
       type: object
+      description: tbd.
       required:
-        - passkeys
+        - clientInformation
       properties:
-        passkeys:
-          type: array
-          items:
-            $ref: '#/components/schemas/passKeyItem'
-        paging:
-          $ref: 'common.yml#/components/schemas/paging'
+        clientInformation:
+          $ref: '#/components/schemas/clientInformation'
+        passkeyAppendShown:
+          type: integer
+          format: int64
+        optOutOfPasskeyAppendAfterHybrid:
+          type: boolean
+          description: deprecated
+        preferredBlock:
+          $ref: '#/components/schemas/blockType'
 
-    passKeyItem:
+    processInitRsp:
       type: object
+      description: tbd.
       required:
-        - id
-        - aaguid
-        - userAgent
-        - attestationType
-        - transport
-        - backupEligible
-        - backupState
-        - status
-        - created
+        - token
+        - expiresAt
+        - processResponse
       properties:
-        id:
+        newClientEnvHandle:
           type: string
-        aaguid:
-          type: string
-        userAgent:
+        token:
           type: string
-        attestationType:
+        expiresAt:
+          type: integer
+        processResponse:
+          $ref: '#/components/schemas/processResponse'
+
+    signupInitReq:
+      type: object
+      description: tbd.
+      required:
+        - identifiers
+      properties:
+        fullName:
           type: string
-        transport:
+        identifiers:
           type: array
           items:
-            type: string
-        backupEligible:
-          type: boolean
-        backupState:
+            $ref: '#/components/schemas/loginIdentifier'
+
+    #    signupInitRsp:
+    #      $ref: '#/components/schemas/blockBody'
+
+    loginInitReq:
+      type: object
+      description: tbd.
+      required:
+        - identifierValue
+        - isPhone
+      properties:
+        identifierValue:
+          type: string
+        isPhone:
           type: boolean
-        status:
+
+
+    #    loginInitRsp:
+    #      $ref: '#/components/schemas/blockBody'
+
+    passkeyAppendStartReq:
+      type: object
+      properties:
+        clientInformation:
+          $ref: '#/components/schemas/clientInformation'
+
+    passkeyAppendFinishReq:
+      type: object
+      description: tbd.
+      required:
+        - signedChallenge
+      properties:
+        signedChallenge:
           type: string
-          enum: [ 'pending', 'active' ]
-          description: "Status"
-        created:
-          $ref: 'common.yml#/components/schemas/created'
 
-    authMethodsListReq:
+    #    passkeyAppendStartRsp:
+    #      $ref: '#/components/schemas/blockBody'
+
+    mePasskeysAppendStartReq:
+      type: object
+      required:
+        - clientInformation
+      properties:
+        clientInformation:
+          $ref: '#/components/schemas/clientInformation'
+
+    mePasskeysAppendStartRsp:
       type: object
       required:
-        - username
+        - attestationOptions
       properties:
-        username:
+        newClientEnvHandle:
+          type: string
+        appendNotAllowedReason:
           type: string
-          description: Users login name
-        requestID:
-          $ref: 'common.yml#/components/schemas/requestID'
+          enum: [ 'passkey_already_exists', 'passkeys_not_supported' ]
+        attestationOptions:
+          type: string
+          example: '{"publicKey":{"challenge":"2m6...0w9/MgW...KE=","rp":{"name":"demo","id":"localhost"},"user":{"name":"example@mail.com","id":"dXN...zk5"},"pubKeyCredParams":[{"type":"public-key","alg":-7},{"type":"public-key","alg":-35},{"type":"public-key","alg":-36},{"type":"public-key","alg":-257},{"type":"public-key","alg":-258},{"type":"public-key","alg":-259},{"type":"public-key","alg":-37},{"type":"public-key","alg":-38},{"type":"public-key","alg":-39},{"type":"public-key","alg":-8}],"authenticatorSelection":{"authenticatorAttachment":"platform","requireResidentKey":false,"userVerification":"required"},"timeout":60000,"attestation":"none"}}'
 
-    authMethodsListRsp:
-      allOf:
-        - $ref: 'common.yml#/components/schemas/genericRsp'
-        - type: object
-          required:
-            - data
-          properties:
-            data:
-              type: object
-              required:
-                - selectedMethods
-                - possibleMethods
-              properties:
-                selectedMethods:
-                  $ref: 'common.yml#/components/schemas/authMethods'
-                possibleMethods:
-                  $ref: 'common.yml#/components/schemas/authMethods'
+    mePasskeysAppendFinishReq:
+      type: object
+      required:
+        - attestationResponse
+        - clientInformation
+      properties:
+        attestationResponse:
+          type: string
+          example: '{"type":"public-key","id":"JM6...J_Q","rawId":"JM6...J_Q","authenticatorAttachment":null,"response":{"clientDataJSON":"eyJ...ZX0","authenticatorData":"SZY...AAQ","signature":"Ni7...YAg","userHandle":"dXN...zk5"},"clientExtensionResults":{}}'
+        clientInformation:
+          $ref: '#/components/schemas/clientInformation'
 
-    ########################
-    ### PassKeys section ###
-    ########################
-    passKeyLoginStartReq:
+    meIdentifierCreateReq:
       type: object
       required:
-        - username
+        - identifierType
+        - value
       properties:
-        username:
+        identifierType:
+          $ref: '#/components/schemas/loginIdentifierType'
+        value:
           type: string
-          description: Users login name
-        requestID:
-          $ref: 'common.yml#/components/schemas/requestID'
 
-    passKeyStartRsp:
-      allOf:
-        - $ref: 'common.yml#/components/schemas/genericRsp'
-        - type: object
-          required:
-            - data
-          properties:
-            data:
-              type: object
-              required:
-                - challenge
-              properties:
-                challenge:
-                  type: string
-                  description: Contains json payload data for start webauthn login challenge
+    meIdentifierDeleteReq:
+      type: object
+      required:
+        - identifierID
+      properties:
+        identifierID:
+          type: string
 
-    passKeyFinishReq:
+    meIdentifierUpdateReq:
       type: object
+      required:
+        - identifierID
+        - identifierType
+        - value
       properties:
-        signedChallenge:
+        identifierID:
           type: string
-        requestID:
-          $ref: 'common.yml#/components/schemas/requestID'
+        identifierType:
+          $ref: '#/components/schemas/loginIdentifierType'
+        value:
+          type: string
+
+    meIdentifierVerifyStartReq:
+      type: object
+      description: tbd.
       required:
-        - signedChallenge
+        - identifierID
+        - clientInformation
+      properties:
+        identifierID:
+          type: string
+        clientInformation:
+          $ref: '#/components/schemas/clientInformation'
 
-    passKeyLoginFinishRsp:
-      allOf:
-        - $ref: 'common.yml#/components/schemas/genericRsp'
-        - type: object
-          required:
-            - data
-          properties:
-            data:
-              allOf:
-                - type: object
-                  properties:
-                    username:
-                      type: string
-                    confirmedCredential:
-                      type: boolean
-                  required:
-                    - username
-                    - confirmedCredential
-                - $ref: '#/components/schemas/authenticationRsp'
-
-    passKeyRegisterFinishRsp:
-      allOf:
-        - $ref: 'common.yml#/components/schemas/genericRsp'
-        - type: object
-          required:
-            - data
-          properties:
-            data:
-              $ref: '#/components/schemas/authenticationRsp'
-
-    passKeyRegisterStartReq:
-      type: object
-      required:
-        - username
-      properties:
-        username:
-          type: string
-          description: Users login name
-        fullName:
+    meIdentifierVerifyFinishReq:
+      type: object
+      required:
+        - identifierID
+        - code
+      properties:
+        identifierID:
           type: string
-          description: Users full name
-        requestID:
-          $ref: 'common.yml#/components/schemas/requestID'
+        code:
+          type: string
+
+    #    passkeyAppendFinishRsp:
+    #      $ref: '#/components/schemas/blockBody'
 
-    passKeyAppendFinishRsp:
-      allOf:
-        - $ref: 'common.yml#/components/schemas/genericRsp'
-        - type: object
-          required:
-            - data
-          properties:
-            data:
-              type: object
-              properties:
-                redirectURL:
-                  type: string
-              required:
-                - redirectURL
+    passkeyLoginStartReq:
+      type: object
+      properties:
+        clientInformation:
+          $ref: '#/components/schemas/clientInformation'
 
+    #    passkeyLoginStartRsp:
+    #      $ref: '#/components/schemas/blockBody'
 
-    passKeyMediationStartReq:
+    passkeyLoginFinishReq:
       type: object
+      description: tbd.
+      required:
+        - signedChallenge
       properties:
-        requestID:
-          $ref: 'common.yml#/components/schemas/requestID'
-        username:
+        signedChallenge:
           type: string
 
-    passKeyMediationStartRsp:
-      allOf:
-        - $ref: 'common.yml#/components/schemas/genericRsp'
-        - type: object
-          required:
-            - data
-          properties:
-            data:
-              type: object
-              required:
-                - challenge
-              properties:
-                challenge:
-                  type: string
-                  description: Contains json payload data for start webauthn mediation challenge
+    passkeyMediationFinishReq:
+      type: object
+      description: tbd.
+      required:
+        - signedChallenge
+      properties:
+        signedChallenge:
+          type: string
+
+    identifierVerifyStartReq:
+      type: object
+      description: tbd.
+      required:
+        - identifierType
+        - verificationType
+      properties:
+        identifierType:
+          $ref: '#/components/schemas/loginIdentifierType'
+        verificationType:
+          $ref: '#/components/schemas/verificationMethod'
+
+    identifierVerifyFinishReq:
+      type: object
+      required:
+        - code
+        - identifierType
+        - verificationType
+        - isNewDevice
+      properties:
+        code:
+          type: string
+        identifierType:
+          $ref: '#/components/schemas/loginIdentifierType'
+        verificationType:
+          $ref: '#/components/schemas/verificationMethod'
+        isNewDevice:
+          type: boolean
 
-    passKeyAssociateStartReq:
+    socialVerifyStartReq:
       type: object
       required:
-        - associationToken
+        - providerType
+        - redirectUrl
+        - authType
       properties:
-        associationToken:
+        providerType:
+          $ref: 'common.yml#/components/schemas/socialProviderType'
+        redirectUrl:
           type: string
-        requestID:
-          $ref: 'common.yml#/components/schemas/requestID'
+        authType:
+          $ref: '#/components/schemas/authType'
+
+    socialVerifyFinishReq:
+      type: object
 
-    ##########################
-    ### Email Link section ###
-    ##########################
-    emailLinkRegisterStartReq:
+    identifierUpdateReq:
       type: object
+      required:
+        - value
+        - identifierType
       properties:
-        username:
+        identifierType:
+          $ref: '#/components/schemas/loginIdentifierType'
+        value:
           type: string
-        email:
+
+    sessionConfigRsp:
+      type: object
+      required:
+        - useSessionManagement
+      properties:
+        useSessionManagement:
+          type: boolean
+        shortSessionCookieConfig:
+          $ref: '#/components/schemas/shortSessionCookieConfig'
+        frontendApiUrl:
           type: string
-        requestID:
-          $ref: 'common.yml#/components/schemas/requestID'
+
+    userDetailsConfigRsp:
+      type: object
       required:
-        - email
+        - fullNameRequired
+        - identifiers
+      properties:
+        fullNameRequired:
+          type: boolean
+        identifiers:
+          type: array
+          items:
+            $ref: '#/components/schemas/loginIdentifierConfig'
 
-    emailLinkRegisterStartRsp:
-      allOf:
-        - $ref: 'common.yml#/components/schemas/genericRsp'
-        - type: object
-          required:
-            - data
-          properties:
-            data:
-              type: object
-              properties:
-                emailLinkID:
-                  type: string
-              required:
-                - emailLinkID
+    mePasskeyRsp:
+      type: object
+      required:
+        - passkeys
+        - paging
+      properties:
+        passkeys:
+          type: array
+          items:
+            $ref: '#/components/schemas/passkey'
+        paging:
+          $ref: 'common.yml#/components/schemas/paging'
 
-    emailLinkConfirmReq:
+    meRefreshRsp:
       type: object
+      required:
+        - shortSession
       properties:
-        emailLinkID:
+        shortSession:
           type: string
-        token:
+
+    mePasskeyDeleteRsp:
+      type: object
+      required:
+        - id
+      properties:
+        id:
           type: string
-        requestID:
-          $ref: 'common.yml#/components/schemas/requestID'
+
+    connectLoginInitReq:
+      type: object
+      required:
+        - clientInformation
+        - flags
+      properties:
+        clientInformation:
+          $ref: '#/components/schemas/clientInformation'
+        flags:
+          type: object
+          additionalProperties:
+            type: string
+
+    connectLoginInitRsp:
+      type: object
       required:
-        - emailLinkID
         - token
+        - expiresAt
+        - frontendApiUrl
+        - loginAllowed
+        - flags
+      properties:
+        token:
+          type: string
+        newClientEnvHandle:
+          type: string
+        expiresAt:
+          type: integer
+        frontendApiUrl:
+          type: string
+        loginAllowed:
+          type: boolean
+        conditionalUIChallenge:
+          type: string
+        flags:
+          type: object
+          additionalProperties:
+            type: string
 
-    emailLinkLoginStartReq:
+    connectLoginStartReq:
       type: object
+      required:
+        - identifier
+        - source
+        - loadedMs
       properties:
-        username:
+        identifier:
           type: string
-        requestID:
-          $ref: 'common.yml#/components/schemas/requestID'
+        source:
+          type: string
+          enum: [ 'one-tap', 'text-field', 'error-soft', 'error-hard' ]
+        loadedMs:
+          type: integer
+          format: int64
+
+    connectLoginStartRsp:
+      type: object
       required:
-        - username
+        - assertionOptions
+        - isCDA
+      properties:
+        assertionOptions:
+          type: string
+        isCDA:
+          type: boolean
 
-    emailLinkLoginStartRsp:
-      allOf:
-        - $ref: 'common.yml#/components/schemas/genericRsp'
-        - type: object
-          required:
-            - data
-          properties:
-            data:
-              type: object
-              properties:
-                emailLinkID:
-                  type: string
-              required:
-                - emailLinkID
+    connectLoginFinishReq:
+      type: object
+      required:
+        - assertionResponse
+        - isConditionalUI
+      properties:
+        isConditionalUI:
+          type: boolean
+        assertionResponse:
+          type: string
 
-    emailLinkStatusReq:
+    connectLoginFinishRsp:
       type: object
+      required:
+        - passkeyOperation
+        - session
       properties:
-        emailLinkID:
+        passkeyOperation:
+          $ref: '#/components/schemas/passkeyOperation'
+        session:
           type: string
-        requestID:
-          $ref: 'common.yml#/components/schemas/requestID'
+
+    connectAppendInitReq:
+      type: object
       required:
-        - emailLinkID
+        - clientInformation
+        - flags
+      properties:
+        clientInformation:
+          $ref: '#/components/schemas/clientInformation'
+        flags:
+          type: object
+          additionalProperties:
+            type: string
 
-    emailLinkStatusRsp:
-      allOf:
-        - $ref: 'common.yml#/components/schemas/genericRsp'
-        - type: object
-          required:
-            - data
-          properties:
-            data:
-              $ref: '#/components/schemas/authenticationRsp'
+    connectAppendInitRsp:
+      type: object
+      required:
+        - processID
+        - expiresAt
+        - frontendApiUrl
+        - appendAllowed
+        - flags
+      properties:
+        processID:
+          type: string
+        newClientEnvHandle:
+          type: string
+        expiresAt:
+          type: integer
+        frontendApiUrl:
+          type: string
+        appendAllowed:
+          type: boolean
+        flags:
+          type: object
+          additionalProperties:
+            type: string
 
-    emailLinkConfirmRsp:
-      allOf:
-        - $ref: 'common.yml#/components/schemas/genericRsp'
-        - type: object
-          required:
-            - data
-          properties:
-            data:
-              allOf:
-                - type: object
-                  properties:
-                    authMethods:
-                      $ref: 'common.yml#/components/schemas/authMethods'
-                  required:
-                    - authMethods
-                - $ref: '#/components/schemas/authenticationRsp'
+    connectAppendStartReq:
+      type: object
+      required:
+        - appendTokenValue
+        - loadedMs
+      properties:
+        appendTokenValue:
+          type: string
+        forcePasskeyAppend:
+          type: boolean
+        loadedMs:
+          type: integer
+          format: int64
 
-    ##########################
-    ### Email OTP section  ###
-    ##########################
-    emailCodeRegisterStartReq:
+    connectAppendStartRsp:
       type: object
+      required:
+        - attestationOptions
+        - variant
       properties:
-        username:
+        attestationOptions:
           type: string
-        email:
+        variant:
           type: string
-        requestID:
-          $ref: 'common.yml#/components/schemas/requestID'
+          enum:
+            - default
+            - after-hybrid
+            - after-error
+
+    connectAppendFinishReq:
+      type: object
       required:
-        - email
+        - attestationResponse
+      properties:
+        attestationResponse:
+          type: string
 
-    emailCodeRegisterStartRsp:
-      allOf:
-        - $ref: 'common.yml#/components/schemas/genericRsp'
-        - type: object
-          required:
-            - data
-          properties:
-            data:
-              type: object
-              properties:
-                emailCodeID:
-                  type: string
-              required:
-                - emailCodeID
+    connectAppendFinishRsp:
+      type: object
+      required:
+        - passkeyOperation
+      properties:
+        passkeyOperation:
+          $ref: '#/components/schemas/passkeyOperation'
 
-    emailCodeConfirmReq:
+    connectManageInitReq:
       type: object
+      required:
+        - clientInformation
+        - flags
       properties:
-        emailCodeID:
+        clientInformation:
+          $ref: '#/components/schemas/clientInformation'
+        flags:
+          type: object
+          additionalProperties:
+            type: string
+
+    connectManageInitRsp:
+      type: object
+      required:
+        - processID
+        - expiresAt
+        - frontendApiUrl
+        - manageAllowed
+        - flags
+      properties:
+        processID:
           type: string
-        code:
+        newClientEnvHandle:
+          type: string
+        expiresAt:
+          type: integer
+        frontendApiUrl:
           type: string
-        requestID:
-          $ref: 'common.yml#/components/schemas/requestID'
+        manageAllowed:
+          type: boolean
+        flags:
+          type: object
+          additionalProperties:
+            type: string
+
+    connectManageDeleteReq:
+      type: object
       required:
-        - emailCodeID
-        - code
+        - connectToken
+        - credentialID
+      properties:
+        connectToken:
+          type: string
+        credentialID:
+          type: string
 
-    emailCodeLoginStartReq:
+    connectManageListReq:
       type: object
+      required:
+        - connectToken
       properties:
-        username:
+        connectToken:
           type: string
-        requestID:
-          $ref: 'common.yml#/components/schemas/requestID'
+
+    connectManageListRsp:
+      type: object
       required:
-        - username
+        - passkeys
+      properties:
+        passkeys:
+          type: array
+          items:
+            $ref: '#/components/schemas/passkey'
 
-    emailCodeLoginStartRsp:
-      allOf:
-        - $ref: 'common.yml#/components/schemas/genericRsp'
-        - type: object
-          required:
-            - data
-          properties:
-            data:
-              type: object
-              properties:
-                emailCodeID:
-                  type: string
-              required:
-                - emailCodeID
+    connectManageDeleteRsp:
+      type: object
+      required:
+        - credentialID
+      properties:
+        credentialID:
+          type: string
 
-    emailCodeStatusReq:
+    connectEventCreateReq:
       type: object
+      required:
+        - eventType
+      properties:
+        eventType:
+          $ref: '#/components/schemas/passkeyEventType'
+
+    passkey:
+      type: object
+      required:
+        - id
+        - credentialID
+        - attestationType
+        - transport
+        - backupEligible
+        - backupState
+        - authenticatorAAGUID
+        - sourceOS
+        - sourceBrowser
+        - lastUsed
+        - created
+        - status
       properties:
-        emailCodeID:
+        id:
+          type: string
+          example: "cre-12345"
+        credentialID:
+          type: string
+        attestationType:
+          type: string
+        transport:
+          type: array
+          items:
+            type: string
+            enum: [ 'usb', 'nfc', 'ble', 'internal', 'hybrid', 'smart-card' ]
+        backupEligible:
+          type: boolean
+        backupState:
+          type: boolean
+        authenticatorAAGUID:
+          type: string
+        sourceOS:
           type: string
-        requestID:
-          $ref: 'common.yml#/components/schemas/requestID'
+        sourceBrowser:
+          type: string
+        lastUsed:
+          type: string
+          description: Timestamp of when the passkey was last used in yyyy-MM-dd'T'HH:mm:ss format
+        created:
+          $ref: 'common.yml#/components/schemas/created'
+        status:
+          type: string
+          enum: [ 'pending', 'active' ]
+          description: "Status"
+
+    processResponse:
+      type: object
+      required:
+        - blockBody
+        - common
+      properties:
+        blockBody:
+          $ref: '#/components/schemas/blockBody'
+        common:
+          $ref: '#/components/schemas/processCommon'
+        newProcess:
+          $ref: '#/components/schemas/processStaticInfo'
+
+    eventCreateReq:
+      type: object
       required:
-        - emailCodeID
+        - eventType
+      properties:
+        eventType:
+          $ref: '#/components/schemas/passkeyEventType'
 
-    emailCodeStatusRsp:
-      allOf:
-        - $ref: 'common.yml#/components/schemas/genericRsp'
-        - type: object
-          required:
-            - data
-          properties:
-            data:
-              $ref: '#/components/schemas/authenticationRsp'
+    processStaticInfo:
+      type: object
+      required:
+        - token
+        - expiresAt
+      properties:
+        token:
+          type: string
+        expiresAt:
+          type: integer
 
-    emailCodeConfirmRsp:
-      allOf:
-        - $ref: 'common.yml#/components/schemas/genericRsp'
-        - type: object
-          required:
-            - data
-          properties:
-            data:
-              allOf:
-                - type: object
-                  properties:
-                    authMethods:
-                      $ref: 'common.yml#/components/schemas/authMethods'
-                  required:
-                    - authMethods
-                - $ref: '#/components/schemas/authenticationRsp'
+    processCommon:
+      type: object
+      required:
+        - appName
+        - frontendApiUrl
+        - hideBadge
+      properties:
+        appName:
+          type: string
+        frontendApiUrl:
+          type: string
+        hideBadge:
+          type: boolean
 
-    passwordVerifyReq:
+    shortSessionCookieConfig:
       type: object
+      required:
+        - domain
+        - secure
+        - sameSite
+        - path
+        - lifetimeSeconds
       properties:
-        username:
+        domain:
           type: string
-        password:
+        secure:
+          type: boolean
+        sameSite:
+          type: string
+          enum: [ 'lax', 'strict', 'none' ]
+        path:
           type: string
-        requestID:
-          $ref: 'common.yml#/components/schemas/requestID'
+        lifetimeSeconds:
+          type: integer
+
+    loginIdentifierConfig:
+      type: object
       required:
-        - username
-        - password
+        - type
+      properties:
+        type:
+          $ref: '#/components/schemas/loginIdentifierType'
 
-    passwordVerifyRsp:
-      allOf:
-        - $ref: 'common.yml#/components/schemas/genericRsp'
-        - type: object
-          required:
-            - data
-          properties:
-            data:
-              $ref: '#/components/schemas/authenticationRsp'
+    blockBody:
+      type: object
+      required:
+        - block
+        - data
+        - authType
+      properties:
+        block:
+          $ref: '#/components/schemas/blockType'
+        authType:
+          $ref: '#/components/schemas/authType'
+        data:
+          type: object
+          discriminator:
+            propertyName: blockType
+          oneOf:
+            - $ref: '#/components/schemas/generalBlockPasskeyAppend'
+            - $ref: '#/components/schemas/generalBlockPasskeyVerify'
+            - $ref: '#/components/schemas/generalBlockVerifyIdentifier'
+            - $ref: '#/components/schemas/generalBlockPasskeyAppended'
+            - $ref: '#/components/schemas/generalBlockCompleted'
+            - $ref: '#/components/schemas/generalBlockSignupInit'
+            - $ref: '#/components/schemas/generalBlockLoginInit'
+            - $ref: '#/components/schemas/generalBlockPostSignupEmailVerify'
+        alternatives:
+          type: array
+          items:
+            $ref: '#/components/schemas/blockBody'
+        error:
+          $ref: '#/components/schemas/requestError'
+        continueOnOtherDevice:
+          $ref: '#/components/schemas/continueOnOtherDevice'
 
+    loginIdentifier:
+      type: object
+      required:
+        - type
+        - identifier
+      properties:
+        type:
+          $ref: '#/components/schemas/loginIdentifierType'
+        identifier:
+          type: string
 
-    loginTokenReq:
+    loginIdentifierWithError:
       type: object
+      required:
+        - type
+        - identifier
       properties:
-        token:
+        type:
+          $ref: '#/components/schemas/loginIdentifierType'
+        identifier:
           type: string
-        requestID:
-          $ref: 'common.yml#/components/schemas/requestID'
+        error:
+          $ref: '#/components/schemas/requestError'
+
+    fullNameWithError:
+      type: object
       required:
-        - token
+        - fullName
+      properties:
+        fullName:
+          type: string
+        error:
+          $ref: '#/components/schemas/requestError'
+
+    loginIdentifierType:
+      type: string
+      enum: [ email, phone, username ]
+
+    passkeyEventType:
+      type: string
+      enum: [ login-explicit-abort, login-error, login-error-untyped, login-one-tap-switch, user-append-after-cross-platform-blacklisted, user-append-after-login-error-blacklisted, append-credential-exists, append-explicit-abort, append-error ]
+
+    blockType:
+      type: string
+      enum: [ signup-init, passkey-append, phone-verify, email-verify, passkey-appended, completed, social-verify, login-init, passkey-verify, conditional-ui-completed, post-signup-email-verify, passkey-append-after-hybrid ]
 
-    loginTokenRsp:
-      allOf:
-        - $ref: 'common.yml#/components/schemas/genericRsp'
-        - type: object
-          required:
-            - data
-          properties:
-            data:
-              $ref: '#/components/schemas/authenticationRsp'
-
-    passKeyCredentialExistsReq:
-      type: object
-      required:
-        - loginIdentifier
-        - loginIdentifierType
-      properties:
-        loginIdentifier:
-          type: string
-        loginIdentifierType:
-          $ref: 'common.yml#/components/schemas/loginIdentifierType'
-        requestID:
-          $ref: 'common.yml#/components/schemas/requestID'
-
-    passKeyCredentialExistsRsp:
-      allOf:
-        - $ref: 'common.yml#/components/schemas/genericRsp'
-        - type: object
-          required:
-            - exists
-          properties:
-            exists:
-              type: boolean
-
-    projectConfigRsp:
-      allOf:
-        - $ref: 'common.yml#/components/schemas/genericRsp'
-        - type: object
-          required:
-            - data
-          properties:
-            data:
-              type: object
-              required:
-                - allowUserRegistration
-                - passkeyAppendInterval
-                - fallbackLanguage
-                - autoDetectLanguage
-                - userFullNameRequired
-                - webComponentDebug
-              properties:
-                allowUserRegistration:
-                  type: boolean
-                passkeyAppendInterval:
-                  type: string
-                fallbackLanguage:
-                  type: string
-                autoDetectLanguage:
-                  type: boolean
-                userFullNameRequired:
-                  type: boolean
-                webComponentDebug:
-                  type: boolean
-
-    assetLinksRsp:
-      type: array
-      items:
-        $ref: '#/components/schemas/assetLink'
-
-    assetLink:
-      type: object
-      required:
-        - relation
-        - target
-      properties:
-        relation:
+    authType:
+      type: string
+      enum: [ signup, login ]
+
+    verificationMethod:
+      type: string
+      enum: [ email-link, email-otp, phone-otp ]
+
+    passkeyIconSet:
+      type: string
+      enum: [ default, apple, android, windows ]
+
+    generalBlockSignupInit:
+      type: object
+      required:
+        - blockType
+        - identifiers
+        - socialProviders
+      properties:
+        blockType:
+          type: string
+        identifiers:
           type: array
           items:
-            type: string
-        target:
-          $ref: '#/components/schemas/assetLinkTarget'
+            $ref: '#/components/schemas/loginIdentifierWithError'
+        fullName:
+          $ref: '#/components/schemas/fullNameWithError'
+        socialData:
+          $ref: '#/components/schemas/socialData'
+        error:
+          $ref: '#/components/schemas/requestError'
 
-    assetLinkTarget:
+    generalBlockLoginInit:
       type: object
       required:
-        - namespace
+        - blockType
+        - identifierValue
+        - isPhone
+        - isPhoneAvailable
+        - isEmailAvailable
+        - isUsernameAvailable
+        - socialData
       properties:
-        namespace:
+        blockType:
           type: string
-        package_name:
+        conditionalUIChallenge:
           type: string
-        site:
+        identifierValue:
           type: string
-        sha256_cert_fingerprints:
-          type: array
-          items:
-            type: string
+        isPhone:
+          type: boolean
+        isPhoneAvailable:
+          type: boolean
+        isEmailAvailable:
+          type: boolean
+        isUsernameAvailable:
+          type: boolean
+        socialData:
+          $ref: '#/components/schemas/socialData'
+        fieldError:
+          $ref: '#/components/schemas/requestError'
+        error:
+          $ref: '#/components/schemas/requestError'
+
+    generalBlockPasskeyAppend:
+      type: object
+      required:
+        - blockType
+        - challenge
+        - identifierValue
+        - identifierType
+        - autoSubmit
+        - passkeyIconSet
+        - variant
+      properties:
+        blockType:
+          type: string
+        challenge:
+          type: string
+        identifierValue:
+          type: string
+        identifierType:
+          $ref: '#/components/schemas/loginIdentifierType'
+        autoSubmit:
+          type: boolean
+        passkeyIconSet:
+          $ref: '#/components/schemas/passkeyIconSet'
+        variant:
+          type: string
+          enum: [ 'default', 'after-hybrid', 'after-error' ]
 
-    appleAppSiteAssociationRsp:
+    generalBlockPasskeyVerify:
       type: object
       required:
-        - applinks
-        - webcredentials
-        - appclips
+        - blockType
+        - challenge
+        - identifierValue
       properties:
-        applinks:
-          type: object
-          required:
-            - details
-          properties:
-            details:
-              type: array
-              items:
-                type: object
-                required:
-                  - appID
-                  - paths
-                properties:
-                  appID:
-                    type: string
-                  paths:
-                    type: array
-                    items:
-                      type: string
-
-        webcredentials:
-          type: object
-          required:
-            - apps
-          properties:
-            apps:
-              type: array
-              items:
-                type: string
+        blockType:
+          type: string
+        challenge:
+          type: string
+        identifierValue:
+          type: string
+        loginHint:
+          type: string
+          enum: [ "cda" ]
 
-        appclips:
-          type: object
-          required:
-            - apps
-          properties:
-            apps:
-              type: array
-              items:
-                type: string
-    wellKnownJWKSListRsp:
+    generalBlockPasskeyAppended:
       type: object
       required:
-        - keys
+        - blockType
       properties:
-        keys:
+        blockType:
+          type: string
+
+    generalBlockCompleted:
+      type: object
+      required:
+        - blockType
+        - shortSession
+      properties:
+        blockType:
+          type: string
+        longSession:
+          type: string
+          description: Only given when project environment is dev
+        shortSession:
+          type: string
+        passkeyOperation:
+          $ref: '#/components/schemas/passkeyOperation'
+
+
+    generalBlockVerifyIdentifier:
+      type: object
+      required:
+        - verificationMethod
+        - identifier
+        - alternativeVerificationMethods
+        - isPostLoginVerification
+        - blockType
+      properties:
+        blockType:
+          type: string
+        verificationMethod:
+          $ref: '#/components/schemas/verificationMethod'
+        identifier:
+          type: string
+        retryNotBefore:
+          type: integer
+          format: int32
+        error:
+          $ref: '#/components/schemas/requestError'
+        alternativeVerificationMethods:
           type: array
           items:
-            $ref: '#/components/schemas/jwk'
+            type: object
+            required:
+              - verificationMethod
+              - identifier
+            properties:
+              verificationMethod:
+                $ref: '#/components/schemas/verificationMethod'
+              identifier:
+                type: string
+        isPostLoginVerification:
+          type: boolean
 
-    # DO NOT MODIFY - see https://www.rfc-editor.org/rfc/rfc7517#section-4
-    jwk:
-      description: JSON Web Key
+    generalBlockPostSignupEmailVerify:
       type: object
       required:
-        - alg
-        - kty
-        - use
-        - 'n'
-        - e
-        - kid
+        - blockType
       properties:
-        alg:
-          description: The specific cryptographic algorithm used with the key
+        blockType:
           type: string
-          example: 'RS256'
-        kty:
-          description: The family of cryptographic algorithms used with the key
+        error:
+          $ref: '#/components/schemas/requestError'
+
+    clientInformation:
+      type: object
+      properties:
+        bluetoothAvailable:
+          type: boolean
+        clientEnvHandle:
+          type: string
+        visitorId:
+          type: string
+        canUsePasskeys:
+          type: boolean
+          description: Deprecated, use isUserVerifyingPlatformAuthenticatorAvailable instead
+        isUserVerifyingPlatformAuthenticatorAvailable:
+          type: boolean
+        isConditionalMediationAvailable:
+          type: boolean
+        clientCapabilities:
+          $ref: '#/components/schemas/clientCapabilities'
+        javaScriptHighEntropy:
+          $ref: '#/components/schemas/javaScriptHighEntropy'
+        isNative:
+          type: boolean
+
+    clientCapabilities:
+      type: object
+      properties:
+        conditionalCreate:
+          type: boolean
+        conditionalMediation:
+          type: boolean
+        hybridTransport:
+          type: boolean
+        passkeyPlatformAuthenticator:
+          type: boolean
+        userVerifyingPlatformAuthenticator:
+          type: boolean
+
+    javaScriptHighEntropy:
+      type: object
+      required:
+        - platform
+        - platformVersion
+        - mobile
+      properties:
+        platform:
           type: string
-          example: 'RSA'
-        use:
-          description: How the key was meant to be used; sig represents the signature
+        platformVersion:
           type: string
-        # 'n' is a reserved key in yaml and must be escaped, otherwise code generation breaks!
-        'n':
-          description: The modulus for the RSA public key
+        mobile:
+          type: boolean
+
+    passkeyOperation:
+      type: object
+      required:
+        - operationType
+        - identifierValue
+        - identifierType
+        - ceremonyType
+      properties:
+        operationType:
           type: string
-        e:
-          description: The exponent for the RSA public key
+          enum: [ 'append', 'verify' ]
+        identifierValue:
           type: string
-        kid:
-          description: The unique identifier for the key
+        identifierType:
+          $ref: '#/components/schemas/loginIdentifierType'
+        ceremonyType:
           type: string
+          enum: [ 'local', 'cda', 'security-key' ]
 
-    sessionRefreshRsp:
+    continueOnOtherDevice:
       type: object
-      allOf:
-        - $ref: 'common.yml#/components/schemas/genericRsp'
-        - $ref: '#/components/schemas/authenticationRsp'
+      required:
+        - reason
+      properties:
+        reason:
+          type: string
+          enum: [ 'email-link-verified', 'process-already-completed' ]
 
-    shortSession:
+    meRsp:
       type: object
       required:
-        - key
-        - value
-        - domain
-        - path
-        - secure
-        - expires
-        - sameSite
+        - id
+        - fullName
+        - identifiers
+        - socialAccounts
       properties:
-        key:
+        id:
           type: string
-        value:
+        fullName:
           type: string
-        domain:
+        identifiers:
+          type: array
+          items:
+            $ref: '#/components/schemas/identifier'
+        socialAccounts:
+          type: array
+          items:
+            $ref: '#/components/schemas/socialAccount'
+
+    meUpdateReq:
+      type: object
+      required:
+        - fullName
+      properties:
+        fullName:
           type: string
-        path:
+
+    identifier:
+      type: object
+      required:
+        - id
+        - value
+        - type
+        - status
+      properties:
+        id:
           type: string
-        secure:
-          type: boolean
-        expires:
+        value:
           type: string
-        sameSite:
+        type:
+          $ref: '#/components/schemas/loginIdentifierType'
+        status:
           type: string
 
-    logoutRsp:
+    socialAccount:
       type: object
-      allOf:
-        - $ref: 'common.yml#/components/schemas/genericRsp'
-        - type: object
-          properties:
-            shortSession:
-              $ref: '#/components/schemas/shortSession'
+      required:
+        - providerType
+        - identifierValue
+        - avatarUrl
+        - fullName
+      properties:
+        providerType:
+          $ref: 'common.yml#/components/schemas/socialProviderType'
+        identifierValue:
+          type: string
+        avatarUrl:
+          type: string
+        fullName:
+          type: string
 
-    emptyReq:
+    socialData:
       type: object
+      required:
+        - providers
+        - status
       properties:
-        requestID:
-          $ref: 'common.yml#/components/schemas/requestID'
+        providers:
+          type: array
+          items:
+            $ref: 'common.yml#/components/schemas/socialProviderType'
+        status:
+          type: string
+          enum: [ 'initial', 'started', 'finished' ]
+        oauthUrl:
+          type: string
+        error:
+          $ref: '#/components/schemas/requestError'
 
-    authenticationRsp:
+    requestError:
       type: object
       required:
-        - redirectURL
-        - authMethods
+        - code
+        - message
       properties:
-        redirectURL:
-          type: string
-        sessionToken:
+        code:
           type: string
-          description: Only given when using session v1
-        longSession:
+        message:
           type: string
-          description: Only given when project environment is dev
-        shortSession:
-          $ref: '#/components/schemas/shortSession'
 
   responses:
-    ###################################################################
-    # Responses: 200                                                  #
-    ###################################################################
     '200':
       description: Operation succeeded
       content:
@@ -1412,16 +1971,6 @@ components:
           schema:
             $ref: 'common.yml#/components/schemas/genericRsp'
 
-    ###################################################################
-    # Responses: Error                                                #
-    ###################################################################
-    error:
-      description: Error
-      content:
-        application/json:
-          schema:
-            $ref: 'common.yml#/components/schemas/errorRsp'
-
 security:
   - bearerAuth: [ ]
   - projectID: [ ]
diff --git a/packages/corbado_api_client/pubspec.yaml b/packages/corbado_api_client/pubspec.yaml
index 2b71fd9..f84e93c 100644
--- a/packages/corbado_api_client/pubspec.yaml
+++ b/packages/corbado_api_client/pubspec.yaml
@@ -1,8 +1,9 @@
-name: corbado_frontend_api_client
+name: corbado_api_clients
 description: Flutter client for the most recent version of the Corbado frontend API.
 homepage: https://docs.corbado.com/overview/welcome
 repository: https://github.com/corbado/flutter-passkeys/tree/main/packages/corbado_api_client
-version: 1.1.0
+version: 1.1.1
+publish_to: none
 
 environment:
   sdk: ">=3.0.0 <4.0.0"
@@ -11,13 +12,11 @@ environment:
 dependencies:
   flutter:
     sdk: flutter
-  openapi_generator_annotations: ^4.10.0
-  http: ^1.1.0
-  intl: '^0.18.0'
-  meta: '^1.1.8'
+  openapi_generator_annotations: ^5.0.2
+  collection: ^1.15.0
 
 dev_dependencies:
-  openapi_generator: ^4.10.0
+  openapi_generator: ^5.0.2
   build_runner: ^2.4.5
   flutter_test:
     sdk: flutter
diff --git a/packages/corbado_auth/CHANGELOG.md b/packages/corbado_auth/CHANGELOG.md
index 360837d..4ea0354 100644
--- a/packages/corbado_auth/CHANGELOG.md
+++ b/packages/corbado_auth/CHANGELOG.md
@@ -1,3 +1,25 @@
+## 3.2.2
+* Bump version of passkeys to 2.7.0
+
+## 3.2.1
+* Fixes Platform.version exception on Web
+
+## 3.2.0
+* Added `X-Corbado-SDK` header to all requests.
+
+## 3.1.0
+* Updates passkeys dependency to 2.5.0
+* Added `getAvailability` api to check for passkey support
+
+## 3.0.0
+* Switch to Corbado Frontend API v2.
+* Added CorbadoAuthComponent
+* Bump version of passkeys, corbado_frontend_api_client, passkeys_platform_interface, passkeys_web, passkey_android and passkeys_ios
+* BREAKING CHANGE: Removed CustomCorbadoAuth
+
+## 2.0.8
+* Bump version of passkeys and corbado_frontend_api_client
+
 ## 2.0.7
 * Bump version of passkeys
 
diff --git a/packages/corbado_auth/README.md b/packages/corbado_auth/README.md
index ba8f6df..71cd9b1 100644
--- a/packages/corbado_auth/README.md
+++ b/packages/corbado_auth/README.md
@@ -4,7 +4,8 @@
 
 An authentication SDK to enable authentication through passkeys (based on WebAuthn / FIDO2).
 
-Take a look at https://corbadoauth.flutter.corbado.io for a **live demo** (this is a Flutter web deployment of the example on Vercel).
+Take a look at https://corbadoauth.flutter.corbado.io for a **live demo** (this is a Flutter web
+deployment of the example on Vercel).
 
 |             | Android            | iOS                | Linux | macOS | Web                | Windows |
 |-------------|--------------------|--------------------|-------|-------|--------------------|---------|
@@ -37,149 +38,221 @@ when you want to build an app that utilizes passkeys.
 **Note:** For an explanation on passkeys and the information flows between client, authenticator and
 relying party, take a look at the [passkeys package](https://pub.dev/packages/passkeys).
 
-## Preparations and configuration
+## How to run the example
 
-These steps are required to run the example but you also need to follow them to create your own app.
+To get started with the `corbado_auth` it's nice to see a running version of an example application
+that uses this package.
+You can start the example like this:
 
-### iOS
+1. Navigate to the corbado_auth/example directory (e.g. by running
+   `cd packages/corbado_auth/example` on your terminal)
+2. Run `flutter run lib/main.dart` to start the example (if you want to run on Android or iOS, start
+   a Simulator/Emulator beforehand)
 
-#### 1. Create an iOS app 
+## How to integrate the package into your own app
 
-We need to establish trust between your iOS app and the relying party server.
-Your app will be identified through your **Application Identifier Prefix** (e.g. `9RF9KY77B2`) and
-your **Bundle Identifier** (e.g. `com.corbado.passkeys`).
-You need an Apple developer account to set up both.
-If you haven't got one yet, set up a new account.
+To use `corbado_auth` in your own app, you need to create a free project at
+the [Corbado developer panel](https://app.corbado.com).
 
-**Note:** When creating your Bundle Identifier, make sure that the "Associated Domains" capability
-is enabled.
+Integrating the package is not just about running `flutter pub add corbado_auth`.
+You need to configure and customize the package, which requires about one hour.
 
-<img src="https://raw.githubusercontent.com/corbado/flutter-passkeys/main/packages/corbado_auth/doc/img/bundleId.png" alt="xcode-associated-domains">
+For that we have provided an integration guide that is
+available [here](https://app.corbado.com/pro-6076489647962290072/getting-started).
 
-Open the example in Xcode now by opening `packages/passkeys/passkeys/example/ios`.
-In *Runner* -> *Signing & Capabilites* enter your *Application Identifier Prefix* and your *Bundle
-Identifier*.
+**Note:** Please make sure to also add your project frontend api link to the relying party Id,
+Navigate to your project in the developer panel then open Settings > General > URLs and input your
+link.
+It should be something like `pro-{projectID}.frontendapi.cloud.corbado.io`
 
-#### 2. Set up your Corbado project
+## A closer look at the example code
 
-Create a free Corbado project at
-the [Corbado developer panel](https://app.corbado.com/signin#register) if you haven't got one yet.
-It will act as your relying party server.
+In addition to going through the integration guide it can be helpful to see the `corbado_auth`
+package in an example application.
+For that, let's take a closer look at this package's example.
+It code can be found in the `/example` directory.
 
-After successful sign up, in the wizard, select 'Integration guide', 'Native / mobile app' and 'No
-existing users'.
+The example is a typical flutter application that makes use of the following libraries:
 
-#### 3. Configure your iOS app in Corbado
+- go_router (routing)
+- riverpod (data binding and state management)
+- corbado_auth (authentication)
 
-Make sure that under [*Settings* -> *User interface* -> *Identity
-verification*](https://app.corbado.com/app/settings/userinterface) "Option 2: No verification
-required" is selected. This should be set by default, when selecting 'Native / mobile app' in
-the [previous step](#2-set-up-corbado-project).
+It consists of 3 pages:
 
-Set up an iOS app at [*Settings* -> *Native
-apps*](https://app.corbado.com/app/settings/credentials/native-apps) by clicking "Add New".
-You will need your **Application Identifier Prefix** and your **Bundle Identifier** that we set up
-in [step 1](#1-create-an-ios-app-and-configure-the-example-in-xcode).
+- loading (shown while the app is loading initially)
+- authentication (shown when a user signs up or logs in)
+- profile (shown for users after signup/log in)
 
-Afterwards, your relying party server will host an `apple-app-site-association` file
-at `https://{PROJECT_ID}}.frontendapi.corbado.io/.well-known/apple-app-site-association`.
-This file will by downloaded by iOS when you install your app.
-To tell iOS where to look for the file, we need the next step in our setup.
+To understand how the `corbado_auth` package is integrated into this example application,
+we have to take a look at these files/directories:
 
-#### 4. Configure your iOS project
+- **router.dart**: Here we handle routing that is based on the authentication state (e.g. a user
+  that is logged in should not see the authentication screen => that user must be navigated to the
+  profile screen).
+- **auth_provider.dart**: Here we set up the riverpod providers and thus make authentication state (
+  e.g. the user object) and functionality (e.g. the logout function) available throughout the app.
+- **pages/auth_page.dart**: Here we define the page that loads the Corbado auth screens. We
+  configure it with a set of custom Flutter components (see the next bullet point).
+- **screens/\*.dart**: Here we define a set of custom Flutter components. Each of them must
+  implement `CorbadoScreen<T>` where `T` is one of 5 currently supported Corbado blocks. Find
+  details about this in the `Corbado blocks` section.
 
-In your Xcode workspace, you need to configure the following settings:
-In `Signing & Capabilities` tab, add the `Associated Domains` capability and add the following
-domain: `webcredentials:{PROJECT_ID}.frontendapi.corbado.io`
-Now, iOS knows where to download the `apple-app-site-association` file from.
+### A quick note about Flutter web
 
-If you forget about this step, the example will show you an error message
-like `Your app is not associated with your relying party server. You have to add...`.
-Your configuration inside Xcode should look something like in the screenshot below (you will have
-your own Corbado project ID and a different Bundle Identifier).
+Flutter web relies on some JavaScript code that we provide
+on [Github](https://github.com/corbado/flutter-passkeys/releases/download/2.0.0-dev.1/bundle.js).
+If you want to use `corbado_auth` in a Flutter web application you have to include this JavaScript
+bundle as part of your index.html.
+You can do this by adding the following `<script>` tag to your `<head>` section.
 
-<img src="https://raw.githubusercontent.com/corbado/flutter-passkeys/main/packages/corbado_auth/doc/img/passkeys_example_ios_associated_domains.png" height="250" alt="xcode-associated-domains">
+```
+<script src="https://github.com/corbado/flutter-passkeys/releases/download/2.3.0/bundle.js" type="application/javascript"></script>
+```
 
-#### 5. Start your example
+For an example how the `index.html` can look check
+out [index.html](https://github.com/corbado/flutter-passkeys/blob/main/packages/corbado_auth/example/web/index.html).
 
-`flutter run --dart-define=CORBADO_PROJECT_ID=<your-corbado-project-id> lib/main.dart`
+## Corbado blocks
 
-If you want to run the example from your IDE, please make sure to either
+If you introduce passkeys into your application you will have to define a number of screens in your
+flutter app.
+A user wants to signup and log in with a passkey. We also have to provide fallbacks for situations
+where a user can not use a passkey.
+Finally we want to ask users that don't have a passkey yet if they want to create one.
 
-- set the CORBADO_PROJECT_ID environment variable to your Corbado project ID
-- replace `const String.fromEnvironment('CORBADO_PROJECT_ID')` directly in the example with your
-  Corbado project ID
+Triggering these screens in the right moments requires quite a bit of logic.
+At Corbado we provide this as a service for developers and we make it configurable in our developer
+panel.
+As a developer you have the freedom of defining your own UI implementation for these screens.
 
-### Android
+To give you guidance about what data and what functionalities are available for a screen we
+introduced the concept of **Corbado blocks**.
+One Corbado block (e.g. `SignupInitBlock`) defines the data and functionalities that you can use on
+one of these screens.
+Adding `corbado_auth` to your app means defining these screens.
 
-#### 1. Set up Corbado project
+### Overview of existing Corbado blocks
 
-Create a free Corbado project at
-the [Corbado developer panel](https://app.corbado.com/signin#register) if you haven't got one yet.
-It will act as your relying party server.
+Currently, there are 5 Corbado blocks available in the `corbado_auth` package.
+Over time we will add additional blocks that you can implement (they are optional).
+These 5 blocks are needed by most developers.
 
-After successful sign up, in the wizard, select 'Integration guide', 'Native / mobile app' and 'No
-existing users'.
+#### SignupInitBlock
 
-After creating the project you will get a Corbado project ID (e.g. `pro-4268394291597054564`).
-You will need it in the next steps.
+This block is used to initiate a sign up.
+The goal of this block is to ask the user for a unique identifier (currently only email is
+supported)
+and an optional nice name (we call this a fullname at Corbado).
+The corresponding screen will thus be shown when a user starts a new signup in your app.
 
-#### 2. Start the example
+If the identifier is not available or in the wrong format the block will return an error.
 
-`flutter run --dart-define=CORBADO_PROJECT_ID=<your-corbado-project-id> lib/main.dart`
+When you implement the screen for this block, you usually want to define one or multiple input
+fields
+and two buttons ("submit" and "switch to login").
+You should also show the errors (ideally close to the input fields).
 
-#### 3. Set up an Android app in Corbado
+Check
+out [signup_init.dart](https://github.com/corbado/flutter-passkeys/blob/main/packages/corbado_auth/example/lib/screens/signup_init.dart)
+to see an example implementation for a screen that uses this block.
 
-Setup an Android app at [*Settings* -> *Credentials* -> *Native
-apps*](https://app.corbado.com/app/settings/credentials/native-apps) by clicking "Add new".
-You will need your **Package name** (e.g. `com.corbado.corbadoauth.example`) and your **SHA-256
-fingerprint** (e.g. `54:4C:94:2C:E9:...`).
+#### PasskeyAppendBlock
 
-The package name of your app is defined in *example/android/app/build.gradle* (applicationId).
-Its default value for the example app is `com.corbado.corbadoauth.example`.
+This block is used to create a new passkey.
+The corresponding screen will thus be shown during a signup (after the user has provided the
+identifier)
+or potentially at the end of a login (if no passkey is existing for the user).
 
-The easiest way to find your SHA-256 fingerprint is to look into the logs of the example app.
-You will find a log message like `Fingerprint: 54:4C:94:2C:E9:...`.
-Copy the full SHA-256 fingerprint and use it to set up the Android app in the Corbado developer
-panel.
+If setting up the passkey fails (e.g. because the user has cancelled the operation)
+the block allows either a retry or switching to a fallback authentication method (currently
+email-otp is supported).
+
+When you implement the screen for this block, you usually want to define two buttons.
+
+Check
+out [passkey_append.dart](https://github.com/corbado/flutter-passkeys/blob/main/packages/corbado_auth/example/lib/screens/passkey_append.dart)
+to see an example implementation for a screen that uses this block.
+
+#### EmailVerifyBlock
+
+This block is used to verify that a user has access to an email address.
+The corresponding screen will thus be shown during a signup (e.g. if passkeys are not supported or
+if you have configured your Corbado project to verify each email address during signup)
+or during a login (if no passkey has been used).
+
+When the screen for this block is rendered, Corbado has already sent out an email to the user
+containing a 6-digit code.
+The user should provide this code through the screen.
+If the code is wrong the block will indicate this through an error.
+It then allows to enter the code again or to resend the email (after 30s have passed).
+
+When you implement the screen for this block, you usually want to define one or two buttons (submit
+and resend).
+Also you need an input field (for the 6-digit code).
+
+Check
+out [email_verify_otp.dart](https://github.com/corbado/flutter-passkeys/blob/main/packages/corbado_auth/example/lib/screens/email_verify_otp.dart)
+to see an example implementation for a screen that uses this block.
+
+#### LoginInitBlock
+
+This block is used to initiate a login process.
+The goal of this block is to ask the user for her unique identifier (the email address).
+The corresponding screen will thus be shown at the beginning of a login.
+
+When the screen for this block is rendered, conditional UI will be started.
+If the user has a passkey available he can log in without typing his identifier.
+It that's not the case he has to provide the email address to the block through an input field.
 
-Alternatively, you can execute one of the following commands to obtain the SHA-256 fingerprint:
+When you implement the screen for this block, you usually want to define one input field (for the
+email address).
+Also usually you need two buttons ("submit" and "switch to signup").
 
-- macOS /
-  Linux: `keytool -list -v -keystore ~/.android/debug.keystore -alias androiddebugkey -storepass android -keypass android`
--
+Check
+out [login_init.dart](https://github.com/corbado/flutter-passkeys/blob/main/packages/corbado_auth/example/lib/screens/login_init.dart)
+to see an example implementation for a screen that uses this block.
 
-Windows: `keytool -list -v -keystore "\.android\debug.keystore" -alias androiddebugkey -storepass android -keypass android`
+#### PasskeyVerifyBlock
 
-Now, you are fully set and you can start signing up with your first passkey in the example.
+This block is used to verify that a user has access to a passkey.
+The corresponding screen will thus be shown during a login process.
 
-## A closer look at the example
+When the screen for this block is rendered, a passkey authentication is started.
+If the user completes it he will move on to the next block (most of the time he directly is logged
+in).
+If something goes wrong the user can either retry the passkey operation or use a fallback method.
 
-After following the configuration steps above, you can run the app.
-The first screen you will see is the login/ signup page.
-Here, you can create a new user account by providing an email address and clicking on 'sign up'.
-After providing your fingerprint / face scan, a new passkey is created and stored on your device.
+When you implement the screen for this block, you usually want to define two buttons
+(one to retry the passkey operation and another one to initiate the fallback).
 
+Check
+out [passkey_verify.dart](https://github.com/corbado/flutter-passkeys/blob/main/packages/corbado_auth/example/lib/screens/passkey_verify.dart)
+to see an example implementation for a screen that uses this block.
 
-You will now be logged into the app and see the profile page.
-Your user info is represented by a jwt token that has been retrieved from Corbado during the sign up / sign in
-process and is automatically refreshed when expired.
-You can view that token by clicking on "token details".
-Here, you can observe how the token is refreshed automatically (its lifetime will increase once in a
-while).
+### Deep dive: why do we use the concept of Corbado blocks?
 
-You can also close and reopen the app.
-You should still be logged in.
+We understand that this concept of `blocks` and `screens` might be challenging at the beginning.
+From personal experience, integrating authentication (no matter what solution you use) is always a
+bit challenging at first.
+While passkeys are a great feature for end-users for us developers they tend to make life harder
+(at least at the beginning).
 
-<p float="left">
-    <img src="https://raw.githubusercontent.com/corbado/flutter-passkeys/main/packages/corbado_auth/doc/img/signin-signup-image.jpg" height="500" alt="signup">
-    <img src="https://raw.githubusercontent.com/corbado/flutter-passkeys/main/packages/corbado_auth/doc/img/profile-token-details-image.jpg" height="500" alt="signup fingerpring">
-</p>
+With `corbado_auth` we want to reduce complexity as much as possible for you.
+We do this on the one hand by implementing parts of the system for you (e.g. the relying party
+server and session management)
+On the other hand we try to give clear guidance what authentication related functionalities you can
+use on which screen.
+This means that on each screen just by looking at the corresponding block you quickly get an idea
+how you should build the screen.
+You still have full control over the UI though.
+Most importantly we also render these screens in the right order for you so you don't need to bother
+with complex routing during authentication.
 
 ## Troubleshooting
 
-| Type                            | Issue                     | Note                                                                                                                             |
-|---------------------------------|---------------------------|----------------------------------------------------------------------------------------------------------------------------------|
-| iOS Sim                         | Localizd string not found | For passkeys to work in the iOS simulator, you need to enable faceID first in the top menu bar under features > faceID > enrolled |
-| iOS physical device             | Passkeys not working      | Passkeys do not work when running your flutter application on your physical iOS device. This has to do with the signing of your app. Rather test on a virtual iOS device or virtual/ physical Android device.                                                                                                                                 |
+| Type                | Issue                     | Note                                                                                                                                                                                                          |
+|---------------------|---------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
+| iOS Sim             | Localizd string not found | For passkeys to work in the iOS simulator, you need to enable faceID first in the top menu bar under features > faceID > enrolled                                                                             |
+| iOS physical device | Passkeys not working      | Passkeys do not work when running your flutter application on your physical iOS device. This has to do with the signing of your app. Rather test on a virtual iOS device or virtual/ physical Android device. |
 
diff --git a/packages/corbado_auth/example/.gitignore b/packages/corbado_auth/example/.gitignore
index 6d32f66..a0c22da 100644
--- a/packages/corbado_auth/example/.gitignore
+++ b/packages/corbado_auth/example/.gitignore
@@ -5,9 +5,11 @@
 *.swp
 .DS_Store
 .atom/
+.build/
 .buildlog/
 .history
 .svn/
+.swiftpm/
 migrate_working_dir/
 
 # IntelliJ related
diff --git a/packages/corbado_auth/example/integration_test/signup_test.dart b/packages/corbado_auth/example/integration_test/signup_test.dart
new file mode 100644
index 0000000..ef5640b
--- /dev/null
+++ b/packages/corbado_auth/example/integration_test/signup_test.dart
@@ -0,0 +1,44 @@
+import 'package:corbado_auth/corbado_auth.dart';
+import 'package:corbado_auth_example/auth_provider.dart';
+import 'package:corbado_auth_example/main.dart';
+import 'package:flutter/cupertino.dart';
+import 'package:flutter_riverpod/flutter_riverpod.dart';
+import 'package:flutter_test/flutter_test.dart';
+import 'package:integration_test/integration_test.dart';
+
+void main() {
+  IntegrationTestWidgetsFlutterBinding.ensureInitialized();
+
+  testWidgets('Counter increments smoke test', (WidgetTester tester) async {
+    final corbadoAuth = CorbadoAuth();
+    await corbadoAuth.init(
+        projectId: "pro-4268394291597054564",
+        customDomain: "https://pro-4268394291597054564.frontendapi.cloud.corbado.io");
+
+    await tester.pumpWidget(
+        ProviderScope(
+          overrides: [
+            corbadoProvider.overrideWithValue(corbadoAuth),
+          ],
+          child: const MyApp(),
+        ));
+
+    await tester.pumpAndSettle();
+
+    await Future.delayed(Duration(seconds: 3));
+    expect(find.text('Sign up'), findsOneWidget);
+
+    final textField = find.byKey(ValueKey('textfield-email'));
+    await tester.enterText(textField, 'martin+21s4@corbado.com');
+
+    // Tap the '+' icon and trigger a frame.
+    await tester.tap(find.text('Sign up'));
+    await tester.pumpAndSettle();
+
+    await Future.delayed(Duration(seconds: 1));
+
+    await tester.tap(find.text('Continue'));
+
+    await Future.delayed(Duration(seconds: 5));
+  });
+}
diff --git a/packages/corbado_auth/example/ios/Runner/AppDelegate.swift b/packages/corbado_auth/example/ios/Runner/AppDelegate.swift
index 70693e4..b636303 100644
--- a/packages/corbado_auth/example/ios/Runner/AppDelegate.swift
+++ b/packages/corbado_auth/example/ios/Runner/AppDelegate.swift
@@ -1,7 +1,7 @@
 import UIKit
 import Flutter
 
-@UIApplicationMain
+@main
 @objc class AppDelegate: FlutterAppDelegate {
   override func application(
     _ application: UIApplication,
diff --git a/packages/corbado_auth/example/ios/Runner/Runner.entitlements b/packages/corbado_auth/example/ios/Runner/Runner.entitlements
index a763c70..79e71e7 100644
--- a/packages/corbado_auth/example/ios/Runner/Runner.entitlements
+++ b/packages/corbado_auth/example/ios/Runner/Runner.entitlements
@@ -6,6 +6,7 @@
 	<array>
         <string>webcredentials:flutter.corbado.io?mode=developer</string>
         <string>webcredentials:flutter.corbado.io</string>
+        <string>webcredentials:pro-4268394291597054564.frontendapi.cloud.corbado.io?mode=developer</string>
 	</array>
 </dict>
 </plist>
diff --git a/packages/corbado_auth/example/lib/auth_provider.dart b/packages/corbado_auth/example/lib/auth_provider.dart
index bd411a7..bb94fc2 100644
--- a/packages/corbado_auth/example/lib/auth_provider.dart
+++ b/packages/corbado_auth/example/lib/auth_provider.dart
@@ -1,5 +1,4 @@
 import 'package:corbado_auth/corbado_auth.dart';
-import 'package:corbado_auth_example/auth_service.dart';
 import 'package:flutter_riverpod/flutter_riverpod.dart';
 
 // Corbado SDK provider. This will be used by other providers to
@@ -7,13 +6,6 @@ import 'package:flutter_riverpod/flutter_riverpod.dart';
 final corbadoProvider = Provider<CorbadoAuth>(
     (ref) => throw UnimplementedError("no instance of corbadoAuth"));
 
-// Make the authentication service available throughout the app.
-final authServiceProvider = Provider<AuthService>((ref) {
-  final corbado = ref.watch(corbadoProvider);
-
-  return AuthService(corbado);
-});
-
 // Make the user available throughout the app.
 final userProvider = StreamProvider<User?>((ref) async* {
   final corbado = ref.watch(corbadoProvider);
diff --git a/packages/corbado_auth/example/lib/auth_service.dart b/packages/corbado_auth/example/lib/auth_service.dart
deleted file mode 100644
index c500a20..0000000
--- a/packages/corbado_auth/example/lib/auth_service.dart
+++ /dev/null
@@ -1,51 +0,0 @@
-import 'dart:async';
-
-import 'package:corbado_auth/corbado_auth.dart';
-import 'package:flutter/material.dart';
-
-// This service encapsulates all authentication functionality.
-// It makes use of the corbado SDK through CorbadoAuth.
-class AuthService {
-  final CorbadoAuth _auth;
-
-  AuthService(this._auth);
-
-  Future<String?> register({required String email}) async {
-    try {
-      await _auth.signUpWithPasskey(email: email, fullName: email);
-      return null;
-    } on PasskeyAuthCancelledException {
-      return null;
-    } on ValidationException catch (e) {
-      return 'validation error: ${e.toString()}';
-    } on UnexpectedBackendException catch (e) {
-      debugPrint(e.toString());
-      return 'An unexpected error happened during registration. Please try again later.';
-    } catch (e) {
-      return e.toString();
-    }
-  }
-
-  Future<String?> signIn({required String email}) async {
-    try {
-      await _auth.loginWithPasskey(email: email);
-      return null;
-    } on PasskeyAuthCancelledException {
-      return null;
-    } on NoPasskeyForDeviceException {
-      return 'No passkey has been setup on this device for ${email}.';
-    } on UnknownUserException {
-      return 'Incorrect user identifier. Please check your email.';
-    } catch (e) {
-      return e.toString();
-    }
-  }
-
-  Future<void> signInWithAutocomplete() async {
-    return await _auth.autocompletedLoginWithPasskey();
-  }
-
-  Future<void> signOut() {
-    return _auth.signOut();
-  }
-}
diff --git a/packages/corbado_auth/example/lib/main.dart b/packages/corbado_auth/example/lib/main.dart
index 380ab7e..7f010aa 100644
--- a/packages/corbado_auth/example/lib/main.dart
+++ b/packages/corbado_auth/example/lib/main.dart
@@ -2,8 +2,19 @@ import 'package:corbado_auth/corbado_auth.dart';
 import 'package:corbado_auth_example/auth_provider.dart';
 import 'package:corbado_auth_example/pages/loading_page.dart';
 import 'package:corbado_auth_example/router.dart';
+import 'package:flutter/foundation.dart';
 import 'package:flutter/material.dart';
 import 'package:flutter_riverpod/flutter_riverpod.dart';
+import 'package:overlay_support/overlay_support.dart';
+
+// In your own project you should get this from an ENV variable or from a Flutter flavour.
+String calculateProjectID() {
+  if (kIsWeb) {
+    return 'pro-4268394291597054564';
+  } else {
+    return 'pro-8751299119685489253';
+  }
+}
 
 void main() async {
   WidgetsFlutterBinding.ensureInitialized();
@@ -15,10 +26,10 @@ void main() async {
   runApp(const LoadingPage());
 
   // Now we do the initialization.
-  final projectId = const String.fromEnvironment('CORBADO_PROJECT_ID');
-  final customDomain = const String.fromEnvironment('CORBADO_CUSTOM_DOMAIN');
+  final projectId = calculateProjectID();
+  final customDomain = 'https://$projectId.frontendapi.cloud.corbado.io';
   final corbadoAuth = CorbadoAuth();
-  await corbadoAuth.init(projectId, customDomain: customDomain);
+  await corbadoAuth.init(projectId: projectId, customDomain: customDomain);
 
   // Finally we override the providers that needed initialization.
   // Now the real app can be loaded.
@@ -26,39 +37,39 @@ void main() async {
     overrides: [
       corbadoProvider.overrideWithValue(corbadoAuth),
     ],
-    child: MyApp(),
+    child: const MyApp(),
   ));
-
 }
 
 class MyApp extends ConsumerWidget {
   const MyApp({super.key});
 
-
   @override
   Widget build(BuildContext context, WidgetRef ref) {
     final router = ref.watch(routerProvider);
 
-    return MaterialApp.router(
-      routeInformationParser: router.routeInformationParser,
-      routerDelegate: router.routerDelegate,
-      routeInformationProvider: router.routeInformationProvider,
-      theme: ThemeData(
-        useMaterial3: false,
-        colorScheme: ColorScheme(
-          brightness: Brightness.light,
-          primary: Color(0xFF1953ff),
-          onPrimary: Colors.white,
-          secondary: Colors.white,
-          onSecondary: Color(0xFF1953ff),
-          error: Colors.redAccent,
-          onError: Colors.white,
-          background: Color(0xFF1953ff),
-          onBackground: Colors.white,
-          surface: Color(0xFF1953ff),
-          onSurface: Color(0xFF1953ff),
+    return OverlaySupport.global(
+      child: MaterialApp.router(
+        routeInformationParser: router.routeInformationParser,
+        routerDelegate: router.routerDelegate,
+        routeInformationProvider: router.routeInformationProvider,
+        theme: ThemeData(
+          useMaterial3: false,
+          colorScheme: const ColorScheme(
+            brightness: Brightness.light,
+            primary: Color(0xFF1953ff),
+            onPrimary: Colors.white,
+            secondary: Colors.white,
+            onSecondary: Color(0xFF1953ff),
+            error: Colors.redAccent,
+            onError: Colors.white,
+            background: Color(0xFF1953ff),
+            onBackground: Colors.white,
+            surface: Color(0xFF1953ff),
+            onSurface: Color(0xFF1953ff),
+          ),
         ),
       ),
     );
   }
-}
\ No newline at end of file
+}
diff --git a/packages/corbado_auth/example/lib/pages/auth_page.dart b/packages/corbado_auth/example/lib/pages/auth_page.dart
new file mode 100644
index 0000000..6605ba2
--- /dev/null
+++ b/packages/corbado_auth/example/lib/pages/auth_page.dart
@@ -0,0 +1,39 @@
+import 'package:corbado_auth/corbado_auth.dart';
+import 'package:corbado_auth_example/auth_provider.dart';
+import 'package:corbado_auth_example/screens/email_verify_otp.dart';
+import 'package:corbado_auth_example/screens/login_init.dart';
+import 'package:corbado_auth_example/screens/passkey_append.dart';
+import 'package:corbado_auth_example/screens/passkey_verify.dart';
+import 'package:corbado_auth_example/screens/signup_init.dart';
+import 'package:flutter/material.dart';
+import 'package:hooks_riverpod/hooks_riverpod.dart';
+
+class AuthPage extends HookConsumerWidget {
+  AuthPage({super.key}) {}
+
+  @override
+  Widget build(BuildContext context, WidgetRef ref) {
+    final corbadoAuth = ref.watch(corbadoProvider);
+
+    return Scaffold(
+      appBar: AppBar(title: const Text('Corbado authentication')),
+      body: Center(
+        child: Container(
+          constraints: const BoxConstraints(maxWidth: 500),
+          child: Padding(
+            padding: const EdgeInsets.symmetric(horizontal: 10),
+            child: CorbadoAuthComponent(
+                corbadoAuth: corbadoAuth,
+                components: CorbadoScreens(
+                  signupInit: SignupInitScreen.new,
+                  loginInit: LoginInitScreen.new,
+                  emailVerifyOtp: EmailVerifyOtpScreen.new,
+                  passkeyAppend: PasskeyAppendScreen.new,
+                  passkeyVerify: PasskeyVerifyScreen.new,
+                )),
+          ),
+        ),
+      ),
+    );
+  }
+}
diff --git a/packages/corbado_auth/example/lib/pages/base_page.dart b/packages/corbado_auth/example/lib/pages/base_page.dart
deleted file mode 100644
index dafc90a..0000000
--- a/packages/corbado_auth/example/lib/pages/base_page.dart
+++ /dev/null
@@ -1,25 +0,0 @@
-import 'package:flutter/material.dart';
-
-class BasePage extends StatelessWidget {
-  const BasePage({required this.child, super.key});
-
-  final Widget child;
-
-  @override
-  Widget build(BuildContext context) {
-    return Scaffold(
-      appBar: AppBar(title: const Text('Corbado authentication')),
-      body: Center(
-        child: Container(
-          constraints: const BoxConstraints(maxWidth: 500),
-          child: SingleChildScrollView(
-            child: Padding(
-              padding: const EdgeInsets.symmetric(horizontal: 10),
-              child: child,
-            ),
-          ),
-        ),
-      ),
-    );
-  }
-}
diff --git a/packages/corbado_auth/example/lib/pages/profile_page.dart b/packages/corbado_auth/example/lib/pages/profile_page.dart
index f086470..f47fc37 100644
--- a/packages/corbado_auth/example/lib/pages/profile_page.dart
+++ b/packages/corbado_auth/example/lib/pages/profile_page.dart
@@ -1,71 +1,63 @@
 import 'package:corbado_auth_example/auth_provider.dart';
-import 'package:corbado_auth_example/pages/base_page.dart';
-import 'package:corbado_auth_example/router.dart';
 import 'package:corbado_auth_example/widgets/filled_text_button.dart';
-import 'package:corbado_auth_example/widgets/outlined_text_button.dart';
 import 'package:flutter/material.dart';
 import 'package:flutter_riverpod/flutter_riverpod.dart';
-import 'package:go_router/go_router.dart';
 
 class ProfilePage extends ConsumerWidget {
   ProfilePage({super.key});
 
   @override
   Widget build(BuildContext context, WidgetRef ref) {
-    final authService = ref.watch(authServiceProvider);
     final user = ref.watch(userProvider);
+    final corbado = ref.watch(corbadoProvider);
 
-    return BasePage(
-        child: Column(
-            mainAxisAlignment: MainAxisAlignment.center,
-            crossAxisAlignment: CrossAxisAlignment.start,
-            children: [
-          const Padding(
-            padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 5),
-            child: const Text(
-              'Welcome',
-              style: TextStyle(
-                fontSize: 40,
-                fontWeight: FontWeight.bold,
-              ),
+    return Scaffold(
+      appBar: AppBar(title: const Text('Corbado authentication')),
+      body: Center(
+        child: Container(
+          constraints: const BoxConstraints(maxWidth: 500),
+          child: Padding(
+            padding: const EdgeInsets.symmetric(horizontal: 10),
+            child: Column(
+              mainAxisAlignment: MainAxisAlignment.center,
+              crossAxisAlignment: CrossAxisAlignment.start,
+              children: [
+                const Text(
+                  'Welcome',
+                  style: TextStyle(
+                    fontSize: 40,
+                    fontWeight: FontWeight.bold,
+                  ),
+                ),
+                const SizedBox(height: 10),
+                Text(
+                  user.value?.email ?? '',
+                  style: const TextStyle(
+                    fontSize: 20,
+                    fontWeight: FontWeight.bold,
+                  ),
+                ),
+                const SizedBox(height: 10),
+                const Text(
+                  'You are currently logged in. You have a JWT token that you can use to make calls to your backend.',
+                  style: TextStyle(
+                    fontSize: 20,
+                  ),
+                ),
+                const SizedBox(height: 10),
+                SizedBox(
+                  width: double.infinity,
+                  height: 50,
+                  child: FilledTextButton(
+                    onTap: corbado.signOut,
+                    content: 'sign out',
+                  ),
+                ),
+              ],
             ),
           ),
-          Padding(
-            padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 5),
-            child: Text(
-              user.value?.username ?? '',
-              style: TextStyle(
-                fontSize: 20,
-                fontWeight: FontWeight.bold,
-              ),
-            ),
-          ),
-          Padding(
-            padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 10),
-            child: const Text(
-              'You are currently logged in. You have a JWT token that you can use to make calls to your backend.',
-              style: TextStyle(
-                fontSize: 20,
-              ),
-            ),
-          ),
-          SizedBox(height: 10),
-          SizedBox(
-              width: double.infinity,
-              height: 50,
-              child: FilledTextButton(
-                onTap: () => context.push(Routes.tokenDetails),
-                content: 'token details',
-              )),
-          SizedBox(height: 10),
-          SizedBox(
-            width: double.infinity,
-            height: 50,
-            child: OutlinedTextButton(
-              onTap: () => authService.signOut(),
-              content: 'sign out',
-            ),
-          ),
-        ]));
+        ),
+      ),
+    );
   }
 }
diff --git a/packages/corbado_auth/example/lib/pages/sign_in_page.dart b/packages/corbado_auth/example/lib/pages/sign_in_page.dart
deleted file mode 100644
index 67a5d20..0000000
--- a/packages/corbado_auth/example/lib/pages/sign_in_page.dart
+++ /dev/null
@@ -1,138 +0,0 @@
-import 'package:corbado_auth/corbado_auth.dart';
-import 'package:corbado_auth_example/auth_provider.dart';
-import 'package:corbado_auth_example/pages/base_page.dart';
-import 'package:corbado_auth_example/router.dart';
-import 'package:corbado_auth_example/widgets/filled_text_button.dart';
-import 'package:corbado_auth_example/widgets/outlined_text_button.dart';
-import 'package:flutter/foundation.dart' show kIsWeb;
-import 'package:flutter/material.dart';
-import 'package:flutter_hooks/flutter_hooks.dart';
-import 'package:go_router/go_router.dart';
-import 'package:hooks_riverpod/hooks_riverpod.dart';
-
-class SignInPage extends StatefulHookConsumerWidget {
-  SignInPage({super.key});
-
-  @override
-  ConsumerState<SignInPage> createState() => _SignInPageState();
-}
-
-class _SignInPageState extends ConsumerState<SignInPage> {
-  final _emailController = TextEditingController();
-
-  @override
-  void initState() {
-    super.initState();
-
-    WidgetsBinding.instance.addPostFrameCallback((_) {
-      final authService = ref.watch(authServiceProvider);
-
-      // As soon as the view has been loaded prepare the autocompleted passkey sign in.
-      authService.signInWithAutocomplete().onError((error, stackTrace) {
-        if (error is PasskeyAuthCancelledException) {
-          debugPrint('FYI: User has cancelled passkey auth.');
-          return;
-        }
-      });
-    });
-  }
-
-  @override
-  Widget build(BuildContext context) {
-    final error = useState<String?>(null);
-    final loading = useState<bool>(false);
-    final authService = ref.watch(authServiceProvider);
-
-    return BasePage(
-        child: SingleChildScrollView(
-      child: Column(
-        mainAxisAlignment: MainAxisAlignment.center,
-        children: [
-          Padding(
-            padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 5),
-            child: const Text(
-              'Tired of passwords?',
-              style: TextStyle(
-                fontSize: 40,
-                fontWeight: FontWeight.bold,
-              ),
-            ),
-          ),
-          Padding(
-            padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),
-            child: const Text(
-              'Sign in using your biometrics like fingerprint or face.',
-              style: TextStyle(
-                fontSize: 20,
-              ),
-            ),
-          ),
-          Padding(
-            padding: EdgeInsets.symmetric(vertical: 4),
-            child: TextField(
-              autofillHints: [_getAutofillHint()],
-              controller: _emailController,
-              decoration: InputDecoration(
-                border: OutlineInputBorder(),
-                hintText: 'email address',
-              ),
-            ),
-          ),
-          error.value != null
-              ? Text(
-                  error.value!,
-                  style: TextStyle(color: Theme.of(context).colorScheme.error),
-                )
-              : Container(),
-          SizedBox(height: 20),
-          SizedBox(
-            width: double.infinity,
-            height: 50,
-            child: FilledTextButton(
-              onTap: () async {
-                try {
-                  loading.value = true;
-                  final email = _emailController.value.text;
-                  final maybeError = await authService.signIn(email: email);
-                  if (maybeError != null) {
-                    loading.value = false;
-                    error.value = maybeError;
-                  }
-                } catch (error) {
-                  loading.value = false;
-                  debugPrint('error: $error');
-                  ScaffoldMessenger.of(context).showSnackBar(
-                    SnackBar(
-                      backgroundColor: Theme.of(context).primaryColor,
-                      content: Text('$error'),
-                      duration: const Duration(seconds: 10),
-                    ),
-                  );
-                }
-              },
-              isLoading: loading.value,
-              content: 'sign in',
-            ),
-          ),
-          SizedBox(height: 10),
-          SizedBox(
-            width: double.infinity,
-            height: 50,
-            child: OutlinedTextButton(
-              onTap: () => context.go(Routes.signUp),
-              content: 'I want to create a new account',
-            ),
-          ),
-        ],
-      ),
-    ));
-  }
-
-  String _getAutofillHint() {
-    if (kIsWeb) {
-      return 'username webauthn';
-    } else {
-      return AutofillHints.username;
-    }
-  }
-}
diff --git a/packages/corbado_auth/example/lib/pages/sign_up_page.dart b/packages/corbado_auth/example/lib/pages/sign_up_page.dart
deleted file mode 100644
index 6336ced..0000000
--- a/packages/corbado_auth/example/lib/pages/sign_up_page.dart
+++ /dev/null
@@ -1,95 +0,0 @@
-import 'package:corbado_auth_example/auth_provider.dart';
-import 'package:corbado_auth_example/pages/base_page.dart';
-import 'package:corbado_auth_example/router.dart';
-import 'package:corbado_auth_example/widgets/filled_text_button.dart';
-import 'package:corbado_auth_example/widgets/outlined_text_button.dart';
-import 'package:flutter/material.dart';
-import 'package:flutter_hooks/flutter_hooks.dart';
-import 'package:go_router/go_router.dart';
-import 'package:hooks_riverpod/hooks_riverpod.dart';
-
-class SignUpPage extends HookConsumerWidget {
-  SignUpPage({super.key}) {}
-
-  final _emailController = TextEditingController();
-
-  @override
-  Widget build(BuildContext context, WidgetRef ref) {
-    final error = useState<String?>(null);
-    final loading = useState<bool>(false);
-    final authService = ref.watch(authServiceProvider);
-
-    return BasePage(
-      child: SingleChildScrollView(
-        child: Column(
-          mainAxisAlignment: MainAxisAlignment.center,
-          children: [
-            Padding(
-              padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 5),
-              child: const Text(
-                'Tired of passwords?',
-                style: TextStyle(
-                  fontSize: 40,
-                  fontWeight: FontWeight.bold,
-                ),
-              ),
-            ),
-            Padding(
-              padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),
-              child: const Text(
-                'Sign up using your biometrics like fingerprint or face.',
-                style: TextStyle(
-                  fontSize: 20,
-                ),
-              ),
-            ),
-            Padding(
-              padding: EdgeInsets.symmetric(vertical: 4),
-              child: TextField(
-                controller: _emailController,
-                decoration: InputDecoration(
-                  border: OutlineInputBorder(),
-                  hintText: 'email address',
-                ),
-              ),
-            ),
-            error.value != null
-                ? Text(
-                    error.value!,
-                    style:
-                        TextStyle(color: Theme.of(context).colorScheme.error),
-                  )
-                : Container(),
-            SizedBox(height: 20),
-            SizedBox(
-              width: double.infinity,
-              height: 50,
-              child: FilledTextButton(
-                isLoading: loading.value,
-                onTap: () async {
-                  final email = _emailController.value.text;
-                  loading.value = true;
-                  final maybeError = await authService.register(email: email);
-                  if (maybeError != null) {
-                    loading.value = false;
-                    error.value = maybeError;
-                  }
-                },
-                content: 'sign up',
-              ),
-            ),
-            SizedBox(height: 10),
-            SizedBox(
-              width: double.infinity,
-              height: 50,
-              child: OutlinedTextButton(
-                onTap: () => context.go(Routes.signIn),
-                content: 'I already have an account',
-              ),
-            ),
-          ],
-        ),
-      ),
-    );
-  }
-}
diff --git a/packages/corbado_auth/example/lib/pages/tokendetails_page.dart b/packages/corbado_auth/example/lib/pages/tokendetails_page.dart
deleted file mode 100644
index 9e0fb0b..0000000
--- a/packages/corbado_auth/example/lib/pages/tokendetails_page.dart
+++ /dev/null
@@ -1,64 +0,0 @@
-import 'package:corbado_auth_example/auth_provider.dart';
-import 'package:corbado_auth_example/pages/base_page.dart';
-import 'package:flutter/gestures.dart';
-import 'package:flutter/material.dart';
-import 'package:hooks_riverpod/hooks_riverpod.dart';
-import 'package:json_editor/json_editor.dart';
-import 'package:url_launcher/url_launcher.dart';
-
-class TokenDetailsPage extends HookConsumerWidget {
-  TokenDetailsPage({super.key});
-
-  @override
-  Widget build(BuildContext context, WidgetRef ref) {
-    final user = ref.watch(userProvider);
-
-    return BasePage(
-      child: Column(
-        mainAxisAlignment: MainAxisAlignment.center,
-        crossAxisAlignment: CrossAxisAlignment.start,
-        children: [
-          const Padding(
-            padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 5),
-            child: const Text(
-              'id token',
-              style: TextStyle(
-                fontSize: 40,
-                fontWeight: FontWeight.bold,
-              ),
-            ),
-          ),
-          SizedBox(
-              height: 250,
-              child: JsonEditor.object(
-                  object: user.value?.decoded.toJson(), enabled: false)),
-          SizedBox(height: 10),
-          Text('The id token above serves two purposes:'),
-          Text('1. Provide user data (name, email)'),
-          Text('2. Act as a bearer token for calls to your backend'),
-          SizedBox(height: 10),
-          Text(
-              'The id token will be automatically refreshed by the Corbado Auth SDK as its lifetime is limited.'),
-          SizedBox(height: 10),
-          RichText(
-            text: TextSpan(children: [
-              TextSpan(
-                  text: 'Find more info on the id token at ',
-                  style: Theme.of(context).textTheme.bodyMedium),
-              TextSpan(
-                text: 'our docs',
-                style: TextStyle(color: Theme.of(context).primaryColor),
-                recognizer: TapGestureRecognizer()
-                  ..onTap = () async {
-                    Uri url = Uri.parse(
-                        'https://github.com/corbado/flutter-passkeys/blob/main/packages/corbado_auth/README.md');
-                    launchUrl(url);
-                  },
-              )
-            ]),
-          ),
-        ],
-      ),
-    );
-  }
-}
diff --git a/packages/corbado_auth/example/lib/router.dart b/packages/corbado_auth/example/lib/router.dart
index 78aa2bd..8367736 100644
--- a/packages/corbado_auth/example/lib/router.dart
+++ b/packages/corbado_auth/example/lib/router.dart
@@ -1,18 +1,14 @@
 import 'package:corbado_auth/corbado_auth.dart';
 import 'package:corbado_auth_example/auth_provider.dart';
+import 'package:corbado_auth_example/pages/auth_page.dart';
 import 'package:corbado_auth_example/pages/profile_page.dart';
-import 'package:corbado_auth_example/pages/sign_in_page.dart';
-import 'package:corbado_auth_example/pages/sign_up_page.dart';
-import 'package:corbado_auth_example/pages/tokendetails_page.dart';
 import 'package:flutter/material.dart';
 import 'package:flutter_riverpod/flutter_riverpod.dart';
 import 'package:go_router/go_router.dart';
 
 class Routes {
-  static const signUp = '/sign-up';
-  static const signIn = '/sign-in';
+  static const auth = '/auth';
   static const profile = '/profile';
-  static const tokenDetails = '/tokendetails';
 }
 
 GoRoute _defaultTransitionGoRoute({
@@ -48,29 +44,20 @@ final routerProvider = Provider<GoRouter>((ref) {
   final authState = ref.watch(authStateProvider);
 
   return GoRouter(
-      initialLocation: Routes.signUp,
+      initialLocation: Routes.auth,
       routes: [
         _defaultTransitionGoRoute(
-          path: Routes.signUp,
-          builder: (context, state) => SignUpPage(),
-        ),
-        _defaultTransitionGoRoute(
-          path: Routes.signIn,
-          builder: (context, state) => SignInPage(),
+          path: Routes.auth,
+          builder: (context, state) => AuthPage(),
         ),
         _defaultTransitionGoRoute(
           path: Routes.profile,
           builder: (context, state) => ProfilePage(),
         ),
-        _defaultTransitionGoRoute(
-          path: Routes.tokenDetails,
-          builder: (context, state) => TokenDetailsPage(),
-        ),
       ],
       redirect: (BuildContext context, GoRouterState state) {
         final onLoggedOutRoutes = [
-          Routes.signIn,
-          Routes.signUp,
+          Routes.auth,
         ].contains(state.fullPath);
 
         if (authState.value == null) {
@@ -82,19 +69,14 @@ final routerProvider = Provider<GoRouter>((ref) {
             // if the user is not logged in but currently on a page that should
             // only be visible for logged in users => redirect to signIn page.
             if (!onLoggedOutRoutes) {
-              return Routes.signIn;
+              return Routes.auth;
             }
-            break;
           case AuthState.SignedIn:
             // if the user is logged in but currently on a page that should
             // only be visible for logged out users => redirect to profile page.
             if (onLoggedOutRoutes) {
               return Routes.profile;
             }
-            break;
-          case AuthState.AskForPasskeyAppend:
-            // we are not handling passkey append in this example (yet)
-            return Routes.signIn;
         }
 
         return null;
diff --git a/packages/corbado_auth/example/lib/screens/email_verify_otp.dart b/packages/corbado_auth/example/lib/screens/email_verify_otp.dart
new file mode 100644
index 0000000..73fc7f2
--- /dev/null
+++ b/packages/corbado_auth/example/lib/screens/email_verify_otp.dart
@@ -0,0 +1,84 @@
+import 'package:corbado_auth/corbado_auth.dart';
+import 'package:corbado_auth_example/screens/helper.dart';
+import 'package:corbado_auth_example/widgets/filled_text_button.dart';
+import 'package:corbado_auth_example/widgets/outlined_text_button.dart';
+import 'package:flutter/material.dart';
+import 'package:flutter_hooks/flutter_hooks.dart';
+
+class EmailVerifyOtpScreen extends HookWidget implements CorbadoScreen<EmailVerifyBlock> {
+  final EmailVerifyBlock block;
+
+  EmailVerifyOtpScreen(this.block);
+
+  Widget build(BuildContext context) {
+    final emailController = useTextEditingController();
+
+    useEffect(() {
+      WidgetsBinding.instance.addPostFrameCallback((_) {
+        final maybeError = block.error;
+        if (maybeError != null) {
+          showNotificationError(context, maybeError.translatedError);
+        }
+      });
+    }, [block.error]);
+
+    return Column(
+      mainAxisAlignment: MainAxisAlignment.center,
+      children: [
+        const SizedBox(
+          height: 10,
+        ),
+        const Padding(
+          padding: EdgeInsets.symmetric(horizontal: 20, vertical: 5),
+          child: Text(
+            'Verify your email address',
+            style: TextStyle(
+              fontSize: 40,
+              fontWeight: FontWeight.bold,
+            ),
+          ),
+        ),
+        Padding(
+          padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),
+          child: Text(
+            'We have sent you a 6 digit code to ${block.data.email}. Please enter the code below.',
+            style: const TextStyle(
+              fontSize: 20,
+            ),
+          ),
+        ),
+        Padding(
+          padding: const EdgeInsets.symmetric(vertical: 4),
+          child: TextField(
+            controller: emailController,
+            decoration: const InputDecoration(
+              border: OutlineInputBorder(),
+              hintText: 'XXXXXX',
+            ),
+          ),
+        ),
+        SizedBox(
+          width: double.infinity,
+          height: 50,
+          child: FilledTextButton(
+            isLoading: block.data.primaryLoading,
+            onTap: () async {
+              await block.submitOtpCode(emailController.text);
+            },
+            content: 'Submit',
+          ),
+        ),
+        const SizedBox(height: 10),
+        SizedBox(
+          width: double.infinity,
+          height: 50,
+          child: OutlinedTextButton(
+            onTap: block.resendEmail,
+            content: 'Resend code',
+          ),
+        ),
+        const SizedBox(height: 10),
+      ],
+    );
+  }
+}
diff --git a/packages/corbado_auth/example/lib/screens/helper.dart b/packages/corbado_auth/example/lib/screens/helper.dart
new file mode 100644
index 0000000..81cd869
--- /dev/null
+++ b/packages/corbado_auth/example/lib/screens/helper.dart
@@ -0,0 +1,14 @@
+
+import 'package:flutter/material.dart';
+import 'package:overlay_support/overlay_support.dart';
+
+void showNotificationError(BuildContext context, String message) {
+  showSimpleNotification(
+    Text(message, style: TextStyle(color: Theme.of(context).colorScheme.onPrimary)),
+    leading: const Icon(
+      Icons.cancel,
+      color: Colors.red,
+    ),
+    background: Theme.of(context).colorScheme.primary,
+  );
+}
diff --git a/packages/corbado_auth/example/lib/screens/login_init.dart b/packages/corbado_auth/example/lib/screens/login_init.dart
new file mode 100644
index 0000000..81d7df8
--- /dev/null
+++ b/packages/corbado_auth/example/lib/screens/login_init.dart
@@ -0,0 +1,99 @@
+import 'package:corbado_auth/corbado_auth.dart';
+import 'package:corbado_auth_example/screens/helper.dart';
+import 'package:corbado_auth_example/widgets/filled_text_button.dart';
+import 'package:corbado_auth_example/widgets/generic_error.dart';
+import 'package:corbado_auth_example/widgets/outlined_text_button.dart';
+import 'package:flutter/foundation.dart';
+import 'package:flutter/material.dart';
+import 'package:flutter_hooks/flutter_hooks.dart';
+
+class LoginInitScreen extends HookWidget implements CorbadoScreen<LoginInitBlock> {
+  final LoginInitBlock block;
+
+  LoginInitScreen(this.block);
+
+  Widget build(BuildContext context) {
+    final emailController = useTextEditingController(text: block.data.loginIdentifier);
+
+    useEffect(() {
+      WidgetsBinding.instance.addPostFrameCallback((_) {
+        final maybeError = block.error;
+        if (maybeError != null) {
+          showNotificationError(context, maybeError.translatedError);
+        }
+      });
+    }, [block.error]);
+
+    return Column(
+      mainAxisAlignment: MainAxisAlignment.center,
+      children: [
+        const SizedBox(
+          height: 10,
+        ),
+        const Padding(
+          padding: EdgeInsets.symmetric(horizontal: 20, vertical: 5),
+          child: Text(
+            'Welcome back',
+            style: TextStyle(
+              fontSize: 40,
+              fontWeight: FontWeight.bold,
+            ),
+          ),
+        ),
+        const Padding(
+          padding: EdgeInsets.symmetric(horizontal: 20, vertical: 10),
+          child: Text(
+            'Enter your email address to log in with passkeys or email OTP.',
+            style: TextStyle(
+              fontSize: 20,
+            ),
+          ),
+        ),
+        Padding(
+          padding: const EdgeInsets.symmetric(vertical: 4),
+          child: TextField(
+            controller: emailController,
+            autofillHints: [_getAutofillHint()],
+            decoration: const InputDecoration(
+              border: OutlineInputBorder(),
+              hintText: 'Email address',
+            ),
+          ),
+        ),
+        MaybeGenericError(message: block.data.loginIdentifierError?.translatedError),
+        const SizedBox(height: 20),
+        SizedBox(
+          width: double.infinity,
+          height: 50,
+          child: FilledTextButton(
+            isLoading: block.data.primaryLoading,
+            onTap: () async {
+              final email = emailController.value.text;
+              await block.submitLogin(loginIdentifier: email);
+            },
+            content: 'Login',
+          ),
+        ),
+        const SizedBox(height: 10),
+        SizedBox(
+          width: double.infinity,
+          height: 50,
+          child: OutlinedTextButton(
+            onTap: block.navigateToSignup,
+            content: 'Create a new account',
+          ),
+        ),
+      ],
+    );
+  }
+
+  String _getAutofillHint() {
+    if (kIsWeb) {
+      // On web, only the first hint will be included in autocomplete
+      // See: https://api.flutter.dev/flutter/widgets/EditableText/autofillHints.html
+      return 'username webauthn';
+    } else {
+      return AutofillHints.username;
+    }
+  }
+}
diff --git a/packages/corbado_auth/example/lib/screens/passkey_append.dart b/packages/corbado_auth/example/lib/screens/passkey_append.dart
new file mode 100644
index 0000000..7eafce2
--- /dev/null
+++ b/packages/corbado_auth/example/lib/screens/passkey_append.dart
@@ -0,0 +1,79 @@
+import 'package:corbado_auth/corbado_auth.dart';
+import 'package:corbado_auth_example/screens/helper.dart';
+import 'package:corbado_auth_example/widgets/filled_text_button.dart';
+import 'package:corbado_auth_example/widgets/outlined_text_button.dart';
+import 'package:flutter/material.dart';
+import 'package:flutter_hooks/flutter_hooks.dart';
+
+class PasskeyAppendScreen extends HookWidget implements CorbadoScreen<PasskeyAppendBlock> {
+  final PasskeyAppendBlock block;
+
+  PasskeyAppendScreen(this.block);
+
+  Widget build(BuildContext context) {
+    useEffect(() {
+      WidgetsBinding.instance.addPostFrameCallback((_) {
+        final maybeError = block.error;
+        if (maybeError != null) {
+          showNotificationError(context, maybeError.detailedError());
+        }
+      });
+    }, [block.error]);
+
+    return Column(
+      mainAxisAlignment: MainAxisAlignment.center,
+      children: [
+        const SizedBox(height: 10),
+        const Padding(
+          padding: EdgeInsets.symmetric(horizontal: 20, vertical: 5),
+          child: Text(
+            'Set up your passkey',
+            style: TextStyle(
+              fontSize: 40,
+              fontWeight: FontWeight.bold,
+            ),
+          ),
+        ),
+        const Padding(
+          padding: EdgeInsets.symmetric(horizontal: 20, vertical: 10),
+          child: Text(
+            'Quick and secure login using Apple Touch ID or Face ID instead of passwords.',
+            style: TextStyle(
+              fontSize: 20,
+            ),
+          ),
+        ),
+        const SizedBox(height: 20),
+        SizedBox(
+          width: double.infinity,
+          height: 50,
+          child: FilledTextButton(
+            isLoading: block.data.primaryLoading,
+            onTap: () async {
+              await block.passkeyAppend();
+            },
+            content: 'Create passkey',
+          ),
+        ),
+        const SizedBox(height: 10),
+        if (block.data.preferredFallback != null) SizedBox(
+                width: double.infinity,
+                height: 50,
+                child: OutlinedTextButton(
+                  onTap: () => block.data.preferredFallback!.onTap(),
+                  content: block.data.preferredFallback!.label,
+                ),
+              ) else Container(),
+        if (block.data.canBeSkipped) SizedBox(
+          width: double.infinity,
+          height: 50,
+          child: OutlinedTextButton(
+            onTap: block.skipPasskeyAppend,
+            content: 'Maybe later',
+          ),
+        ) else Container(),
+        const SizedBox(height: 10),
+      ],
+    );
+  }
+}
diff --git a/packages/corbado_auth/example/lib/screens/passkey_verify.dart b/packages/corbado_auth/example/lib/screens/passkey_verify.dart
new file mode 100644
index 0000000..03253c2
--- /dev/null
+++ b/packages/corbado_auth/example/lib/screens/passkey_verify.dart
@@ -0,0 +1,64 @@
+import 'package:corbado_auth/corbado_auth.dart';
+import 'package:corbado_auth_example/screens/helper.dart';
+import 'package:corbado_auth_example/widgets/filled_text_button.dart';
+import 'package:corbado_auth_example/widgets/generic_error.dart';
+import 'package:corbado_auth_example/widgets/outlined_text_button.dart';
+import 'package:flutter/material.dart';
+import 'package:flutter_hooks/flutter_hooks.dart';
+
+class PasskeyVerifyScreen extends HookWidget implements CorbadoScreen<PasskeyVerifyBlock> {
+  final PasskeyVerifyBlock block;
+
+  PasskeyVerifyScreen(this.block);
+
+  Widget build(BuildContext context) {
+    useEffect(() {
+      WidgetsBinding.instance.addPostFrameCallback((_) {
+        final maybeError = block.error;
+        if (maybeError != null) {
+          showNotificationError(context, maybeError.translatedError);
+        }
+      });
+    }, [block.error]);
+
+    return Column(
+      mainAxisAlignment: MainAxisAlignment.center,
+      children: [
+        MaybeGenericError(message: block.error?.translatedError),
+        const SizedBox(height: 10),
+        const Padding(
+          padding: EdgeInsets.symmetric(horizontal: 20, vertical: 5),
+          child: Text(
+            'Login with your passkey',
+            style: TextStyle(
+              fontSize: 40,
+              fontWeight: FontWeight.bold,
+            ),
+          ),
+        ),
+        const SizedBox(height: 20),
+        SizedBox(
+          width: double.infinity,
+          height: 50,
+          child: FilledTextButton(
+            isLoading: block.data.primaryLoading,
+            onTap: () async {
+              await block.passkeyVerify();
+            },
+            content: 'Login with passkey',
+          ),
+        ),
+        const SizedBox(height: 10),
+        if (block.data.preferredFallback != null) SizedBox(
+                width: double.infinity,
+                height: 50,
+                child: OutlinedTextButton(
+                  onTap: () => block.data.preferredFallback!.onTap(),
+                  content: block.data.preferredFallback!.label,
+                ),
+              ) else Container(),
+        const SizedBox(height: 10),
+      ],
+    );
+  }
+}
diff --git a/packages/corbado_auth/example/lib/screens/signup_init.dart b/packages/corbado_auth/example/lib/screens/signup_init.dart
new file mode 100644
index 0000000..0df5f72
--- /dev/null
+++ b/packages/corbado_auth/example/lib/screens/signup_init.dart
@@ -0,0 +1,92 @@
+import 'package:corbado_auth/corbado_auth.dart';
+import 'package:corbado_auth_example/screens/helper.dart';
+import 'package:corbado_auth_example/widgets/filled_text_button.dart';
+import 'package:corbado_auth_example/widgets/generic_error.dart';
+import 'package:corbado_auth_example/widgets/outlined_text_button.dart';
+import 'package:flutter/material.dart';
+import 'package:flutter_hooks/flutter_hooks.dart';
+
+class SignupInitScreen extends HookWidget implements CorbadoScreen<SignupInitBlock> {
+  final SignupInitBlock block;
+
+  SignupInitScreen(this.block);
+
+  Widget build(BuildContext context) {
+    final email = block.data.email;
+    if (email == null) {
+      return Container();
+    }
+    final emailController = useTextEditingController(text: email.value);
+
+    useEffect(() {
+      WidgetsBinding.instance.addPostFrameCallback((_) {
+        final maybeError = block.error;
+        if (maybeError != null) {
+          showNotificationError(context, maybeError.translatedError);
+        }
+      });
+    }, [block.error]);
+
+    return Column(
+      mainAxisAlignment: MainAxisAlignment.center,
+      children: [
+        MaybeGenericError(message: block.error?.translatedError),
+        const SizedBox(
+          height: 10,
+        ),
+        const Padding(
+          padding: EdgeInsets.symmetric(horizontal: 20, vertical: 5),
+          child: Text(
+            'Tired of passwords?',
+            style: TextStyle(
+              fontSize: 40,
+              fontWeight: FontWeight.bold,
+            ),
+          ),
+        ),
+        const Padding(
+          padding: EdgeInsets.symmetric(horizontal: 20, vertical: 10),
+          child: Text(
+            'Sign up using your biometrics like fingerprint or face.',
+            style: TextStyle(
+              fontSize: 20,
+            ),
+          ),
+        ),
+        Padding(
+          padding: const EdgeInsets.symmetric(vertical: 4),
+          child: TextField(
+            key: const ValueKey('textfield-email'),
+            controller: emailController,
+            decoration: const InputDecoration(
+              border: OutlineInputBorder(),
+              hintText: 'Email address',
+            ),
+          ),
+        ),
+        MaybeGenericError(message: email.error?.translatedError),
+        const SizedBox(height: 20),
+        SizedBox(
+          width: double.infinity,
+          height: 50,
+          child: FilledTextButton(
+            isLoading: block.data.primaryLoading,
+            onTap: () async {
+              await block.submitSignupInit(email: emailController.text, fullName: 'fixed');
+            },
+            content: 'Sign up',
+          ),
+        ),
+        const SizedBox(height: 10),
+        SizedBox(
+          width: double.infinity,
+          height: 50,
+          child: OutlinedTextButton(
+            onTap: block.navigateToLogin,
+            content: 'I already have an account',
+          ),
+        ),
+      ],
+    );
+  }
+}
diff --git a/packages/corbado_auth/example/lib/widgets/generic_error.dart b/packages/corbado_auth/example/lib/widgets/generic_error.dart
new file mode 100644
index 0000000..abf0fe2
--- /dev/null
+++ b/packages/corbado_auth/example/lib/widgets/generic_error.dart
@@ -0,0 +1,22 @@
+import 'package:flutter/material.dart';
+
+class MaybeGenericError extends StatelessWidget {
+  final String? message;
+
+  const MaybeGenericError({super.key, required this.message});
+
+  @override
+  Widget build(BuildContext context) {
+    if (message == null) {
+      return Container();
+    }
+
+    return Text(
+        message!,
+        style: const TextStyle(
+          color: Colors.red,
+          fontSize: 14,
+      ),
+    );
+  }
+}
diff --git a/packages/corbado_auth/example/pubspec.yaml b/packages/corbado_auth/example/pubspec.yaml
index 3c35ce1..1f15b3f 100644
--- a/packages/corbado_auth/example/pubspec.yaml
+++ b/packages/corbado_auth/example/pubspec.yaml
@@ -1,5 +1,5 @@
 name: corbado_auth_example
-description: Example code
+description: Example code that shows how to use corbado_auth
 version: 0.0.1
 publish_to: none
 
@@ -10,14 +10,20 @@ environment:
 dependencies:
   corbado_auth:
     path: ../
-  get_it: ^7.6.0
+  flutter:
+    sdk: flutter
+  flutter_hooks: ^0.20.3
   go_router: ^10.1.2
   json_editor: ^0.0.8
   url_launcher: ^6.2.1
-  flutter_hooks: ^0.20.3
   riverpod: ^2.3.10
   flutter_riverpod: ^2.3.10
   hooks_riverpod: 2.4.0
+  overlay_support: ^2.1.0
+
+dev_dependencies:
+  integration_test:
+    sdk: flutter
 
 flutter:
   uses-material-design: true
\ No newline at end of file
diff --git a/packages/corbado_auth/example/web/bundle.js b/packages/corbado_auth/example/web/bundle.js
index f36999d..a9512e9 100644
--- a/packages/corbado_auth/example/web/bundle.js
+++ b/packages/corbado_auth/example/web/bundle.js
@@ -1,251 +1,251 @@
 var PasskeyAuthenticator = (function (exports) {
     'use strict';
 
-    /******************************************************************************
-    Copyright (c) Microsoft Corporation.
-
-    Permission to use, copy, modify, and/or distribute this software for any
-    purpose with or without fee is hereby granted.
-
-    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
-    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
-    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
-    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
-    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
-    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
-    PERFORMANCE OF THIS SOFTWARE.
-    ***************************************************************************** */
-    /* global Reflect, Promise, SuppressedError, Symbol */
-
-
-    function __classPrivateFieldGet(receiver, state, kind, f) {
-        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
-        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
-        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
-    }
-
-    function __classPrivateFieldSet(receiver, state, value, kind, f) {
-        if (kind === "m") throw new TypeError("Private method is not writable");
-        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
-        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
-        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
-    }
-
-    typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
-        var e = new Error(message);
-        return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
+    /******************************************************************************
+     Copyright (c) Microsoft Corporation.
+
+     Permission to use, copy, modify, and/or distribute this software for any
+     purpose with or without fee is hereby granted.
+
+     THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
+     REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
+     AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
+     INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
+     LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
+     OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
+     PERFORMANCE OF THIS SOFTWARE.
+     ***************************************************************************** */
+    /* global Reflect, Promise, SuppressedError, Symbol */
+
+
+    function __classPrivateFieldGet(receiver, state, kind, f) {
+        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
+        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
+        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
+    }
+
+    function __classPrivateFieldSet(receiver, state, value, kind, f) {
+        if (kind === "m") throw new TypeError("Private method is not writable");
+        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
+        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
+        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
+    }
+
+    typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
+        var e = new Error(message);
+        return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
     };
 
     // src/webauthn-json/base64url.ts
     function base64urlToBuffer(baseurl64String) {
-      const padding = "==".slice(0, (4 - baseurl64String.length % 4) % 4);
-      const base64String = baseurl64String.replace(/-/g, "+").replace(/_/g, "/") + padding;
-      const str = atob(base64String);
-      const buffer = new ArrayBuffer(str.length);
-      const byteView = new Uint8Array(buffer);
-      for (let i = 0; i < str.length; i++) {
-        byteView[i] = str.charCodeAt(i);
-      }
-      return buffer;
+        const padding = "==".slice(0, (4 - baseurl64String.length % 4) % 4);
+        const base64String = baseurl64String.replace(/-/g, "+").replace(/_/g, "/") + padding;
+        const str = atob(base64String);
+        const buffer = new ArrayBuffer(str.length);
+        const byteView = new Uint8Array(buffer);
+        for (let i = 0; i < str.length; i++) {
+            byteView[i] = str.charCodeAt(i);
+        }
+        return buffer;
     }
     function bufferToBase64url(buffer) {
-      const byteView = new Uint8Array(buffer);
-      let str = "";
-      for (const charCode of byteView) {
-        str += String.fromCharCode(charCode);
-      }
-      const base64String = btoa(str);
-      const base64urlString = base64String.replace(/\+/g, "-").replace(
-        /\//g,
-        "_"
-      ).replace(/=/g, "");
-      return base64urlString;
+        const byteView = new Uint8Array(buffer);
+        let str = "";
+        for (const charCode of byteView) {
+            str += String.fromCharCode(charCode);
+        }
+        const base64String = btoa(str);
+        const base64urlString = base64String.replace(/\+/g, "-").replace(
+            /\//g,
+            "_"
+        ).replace(/=/g, "");
+        return base64urlString;
     }
 
     // src/webauthn-json/convert.ts
     var copyValue = "copy";
     var convertValue = "convert";
     function convert(conversionFn, schema2, input) {
-      if (schema2 === copyValue) {
-        return input;
-      }
-      if (schema2 === convertValue) {
-        return conversionFn(input);
-      }
-      if (schema2 instanceof Array) {
-        return input.map((v) => convert(conversionFn, schema2[0], v));
-      }
-      if (schema2 instanceof Object) {
-        const output = {};
-        for (const [key, schemaField] of Object.entries(schema2)) {
-          if (schemaField.derive) {
-            const v = schemaField.derive(input);
-            if (v !== void 0) {
-              input[key] = v;
-            }
-          }
-          if (!(key in input)) {
-            if (schemaField.required) {
-              throw new Error(`Missing key: ${key}`);
+        if (schema2 === copyValue) {
+            return input;
+        }
+        if (schema2 === convertValue) {
+            return conversionFn(input);
+        }
+        if (schema2 instanceof Array) {
+            return input.map((v) => convert(conversionFn, schema2[0], v));
+        }
+        if (schema2 instanceof Object) {
+            const output = {};
+            for (const [key, schemaField] of Object.entries(schema2)) {
+                if (schemaField.derive) {
+                    const v = schemaField.derive(input);
+                    if (v !== undefined) {
+                        input[key] = v;
+                    }
+                }
+                if (!(key in input)) {
+                    if (schemaField.required) {
+                        throw new Error(`Missing key: ${key}`);
+                    }
+                    continue;
+                }
+                if (input[key] == null) {
+                    output[key] = null;
+                    continue;
+                }
+                output[key] = convert(
+                    conversionFn,
+                    schemaField.schema,
+                    input[key]
+                );
             }
-            continue;
-          }
-          if (input[key] == null) {
-            output[key] = null;
-            continue;
-          }
-          output[key] = convert(
-            conversionFn,
-            schemaField.schema,
-            input[key]
-          );
+            return output;
         }
-        return output;
-      }
     }
     function derived(schema2, derive) {
-      return {
-        required: true,
-        schema: schema2,
-        derive
-      };
+        return {
+            required: true,
+            schema: schema2,
+            derive
+        };
     }
     function required(schema2) {
-      return {
-        required: true,
-        schema: schema2
-      };
+        return {
+            required: true,
+            schema: schema2
+        };
     }
     function optional(schema2) {
-      return {
-        required: false,
-        schema: schema2
-      };
+        return {
+            required: false,
+            schema: schema2
+        };
     }
 
     // src/webauthn-json/basic/schema.ts
     var publicKeyCredentialDescriptorSchema = {
-      type: required(copyValue),
-      id: required(convertValue),
-      transports: optional(copyValue)
+        type: required(copyValue),
+        id: required(convertValue),
+        transports: optional(copyValue)
     };
     var simplifiedExtensionsSchema = {
-      appid: optional(copyValue),
-      appidExclude: optional(copyValue),
-      credProps: optional(copyValue)
+        appid: optional(copyValue),
+        appidExclude: optional(copyValue),
+        credProps: optional(copyValue)
     };
     var simplifiedClientExtensionResultsSchema = {
-      appid: optional(copyValue),
-      appidExclude: optional(copyValue),
-      credProps: optional(copyValue)
+        appid: optional(copyValue),
+        appidExclude: optional(copyValue),
+        credProps: optional(copyValue)
     };
     var credentialCreationOptions = {
-      publicKey: required({
-        rp: required(copyValue),
-        user: required({
-          id: required(convertValue),
-          name: required(copyValue),
-          displayName: required(copyValue)
+        publicKey: required({
+            rp: required(copyValue),
+            user: required({
+                id: required(convertValue),
+                name: required(copyValue),
+                displayName: required(copyValue)
+            }),
+            challenge: required(convertValue),
+            pubKeyCredParams: required(copyValue),
+            timeout: optional(copyValue),
+            excludeCredentials: optional([publicKeyCredentialDescriptorSchema]),
+            authenticatorSelection: optional(copyValue),
+            attestation: optional(copyValue),
+            extensions: optional(simplifiedExtensionsSchema)
         }),
-        challenge: required(convertValue),
-        pubKeyCredParams: required(copyValue),
-        timeout: optional(copyValue),
-        excludeCredentials: optional([publicKeyCredentialDescriptorSchema]),
-        authenticatorSelection: optional(copyValue),
-        attestation: optional(copyValue),
-        extensions: optional(simplifiedExtensionsSchema)
-      }),
-      signal: optional(copyValue)
+        signal: optional(copyValue)
     };
     var publicKeyCredentialWithAttestation = {
-      type: required(copyValue),
-      id: required(copyValue),
-      rawId: required(convertValue),
-      authenticatorAttachment: optional(copyValue),
-      response: required({
-        clientDataJSON: required(convertValue),
-        attestationObject: required(convertValue),
-        transports: derived(
-          copyValue,
-          (response) => {
-            var _a;
-            return ((_a = response.getTransports) == null ? void 0 : _a.call(response)) || [];
-          }
+        type: required(copyValue),
+        id: required(copyValue),
+        rawId: required(convertValue),
+        authenticatorAttachment: optional(copyValue),
+        response: required({
+            clientDataJSON: required(convertValue),
+            attestationObject: required(convertValue),
+            transports: derived(
+                copyValue,
+                (response) => {
+                    var _a;
+                    return ((_a = response.getTransports) == null ? undefined : _a.call(response)) || [];
+                }
+            )
+        }),
+        clientExtensionResults: derived(
+            simplifiedClientExtensionResultsSchema,
+            (pkc) => pkc.getClientExtensionResults()
         )
-      }),
-      clientExtensionResults: derived(
-        simplifiedClientExtensionResultsSchema,
-        (pkc) => pkc.getClientExtensionResults()
-      )
     };
     var credentialRequestOptions = {
-      mediation: optional(copyValue),
-      publicKey: required({
-        challenge: required(convertValue),
-        timeout: optional(copyValue),
-        rpId: optional(copyValue),
-        allowCredentials: optional([publicKeyCredentialDescriptorSchema]),
-        userVerification: optional(copyValue),
-        extensions: optional(simplifiedExtensionsSchema)
-      }),
-      signal: optional(copyValue)
+        mediation: optional(copyValue),
+        publicKey: required({
+            challenge: required(convertValue),
+            timeout: optional(copyValue),
+            rpId: optional(copyValue),
+            allowCredentials: optional([publicKeyCredentialDescriptorSchema]),
+            userVerification: optional(copyValue),
+            extensions: optional(simplifiedExtensionsSchema)
+        }),
+        signal: optional(copyValue)
     };
     var publicKeyCredentialWithAssertion = {
-      type: required(copyValue),
-      id: required(copyValue),
-      rawId: required(convertValue),
-      authenticatorAttachment: optional(copyValue),
-      response: required({
-        clientDataJSON: required(convertValue),
-        authenticatorData: required(convertValue),
-        signature: required(convertValue),
-        userHandle: required(convertValue)
-      }),
-      clientExtensionResults: derived(
-        simplifiedClientExtensionResultsSchema,
-        (pkc) => pkc.getClientExtensionResults()
-      )
+        type: required(copyValue),
+        id: required(copyValue),
+        rawId: required(convertValue),
+        authenticatorAttachment: optional(copyValue),
+        response: required({
+            clientDataJSON: required(convertValue),
+            authenticatorData: required(convertValue),
+            signature: required(convertValue),
+            userHandle: required(convertValue)
+        }),
+        clientExtensionResults: derived(
+            simplifiedClientExtensionResultsSchema,
+            (pkc) => pkc.getClientExtensionResults()
+        )
     };
 
     // src/webauthn-json/basic/api.ts
     function createRequestFromJSON(requestJSON) {
-      return convert(base64urlToBuffer, credentialCreationOptions, requestJSON);
+        return convert(base64urlToBuffer, credentialCreationOptions, requestJSON);
     }
     function createResponseToJSON(credential) {
-      return convert(
-        bufferToBase64url,
-        publicKeyCredentialWithAttestation,
-        credential
-      );
+        return convert(
+            bufferToBase64url,
+            publicKeyCredentialWithAttestation,
+            credential
+        );
     }
     async function create(requestJSON) {
-      const credential = await navigator.credentials.create(
-        createRequestFromJSON(requestJSON)
-      );
-      return createResponseToJSON(credential);
+        const credential = await navigator.credentials.create(
+            createRequestFromJSON(requestJSON)
+        );
+        return createResponseToJSON(credential);
     }
     function getRequestFromJSON(requestJSON) {
-      return convert(base64urlToBuffer, credentialRequestOptions, requestJSON);
+        return convert(base64urlToBuffer, credentialRequestOptions, requestJSON);
     }
     function getResponseToJSON(credential) {
-      return convert(
-        bufferToBase64url,
-        publicKeyCredentialWithAssertion,
-        credential
-      );
+        return convert(
+            bufferToBase64url,
+            publicKeyCredentialWithAssertion,
+            credential
+        );
     }
     async function get(requestJSON) {
-      const credential = await navigator.credentials.get(
-        getRequestFromJSON(requestJSON)
-      );
-      return getResponseToJSON(credential);
+        const credential = await navigator.credentials.get(
+            getRequestFromJSON(requestJSON)
+        );
+        return getResponseToJSON(credential);
     }
 
     var _PasskeyAuthenticator_abortController;
     const ABORTED_BY_USER = 'operation aborted by user.';
     class PasskeyAuthenticator {
         constructor() {
-            _PasskeyAuthenticator_abortController.set(this, void 0);
+            _PasskeyAuthenticator_abortController.set(this, undefined);
         }
         async register(params) {
             try {
@@ -326,8 +326,30 @@ var PasskeyAuthenticator = (function (exports) {
     }
 
     let passkeyAuthenticator = new PasskeyAuthenticator();
-    async function canAuthenticate() {
-        return await PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable();
+    async function isUserVerifyingPlatformAuthenticatorAvailable() {
+        if (!window.PublicKeyCredential) {
+            return undefined;
+        }
+        try {
+            return await window.PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable();
+        }
+        catch (e) {
+            return undefined;
+        }
+    }
+    async function isConditionalMediationAvailable() {
+        if (!window.PublicKeyCredential) {
+            return undefined;
+        }
+        try {
+            return await window.PublicKeyCredential.isConditionalMediationAvailable();
+        }
+        catch (e) {
+            return undefined;
+        }
+    }
+    function hasPasskeySupport() {
+        return Boolean(window.PublicKeyCredential);
     }
     function init() {
         passkeyAuthenticator = new PasskeyAuthenticator();
@@ -342,9 +364,11 @@ var PasskeyAuthenticator = (function (exports) {
         passkeyAuthenticator.abortCurrentWebAuthnOperation();
     }
 
-    exports.canAuthenticate = canAuthenticate;
     exports.cancelCurrentAuthenticatorOperation = cancelCurrentAuthenticatorOperation;
+    exports.hasPasskeySupport = hasPasskeySupport;
     exports.init = init;
+    exports.isConditionalMediationAvailable = isConditionalMediationAvailable;
+    exports.isUserVerifyingPlatformAuthenticatorAvailable = isUserVerifyingPlatformAuthenticatorAvailable;
     exports.login = login;
     exports.register = register;
 
diff --git a/packages/corbado_auth/example/web/index.html b/packages/corbado_auth/example/web/index.html
index dec4cbc..62ba55f 100644
--- a/packages/corbado_auth/example/web/index.html
+++ b/packages/corbado_auth/example/web/index.html
@@ -35,7 +35,8 @@
     // The value below is injected by flutter build, do not touch.
     var serviceWorkerVersion = null;
   </script>
-  <script src="https://github.com/corbado/flutter-passkeys/releases/download/2.0.0-dev.1/bundle.js" type="application/javascript"></script>
+  <!--<script src="https://github.com/corbado/flutter-passkeys/releases/download/2.4.0/bundle.js" type="application/javascript"></script>-->
+  <script src="./bundle.js" type="application/javascript"></script>
   <!-- This script adds the flutter initialization JS code -->
   <script src="flutter.js" defer></script>
 </head>
diff --git a/packages/corbado_auth/lib/corbado_auth.dart b/packages/corbado_auth/lib/corbado_auth.dart
index 8015fb3..f44b8b4 100644
--- a/packages/corbado_auth/lib/corbado_auth.dart
+++ b/packages/corbado_auth/lib/corbado_auth.dart
@@ -1,7 +1,11 @@
 /// Corbado auth flutter package
 library corbado_auth;
 
+export 'src/blocks/email_verify_block.dart';
+export 'src/blocks/login_init_block.dart';
+export 'src/blocks/passkey_append_block.dart';
+export 'src/blocks/passkey_verify_block.dart';
+export 'src/blocks/signup_init_block.dart';
 export 'src/corbado_auth.dart';
-export 'src/corbado_auth_config.dart';
-export 'src/custom_corbado_auth.dart';
-export 'src/types/types.dart';
\ No newline at end of file
+export 'src/corbado_auth_component.dart';
+export 'src/types/types.dart';
diff --git a/packages/corbado_auth/lib/src/blocks/completed_block.dart b/packages/corbado_auth/lib/src/blocks/completed_block.dart
new file mode 100644
index 0000000..6e645ea
--- /dev/null
+++ b/packages/corbado_auth/lib/src/blocks/completed_block.dart
@@ -0,0 +1,25 @@
+import 'package:corbado_auth/src/blocks/types.dart';
+import 'package:corbado_auth/src/process_handler.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+class CompletedBlockData {
+  final String shortSession;
+  final String? longSession;
+
+  CompletedBlockData(this.shortSession, this.longSession);
+
+  factory CompletedBlockData.fromProcessResponse(GeneralBlockCompleted typed) {
+    return CompletedBlockData(typed.shortSession, typed.longSession);
+  }
+}
+
+class CompletedBlock extends Block<CompletedBlockData> {
+  CompletedBlock({required ProcessHandler processHandler, required CompletedBlockData data})
+      : super(
+          processHandler: processHandler,
+          type: BlockType.completed,
+          alternatives: [],
+          data: data,
+          authProcessType: AuthProcessType.Login,
+        );
+}
diff --git a/packages/corbado_auth/lib/src/blocks/email_verify_block.dart b/packages/corbado_auth/lib/src/blocks/email_verify_block.dart
new file mode 100644
index 0000000..2bb20a4
--- /dev/null
+++ b/packages/corbado_auth/lib/src/blocks/email_verify_block.dart
@@ -0,0 +1,112 @@
+import 'package:corbado_auth/src/blocks/types.dart';
+import 'package:corbado_auth/src/process_handler.dart';
+import 'package:corbado_auth/src/types/screen_names.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart' as Api;
+
+enum VerificationMethod {
+  emailOTP,
+  emailLink,
+}
+
+class EmailVerifyBlockData {
+  EmailVerifyBlockData(
+      {required this.email,
+      required this.verificationMethod,
+      required this.retryNotBefore,
+      required this.isPostLoginVerification});
+
+  final String email;
+  final VerificationMethod verificationMethod;
+  DateTime? retryNotBefore;
+  final bool? isPostLoginVerification;
+  bool primaryLoading = false;
+
+  factory EmailVerifyBlockData.fromProcessResponse(Api.GeneralBlockVerifyIdentifier typed) {
+    final verificationMethod = typed.verificationMethod == Api.VerificationMethod.emailOtp
+        ? VerificationMethod.emailOTP
+        : VerificationMethod.emailLink;
+
+    DateTime? retryNotBefore;
+    if (typed.retryNotBefore != null) {
+      retryNotBefore = DateTime.fromMillisecondsSinceEpoch(typed.retryNotBefore! * 1000);
+    }
+
+    return EmailVerifyBlockData(
+      email: typed.identifier,
+      verificationMethod: verificationMethod,
+      retryNotBefore: retryNotBefore,
+      isPostLoginVerification: typed.isPostLoginVerification,
+    );
+  }
+}
+
+class EmailVerifyBlock extends Block<EmailVerifyBlockData> {
+  EmailVerifyBlock({required ProcessHandler processHandler, required EmailVerifyBlockData data, required Api.AuthType authType})
+      : super(
+          processHandler: processHandler,
+          type: Api.BlockType.emailVerify,
+          alternatives: [],
+          initialScreen: ScreenNames.EmailVerifyOTP,
+          data: data,
+          authProcessType: authType == Api.AuthType.login ? AuthProcessType.Login : AuthProcessType.Signup,
+        );
+
+  init() {
+    // navigateToVerifyEmail();
+  }
+
+  navigateToEditEmail() {
+    error = null;
+    processHandler.updateCurrentScreen(ScreenNames.EmailEdit);
+  }
+
+  navigateToVerifyEmail() {
+    error = null;
+
+    if (data.verificationMethod == VerificationMethod.emailOTP) {
+      processHandler.updateCurrentScreen(ScreenNames.EmailVerifyOTP);
+    } else {
+      processHandler.updateCurrentScreen(ScreenNames.EmailVerifyOTP);
+    }
+  }
+
+  submitOtpCode(String otpCode) async {
+    try {
+      data.primaryLoading = true;
+      processHandler.notifyCurrentScreen();
+
+      final res = await corbadoService.verifyEmailOtpCode(otpCode);
+      processHandler.updateBlockFromServer(res);
+    } on CorbadoError catch (e) {
+      data.primaryLoading = false;
+      processHandler.updateBlockFromError(e);
+    }
+  }
+
+  resendEmail() async {
+    try {
+      if (data.verificationMethod == VerificationMethod.emailOTP) {
+        final res = await corbadoService.sendEmailOtpCode();
+        processHandler.updateBlockFromServer(res);
+
+        return;
+      } else {
+        final res = await corbadoService.sendEmailLink();
+        processHandler.updateBlockFromServer(res);
+
+        return;
+      }
+    } on CorbadoError catch (e) {
+      processHandler.updateBlockFromError(e);
+    }
+  }
+
+  updateEmail(String newValue) async {
+    try {
+      final res = await corbadoService.updateEmail(newValue);
+      processHandler.updateBlockFromServer(res);
+    } on CorbadoError catch (e) {
+      processHandler.updateBlockFromError(e);
+    }
+  }
+}
diff --git a/packages/corbado_auth/lib/src/blocks/login_init_block.dart b/packages/corbado_auth/lib/src/blocks/login_init_block.dart
new file mode 100644
index 0000000..37bf848
--- /dev/null
+++ b/packages/corbado_auth/lib/src/blocks/login_init_block.dart
@@ -0,0 +1,92 @@
+import 'package:corbado_auth/corbado_auth.dart';
+import 'package:corbado_auth/src/blocks/types.dart';
+import 'package:corbado_auth/src/process_handler.dart';
+import 'package:corbado_auth/src/types/screen_names.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+class LoginInitBlockData {
+  LoginInitBlockData({
+    required this.loginIdentifier,
+    required this.loginIdentifierError,
+    required this.conditionalUIChallenge,
+    required this.isPhoneFocused,
+    required this.emailEnabled,
+    required this.usernameEnabled,
+    required this.phoneEnabled,
+  });
+
+  final String loginIdentifier;
+  final CorbadoError? loginIdentifierError;
+  final String? conditionalUIChallenge;
+  final bool isPhoneFocused;
+  final bool emailEnabled;
+  final bool usernameEnabled;
+  final bool phoneEnabled;
+  bool primaryLoading = false;
+
+  factory LoginInitBlockData.fromProcessResponse(GeneralBlockLoginInit typed) {
+    return LoginInitBlockData(
+      loginIdentifier: typed.identifierValue,
+      loginIdentifierError: CorbadoError.fromRequestError(typed.fieldError),
+      conditionalUIChallenge: typed.conditionalUIChallenge,
+      isPhoneFocused: typed.isPhone,
+      emailEnabled: typed.isEmailAvailable,
+      usernameEnabled: typed.isUsernameAvailable,
+      phoneEnabled: typed.isPhoneAvailable,
+    );
+  }
+}
+
+class LoginInitBlock extends Block<LoginInitBlockData> {
+  LoginInitBlock({required ProcessHandler processHandler, required LoginInitBlockData data})
+      : super(
+          processHandler: processHandler,
+          type: BlockType.loginInit,
+          alternatives: [],
+          initialScreen: ScreenNames.LoginInit,
+          data: data,
+          authProcessType: AuthProcessType.Login,
+        );
+
+  init() {
+    initConditionalUI();
+  }
+
+  navigateToSignup() {
+    final newPrimaryBlock = alternatives.first;
+    final newAlternatives = [this];
+
+    processHandler.updateBlockFromClient(newPrimaryBlock, newAlternatives);
+  }
+
+  submitLogin({required String loginIdentifier, bool isPhone = false}) async {
+    try {
+      data.primaryLoading = true;
+      processHandler.notifyCurrentScreen();
+
+      final response = await corbadoService.loginInit(loginIdentifier, isPhone);
+      processHandler.updateBlockFromServer(response);
+    } on CorbadoError catch (e) {
+      data.primaryLoading = false;
+      processHandler.updateBlockFromError(e);
+    }
+  }
+
+  initConditionalUI() async {
+    final challenge = data.conditionalUIChallenge;
+    if (challenge == null) {
+      print('Conditional UI can not be started (missing challenge)');
+      return;
+    }
+
+    try {
+      final response = await corbadoService.verifyPasskeyConditional(challenge, true);
+      processHandler.updateBlockFromServer(response);
+    } on CorbadoError catch (e) {
+      processHandler.updateBlockFromError(e);
+    } on AuthenticatorException catch (e) {
+      // all authenticator exceptions that have not been translated to errors are handled silently here
+      return;
+    }
+  }
+}
diff --git a/packages/corbado_auth/lib/src/blocks/passkey_append_block.dart b/packages/corbado_auth/lib/src/blocks/passkey_append_block.dart
new file mode 100644
index 0000000..d4a427e
--- /dev/null
+++ b/packages/corbado_auth/lib/src/blocks/passkey_append_block.dart
@@ -0,0 +1,123 @@
+import 'package:corbado_auth/corbado_auth.dart';
+import 'package:corbado_auth/src/blocks/email_verify_block.dart';
+import 'package:corbado_auth/src/blocks/types.dart';
+import 'package:corbado_auth/src/process_handler.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart' as Api;
+
+class PasskeyAppendBlockData {
+  List<PasskeyFallback> availableFallbacks;
+  bool canBeSkipped;
+  final String identifierValue;
+  final Api.LoginIdentifierType identifierType;
+  PasskeyFallback? preferredFallback;
+  final bool autoSubmit;
+  bool primaryLoading = false;
+
+  factory PasskeyAppendBlockData.fromProcessResponse(Api.GeneralBlockPasskeyAppend typed) {
+    return PasskeyAppendBlockData(
+      availableFallbacks: [],
+      identifierValue: typed.identifierValue,
+      identifierType: typed.identifierType,
+      autoSubmit: true,
+    );
+  }
+
+  PasskeyAppendBlockData({
+    this.availableFallbacks = const [],
+    this.canBeSkipped = false,
+    required this.identifierValue,
+    required this.identifierType,
+    this.preferredFallback,
+    required this.autoSubmit,
+  });
+}
+
+class PasskeyAppendBlock extends Block<PasskeyAppendBlockData> {
+  PasskeyAppendBlock(
+      {required ProcessHandler processHandler, required PasskeyAppendBlockData data, required Api.AuthType authType})
+      : super(
+          processHandler: processHandler,
+          initialScreen: ScreenNames.PasskeyAppend,
+          type: Api.BlockType.passkeyAppend,
+          alternatives: [],
+          data: data,
+          authProcessType: authType == Api.AuthType.login ? AuthProcessType.Login : AuthProcessType.Signup,
+        );
+
+  init() {
+    const allowedAlternatives = [
+      Api.BlockType.emailVerify,
+      Api.BlockType.phoneVerify,
+    ];
+    data.availableFallbacks =
+        alternatives.where((alternative) => allowedAlternatives.contains(alternative.type)).map((alternative) {
+      switch (alternative.type) {
+        case Api.BlockType.emailVerify:
+          final typed = alternative.data as EmailVerifyBlockData;
+          if (typed.verificationMethod == VerificationMethod.emailLink) {
+            throw Exception('Currently not supported');
+          }
+
+          return PasskeyFallback(
+            label: 'Email verification',
+            onTap: initFallbackEmailOtp,
+          );
+
+        case Api.BlockType.completed:
+        case Api.BlockType.phoneVerify:
+          throw Exception('Currently not supported');
+
+        default:
+          throw Exception('Currently not supported');
+      }
+    }).toList();
+
+    switch (data.availableFallbacks.length) {
+      case 0:
+        data.preferredFallback = null;
+      case 1:
+        data.preferredFallback = data.availableFallbacks.first;
+      default:
+        throw Exception('Currently not supported');
+    }
+
+    data.canBeSkipped = alternatives.any((a) => a.type == Api.BlockType.completed);
+
+    // depending on data.canBeSkipped is only a short term fix
+    if (data.autoSubmit && !data.canBeSkipped) {
+      passkeyAppend();
+    }
+  }
+
+  passkeyAppend() async {
+    try {
+      error = null;
+      data.primaryLoading = true;
+      processHandler.notifyCurrentScreen();
+
+      final response = await corbadoService.appendPasskey();
+      processHandler.updateBlockFromServer(response);
+    } on CorbadoError catch (e) {
+      data.primaryLoading = false;
+      processHandler.updateBlockFromError(e);
+    }
+  }
+
+  Future<void> initFallbackEmailOtp() async {
+    try {
+      final response = await corbadoService.sendEmailOtpCode();
+      processHandler.updateBlockFromServer(response);
+    } on CorbadoError catch (e) {
+      processHandler.updateBlockFromError(e);
+    }
+  }
+
+  skipPasskeyAppend() async {
+    try {
+      final response = await corbadoService.completeAuthProcess();
+      processHandler.updateBlockFromServer(response);
+    } on CorbadoError catch (e) {
+      processHandler.updateBlockFromError(e);
+    }
+  }
+}
diff --git a/packages/corbado_auth/lib/src/blocks/passkey_verify_block.dart b/packages/corbado_auth/lib/src/blocks/passkey_verify_block.dart
new file mode 100644
index 0000000..729f252
--- /dev/null
+++ b/packages/corbado_auth/lib/src/blocks/passkey_verify_block.dart
@@ -0,0 +1,99 @@
+import 'package:corbado_auth/corbado_auth.dart';
+import 'package:corbado_auth/src/blocks/email_verify_block.dart';
+import 'package:corbado_auth/src/blocks/types.dart';
+import 'package:corbado_auth/src/process_handler.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart' as Api;
+
+class PasskeyVerifyBlockData {
+  List<PasskeyFallback> availableFallbacks;
+  final String identifierValue;
+  PasskeyFallback? preferredFallback;
+  bool primaryLoading = false;
+
+  factory PasskeyVerifyBlockData.fromProcessResponse(Api.GeneralBlockPasskeyVerify typed) {
+    return PasskeyVerifyBlockData(
+      availableFallbacks: [],
+      identifierValue: typed.identifierValue,
+    );
+  }
+
+  PasskeyVerifyBlockData({
+    this.availableFallbacks = const [],
+    required this.identifierValue,
+    this.preferredFallback,
+  });
+}
+
+class PasskeyVerifyBlock extends Block<PasskeyVerifyBlockData> {
+  PasskeyVerifyBlock({required ProcessHandler processHandler, required PasskeyVerifyBlockData data})
+      : super(
+          processHandler: processHandler,
+          initialScreen: ScreenNames.PasskeyVerify,
+          type: Api.BlockType.passkeyVerify,
+          alternatives: [],
+          data: data,
+          authProcessType: AuthProcessType.Login,
+        );
+
+  init() {
+    data.availableFallbacks = alternatives.map((alternative) {
+      switch (alternative.type) {
+        case Api.BlockType.emailVerify:
+          final typed = alternative.data as EmailVerifyBlockData;
+          if (typed.verificationMethod == VerificationMethod.emailLink) {
+            throw Exception('Currently not supported');
+          }
+
+          return PasskeyFallback(
+            label: 'Email verification',
+            onTap: initFallbackEmailOtp,
+          );
+
+        case Api.BlockType.phoneVerify:
+          throw Exception('Currently not supported');
+
+        default:
+          throw Exception('Currently not supported');
+      }
+    }).toList();
+
+    switch (data.availableFallbacks.length) {
+      case 0:
+        data.preferredFallback = null;
+      case 1:
+        data.preferredFallback = data.availableFallbacks.first;
+      default:
+        throw Exception('Currently not supported');
+    }
+
+    passkeyVerify();
+  }
+
+  passkeyVerify() async {
+    try {
+      error = null;
+      data.primaryLoading = true;
+      final response = await corbadoService.verifyPasskey();
+      data.primaryLoading = false;
+      processHandler.updateBlockFromServer(response);
+    } on CorbadoError catch (e) {
+      data.primaryLoading = false;
+      processHandler.updateBlockFromError(e);
+    } on NoCredentialsAvailableException {
+      await initFallbackEmailOtp();
+    }
+  }
+
+  Future<void> initFallbackEmailOtp() async {
+    try {
+      final response = await corbadoService.sendEmailOtpCode();
+      processHandler.updateBlockFromServer(response);
+    } on CorbadoError catch (e) {
+      processHandler.updateBlockFromError(e);
+    }
+  }
+
+  skipPasskeyAppend() {
+
+  }
+}
diff --git a/packages/corbado_auth/lib/src/blocks/signup_init_block.dart b/packages/corbado_auth/lib/src/blocks/signup_init_block.dart
new file mode 100644
index 0000000..6731769
--- /dev/null
+++ b/packages/corbado_auth/lib/src/blocks/signup_init_block.dart
@@ -0,0 +1,69 @@
+import 'package:corbado_auth/src/blocks/types.dart';
+import 'package:corbado_auth/src/process_handler.dart';
+import 'package:corbado_auth/src/types/screen_names.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+class SignupInitBlockData {
+  final TextFieldWithError? fullName;
+  final TextFieldWithError? email;
+
+  bool primaryLoading = false;
+
+  SignupInitBlockData({this.fullName, this.email});
+
+  factory SignupInitBlockData.fromProcessResponse(GeneralBlockSignupInit typed) {
+    TextFieldWithError? fullName;
+    if (typed.fullName != null) {
+      fullName = TextFieldWithError(
+        value: typed.fullName!.fullName,
+        error: CorbadoError.fromRequestError(typed.fullName!.error),
+      );
+    }
+
+    TextFieldWithError? email;
+    for (final identifier in typed.identifiers) {
+      if (identifier.type == LoginIdentifierType.email) {
+        email = TextFieldWithError(
+            value: identifier.identifier,
+            error: CorbadoError.fromRequestErrorWithIdentifier(identifier.error, identifier.type));
+      }
+    }
+
+    return SignupInitBlockData(
+      fullName: fullName,
+      email: email,
+    );
+  }
+}
+
+class SignupInitBlock extends Block<SignupInitBlockData> {
+  SignupInitBlock({required ProcessHandler processHandler, required SignupInitBlockData data})
+      : super(
+          processHandler: processHandler,
+          type: BlockType.signupInit,
+          alternatives: [],
+          initialScreen: ScreenNames.SignupInit,
+          data: data,
+          authProcessType: AuthProcessType.Signup,
+        );
+
+  navigateToLogin() {
+    final newPrimaryBlock = alternatives.first;
+    final newAlternatives = [this];
+
+    processHandler.updateBlockFromClient(newPrimaryBlock, newAlternatives);
+  }
+
+  submitSignupInit({String? email, String? fullName}) async {
+    try {
+      data.primaryLoading = true;
+      processHandler.notifyCurrentScreen();
+
+      final res = await corbadoService.signupInit(email: email, fullName: fullName);
+      processHandler.updateBlockFromServer(res);
+    } on CorbadoError catch (e) {
+      data.primaryLoading = false;
+      processHandler.updateBlockFromError(e);
+    }
+  }
+}
diff --git a/packages/corbado_auth/lib/src/blocks/translator.dart b/packages/corbado_auth/lib/src/blocks/translator.dart
new file mode 100644
index 0000000..a8322df
--- /dev/null
+++ b/packages/corbado_auth/lib/src/blocks/translator.dart
@@ -0,0 +1,60 @@
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+const identifierErrorMap = {
+  'missing_identifier_type': {
+    LoginIdentifierType.username: 'Please enter a username.',
+    LoginIdentifierType.email: 'Please enter an email address.',
+    LoginIdentifierType.phone: 'Please enter a phone number.',
+  },
+  'identifier_already_in_use': {
+    LoginIdentifierType.username: 'This username is already taken. Please try another one or log in with this one.',
+    LoginIdentifierType.email: 'This email address is already taken. Please try another one or log in with this one.',
+    LoginIdentifierType.phone: 'This phone number is already taken. Please try another one or log in with this one',
+  },
+  'identifier_invalid_format': {
+    LoginIdentifierType.username:
+    'Username must be between 4 and 32 characters long and may only consist of alphanumeric characters and \"-\" or \"_\".',
+    LoginIdentifierType.email: 'Please enter a valid email address.',
+    LoginIdentifierType.phone: 'Please enter a valid phone number',
+  }
+};
+
+const Map<String, String> errorMap = {
+  'forbidden_request': 'This request is currently not allowed.',
+  'too_many_requests': 'Too many requests. Please try again later.',
+  'login_identifier_unknown_user': "Couldn't find your account.",
+  'passkey_operation_cancelled': 'The operation was cancelled. Please try again.',
+  'invalid_challenge_solution_email-otp': 'The code is invalid or expired',
+  'missing_full_name': 'Please enter a valid name.',
+  'unknown_error': 'Something went wrong. Please try again later.',
+  'invalid_conditional_ui_login': 'The provided passkey is no longer valid. Please enter your identifier (e.g. email) manually.',
+};
+
+class Translator {
+  static String error(String code) {
+    final out = errorMap[code];
+    if (out == null) {
+      return _missingTranslation(code);
+    }
+
+    return out;
+  }
+
+  static String errorWithIdentifier(String code, LoginIdentifierType identifierType) {
+    final filteredByError = identifierErrorMap[code];
+    if (filteredByError == null) {
+      return _missingTranslation(code);
+    }
+
+    final out = filteredByError[identifierType];
+    if (out == null) {
+      return _missingTranslation(code);
+    }
+
+    return out;
+  }
+
+  static String _missingTranslation(String code) {
+    return 'Missing translation for error code: $code';
+  }
+}
diff --git a/packages/corbado_auth/lib/src/blocks/types.dart b/packages/corbado_auth/lib/src/blocks/types.dart
new file mode 100644
index 0000000..db001e9
--- /dev/null
+++ b/packages/corbado_auth/lib/src/blocks/types.dart
@@ -0,0 +1,135 @@
+import 'package:corbado_auth/corbado_auth.dart';
+import 'package:corbado_auth/src/blocks/translator.dart';
+import 'package:corbado_auth/src/process_handler.dart';
+import 'package:corbado_auth/src/services/corbado/corbado.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+import 'package:meta/meta.dart';
+
+enum AuthProcessType { Login, Signup }
+
+class TextFieldWithError {
+  final String value;
+  final CorbadoError? error;
+
+  const TextFieldWithError({required this.value, this.error});
+}
+
+class PasskeyFallback {
+  PasskeyFallback({required this.label, required this.onTap});
+
+  final String label;
+  final void Function() onTap;
+}
+
+class CorbadoError {
+  final String errorCode;
+  final String translatedError;
+  final dynamic original;
+
+  const CorbadoError({required this.errorCode, required this.translatedError, this.original});
+
+  String detailedError() {
+    return 'error ($errorCode): $original';
+  }
+
+  factory CorbadoError.fromMissingServerResponse() {
+    const code = 'missing_server_response';
+
+    return CorbadoError(
+      errorCode: code,
+      translatedError: Translator.error(code),
+    );
+  }
+
+  factory CorbadoError.fromUnknownError(Object e) {
+    const code = 'unknown_error';
+
+    return CorbadoError(
+      errorCode: code,
+      translatedError: Translator.error(code),
+      original: e,
+    );
+  }
+
+  static CorbadoError? fromRequestError(RequestError? error) {
+    if (error == null) {
+      return null;
+    }
+
+    return CorbadoError(
+      errorCode: error.code,
+      translatedError: Translator.error(error.code),
+    );
+  }
+
+  static CorbadoError? fromRequestErrorWithIdentifier(
+    RequestError? error,
+    LoginIdentifierType identifierType,
+  ) {
+    if (error == null) {
+      return null;
+    }
+
+    final translatedError = Translator.errorWithIdentifier(
+      error.code,
+      identifierType,
+    );
+
+    return CorbadoError(
+      errorCode: error.code,
+      translatedError: translatedError,
+    );
+  }
+
+  static CorbadoError fromAuthenticatorError(AuthenticatorException e) {
+    if (e is PasskeyAuthCancelledException) {
+      const errorCode = 'passkey_operation_cancelled';
+      return CorbadoError(
+        errorCode: errorCode,
+        translatedError: Translator.error(errorCode),
+        original: e,
+      );
+    }
+
+    return CorbadoError.fromUnknownError(e);
+  }
+}
+
+class Block<T> {
+  @protected
+  final ProcessHandler processHandler;
+  @protected
+  List<Block<dynamic>> alternatives;
+  @protected
+  ScreenNames? initialScreen;
+  @protected
+  final BlockType type;
+
+  CorbadoError? error;
+  T data;
+  AuthProcessType authProcessType;
+
+  @protected
+  CorbadoService get corbadoService => processHandler.corbadoService;
+
+  Block({
+    required this.processHandler,
+    required this.type,
+    this.initialScreen,
+    required this.alternatives,
+    required this.data,
+    required this.authProcessType,
+  });
+
+  @protected
+  init() {}
+
+  Future<void> resetProcess() async {
+    try {
+      final res = await corbadoService.resetAuthProcess();
+      processHandler.updateBlockFromServer(res);
+    } on CorbadoError catch (e) {
+      processHandler.updateBlockFromError(e);
+    }
+  }
+}
diff --git a/packages/corbado_auth/lib/src/corbado_auth.dart b/packages/corbado_auth/lib/src/corbado_auth.dart
index d8de909..bf0fa2b 100644
--- a/packages/corbado_auth/lib/src/corbado_auth.dart
+++ b/packages/corbado_auth/lib/src/corbado_auth.dart
@@ -1,20 +1,24 @@
 import 'dart:async';
 
 import 'package:corbado_auth/corbado_auth.dart';
+import 'package:corbado_auth/src/process_handler.dart';
+import 'package:corbado_auth/src/services/corbado/corbado.dart';
+import 'package:corbado_auth/src/services/corbado/corbado_stub.dart'
+    if (dart.library.html) 'package:corbado_auth/src/services/corbado/corbado_web.dart'
+    if (dart.library.io) 'package:corbado_auth/src/services/corbado/corbado_native.dart';
 import 'package:corbado_auth/src/services/session/session.dart';
 import 'package:corbado_auth/src/services/storage/storage.dart';
 import 'package:corbado_auth/src/services/storage/storage_native.dart';
 import 'package:corbado_auth/src/services/storage/storage_web.dart';
-import 'package:corbado_auth/src/types/email_otp_state.dart';
-import 'package:corbado_frontend_api_client/frontendapi/lib/api.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
 import 'package:flutter/foundation.dart';
+import 'package:passkeys/authenticator.dart';
 
 /// The Cobardo Auth SDK helps you with bringing passkey authentication to your
 /// app.
 class CorbadoAuth {
   /// Constructor
-  CorbadoAuth({CorbadoAuthConfig config = DefaultCorbadoAuthConfig})
-      : _config = config;
+  CorbadoAuth();
 
   /// Should be listened to to get updates to the User object
   /// (e.g. updates to the idToken, sign in, sign out, changes to user data).
@@ -24,30 +28,44 @@ class CorbadoAuth {
   /// Should be listened to to get updates to a user's auth state
   /// (e.g. sign in, sign out).
   /// This is a subset of userChanges.
-  Stream<AuthState> get authStateChanges =>
-      _sessionService.authStateChanges.distinct();
+  Stream<AuthState> get authStateChanges => _sessionService.authStateChanges.distinct();
 
   /// Should be listened to to get updates to a user's passkeys.
-  Stream<List<PasskeyInfo>> get passkeysChanges =>
-      _passkeysStreamController.stream.distinct();
+  Stream<List<PasskeyInfo>> get passkeysChanges => _passkeysStreamController.stream.distinct();
 
   /// Returns the current value of the user object.
   Future<User?> get currentUser => _sessionService.userChanges.first;
 
-  final StreamController<List<PasskeyInfo>> _passkeysStreamController =
-      StreamController();
-  final CustomCorbadoAuth _inner = CustomCorbadoAuth();
-  final CorbadoAuthConfig _config;
+  Stream<ComponentWithData> get componentWithDataStream => _processHandler.componentWithDataStream;
 
+  final StreamController<List<PasskeyInfo>> _passkeysStreamController = StreamController();
+
+  late ProcessHandler _processHandler;
+  late CorbadoService _corbadoService;
   late final SessionService _sessionService;
-  EmailOTPState? _emailOTPState;
+
+  Future<void> initProcessHandler() async {
+    final res = await _corbadoService.initAuthProcess();
+    _processHandler.updateBlockFromServer(res);
+  }
 
   /// Tries to get the user object from secure storage (this only works if
   /// the user has already signed in before and then closed the app).
-  Future<void> init(String projectId, {String? customDomain}) async {
-    await _inner.init(projectId, customDomain: customDomain);
+  Future<void> init({required String projectId, String? customDomain}) async {
+    final passkeyAuthenticator = PasskeyAuthenticator();
+    _corbadoService =
+        await createClient(projectId, passkeyAuthenticator: passkeyAuthenticator, customDomain: customDomain);
     _sessionService = _buildSessionService(
-      _inner.corbadoService.frontendAPIClient,
+      _corbadoService.frontendAPIClient,
+    );
+
+    _processHandler = ProcessHandler(
+      corbadoService: _corbadoService,
+      onLoggedIn: (String shortSession, String? longSession) async {
+        await _sessionService.setUser(User.fromIdToken(shortSession));
+        await _sessionService.setRefreshToken(longSession);
+        await _loadPasskeys();
+      },
     );
 
     try {
@@ -64,153 +82,21 @@ class CorbadoAuth {
     }
   }
 
-  /// Signs up a user by registering a new passkey (using the passkeys package).
-  Future<void> signUpWithPasskey({
-    required String email,
-    String? fullName,
-  }) async {
-    final r = await _inner.signUpWithPasskey(email: email, fullName: fullName);
-    final user = User.fromIdToken(r.token);
-
-    await _updateSession(user, refreshToken: r.refreshToken);
-  }
-
-  /// Signs up a user by sending out an email OTP (one-time password)
-  /// Calling this method only initiates the OTP.
-  /// When the user has provided the code he received by email completeEmailCode
-  /// must be called to finish the sign up.
-  Future<void> startSignUpWithEmailCode({
-    required String email,
-    String fullName = '',
-  }) async {
-    _emailOTPState = await _inner.startSignUpWithEmailCode(
-      email: email,
-      fullName: fullName,
-    );
-  }
-
-  /// Completes an email OTP transaction.
-  /// This can either be a sign up or a sign in.
-  Future<void> finishEmailCode({
-    required String code,
-  }) async {
-    if (_emailOTPState == null) {
-      throw NoOTPChallengeStartedException();
-    }
-
-    final r = await _inner.corbadoService.completeEmailCode(
-      _emailOTPState!.token,
-      code,
-    );
-
-    final user = User.fromIdToken(r.token);
-    await _updateSession(user, refreshToken: r.refreshToken);
-  }
-
-  /// Create a passkey for a user that is already signed in.
-  /// This method can be called after a user has signed up using email OTP.
-  Future<String?> appendPasskey() async {
-    final refreshToken = await _sessionService.getRefreshToken();
-    final res1 =
-        await _inner.corbadoService.startAppendPasskey(token: refreshToken);
-    final platformReq = res1.toPlatformType();
-    final platformResponse =
-        await _inner.passkeyAuthenticator.register(platformReq);
-    final req2 =
-        FinishRegisterRequest.fromRegisterCompleteRequest(platformResponse);
-    await _inner.corbadoService.finishAppendPasskey(req2, token: refreshToken);
-
-    finishPasskeyAppendProcess();
-
-    await _loadPasskeys();
-
-    return null;
-  }
-
-  /// This method should be called to abort an ongoing passkey append process.
-  void finishPasskeyAppendProcess() {
-    _sessionService.finishPasskeyAppendProcess();
-  }
-
-  Future<void> cancelAuthenticatorOperation() {
-    return _inner.passkeyAuthenticator.cancelCurrentAuthenticatorOperation();
-  }
-
-  /// Init a user sign in using email OTP.
-  /// Similarly to registerWithEmailCode a email code will be sent to the user.
-  /// This code must then be provided by calling completeEmailCode.
-  Future<void> startLoginWithEmailCode({
-    required String email,
-  }) async {
-    _emailOTPState = await _inner.startLoginWithEmailCode(email: email);
-  }
-
-  /// Signs in a user relying on a passkey.
-  /// This is the recommended way to do sign in with passkeys as the user does
-  /// not have to remember his username.
-  ///
-  /// This method should be called when the sign in page is loaded.
-  /// Depending on the platform, the passkey ceremony will be started
-  /// immediately without any user interaction (e.g. Android) or it requires
-  /// additional user input (e.g. iOS or web where the user needs to click the
-  /// TextField).
-  Future<void> autocompletedLoginWithPasskey() async {
-    final r = await _inner.autocompletedLoginWithPasskey();
-    final user = User.fromIdToken(r.token);
-    await _updateSession(user, refreshToken: r.refreshToken);
-  }
-
-  /// Signs in a user relying on a passkey.
-  /// This is an alternative to autocompletedSignInWithPasskey.
-  /// It should be called when the user explicitly wants to type in a username.
-  Future<void> loginWithPasskey({required String email}) async {
-    final r = await _inner.loginWithPasskey(email: email);
-    final user = User.fromIdToken(r.token);
-    await _updateSession(user, refreshToken: r.refreshToken);
-  }
-
-  /// Deletes a passkey by its credentialID.
-  Future<void> deletePasskey(String credentialID) async {
-    final refreshToken = await _sessionService.getRefreshToken();
-    await _inner.corbadoService
-        .deletePasskey(credentialID, token: refreshToken);
-    await _loadPasskeys();
-  }
-
   /// Load all passkeys that are available to the currently logged in user.
-  Future<List<PasskeyInfo>> _loadPasskeys(
-      {String? explicitRefreshToken}) async {
-    final refreshToken =
-        explicitRefreshToken ?? await _sessionService.getRefreshToken();
-    final passkeys =
-        await _inner.corbadoService.getPasskeys(token: refreshToken);
+  Future<List<PasskeyInfo>> _loadPasskeys({String? explicitRefreshToken}) async {
+    final refreshToken = explicitRefreshToken ?? await _sessionService.getRefreshToken();
+    final passkeys = await _corbadoService.sessionListPasskeys(token: refreshToken);
+    final mapped = passkeys.map((p) => PasskeyInfo.fromResponse(p)).toList();
 
-    _passkeysStreamController.sink.add(passkeys);
+    _passkeysStreamController.sink.add(mapped);
 
-    return passkeys;
-  }
-
-  Future<void> _updateSession(User user, {String? refreshToken}) async {
-    final passkeys = await _loadPasskeys(explicitRefreshToken: refreshToken);
-    var askForPasskeyAppend = false;
-    if (passkeys.isEmpty && _config.askForPasskeyAppend) {
-      askForPasskeyAppend = true;
-    }
-
-    await _sessionService.setUser(
-      user,
-      askForPasskeyAppend: askForPasskeyAppend,
-    );
-
-    if (refreshToken != null) {
-      await _sessionService.setRefreshToken(user, refreshToken);
-    }
+    return mapped;
   }
 
   /// Explicitly trigger a token refresh.
   /// This can be useful when there has been a change to the user's data that is
   /// part of the idToken.
-  Future<void> refreshToken() {
+  Future<void> refreshUser() {
     return _sessionService.explicitlyTriggerTokenRefresh();
   }
 
@@ -222,7 +108,21 @@ class CorbadoAuth {
     _passkeysStreamController.add([]);
   }
 
-  static SessionService _buildSessionService(ApiClient frontendAPIClient) {
+  /// Create a new passkey for an existing and logged in user
+  Future<void> appendPasskey() async {
+    await _corbadoService.sessionAppendPasskey();
+
+    await _loadPasskeys();
+  }
+
+  /// Create an existing passkey for a logged in user
+  Future<void> deletePasskey({required String credentialID}) async {
+    await _corbadoService.sessionDeletePasskeys(credentialID: credentialID);
+
+    await _loadPasskeys();
+  }
+
+  static SessionService _buildSessionService(CorbadoFrontendApiClient frontendAPIClient) {
     StorageService storageService;
     if (kIsWeb) {
       storageService = WebStorageService();
diff --git a/packages/corbado_auth/lib/src/corbado_auth_component.dart b/packages/corbado_auth/lib/src/corbado_auth_component.dart
new file mode 100644
index 0000000..4d62fae
--- /dev/null
+++ b/packages/corbado_auth/lib/src/corbado_auth_component.dart
@@ -0,0 +1,71 @@
+import 'package:corbado_auth/corbado_auth.dart';
+import 'package:corbado_auth/src/process_handler.dart';
+import 'package:corbado_auth/src/types/process_handler.dart';
+import 'package:flutter/material.dart';
+
+class CorbadoScreens {
+  CorbadoScreens({this.loginInit, this.passkeyVerify, this.passkeyAppend, this.emailVerifyOtp, this.signupInit});
+
+  final CorbadoScreen<SignupInitBlock> Function(SignupInitBlock)? signupInit;
+  final CorbadoScreen<LoginInitBlock> Function(LoginInitBlock)? loginInit;
+  final CorbadoScreen<PasskeyVerifyBlock> Function(PasskeyVerifyBlock)? passkeyVerify;
+  final CorbadoScreen<PasskeyAppendBlock> Function(PasskeyAppendBlock)? passkeyAppend;
+  final CorbadoScreen<EmailVerifyBlock> Function(EmailVerifyBlock)? emailVerifyOtp;
+}
+
+// CorbadoAuthComponent listens to a Stream<Widget> and rebuilds itself
+// whenever a new widget is emitted.
+class CorbadoAuthComponent extends StatefulWidget {
+  final CorbadoAuth corbadoAuth;
+  final CorbadoScreens components;
+  final Widget? loading;
+
+  CorbadoAuthComponent({required this.corbadoAuth, required this.components, this.loading});
+
+  @override
+  _CorbadoAuthComponentState createState() => _CorbadoAuthComponentState();
+}
+
+class _CorbadoAuthComponentState extends State<CorbadoAuthComponent> {
+  late Stream<ComponentWithData> _componentStream;
+
+  @override
+  void initState() {
+    super.initState();
+    _componentStream = widget.corbadoAuth.componentWithDataStream;
+
+    widget.corbadoAuth.initProcessHandler();
+  }
+
+  @override
+  Widget build(BuildContext context) {
+    return StreamBuilder<ComponentWithData>(
+      stream: _componentStream,
+      builder: (context, snapshot) {
+        if (snapshot.hasData) {
+          final d = snapshot.data!;
+
+          switch (d.screenName) {
+            case ScreenNames.SignupInit:
+              return widget.components.signupInit!(d.block as SignupInitBlock);
+            case ScreenNames.LoginInit:
+              return widget.components.loginInit!(d.block as LoginInitBlock);
+            case ScreenNames.EmailVerifyOTP:
+              return widget.components.emailVerifyOtp!(d.block as EmailVerifyBlock);
+            case ScreenNames.PasskeyAppend:
+              return widget.components.passkeyAppend!(d.block as PasskeyAppendBlock);
+            case ScreenNames.PasskeyVerify:
+              return widget.components.passkeyVerify!(d.block as PasskeyVerifyBlock);
+            case ScreenNames.EmailEdit:
+              throw UnimplementedError();
+            case ScreenNames.EmailVerifyLink:
+              throw UnimplementedError();
+          }
+        } else {
+          if (widget.loading != null) return widget.loading!;
+          return Center(child: CircularProgressIndicator());
+        }
+      },
+    );
+  }
+}
diff --git a/packages/corbado_auth/lib/src/corbado_auth_config.dart b/packages/corbado_auth/lib/src/corbado_auth_config.dart
deleted file mode 100644
index e6a2f2b..0000000
--- a/packages/corbado_auth/lib/src/corbado_auth_config.dart
+++ /dev/null
@@ -1,7 +0,0 @@
-const DefaultCorbadoAuthConfig = CorbadoAuthConfig(askForPasskeyAppend: true);
-
-class CorbadoAuthConfig {
-  const CorbadoAuthConfig({this.askForPasskeyAppend = false});
-
-  final bool askForPasskeyAppend;
-}
diff --git a/packages/corbado_auth/lib/src/custom_corbado_auth.dart b/packages/corbado_auth/lib/src/custom_corbado_auth.dart
deleted file mode 100644
index c7342a7..0000000
--- a/packages/corbado_auth/lib/src/custom_corbado_auth.dart
+++ /dev/null
@@ -1,113 +0,0 @@
-import 'dart:async';
-
-import 'package:corbado_auth/src/services/corbado/corbado.dart';
-import 'package:corbado_auth/src/services/corbado/corbado_stub.dart'
-    if (dart.library.html) 'package:corbado_auth/src/services/corbado/corbado_web.dart'
-    if (dart.library.io) 'package:corbado_auth/src/services/corbado/corbado_native.dart';
-import 'package:corbado_auth/src/types/auth_response.dart';
-import 'package:corbado_auth/src/types/email_otp_state.dart';
-import 'package:corbado_auth/src/types/webauthn/authentication.dart';
-import 'package:corbado_auth/src/types/webauthn/registration.dart';
-import 'package:passkeys/authenticator.dart';
-
-/// The Cobardo Auth SDK helps you with bringing passkey authentication to your
-/// app.
-class CustomCorbadoAuth {
-  /// Constructor
-  CustomCorbadoAuth() : passkeyAuthenticator = PasskeyAuthenticator();
-
-  final PasskeyAuthenticator passkeyAuthenticator;
-
-  late CorbadoService corbadoService;
-
-  Future<void> init(String projectId, {String? customDomain}) async {
-    corbadoService = await createClient(projectId, customDomain: customDomain);
-  }
-
-  /// Signs up a user by registering a new passkey (using the passkeys package).
-  Future<AuthResponse> signUpWithPasskey({
-    required String email,
-    String? fullName,
-  }) async {
-    final res1 =
-        await corbadoService.startSignUpWithPasskey(email, fullName ?? email);
-    final platformReq = res1.toPlatformType();
-    final platformResponse = await passkeyAuthenticator.register(platformReq);
-    final req2 =
-        FinishRegisterRequest.fromRegisterCompleteRequest(platformResponse);
-    final res2 = await corbadoService.finishSignUpWithPasskey(req2);
-
-    return res2;
-  }
-
-  /// Signs up a user by sending out an email OTP (one-time password)
-  /// Calling this method only initiates the OTP.
-  /// When the user has provided the code he received by email completeEmailCode
-  /// must be called to finish the sign up.
-  Future<EmailOTPState> startSignUpWithEmailCode({
-    required String email,
-    String fullName = '',
-  }) async {
-    return corbadoService.startSignUpWithEmailCode(
-      email,
-      fullName,
-    );
-  }
-
-  /// Completes an email OTP transaction.
-  /// This can either be a sign up or a sign in.
-  Future<AuthResponse> finishEmailCode({
-    required String token,
-    required String code,
-  }) async {
-    return corbadoService.completeEmailCode(
-      token,
-      code,
-    );
-  }
-
-  /// Init a user sign in using email OTP.
-  /// Similarly to registerWithEmailCode a email code will be sent to the user.
-  /// This code must then be provided by calling completeEmailCode.
-  Future<EmailOTPState> startLoginWithEmailCode({
-    required String email,
-  }) async {
-    return corbadoService.startLoginWithEmailCode(email);
-  }
-
-  /// Signs in a user relying on a passkey.
-  /// This is the recommended way to do sign in with passkeys as the user does
-  /// not have to remember his username.
-  ///
-  /// This method should be called when the sign in page is loaded.
-  /// Depending on the platform, the passkey ceremony will be started
-  /// immediately without any user interaction (e.g. Android) or it requires
-  /// additional user input (e.g. iOS or web where the user needs to click the
-  /// TextField).
-  Future<AuthResponse> autocompletedLoginWithPasskey() async {
-    return _loginWithPasskey(conditional: true);
-  }
-
-  /// Signs in a user relying on a passkey.
-  /// This is an alternative to autocompletedSignInWithPasskey.
-  /// It should be called when the user explicitly wants to type in a username.
-  Future<AuthResponse> loginWithPasskey({required String email}) async {
-    return _loginWithPasskey(email: email, conditional: false);
-  }
-
-  Future<AuthResponse> _loginWithPasskey({
-    required bool conditional,
-    String email = '',
-  }) async {
-    final res1 = await corbadoService.startLoginWithPasskey(email, conditional);
-    final platformReq =
-        res1.toPlatformType(conditional: conditional);
-    final platformResponse =
-        await passkeyAuthenticator.authenticate(platformReq);
-    final req2 =
-        FinishLoginRequest.fromPlatformType(platformResponse);
-    final res2 = await corbadoService.finishLoginWithPasskey(req2);
-
-    return res2;
-  }
-}
diff --git a/packages/corbado_auth/lib/src/process_handler.dart b/packages/corbado_auth/lib/src/process_handler.dart
new file mode 100644
index 0000000..0bbe2b8
--- /dev/null
+++ b/packages/corbado_auth/lib/src/process_handler.dart
@@ -0,0 +1,159 @@
+import 'dart:async';
+
+import 'package:corbado_auth/corbado_auth.dart';
+import 'package:corbado_auth/src/blocks/completed_block.dart';
+import 'package:corbado_auth/src/blocks/translator.dart';
+import 'package:corbado_auth/src/blocks/types.dart';
+import 'package:corbado_auth/src/services/corbado/corbado.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+
+class ComponentWithData {
+  final ScreenNames screenName;
+  final Block<dynamic> block;
+
+  ComponentWithData(this.screenName, this.block);
+}
+
+class ProcessHandler {
+  final CorbadoService corbadoService;
+
+  final void Function(String shortSession, String? longSession) onLoggedIn;
+
+  final _componentWithDataStream = StreamController<ComponentWithData>.broadcast();
+  ScreenNames _currentScreen = ScreenNames.SignupInit;
+  Block<dynamic>? _currentBlock;
+
+  Stream<ComponentWithData> get componentWithDataStream => _componentWithDataStream.stream;
+
+  ProcessHandler({required this.corbadoService, required this.onLoggedIn});
+
+  updateBlockFromServer(ProcessResponse processResponse) {
+    final newPrimaryBlock = _parseBlockData(processResponse.blockBody, processResponse.common);
+    final alternatives = (processResponse.blockBody.alternatives?.toList() ?? [])
+        .map((BlockBody e) => _parseBlockData(e, processResponse.common))
+        .toList();
+
+    newPrimaryBlock.alternatives = alternatives;
+
+    _updatePrimaryBlock(newPrimaryBlock);
+  }
+
+  updateBlockFromClient(Block<dynamic> newPrimaryBlock, List<Block<dynamic>> newAlternatives) {
+    newPrimaryBlock.alternatives = newAlternatives;
+    _updatePrimaryBlock(newPrimaryBlock);
+  }
+
+  updateBlockFromError(CorbadoError error) {
+    if (_currentBlock == null) {
+      return null;
+    }
+
+    _currentBlock!.error = error;
+
+    _updatePrimaryBlock(_currentBlock!);
+  }
+
+  updateCurrentScreen(ScreenNames screen) {
+    if (_currentBlock == null) {
+      return null;
+    }
+
+    _currentScreen = screen;
+    _componentWithDataStream.add(ComponentWithData(_currentScreen, _currentBlock!));
+  }
+
+  Block<dynamic> _parseBlockData(BlockBody body, ProcessCommon common) {
+    Block<dynamic> block;
+
+    switch (body.block) {
+      case BlockType.signupInit:
+        final typed = body.data.oneOf.value! as GeneralBlockSignupInit;
+        block = SignupInitBlock(
+          processHandler: this,
+          data: SignupInitBlockData.fromProcessResponse(typed),
+        );
+        block.error = CorbadoError.fromRequestError(typed.error);
+
+      case BlockType.loginInit:
+        final typed = body.data.oneOf.value! as GeneralBlockLoginInit;
+        block = LoginInitBlock(processHandler: this, data: LoginInitBlockData.fromProcessResponse(typed));
+        block.error = CorbadoError.fromRequestError(typed.error);
+
+      case BlockType.emailVerify:
+        final typed = body.data.oneOf.value! as GeneralBlockVerifyIdentifier;
+        block = EmailVerifyBlock(
+          processHandler: this,
+          data: EmailVerifyBlockData.fromProcessResponse(typed),
+          authType: body.authType,
+        );
+        block.error = CorbadoError.fromRequestError(typed.error);
+
+      case BlockType.completed:
+        final typed = body.data.oneOf.value! as GeneralBlockCompleted;
+        block = CompletedBlock(
+          processHandler: this,
+          data: CompletedBlockData.fromProcessResponse(typed),
+        );
+
+      case BlockType.passkeyAppend:
+        final typed = body.data.oneOf.value! as GeneralBlockPasskeyAppend;
+        block = PasskeyAppendBlock(
+          processHandler: this,
+          data: PasskeyAppendBlockData.fromProcessResponse(typed),
+          authType: body.authType,
+        );
+
+      case BlockType.passkeyVerify:
+        final typed = body.data.oneOf.value! as GeneralBlockPasskeyVerify;
+        block = PasskeyVerifyBlock(
+          processHandler: this,
+          data: PasskeyVerifyBlockData.fromProcessResponse(typed),
+        );
+
+      default:
+        throw Exception('Unknown block type: ${body.block}');
+    }
+
+    if (body.error != null) {
+      block.error = CorbadoError(
+        errorCode: body.error!.code,
+        translatedError: Translator.error(body.error!.code),
+      );
+    }
+
+    return block;
+  }
+
+  void notifyCurrentScreen() {
+    if (_currentBlock == null) {
+      return null;
+    }
+
+    final event = ComponentWithData(_currentScreen, _currentBlock!);
+    _componentWithDataStream.add(event);
+  }
+
+  void _updatePrimaryBlock(Block<dynamic> newPrimaryBlock) {
+    if (newPrimaryBlock is CompletedBlock) {
+      _onAuthProcessCompleted(newPrimaryBlock.data);
+      return;
+    }
+
+    final blockHasChanged = _currentBlock?.type != newPrimaryBlock.type;
+    if (blockHasChanged && newPrimaryBlock.initialScreen != null) {
+      _currentScreen = newPrimaryBlock.initialScreen!;
+      newPrimaryBlock.init();
+    }
+
+    _currentBlock = newPrimaryBlock;
+
+    final event = ComponentWithData(_currentScreen, newPrimaryBlock);
+    _componentWithDataStream.add(event);
+  }
+
+  void _onAuthProcessCompleted(CompletedBlockData data) {
+    corbadoService.clearAuthProcess();
+    _currentBlock = null;
+    onLoggedIn(data.shortSession, data.longSession);
+  }
+}
diff --git a/packages/corbado_auth/lib/src/services/corbado/corbado.dart b/packages/corbado_auth/lib/src/services/corbado/corbado.dart
index c15ed3d..1057609 100644
--- a/packages/corbado_auth/lib/src/services/corbado/corbado.dart
+++ b/packages/corbado_auth/lib/src/services/corbado/corbado.dart
@@ -1,212 +1,312 @@
 import 'dart:convert';
+import 'dart:io';
 
+import 'package:built_collection/built_collection.dart';
 import 'package:corbado_auth/corbado_auth.dart';
-import 'package:corbado_auth/src/types/auth_response.dart';
-import 'package:corbado_auth/src/types/email_otp_state.dart';
-import 'package:corbado_auth/src/types/exceptions/exceptions.dart';
-import 'package:corbado_auth/src/types/project_config.dart';
-import 'package:corbado_auth/src/types/webauthn/authentication.dart';
-import 'package:corbado_auth/src/types/webauthn/registration.dart';
-import 'package:corbado_frontend_api_client/frontendapi/lib/api.dart';
+import 'package:corbado_auth/src/blocks/types.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart' as api;
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+import 'package:dio/dio.dart';
+import 'package:flutter/foundation.dart';
+import 'package:passkeys/authenticator.dart';
 
 abstract class CorbadoService {
-  final ApiClient frontendAPIClient;
 
-  CorbadoService(this.frontendAPIClient);
+  CorbadoService(this.frontendAPIClient, this.passkeyAuthenticator);
 
-  Future<StartRegisterResponse> startAppendPasskey({String? token});
+  final api.CorbadoFrontendApiClient frontendAPIClient;
+  final PasskeyAuthenticator passkeyAuthenticator;
 
-  Future<void> finishAppendPasskey(
-    FinishRegisterRequest request, {
-    String? token,
-  });
+  String? _processID;
+  DateTime? _processExpiresAt;
 
-  Future<void> deletePasskey(String credentialID, {String? token});
+  Future<api.ProcessResponse> initAuthProcess() async {
+    final ciBuilder = await _buildClientInformation();
+    final processInitReq = api.ProcessInitReq((b) => b..clientInformation = ciBuilder);
+    final res = await frontendAPIClient.getAuthApi().processInit(processInitReq: processInitReq);
+    if (res.data == null) {
+      throw CorbadoError.fromMissingServerResponse();
+    }
 
-  Future<List<PasskeyInfo>> getPasskeys({String? token});
+    _setProcessState(res.data!.token, res.data!.expiresAt);
 
-  Future<EmailOTPState> startSignUpWithEmailCode(
-    String email,
-    String fullName,
-  ) async {
-    try {
-      final req = EmailCodeRegisterStartReq(email: email, username: fullName);
-      final res = await UsersApi(frontendAPIClient).emailCodeRegisterStart(req);
-      if (res == null) {
-        throw UnexpectedBackendException('emailLinkRegisterStart', '');
-      }
+    return res.data!.processResponse;
+  }
 
-      return EmailOTPState(EmailOTPFlow.SignUp, res.data.emailCodeID);
-    } on ApiException catch (e) {
-      throw ExceptionFactory.fromBackendMessage(
-        'emailCodeRegisterStart',
-        e.message ?? '',
-      );
+  Future<api.ProcessResponse> completeAuthProcess() async {
+    return _wrapWithError(() => frontendAPIClient.getAuthApi().processComplete());
+  }
+
+  Future<api.ProcessResponse> resetAuthProcess() async {
+    final out = await _wrapWithError(() => frontendAPIClient.getAuthApi().processReset());
+
+    final newProcess = out.newProcess;
+    if (newProcess != null) {
+      _setProcessState(newProcess.token, newProcess.expiresAt);
     }
+
+    return out;
   }
 
-  Future<StartRegisterResponse> startSignUpWithPasskey(
-    String email,
-    String fullName,
-  ) async {
-    try {
-      final result = await UsersApi(frontendAPIClient).passKeyRegisterStart(
-        PassKeyRegisterStartReq(
-          username: email,
-          fullName: fullName,
+  void clearAuthProcess() {
+    _processID = null;
+    _processExpiresAt = null;
+  }
+
+  Future<api.ProcessResponse> signupInit({String? email, String? fullName}) async {
+    final identifierBuilder = ListBuilder<api.LoginIdentifier>();
+    if (email != null) {
+      identifierBuilder.add(
+        api.LoginIdentifier(
+          (b) => b
+            ..type = api.LoginIdentifierType.email
+            ..identifier = email,
         ),
       );
+    }
 
-      if (result == null) {
-        throw UnexpectedBackendException(
-          'passKeyRegisterStart',
-          'result was null',
-        );
-      }
+    final signupInitReq = api.SignupInitReq((b) => b
+      ..fullName = fullName
+      ..identifiers = identifierBuilder);
 
-      final json = jsonDecode(result.data.challenge) as Map<String, dynamic>;
-      return StartRegisterResponse.fromJson(json);
-    } on ApiException catch (e) {
-      throw ExceptionFactory.fromBackendMessage(
-        'passKeyRegisterStart',
-        e.message ?? '',
-      );
-    }
+    return _wrapWithError(
+      () => frontendAPIClient.getAuthApi().signupInit(
+            signupInitReq: signupInitReq,
+          ),
+    );
+  }
+
+  Future<api.ProcessResponse> loginInit(String loginIdentifier, bool isPhone) async {
+    final req = api.LoginInitReq((b) => b
+      ..identifierValue = loginIdentifier
+      ..isPhone = isPhone);
+
+    return _wrapWithError(() => frontendAPIClient.getAuthApi().loginInit(loginInitReq: req));
   }
 
-  Future<AuthResponse> finishSignUpWithPasskey(
-      FinishRegisterRequest request) async {
+  Future<api.ProcessResponse> finishPasskeyMediation(String signedChallenge) async {
+    final req = api.PasskeyMediationFinishReq((b) => b..signedChallenge = signedChallenge);
+
+    return _wrapWithError(() => frontendAPIClient.getAuthApi().passkeyMediationFinish(passkeyMediationFinishReq: req));
+  }
+
+  Future<api.ProcessResponse> verifyEmailOtpCode(String code) async {
+    final req = api.IdentifierVerifyFinishReq((b) => b
+      ..code = code
+      ..identifierType = api.LoginIdentifierType.email
+      ..verificationType = api.VerificationMethod.emailOtp
+      ..isNewDevice = false);
+
+    return _wrapWithError(() => frontendAPIClient.getAuthApi().identifierVerifyFinish(identifierVerifyFinishReq: req));
+  }
+
+  Future<api.ProcessResponse> sendEmailOtpCode() async {
+    final req = api.IdentifierVerifyStartReq((b) => b
+      ..identifierType = api.LoginIdentifierType.email
+      ..verificationType = api.VerificationMethod.emailOtp);
+
+    return _wrapWithError(() => frontendAPIClient.getAuthApi().identifierVerifyStart(identifierVerifyStartReq: req));
+  }
+
+  Future<api.ProcessResponse> sendEmailLink() async {
+    final req = api.IdentifierVerifyStartReq((b) => b
+      ..identifierType = api.LoginIdentifierType.email
+      ..verificationType = api.VerificationMethod.emailLink);
+
+    return _wrapWithError(() => frontendAPIClient.getAuthApi().identifierVerifyStart(identifierVerifyStartReq: req));
+  }
+
+  Future<api.ProcessResponse> updateEmail(String email) async {
+    final req = api.IdentifierUpdateReq((b) => b
+      ..identifierType = api.LoginIdentifierType.email
+      ..value = email);
+
+    return _wrapWithError(() => frontendAPIClient.getAuthApi().identifierUpdate(identifierUpdateReq: req));
+  }
+
+  /// passkey related functionalities
+  Future<api.ProcessResponse> appendPasskey() async {
+    final startRes = await _wrapWithError(
+        () => frontendAPIClient.getAuthApi().passkeyAppendStart(passkeyAppendStartReq: PasskeyAppendStartReq()));
+    if (startRes.blockBody.error != null) {
+      throw CorbadoError.fromMissingServerResponse();
+    }
+
+    final body = startRes.blockBody.data.oneOf.value as api.GeneralBlockPasskeyAppend;
+    final json = jsonDecode(body.challenge) as Map<String, dynamic>;
+
+    final authenticatorReq = StartRegisterResponse.fromJson(json).toPlatformType();
+
     try {
-      final signedChallenge = jsonEncode(request.toJson());
-      final result =
-          await UsersApi(frontendAPIClient).passKeyRegisterFinishWithHttpInfo(
-        PassKeyFinishReq(signedChallenge: signedChallenge),
-      );
+      final authenticatorRes = await passkeyAuthenticator.register(authenticatorReq);
+      final attestationResponse =
+          jsonEncode(FinishRegisterRequest.fromRegisterCompleteRequest(authenticatorRes).toJson());
+      final passkeyAppendReq = api.PasskeyAppendFinishReq((b) => b..signedChallenge = attestationResponse);
+
+      return _wrapWithError(
+          () => frontendAPIClient.getAuthApi().passkeyAppendFinish(passkeyAppendFinishReq: passkeyAppendReq));
+    } on AuthenticatorException catch (e) {
+      throw CorbadoError.fromAuthenticatorError(e);
+    }
+  }
 
-      final authResponse = await AuthResponse.fromHttpResponse(result);
+  Future<void> sessionAppendPasskey() async {
+    final ci = await _buildClientInformation();
+    final startReq = api.MePasskeysAppendStartReq((b) => b..clientInformation = ci);
+    final startRes = await _wrapWithError(
+        () => frontendAPIClient.getUsersApi().currentUserPasskeyAppendStart(mePasskeysAppendStartReq: startReq));
 
-      return authResponse;
-    } on ApiException catch (e) {
-      throw ExceptionFactory.fromBackendMessage(
-        'passKeyRegisterFinish',
-        e.message ?? '',
-      );
+    if (startRes.attestationOptions.isEmpty) {
+      throw CorbadoError.fromMissingServerResponse();
+    }
+
+    final json = jsonDecode(startRes.attestationOptions) as Map<String, dynamic>;
+    try {
+      final authenticatorReq = StartRegisterResponse.fromJson(json).toPlatformType();
+      final authenticatorRes = await passkeyAuthenticator.register(authenticatorReq);
+      final attestationResponse =
+          jsonEncode(FinishRegisterRequest.fromRegisterCompleteRequest(authenticatorRes).toJson());
+      final mePasskeysAppendFinishReq = api.MePasskeysAppendFinishReq((b) => b
+        ..attestationResponse = attestationResponse
+        ..clientInformation = ci);
+
+      return _wrapWithErrorEmptyResponse(() => frontendAPIClient
+          .getUsersApi()
+          .currentUserPasskeyAppendFinish(mePasskeysAppendFinishReq: mePasskeysAppendFinishReq));
+    } on AuthenticatorException catch (e) {
+      throw CorbadoError.fromAuthenticatorError(e);
+    } catch (e) {
+      throw CorbadoError.fromUnknownError(e);
     }
   }
 
-  Future<EmailOTPState> startLoginWithEmailCode(
-    String email,
-  ) async {
+  Future<List<api.Passkey>> sessionListPasskeys({String? token}) async {
+    final res = await _wrapWithError(() => frontendAPIClient.getUsersApi().currentUserPasskeyGet());
+
+    return res.passkeys.toList();
+  }
+
+  Future<void> sessionDeletePasskeys({required String credentialID}) async {
+    await _wrapWithError(() => frontendAPIClient.getUsersApi().currentUserPasskeyDelete(credentialID: credentialID));
+  }
+
+  Future<void> sessionUpdateUser({String? fullname}) async {
+    final meUpdateReq = api.MeUpdateReq((b) => b..fullName = fullname);
+    await _wrapWithError(() => frontendAPIClient.getUsersApi().currentUserUpdate(meUpdateReq: meUpdateReq));
+  }
+
+  Future<api.ProcessResponse> verifyPasskey() async {
+    final startRes = await _wrapWithError(
+        () => frontendAPIClient.getAuthApi().passkeyLoginStart(passkeyLoginStartReq: api.PasskeyLoginStartReq()));
+    if (startRes.blockBody.error != null) {
+      throw CorbadoError.fromMissingServerResponse();
+    }
+
+    final body = startRes.blockBody.data.oneOf.value as api.GeneralBlockPasskeyVerify;
+    final json = jsonDecode(body.challenge) as Map<String, dynamic>;
+
+    final authenticatorReq = StartLoginResponse.fromJson(json)
+        .toPlatformType(conditional: false, preferImmediatelyAvailableCredentials: false);
     try {
-      final req = EmailCodeLoginStartReq(username: email);
-      final res = await UsersApi(frontendAPIClient).emailCodeLoginStart(req);
-      if (res == null) {
-        throw UnexpectedBackendException('emailCodeLoginStart', '');
+      final authenticatorRes = await passkeyAuthenticator.authenticate(authenticatorReq);
+      final assertionResponse = jsonEncode(FinishLoginRequest.fromPlatformType(authenticatorRes).toJson());
+      final passkeyLoginFinishReq = api.PasskeyLoginFinishReq((b) => b..signedChallenge = assertionResponse);
+
+      return _wrapWithError(
+          () => frontendAPIClient.getAuthApi().passkeyLoginFinish(passkeyLoginFinishReq: passkeyLoginFinishReq));
+    } on AuthenticatorException catch (e) {
+      if (e is NoCredentialsAvailableException) {
+        rethrow;
       }
 
-      return EmailOTPState(EmailOTPFlow.SignUp, res.data.emailCodeID);
-    } on ApiException catch (e) {
-      throw ExceptionFactory.fromBackendMessage(
-        'emailCodeLoginStart',
-        e.message ?? '',
-      );
+      throw CorbadoError.fromAuthenticatorError(e);
     }
   }
 
-  Future<StartLoginResponse> startLoginWithPasskey(
-    String email,
-    bool conditional,
-  ) async {
-    try {
-      String challenge;
-      if (conditional) {
-        final result = await UsersApi(frontendAPIClient).passKeyMediationStart(
-          PassKeyMediationStartReq(username: email),
-        );
-
-        if (result == null) {
-          throw Exception(
-            'An unknown error occurred during the Corbado API call',
-          );
-        }
-
-        challenge = result.data.challenge;
-      } else {
-        final result = await UsersApi(frontendAPIClient).passKeyLoginStart(
-          PassKeyLoginStartReq(username: email),
-        );
-
-        if (result == null) {
-          throw Exception(
-            'An unknown error occurred during the Corbado API call',
-          );
-        }
-
-        challenge = result.data.challenge;
-      }
+  Future<api.ProcessResponse> verifyPasskeyConditional(String challenge, bool silent) async {
+    final json = jsonDecode(challenge) as Map<String, dynamic>;
+    final authenticatorReq = StartLoginResponse.fromJson(json)
+        .toPlatformType(conditional: silent, preferImmediatelyAvailableCredentials: !silent);
 
-      if (challenge.isEmpty) {
-        throw NoPasskeyForDeviceException();
+    try {
+      final authenticatorRes = await passkeyAuthenticator.authenticate(authenticatorReq);
+      final assertionResponse = jsonEncode(FinishLoginRequest.fromPlatformType(authenticatorRes).toJson());
+      final passkeyLoginFinishReq = api.PasskeyMediationFinishReq((b) => b..signedChallenge = assertionResponse);
+
+      return _wrapWithError(() =>
+          frontendAPIClient.getAuthApi().passkeyMediationFinish(passkeyMediationFinishReq: passkeyLoginFinishReq));
+    } on AuthenticatorException catch (e) {
+      if (e is NoCredentialsAvailableException || e is PasskeyAuthCancelledException) {
+        rethrow;
       }
 
-      final json = jsonDecode(challenge) as Map<String, dynamic>;
-      return StartLoginResponse.fromJson(json);
-    } on ApiException catch (e) {
-      throw ExceptionFactory.fromBackendMessage(
-        'passKeyAuthenticateStart',
-        e.message ?? '',
-      );
+      throw CorbadoError.fromAuthenticatorError(e);
     }
   }
 
-  Future<AuthResponse> finishLoginWithPasskey(
-      FinishLoginRequest request) async {
-    try {
-      final signedChallenge = jsonEncode(request.toJson());
+  Future<void> cancelPasskeyOperation() async {
+    return passkeyAuthenticator.cancelCurrentAuthenticatorOperation();
+  }
 
-      final response =
-          await UsersApi(frontendAPIClient).passKeyLoginFinishWithHttpInfo(
-        PassKeyFinishReq(signedChallenge: signedChallenge),
-      );
+  Future<T> _wrapWithError<T>(Future<Response<T?>> Function() callback) async {
+    Response<T?> response;
+    try {
+      response = await callback();
+    } catch (e) {
+      throw CorbadoError.fromUnknownError(e);
+    }
 
-      final res = await AuthResponse.fromHttpResponse(response);
-      return res;
-    } on ApiException catch (e) {
-      throw ExceptionFactory.fromBackendMessage(
-        'passKeyAuthenticateFinish',
-        e.message ?? '',
-      );
+    if (response.data == null) {
+      throw CorbadoError.fromMissingServerResponse();
     }
+
+    return response.data!;
   }
 
-  Future<AuthResponse> completeEmailCode(
-    String emailCodeID,
-    String code,
-  ) async {
+  Future<void> _wrapWithErrorEmptyResponse(Future<Response<void>> Function() callback) async {
     try {
-      final req = EmailCodeConfirmReq(emailCodeID: emailCodeID, code: code);
-      final res =
-          await UsersApi(frontendAPIClient).emailCodeConfirmWithHttpInfo(req);
-      final authResponse = await AuthResponse.fromHttpResponse(res);
-
-      return authResponse;
-    } on ApiException catch (e) {
-      throw ExceptionFactory.fromBackendMessage(
-        'emailCodeConfirm',
-        e.message ?? '',
-      );
+      await callback();
+    } catch (e) {
+      throw CorbadoError.fromUnknownError(e);
     }
   }
 
-  Future<ProjectConfig> getProjectConfig() async {
-    try {
-      final res = await ProjectsApi(frontendAPIClient).projectConfig();
-      return ProjectConfig.fromResponse(res!.data);
-    } on ApiException catch (e) {
-      throw ExceptionFactory.fromBackendMessage(
-        'getProjectConfig',
-        e.message ?? '',
-      );
+  void _setProcessState(String token, int expiresAt) {
+    frontendAPIClient.dio.options.headers.addAll({
+      'x-corbado-process-id': token,
+    });
+
+    _processID = token;
+    _processExpiresAt = DateTime.fromMillisecondsSinceEpoch(expiresAt * 1000);
+
+    return;
+  }
+
+  Future<api.ClientInformationBuilder> _buildClientInformation() async {
+    final getAvailability = passkeyAuthenticator.getAvailability();
+
+    if (kIsWeb) {
+      final passkeyAvailability = await getAvailability.web();
+      return api.ClientInformationBuilder()
+        ..isNative = passkeyAvailability.isNative
+        ..isUserVerifyingPlatformAuthenticatorAvailable =
+            passkeyAvailability.isUserVerifyingPlatformAuthenticatorAvailable
+        ..isConditionalMediationAvailable =
+            passkeyAvailability.isConditionalMediationAvailable;
+    } else if (Platform.isIOS) {
+      final passkeyAvailability = await getAvailability.iOS();
+      return api.ClientInformationBuilder()
+        ..isNative = passkeyAvailability.isNative
+        ..isUserVerifyingPlatformAuthenticatorAvailable =
+            passkeyAvailability.hasBiometrics
+        ..isConditionalMediationAvailable = null;
+    } else {
+      final passkeyAvailability = await getAvailability.android();
+      return api.ClientInformationBuilder()
+        ..isNative = passkeyAvailability.isNative
+        ..isUserVerifyingPlatformAuthenticatorAvailable =
+            passkeyAvailability.isUserVerifyingPlatformAuthenticatorAvailable
+        ..isConditionalMediationAvailable = null;
     }
   }
 
diff --git a/packages/corbado_auth/lib/src/services/corbado/corbado_native.dart b/packages/corbado_auth/lib/src/services/corbado/corbado_native.dart
index 1f381de..be54467 100644
--- a/packages/corbado_auth/lib/src/services/corbado/corbado_native.dart
+++ b/packages/corbado_auth/lib/src/services/corbado/corbado_native.dart
@@ -1,14 +1,13 @@
-import 'dart:convert';
+import 'dart:io';
 
-import 'package:corbado_auth/src/types/exceptions/exceptions.dart';
-import 'package:corbado_auth/src/types/webauthn/registration.dart';
 import 'package:corbado_auth/src/services/corbado/corbado.dart';
-import 'package:corbado_auth/src/types/passkey_info.dart';
-import 'package:corbado_frontend_api_client/frontendapi/lib/api.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
+import 'package:passkeys/authenticator.dart';
 import 'package:ua_client_hints/ua_client_hints.dart';
 
 Future<CorbadoService> createClient(
   String projectId, {
+  required PasskeyAuthenticator passkeyAuthenticator,
   String? customDomain,
 }) async {
   final basePath = CorbadoService.getFrontendAPIDomain(
@@ -16,88 +15,27 @@ Future<CorbadoService> createClient(
     customDomain: customDomain,
   );
 
-  final ua = await userAgent();
+  final uaData = await userAgentData();
 
-  final apiClient = ApiClient(basePath: basePath)
-    ..addDefaultHeader('X-Corbado-ProjectID', projectId)
-    ..addDefaultHeader('User-Agent', ua);
+  final apiClient = CorbadoFrontendApiClient(
+      basePathOverride: basePath,
+      sdkVersion: '3.2.0',
+      languageVersion: Platform.version);
+  apiClient.dio.options.headers.addAll({
+    'X-Corbado-ProjectID': projectId,
+    'User-Agent': _buildUserAgent(uaData),
+  });
 
-  return NativeCorbadoService(apiClient);
+  return NativeCorbadoService(apiClient, passkeyAuthenticator);
+}
+
+String _buildUserAgent(UserAgentData uaData) {
+  return 'NativeApp/${uaData.package.appVersion} (${uaData.platform} ${uaData.platformVersion}; ${uaData.model}; ${uaData.device}; ${uaData.architecture})';
 }
 
 class NativeCorbadoService extends CorbadoService {
   ///
-  NativeCorbadoService(ApiClient frontendAPIClient) : super(frontendAPIClient);
-
-  @override
-  Future<void> deletePasskey(String credentialID, {String? token}) async {
-    try {
-      final frontendAPIClient = getClientWithHeaders(token);
-      await UsersApi(frontendAPIClient).currentUserPassKeyDelete(credentialID);
-    } on ApiException catch (e) {
-      throw ExceptionFactory.fromBackendMessage(
-        'currentUserPassKeyDelete',
-        e.message ?? '',
-      );
-    }
-  }
-
-  @override
-  Future<List<PasskeyInfo>> getPasskeys({String? token}) async {
-    final frontendAPIClient = getClientWithHeaders(token);
-    final response = await UsersApi(frontendAPIClient).currentUserPassKeyGet();
-    if (response == null) {
-      return [];
-    }
-
-    return response.data.passkeys.map(PasskeyInfo.fromResponse).toList();
-  }
-
-  @override
-  Future<StartRegisterResponse> startAppendPasskey({String? token}) async {
-    try {
-      final frontendAPIClient = getClientWithHeaders(token);
-      final result =
-          await UsersApi(frontendAPIClient).passKeyAppendStart(EmptyReq());
-
-      final json = jsonDecode(result!.data.challenge) as Map<String, dynamic>;
-      return StartRegisterResponse.fromJson(json);
-    } on ApiException catch (e) {
-      throw ExceptionFactory.fromBackendMessage(
-        'passKeyAppendStart',
-        e.message ?? '',
-      );
-    }
-  }
-
-  @override
-  Future<void> finishAppendPasskey(
-    FinishRegisterRequest request, {
-    String? token,
-  }) async {
-    final frontendAPIClient = getClientWithHeaders(token);
-    try {
-      final reqFinish =
-          PassKeyFinishReq(signedChallenge: jsonEncode(request.toJson()));
-      await UsersApi(frontendAPIClient).passKeyAppendFinish(reqFinish);
-    } on ApiException catch (e) {
-      throw ExceptionFactory.fromBackendMessage(
-        'passKeyAppendFinish',
-        e.message ?? '',
-      );
-    }
-  }
-
-  ApiClient getClientWithHeaders(String? refreshToken) {
-    if (refreshToken == null) {
-      throw Exception('missing refreshToken');
-    }
-
-    frontendAPIClient.addDefaultHeader(
-      'cookie',
-      'cbo_long_session=$refreshToken',
-    );
-
-    return frontendAPIClient;
-  }
+  NativeCorbadoService(CorbadoFrontendApiClient frontendAPIClient,
+      PasskeyAuthenticator passkeyAuthenticator)
+      : super(frontendAPIClient, passkeyAuthenticator);
 }
diff --git a/packages/corbado_auth/lib/src/services/corbado/corbado_stub.dart b/packages/corbado_auth/lib/src/services/corbado/corbado_stub.dart
index e802b33..706d8b6 100644
--- a/packages/corbado_auth/lib/src/services/corbado/corbado_stub.dart
+++ b/packages/corbado_auth/lib/src/services/corbado/corbado_stub.dart
@@ -1,6 +1,7 @@
 import 'package:corbado_auth/src/services/corbado/corbado.dart';
+import 'package:passkeys/authenticator.dart';
 
-Future<CorbadoService> createClient(String projectId, {String? customDomain}) =>
+Future<CorbadoService> createClient(String projectId, {required PasskeyAuthenticator passkeyAuthenticator, String? customDomain}) =>
     throw UnsupportedError(
       'Cannot create a client without dart:html or dart:io.',
     );
diff --git a/packages/corbado_auth/lib/src/services/corbado/corbado_web.dart b/packages/corbado_auth/lib/src/services/corbado/corbado_web.dart
index 33a76e1..f3153ea 100644
--- a/packages/corbado_auth/lib/src/services/corbado/corbado_web.dart
+++ b/packages/corbado_auth/lib/src/services/corbado/corbado_web.dart
@@ -1,108 +1,33 @@
-import 'dart:convert';
-
-import 'package:corbado_auth/corbado_auth.dart';
 import 'package:corbado_auth/src/services/corbado/corbado.dart';
-import 'package:corbado_auth/src/types/exceptions/exceptions.dart';
-import 'package:corbado_auth/src/types/webauthn/registration.dart';
-import 'package:corbado_frontend_api_client/frontendapi/lib/api.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
 import 'package:http/browser_client.dart';
+import 'package:passkeys/authenticator.dart';
 
 Future<CorbadoService> createClient(
-    String projectId, {
-      String? customDomain,
-    }) async {
+  String projectId, {
+  required PasskeyAuthenticator passkeyAuthenticator,
+  String? customDomain,
+}) async {
   final basePath = CorbadoService.getFrontendAPIDomain(
     projectId,
     customDomain: customDomain,
   );
 
-  final client = BrowserClient()..withCredentials = true;
-
-  final apiClient = ApiClient(basePath: basePath)
-    ..addDefaultHeader('X-Corbado-ProjectID', projectId)
-    ..client = client;
+  final apiClient = CorbadoFrontendApiClient(
+      basePathOverride: basePath,
+      sdkVersion: '3.2.0',
+      languageVersion: "Flutter Web");
+  apiClient.dio.options.headers.addAll({
+    'X-Corbado-ProjectID': projectId,
+  });
+  apiClient.dio.options.extra['withCredentials'] = true;
 
-  return WebCorbadoService(apiClient);
+  return WebCorbadoService(apiClient, passkeyAuthenticator);
 }
 
 class WebCorbadoService extends CorbadoService {
   ///
-  WebCorbadoService(ApiClient frontendAPIClient) : super(frontendAPIClient);
-
-  @override
-  Future<void> deletePasskey(String credentialID, {String? token}) async {
-    try {
-      final frontendAPIClient = getClientWithHeaders(token);
-      await UsersApi(frontendAPIClient).currentUserPassKeyDelete(credentialID);
-    } on ApiException catch (e) {
-      throw ExceptionFactory.fromBackendMessage(
-        'currentUserPassKeyDelete',
-        e.message ?? '',
-      );
-    }
-  }
-
-  @override
-  Future<List<PasskeyInfo>> getPasskeys({String? token}) async {
-    final frontendAPIClient = getClientWithHeaders(token);
-    final response = await UsersApi(frontendAPIClient).currentUserPassKeyGet();
-    if (response == null) {
-      return [];
-    }
-
-    return response.data.passkeys.map(PasskeyInfo.fromResponse).toList();
-  }
-
-  @override
-  Future<StartRegisterResponse> startAppendPasskey({String? token}) async {
-    final frontendAPIClient = getClientWithHeaders(token);
-    try {
-      final result =
-          await UsersApi(frontendAPIClient).passKeyAppendStart(EmptyReq());
-
-      if (result == null) {
-        throw UnexpectedBackendException(
-          'passKeyRegisterStart',
-          'result was null',
-        );
-      }
-
-      final json = jsonDecode(result.data.challenge) as Map<String, dynamic>;
-      return StartRegisterResponse.fromJson(json);
-    } on ApiException catch (e) {
-      throw ExceptionFactory.fromBackendMessage(
-        'passKeyAppendStart',
-        e.message ?? '',
-      );
-    }
-  }
-
-  @override
-  Future<void> finishAppendPasskey(
-    FinishRegisterRequest request, {
-    String? token,
-  }) async {
-    final frontendAPIClient = getClientWithHeaders(token);
-    try {
-      final reqFinish =
-          PassKeyFinishReq(signedChallenge: jsonEncode(request.toJson()));
-      await UsersApi(frontendAPIClient).passKeyAppendFinish(reqFinish);
-    } on ApiException catch (e) {
-      throw ExceptionFactory.fromBackendMessage(
-        'passKeyAppendFinish',
-        e.message ?? '',
-      );
-    }
-  }
-
-  ApiClient getClientWithHeaders(String? refreshToken) {
-    if (refreshToken != null) {
-      frontendAPIClient.addDefaultHeader(
-        'Authorization',
-        'Bearer $refreshToken',
-      );
-    }
-
-    return frontendAPIClient;
-  }
+  WebCorbadoService(CorbadoFrontendApiClient frontendAPIClient,
+      PasskeyAuthenticator passkeyAuthenticator)
+      : super(frontendAPIClient, passkeyAuthenticator);
 }
diff --git a/packages/corbado_auth/lib/src/services/session/session.dart b/packages/corbado_auth/lib/src/services/session/session.dart
index 0d41223..dd9a51e 100644
--- a/packages/corbado_auth/lib/src/services/session/session.dart
+++ b/packages/corbado_auth/lib/src/services/session/session.dart
@@ -1,23 +1,24 @@
 import 'dart:async';
 
 import 'package:corbado_auth/corbado_auth.dart';
+import 'package:corbado_auth/src/blocks/types.dart';
 import 'package:corbado_auth/src/services/storage/storage.dart';
-import 'package:corbado_frontend_api_client/frontendapi/lib/api.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
 import 'package:flutter/foundation.dart';
 
 class SessionService {
   final StorageService _storageService;
-  final ApiClient frontendAPIClient;
+  final CorbadoFrontendApiClient frontendAPIClient;
 
   Stream<User?> get userChanges => _userStreamController.stream;
 
   Stream<AuthState> get authStateChanges => _authStateStreamController.stream;
 
   final StreamController<User?> _userStreamController =
-      StreamController<User?>();
+  StreamController<User?>();
 
   final StreamController<AuthState> _authStateStreamController =
-      StreamController<AuthState>();
+  StreamController<AuthState>();
   final _preemptiveRefreshDuration = const Duration(seconds: 60);
   Timer? _refreshTimer;
 
@@ -31,13 +32,16 @@ class SessionService {
       return null;
     }
 
-    // if token is invalid we try to refresh it
-    if (!user.hasValidToken()) {
+    final refreshToken = await getRefreshToken();
+
+    if (!user.hasValidToken() || refreshToken == null) {
       return null;
     }
 
+    frontendAPIClient.dio.options.headers['Authorization'] = 'Bearer $refreshToken';
+
     // if token is valid we schedule a refresh
-    _scheduleRefreshRoutine(user);
+    _scheduleRefreshRoutine();
     _userStreamController.add(user);
     _authStateStreamController.add(AuthState.SignedIn);
 
@@ -48,23 +52,22 @@ class SessionService {
     return _storageService.getRefreshToken();
   }
 
-  Future<void> setRefreshToken(User user, String value) async {
-    await _storageService.setRefreshToken(value);
-    _scheduleRefreshRoutine(user);
+  Future<void> setRefreshToken(String? value) async {
+    if (value != null) {
+      frontendAPIClient.dio.options.headers['Authorization'] = 'Bearer $value';
+      await _storageService.setRefreshToken(value);
+    }
+
+    _scheduleRefreshRoutine();
   }
 
   Future<User?> getUser() {
     return _storageService.getUser();
   }
 
-  Future<void> setUser(User value, {bool askForPasskeyAppend = false}) {
+  Future<void> setUser(User value) {
     _userStreamController.add(value);
-
-    final authState = askForPasskeyAppend
-        ? AuthState.AskForPasskeyAppend
-        : AuthState.SignedIn;
-
-    _authStateStreamController.add(authState);
+    _authStateStreamController.add(AuthState.SignedIn);
 
     return _storageService.setUser(value);
   }
@@ -78,7 +81,7 @@ class SessionService {
 
   Future<void> explicitlyTriggerTokenRefresh() => _refreshToken();
 
-  void _scheduleRefreshRoutine(User user) {
+  void _scheduleRefreshRoutine() {
     // if another refresh has already been scheduled we stop that one
     // this is not expected => if it occurs there is a problem with the code
     if (_refreshTimer != null && _refreshTimer!.isActive) {
@@ -119,29 +122,22 @@ class SessionService {
       // for web, setting the Authorization header is optional because there
       // can be a HTTPOnly cookie set
       if (refreshToken != null) {
-        frontendAPIClient.addDefaultHeader(
-          'Authorization',
-          'Bearer $refreshToken',
-        );
+        frontendAPIClient.dio.options.headers['Authorization'] = 'Bearer $refreshToken';
       }
     } else {
       if (refreshToken == null) {
         throw Exception('Stopped token refresh: missing refreshToken.');
       }
 
-      frontendAPIClient.addDefaultHeader(
-        'cookie',
-        'cbo_long_session=$refreshToken',
-      );
+      frontendAPIClient.dio.options.headers['Authorization'] = 'Bearer $refreshToken';
     }
 
-    final response =
-        await SessionsApi(frontendAPIClient).sessionRefresh(EmptyReq());
-    if (response == null || response.shortSession == null) {
-      throw Exception('Stopped refreshToken: missing token in response.');
+    final response = await frontendAPIClient.getUsersApi().currentUserSessionRefresh();
+    if (response.data == null) {
+      throw CorbadoError.fromMissingServerResponse();
     }
 
-    final user = User.fromIdToken(response.shortSession!.value);
+    final user = User.fromIdToken(response.data!.shortSession);
     await setUser(user);
 
     return user;
@@ -150,4 +146,4 @@ class SessionService {
   void finishPasskeyAppendProcess() {
     _authStateStreamController.add(AuthState.SignedIn);
   }
-}
+}
\ No newline at end of file
diff --git a/packages/corbado_auth/lib/src/types/auth_response.dart b/packages/corbado_auth/lib/src/types/auth_response.dart
index e24a190..dc1cccb 100644
--- a/packages/corbado_auth/lib/src/types/auth_response.dart
+++ b/packages/corbado_auth/lib/src/types/auth_response.dart
@@ -1,7 +1,6 @@
 import 'dart:convert';
 import 'dart:io';
 
-import 'package:corbado_frontend_api_client/frontendapi/lib/api.dart';
 import 'package:http/http.dart';
 
 ///
@@ -12,22 +11,6 @@ class AuthResponse {
     this.refreshToken,
   });
 
-  static Future<AuthResponse> fromHttpResponse(Response response) async {
-    if (response.statusCode >= HttpStatus.badRequest || response.body.isEmpty) {
-      throw ApiException(response.statusCode, await _decodeBodyBytes(response));
-    }
-
-    final result =
-        jsonDecode(utf8.decode(response.bodyBytes)) as Map<String, dynamic>;
-    final token = result['data']['shortSession']['value'] as String;
-    final refreshToken = _getLongSession(result, response);
-
-    return AuthResponse(
-      token: token,
-      refreshToken: refreshToken,
-    );
-  }
-
   final String token;
   final String? refreshToken;
 
diff --git a/packages/corbado_auth/lib/src/types/auth_state.dart b/packages/corbado_auth/lib/src/types/auth_state.dart
index 102ff25..5cc0ca4 100644
--- a/packages/corbado_auth/lib/src/types/auth_state.dart
+++ b/packages/corbado_auth/lib/src/types/auth_state.dart
@@ -1,5 +1,4 @@
 enum AuthState {
   None,
   SignedIn,
-  AskForPasskeyAppend
 }
diff --git a/packages/corbado_auth/lib/src/types/passkey_info.dart b/packages/corbado_auth/lib/src/types/passkey_info.dart
index 6df4ca8..3ed37ad 100644
--- a/packages/corbado_auth/lib/src/types/passkey_info.dart
+++ b/packages/corbado_auth/lib/src/types/passkey_info.dart
@@ -1,17 +1,18 @@
-import 'package:corbado_frontend_api_client/frontendapi/lib/api.dart';
+import 'package:corbado_frontend_api_client/corbado_frontend_api_client.dart';
 import 'package:json_annotation/json_annotation.dart';
 
 part 'passkey_info.g.dart';
 
 @JsonSerializable(explicitToJson: true)
 class PasskeyInfo {
-  factory PasskeyInfo.fromResponse(PassKeyItem p) {
+  factory PasskeyInfo.fromResponse(Passkey p) {
     return PasskeyInfo(
       p.id,
-      p.aaguid,
-      p.userAgent,
+      p.authenticatorAAGUID,
+      p.sourceOS,
+      p.sourceBrowser,
       p.attestationType,
-      p.transport,
+      p.transport.map((i) => i.name).toList(),
       p.backupEligible,
       p.backupState,
       p.created,
@@ -23,7 +24,8 @@ class PasskeyInfo {
   PasskeyInfo(
     this.id,
     this.aaguid,
-    this.userAgent,
+    this.sourceOS,
+    this.sourceBrowser,
     this.attestationType,
     this.transport,
     this.backupEligible,
@@ -33,7 +35,8 @@ class PasskeyInfo {
 
   final String id;
   final String aaguid;
-  final String userAgent;
+  final String sourceOS;
+  final String sourceBrowser;
   final String attestationType;
   final List<String> transport;
   final bool backupEligible;
diff --git a/packages/corbado_auth/lib/src/types/passkey_info.g.dart b/packages/corbado_auth/lib/src/types/passkey_info.g.dart
index fa74d62..f50b0f0 100644
--- a/packages/corbado_auth/lib/src/types/passkey_info.g.dart
+++ b/packages/corbado_auth/lib/src/types/passkey_info.g.dart
@@ -9,7 +9,8 @@ part of 'passkey_info.dart';
 PasskeyInfo _$PasskeyInfoFromJson(Map<String, dynamic> json) => PasskeyInfo(
       json['id'] as String,
       json['aaguid'] as String,
-      json['userAgent'] as String,
+      json['sourceOS'] as String,
+      json['sourceBrowser'] as String,
       json['attestationType'] as String,
       (json['transport'] as List<dynamic>).map((e) => e as String).toList(),
       json['backupEligible'] as bool,
@@ -21,7 +22,8 @@ Map<String, dynamic> _$PasskeyInfoToJson(PasskeyInfo instance) =>
     <String, dynamic>{
       'id': instance.id,
       'aaguid': instance.aaguid,
-      'userAgent': instance.userAgent,
+      'sourceOS': instance.sourceOS,
+      'sourceBrowser': instance.sourceBrowser,
       'attestationType': instance.attestationType,
       'transport': instance.transport,
       'backupEligible': instance.backupEligible,
diff --git a/packages/corbado_auth/lib/src/types/process_handler.dart b/packages/corbado_auth/lib/src/types/process_handler.dart
new file mode 100644
index 0000000..315c607
--- /dev/null
+++ b/packages/corbado_auth/lib/src/types/process_handler.dart
@@ -0,0 +1,7 @@
+import 'package:flutter/material.dart';
+
+abstract class CorbadoScreen<T> implements Widget {
+  final T block;
+
+  CorbadoScreen(this.block);
+}
diff --git a/packages/corbado_auth/lib/src/types/project_config.dart b/packages/corbado_auth/lib/src/types/project_config.dart
deleted file mode 100644
index 076d8f0..0000000
--- a/packages/corbado_auth/lib/src/types/project_config.dart
+++ /dev/null
@@ -1,10 +0,0 @@
-import 'package:corbado_frontend_api_client/frontendapi/lib/api.dart';
-
-class ProjectConfig {
-  factory ProjectConfig.fromResponse(ProjectConfigRspAllOfData p) {
-    return ProjectConfig(
-    );
-  }
-
-  ProjectConfig();
-}
diff --git a/packages/corbado_auth/lib/src/types/screen_names.dart b/packages/corbado_auth/lib/src/types/screen_names.dart
new file mode 100644
index 0000000..af3f2eb
--- /dev/null
+++ b/packages/corbado_auth/lib/src/types/screen_names.dart
@@ -0,0 +1,9 @@
+enum ScreenNames {
+  SignupInit,
+  LoginInit,
+  EmailEdit,
+  EmailVerifyOTP,
+  EmailVerifyLink,
+  PasskeyAppend,
+  PasskeyVerify
+}
diff --git a/packages/corbado_auth/lib/src/types/types.dart b/packages/corbado_auth/lib/src/types/types.dart
index 5cbb2dd..d8ab433 100644
--- a/packages/corbado_auth/lib/src/types/types.dart
+++ b/packages/corbado_auth/lib/src/types/types.dart
@@ -4,5 +4,7 @@ export 'auth_state.dart';
 export 'exceptions/exceptions.dart';
 export 'exceptions/field.dart';
 export 'passkey_info.dart';
+export 'process_handler.dart';
+export 'screen_names.dart';
 export 'user.dart';
 export 'webauthn/types.dart';
diff --git a/packages/corbado_auth/lib/src/types/user.dart b/packages/corbado_auth/lib/src/types/user.dart
index 2839ae2..0db395c 100644
--- a/packages/corbado_auth/lib/src/types/user.dart
+++ b/packages/corbado_auth/lib/src/types/user.dart
@@ -24,7 +24,7 @@ class User {
   String? get email => decoded.email;
 
   /// Username that has been set during sign up.
-  String get username => decoded.name;
+  String? get username => decoded.name;
 
   /// JWT token that encodes the user object (encoded).
   final String idToken;
@@ -60,7 +60,7 @@ class IdToken {
   final int iat;
 
   /// Username
-  final String name;
+  final String? name;
   final String orig;
 
   /// Null if the email has not been verified by the user.
diff --git a/packages/corbado_auth/lib/src/types/user.g.dart b/packages/corbado_auth/lib/src/types/user.g.dart
index b0e98c9..d92aef2 100644
--- a/packages/corbado_auth/lib/src/types/user.g.dart
+++ b/packages/corbado_auth/lib/src/types/user.g.dart
@@ -19,12 +19,12 @@ Map<String, dynamic> _$UserToJson(User instance) => <String, dynamic>{
 IdToken _$IdTokenFromJson(Map<String, dynamic> json) => IdToken(
       json['iss'] as String,
       json['sub'] as String,
-      json['exp'] as int,
-      json['nbf'] as int,
-      json['iat'] as int,
-      json['name'] as String,
+      (json['exp'] as num).toInt(),
+      (json['nbf'] as num).toInt(),
+      (json['iat'] as num).toInt(),
+      json['name'] as String?,
       json['orig'] as String,
-      json['version'] as int,
+      (json['version'] as num).toInt(),
       email: json['email'] as String? ?? '',
     );
 
diff --git a/packages/corbado_auth/lib/src/types/webauthn/authentication.dart b/packages/corbado_auth/lib/src/types/webauthn/authentication.dart
index 0ba4b2c..2941b82 100644
--- a/packages/corbado_auth/lib/src/types/webauthn/authentication.dart
+++ b/packages/corbado_auth/lib/src/types/webauthn/authentication.dart
@@ -16,6 +16,7 @@ class StartLoginResponse {
 
   AuthenticateRequestType toPlatformType({
     required bool conditional,
+    bool preferImmediatelyAvailableCredentials = true,
   }) {
     return AuthenticateRequestType(
       relyingPartyId: publicKey.rpId,
@@ -31,13 +32,12 @@ class StartLoginResponse {
             ),
           )
           .toList(),
-      mediation:
-          conditional ? MediationType.Conditional : MediationType.Optional,
+      mediation: conditional ? MediationType.Conditional : MediationType.Optional,
+      preferImmediatelyAvailableCredentials: preferImmediatelyAvailableCredentials,
     );
   }
 
-  Map<String, dynamic> toJson() =>
-      _$StartLoginResponseToJson(this);
+  Map<String, dynamic> toJson() => _$StartLoginResponseToJson(this);
 }
 
 @JsonSerializable()
@@ -72,8 +72,7 @@ class StartLoginPublicKey {
   final List<AllowCredential>? allowCredentials;
 
   /// Serializes object to json
-  Map<String, dynamic> toJson() =>
-      _$StartLoginPublicKeyToJson(this);
+  Map<String, dynamic> toJson() => _$StartLoginPublicKeyToJson(this);
 }
 
 @JsonSerializable()
@@ -144,8 +143,7 @@ class FinishLoginRequest {
   /// The type
   final String type;
 
-  Map<String, dynamic> toJson() =>
-      _$FinishLoginRequestToJson(this);
+  Map<String, dynamic> toJson() => _$FinishLoginRequestToJson(this);
 }
 
 @JsonSerializable()
diff --git a/packages/corbado_auth/lib/src/types/webauthn/authentication.g.dart b/packages/corbado_auth/lib/src/types/webauthn/authentication.g.dart
index 9fee55e..243a5d2 100644
--- a/packages/corbado_auth/lib/src/types/webauthn/authentication.g.dart
+++ b/packages/corbado_auth/lib/src/types/webauthn/authentication.g.dart
@@ -20,7 +20,7 @@ StartLoginPublicKey _$StartLoginPublicKeyFromJson(Map<String, dynamic> json) =>
     StartLoginPublicKey(
       rpId: json['rpId'] as String,
       challenge: json['challenge'] as String,
-      timeout: json['timeout'] as int?,
+      timeout: (json['timeout'] as num?)?.toInt(),
       userVerification: json['userVerification'] as String?,
       allowCredentials: (json['allowCredentials'] as List<dynamic>?)
           ?.map((e) => AllowCredential.fromJson(e as Map<String, dynamic>))
diff --git a/packages/corbado_auth/lib/src/types/webauthn/registration.dart b/packages/corbado_auth/lib/src/types/webauthn/registration.dart
index 5ea3cc5..0f9e2d3 100644
--- a/packages/corbado_auth/lib/src/types/webauthn/registration.dart
+++ b/packages/corbado_auth/lib/src/types/webauthn/registration.dart
@@ -22,7 +22,7 @@ class StartRegisterResponse {
     final authenticatorSelection = AuthenticatorSelectionType(
       authenticatorAttachment:
           publicKey.authenticatorSelection.authenticatorAttachment,
-      requireResidentKey: publicKey.authenticatorSelection.requireResidentKey,
+      requireResidentKey: publicKey.authenticatorSelection.requireResidentKey ?? false,
       residentKey: publicKey.authenticatorSelection.residentKey,
       userVerification: publicKey.authenticatorSelection.userVerification,
     );
@@ -81,8 +81,8 @@ class CorbadoAuthenticatorSelection {
 
   factory CorbadoAuthenticatorSelection.fromJson(Map<String, dynamic> json) =>
       _$CorbadoAuthenticatorSelectionFromJson(json);
-  final String authenticatorAttachment;
-  final bool requireResidentKey;
+  final String? authenticatorAttachment;
+  final bool? requireResidentKey;
   final String residentKey;
   final String userVerification;
 
diff --git a/packages/corbado_auth/lib/src/types/webauthn/registration.g.dart b/packages/corbado_auth/lib/src/types/webauthn/registration.g.dart
index e19a942..29c72ae 100644
--- a/packages/corbado_auth/lib/src/types/webauthn/registration.g.dart
+++ b/packages/corbado_auth/lib/src/types/webauthn/registration.g.dart
@@ -31,7 +31,7 @@ StartRegisterPublicKey _$StartRegisterPublicKeyFromJson(
           ?.map((e) =>
               StartRegisterPubKeyCredParam.fromJson(e as Map<String, dynamic>))
           .toList(),
-      timeout: json['timeout'] as int?,
+      timeout: (json['timeout'] as num?)?.toInt(),
       attestation: json['attestation'] as String?,
     );
 
@@ -51,7 +51,7 @@ StartRegisterPubKeyCredParam _$StartRegisterPubKeyCredParamFromJson(
         Map<String, dynamic> json) =>
     StartRegisterPubKeyCredParam(
       json['type'] as String,
-      json['alg'] as int,
+      (json['alg'] as num).toInt(),
     );
 
 Map<String, dynamic> _$StartRegisterPubKeyCredParamToJson(
@@ -64,8 +64,8 @@ Map<String, dynamic> _$StartRegisterPubKeyCredParamToJson(
 CorbadoAuthenticatorSelection _$CorbadoAuthenticatorSelectionFromJson(
         Map<String, dynamic> json) =>
     CorbadoAuthenticatorSelection(
-      json['authenticatorAttachment'] as String,
-      json['requireResidentKey'] as bool,
+      json['authenticatorAttachment'] as String?,
+      json['requireResidentKey'] as bool?,
       json['residentKey'] as String,
       json['userVerification'] as String,
     );
diff --git a/packages/corbado_auth/pubspec.yaml b/packages/corbado_auth/pubspec.yaml
index 5d88836..378d14f 100644
--- a/packages/corbado_auth/pubspec.yaml
+++ b/packages/corbado_auth/pubspec.yaml
@@ -2,21 +2,24 @@ name: corbado_auth
 description: Flutter package for Corbado Auth. Enables authentication on Android and iOS using passkeys.
 homepage: https://docs.corbado.com/overview/welcome
 repository: https://github.com/corbado/flutter-passkeys/tree/main/packages/corbado_auth
-version: 2.0.7
+version: 3.2.2
 
 environment:
   sdk: ">=3.0.0 <4.0.0"
   flutter: ">=3.0.0"
 
 dependencies:
-  corbado_frontend_api_client: ^1.0.0
+  built_collection: ^5.1.1
+  corbado_frontend_api_client: ^2.1.1
+  dio: ^5.7.0
   flutter:
     sdk: flutter
   flutter_keychain: ^2.4.0
   http: ^1.1.2
   json_annotation: ^4.8.1
   jwt_decoder: ^2.0.1
-  passkeys: ^2.0.7
+  meta: ^1.15.0
+  passkeys: ^2.7.0
   rxdart: ^0.27.7
   ua_client_hints: ^1.1.3
   universal_html: ^2.2.4
diff --git a/packages/corbado_auth_firebase/CHANGELOG.md b/packages/corbado_auth_firebase/CHANGELOG.md
index 386ddb7..3112069 100644
--- a/packages/corbado_auth_firebase/CHANGELOG.md
+++ b/packages/corbado_auth_firebase/CHANGELOG.md
@@ -1,3 +1,6 @@
+## 2.0.5
+* Bump versions of passkeys, corbado_auth and corbado_frontend_api_client
+
 ## 2.0.4
 * Pass correct userAgent to passkey related firebase functions
 
diff --git a/packages/corbado_auth_firebase/README.md b/packages/corbado_auth_firebase/README.md
index 7f70be9..961c2ba 100644
--- a/packages/corbado_auth_firebase/README.md
+++ b/packages/corbado_auth_firebase/README.md
@@ -85,7 +85,7 @@ We will now describe these steps in more detail.
 ### Deploy the Firebase extension
 
 1. Go to
-   the [Firebase extension hub](https://extensions.dev/extensions/firebase/authentication-corbado)
+   the [Firebase extension hub](https://extensions.dev/extensions/corbado/authentication-corbado)
    and install the extension by clicking on "Install in Firebase console". Make sure that you select
    the correct Firebase project (the one you want to use with your Flutter app).
 2. After the installation you have to append the "Service Account Token Creator" to your service
@@ -126,4 +126,4 @@ This is caused by the latency of the Firebase functions (if you have ever worked
 you might know that they can be quite slow to start).
 You can tackle this cold start problem by setting a minimum number of instances for your functions.
 Find more information about this in the
-Firebase [docs](https://firebase.google.com/docs/functions/tips#min).
\ No newline at end of file
+Firebase [docs](https://firebase.google.com/docs/functions/tips#min).
diff --git a/packages/corbado_auth_firebase/pubspec.yaml b/packages/corbado_auth_firebase/pubspec.yaml
index dda92bd..8dc72eb 100644
--- a/packages/corbado_auth_firebase/pubspec.yaml
+++ b/packages/corbado_auth_firebase/pubspec.yaml
@@ -2,7 +2,7 @@ name: corbado_auth_firebase
 description: Flutter package to enable passkey based authentication with Firebase powered by Corbado.
 homepage: https://docs.corbado.com/overview/welcome
 repository: https://github.com/corbado/flutter-passkeys/tree/main/packages/corbado_auth_firebase
-version: 2.0.4
+version: 2.0.5
 
 environment:
   sdk: ">=3.0.0 <4.0.0"
@@ -10,15 +10,15 @@ environment:
 
 dependencies:
   cloud_functions: ^4.5.8
-  corbado_auth: ^2.0.3
-  corbado_frontend_api_client: ^1.0.0
+  corbado_auth: ^2.0.8
+  corbado_frontend_api_client: ^1.1.1
   flutter:
     sdk: flutter
   flutter_keychain: ^2.4.0
   http: ^1.1.2
   json_annotation: ^4.8.1
   jwt_decoder: ^2.0.1
-  passkeys: ^2.0.3
+  passkeys: ^2.0.9
   rxdart: ^0.27.7
   ua_client_hints: ^1.1.3
   universal_html: ^2.2.4
diff --git a/packages/passkeys/passkeys/CHANGELOG.md b/packages/passkeys/passkeys/CHANGELOG.md
index 0aef004..63382d8 100644
--- a/packages/passkeys/passkeys/CHANGELOG.md
+++ b/packages/passkeys/passkeys/CHANGELOG.md
@@ -1,3 +1,42 @@
+## 2.7.0
+* Fixed Exception when trying to register while `authenticatorAttachment` is null on Safari or IOS device. (Web)
+* Added support for external security keys (Yubikey) on iOS. (iOS)
+* Added handling for timeouts in `authenticate` and `register` methods. (Android)
+
+## 2.6.0
+* Added `transports` to RegistrationResponse
+* Fixes `hasPasskeySupport` in `getAvailability` (Android)
+
+## 2.5.0
+* Introduced `getAvailability` API: Enables checking for passkey support across platforms.
+* Updated `androidx.credentials:credentials` to version 1.3.0 for improved compatibility. (Android)
+* Resolved an issue on iOS 16.0+ where a `DeviceNotSupported` exception was incorrectly thrown on supported devices. (iOS)
+* Added `hasPasskeySupport` to `AvailabilityType` to verify passkey support on web platforms. (Web)
+
+## 2.4.0
+* Added support for WebAssembly (Wasm) (Web)
+* Added handling for `CreateCredentialNoCreateOptionException` when no viable creation options were found (Android)
+
+## 2.3.0
+* Improved fallback handling in `PasskeyAuthenticator.authenticate`.
+* Added support for `preferImmediatelyAvailableCredentials` on Android.
+* Fixed `requireResidentKey` mapping for 1Password compatibility.
+
+## 2.2.0
+* Added support for AGP 8.0 and newer (Android)
+* Resolves a crash issue on iOS devices running versions below 16.0. (iOS)
+
+## 2.1.0
+* Added support for preferImmediatelyAvailableCredentials (Android and iOS)
+* Added getAvailability (Flutter web only)
+
+## 2.0.9
+* Bump version of passkeys_web and corbado_frontend_api_client
+* Removed dependencies to openapi_generator_annotations and openapi_generator
+
+## 2.0.8
+* Added NoCredentialsAvailableException to indicate that no credentials are available during a login (android)
+
 ## 2.0.7
 * Bump version of passkeys_ios
 
diff --git a/packages/passkeys/passkeys/README.md b/packages/passkeys/passkeys/README.md
index f0e20e8..7278d27 100644
--- a/packages/passkeys/passkeys/README.md
+++ b/packages/passkeys/passkeys/README.md
@@ -4,7 +4,8 @@
 
 A Flutter package to enable authentication through passkeys (based on WebAuthn / FIDO2).
 
-Take a look at https://passkeys.flutter.corbado.io for a **live demo** (this is a Flutter web deployment of the example on Vercel).
+Take a look at https://passkeys.flutter.corbado.io for a **live demo** (this is a Flutter web deployment of the example
+on Vercel).
 
 |             | Android            | iOS                | Linux | macOS | Web                | Windows |
 |-------------|--------------------|--------------------|-------|-------|--------------------|---------|
@@ -185,7 +186,38 @@ FYI: You can use this approach in two variations:
 <summary>4. Use case: You want to use Firebase together with passkeys</summary>
 
 Firebase is a great technology that helps you with building your app.
-To use passkeys together with Firebase you can use [corbado_auth_firebase](https://pub.dev/packages/corbado_auth_firebase).
+To use passkeys together with Firebase you can
+use [corbado_auth_firebase](https://pub.dev/packages/corbado_auth_firebase).
+
+</details>
+
+<details>
+<summary>5. Use case: You want to handle when the passkeys are not supported</summary>
+
+```dart
+if (kIsWeb) {
+  authService.authenticator.getAvailability().web().then((value) {
+    if (!value.hasPasskeySupport) {
+      // Disable passkey sign-up for Web
+      disablePasskeySignUp();
+    }
+  });
+} else if (Platform.isAndroid) {
+  authService.authenticator.getAvailability().android().then((value) {
+    if (!value.hasPasskeySupport) {
+      // Disable passkey sign-up for Android
+      disablePasskeySignUp();
+    }
+  });
+} else if (Platform.isIOS) {
+  authService.authenticator.getAvailability().ios().then((value) {
+    if (!value.hasPasskeySupport) {
+      // Disable passkey sign-up for iOS
+      disablePasskeySignUp();
+    }
+  });
+}
+```
 
 </details>
 
@@ -284,8 +316,38 @@ Our passkeys_web package relies on JavaScript for integrating with the browser's
 To make this work, you have to include our JavaScript library in your web/index.html file.
 
 ```html
-<script src="https://github.com/corbado/flutter-passkeys/releases/download/2.0.0-dev.1/bundle.js" type="application/javascript"></script>
+
+<script src="https://github.com/corbado/flutter-passkeys/releases/download/2.3.0/bundle.js"
+        type="application/javascript"></script>
 ```
 
 You can also take a look at this package's example to see how it is done there.
-</details>
\ No newline at end of file
+
+</details>
+
+#### Requirements
+
+- This package requires Flutter 3.19.0 or later.
+
+#### Additional Details
+
+- To support WebAssembly (Wasm) as outlined
+  in [Flutter's documentation](https://docs.flutter.dev/platform-integration/web/wasm), we had to utilize
+  `dart:js_interop`, which requires Dart 3.3.0 and Flutter 3.19.0. Therefore, Flutter 3.19.0 is the minimal requirement
+  for this feature.
+- Starting with Flutter 3.22.0 and later, when inserting the application script into the HTML, use:
+
+```html
+
+<script src="flutter_bootstrap.js" type="application/javascript"></script>
+```
+
+Instead of:
+
+```html
+
+<script src="main.dart.js" type="application/javascript"></script>
+```
+
+- To enable running or building using Wasm, simply add the `--wasm` flag to the `flutter run` or `flutter build`
+  commands.
\ No newline at end of file
diff --git a/packages/passkeys/passkeys/example/README.md b/packages/passkeys/passkeys/example/README.md
index 66c9291..f2c4ef9 100644
--- a/packages/passkeys/passkeys/example/README.md
+++ b/packages/passkeys/passkeys/example/README.md
@@ -33,3 +33,122 @@ because the relying party server in the example only trusts apps that have been
 development team id of "0000000000" and a Bundle Identifier of "com.corbado.passkeys.pub".
 
 <img src="https://raw.githubusercontent.com/corbado/flutter-passkeys/main/packages/passkeys/passkeys/doc/xcode-team-unknown-name.png" style="width: 50%" calt="ios_enrolled_biometrics">
+
+
+# How to run automatic tests of the example
+
+## Requirements
+
+Before running the tests, ensure you have the following setup:
+
+- **Appium** (installed globally with Flutter Plugin)
+- **iPhone 16 Pro Simulator** (configured in Xcode)
+- **Android Emulator with API 29** (Nexus 5 device setup in Android Studio)
+- **Google Account** (credentials available in 1Password)
+- **Biometric Authentication**:
+    - Set up a PIN code on the Android device
+    - Register a fingerprint on the Android device
+
+## Step-by-Step Guide
+
+### 1. Set Up the iOS Simulator
+
+1. Open **Xcode**.
+2. Navigate to **Xcode > Settings > Platforms** and ensure the latest iOS version is installed.
+3. Open the **Simulator** app.
+4. Select **iPhone 16 Pro** as the active simulator.
+5. Ensure the simulator is running before proceeding.
+
+### 2. Set Up the Android Emulator
+
+1. Open **Android Studio**.
+2. Navigate to **AVD Manager** (Android Virtual Device Manager).
+3. Create a new device with the following specifications:
+    - **Device:** Nexus 5
+    - **API Level:** 29
+    - **Google Play Services:** Enabled
+4. Start the emulator and complete the setup.
+5. Log in with the Google Account (credentials available in 1Password).
+6. Set up a **PIN code**.
+7. Register a **fingerprint** under device security settings. (You can use adb commands to simulate fingerprint authentication.)
+```shell
+    adb emu finger touch 1
+```
+
+### 3. Build and Install the Example App
+
+1. Ensure all dependencies are installed:
+   ```sh
+   flutter pub get
+   ```
+2. Get Device ID for Android & iOS:
+   ```sh
+   flutter devices
+   ```
+3. Build and install the app on both devices:
+   ```sh
+   flutter build apk --debug --dart-define=TEST_MODE=true
+   flutter install --device-id=<device-id>
+   ```
+   ```sh
+   flutter build ios --simulator --dart-define=TEST_MODE=true
+   flutter install --device-id=<device-id>
+   ```
+
+### 4. Install and run Appium
+
+1. Install Appium globally:
+   ```sh
+   npm install -g appium
+   ```
+
+2. Install the drivers for Flutter
+    ```sh
+    appium driver install --source=npm appium-flutter-driver
+    appium driver install uiautomator2
+    appium driver install --source=npm appium-flutter-integration-driver
+    ```
+
+3. Start Appium on port 4567
+    ```sh
+    appium -p 4567
+    ```
+   
+### 5. Run the Automated Tests
+
+Make sure the emulators are running before executing the tests.
+
+1. Install required Node.js dependencies:
+   ```sh
+   cd tests
+   npm install
+   ```
+2. Run tests for Android:
+   ```sh
+   npm run test:android -- --deviceName=<device-id>
+   ```
+3. Run tests for iOS:
+   ```sh
+   npm run test:ios -- --deviceName=<device-id>
+   ```
+
+### 6. Notes
+
+- Ensure emulators are running before executing tests.
+- Restart the emulators if needed and re-run the tests.
+- You will have to rebuild and reinstall the app if you make changes to the code and want to run the tests again.
+
+### 7. Clean Up (Optional)
+
+- To clean the project:
+  ```sh
+  flutter clean
+  ```
+- To reset and reinstall dependencies:
+  ```sh
+  flutter pub get
+  ```
+
+---
+
+Follow these steps carefully to ensure a successful automated testing process.
\ No newline at end of file
diff --git a/packages/passkeys/passkeys/example/android/.gitignore b/packages/passkeys/passkeys/example/android/.gitignore
index d36889d..0268244 100644
--- a/packages/passkeys/passkeys/example/android/.gitignore
+++ b/packages/passkeys/passkeys/example/android/.gitignore
@@ -4,9 +4,11 @@ gradle-wrapper.jar
 /gradlew
 /gradlew.bat
 /local.properties
+/app/.cxx
 GeneratedPluginRegistrant.java
 
 # Remember to never publicly share your keystore.
 # See https://flutter.dev/docs/deployment/android#reference-the-keystore-from-the-app
 key.properties
 **/*.jks
+
diff --git a/packages/passkeys/passkeys/example/android/app/build.gradle b/packages/passkeys/passkeys/example/android/app/build.gradle
index 5f448ea..fc310c6 100644
--- a/packages/passkeys/passkeys/example/android/app/build.gradle
+++ b/packages/passkeys/passkeys/example/android/app/build.gradle
@@ -1,3 +1,9 @@
+plugins {
+    id "com.android.application"
+    id "kotlin-android"
+    id "dev.flutter.flutter-gradle-plugin"
+}
+
 def localProperties = new Properties()
 def localPropertiesFile = rootProject.file('local.properties')
 if (localPropertiesFile.exists()) {
@@ -6,11 +12,6 @@ if (localPropertiesFile.exists()) {
     }
 }
 
-def flutterRoot = localProperties.getProperty('flutter.sdk')
-if (flutterRoot == null) {
-    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
-}
-
 def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
 if (flutterVersionCode == null) {
     flutterVersionCode = '1'
@@ -21,12 +22,9 @@ if (flutterVersionName == null) {
     flutterVersionName = '1.0'
 }
 
-apply plugin: 'com.android.application'
-apply plugin: 'kotlin-android'
-apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
-
 android {
-    compileSdkVersion 34
+    ndkVersion = "27.2.12479018"
+    compileSdkVersion 35
 
     compileOptions {
         sourceCompatibility JavaVersion.VERSION_1_8
@@ -74,5 +72,4 @@ flutter {
 }
 
 dependencies {
-    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
 }
diff --git a/packages/passkeys/passkeys/example/android/build.gradle b/packages/passkeys/passkeys/example/android/build.gradle
index 3402903..bc157bd 100644
--- a/packages/passkeys/passkeys/example/android/build.gradle
+++ b/packages/passkeys/passkeys/example/android/build.gradle
@@ -1,16 +1,3 @@
-buildscript {
-    ext.kotlin_version = '1.8.10'
-    repositories {
-        google()
-        mavenCentral()
-    }
-
-    dependencies {
-        classpath 'com.android.tools.build:gradle:7.4.2'
-        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
-    }
-}
-
 allprojects {
     repositories {
         google()
diff --git a/packages/passkeys/passkeys/example/android/gradle/wrapper/gradle-wrapper.properties b/packages/passkeys/passkeys/example/android/gradle/wrapper/gradle-wrapper.properties
index cfe88f6..0eddad0 100644
--- a/packages/passkeys/passkeys/example/android/gradle/wrapper/gradle-wrapper.properties
+++ b/packages/passkeys/passkeys/example/android/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Fri Jun 23 08:50:38 CEST 2017
+#Fri Jan 17 13:47:51 CET 2025
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-8.6-bin.zip
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-7.6.1-all.zip
diff --git a/packages/passkeys/passkeys/example/android/settings.gradle b/packages/passkeys/passkeys/example/android/settings.gradle
index 44e62bc..304b26a 100644
--- a/packages/passkeys/passkeys/example/android/settings.gradle
+++ b/packages/passkeys/passkeys/example/android/settings.gradle
@@ -1,11 +1,25 @@
-include ':app'
+pluginManagement {
+    def flutterSdkPath = {
+        def properties = new Properties()
+        file("local.properties").withInputStream { properties.load(it) }
+        def flutterSdkPath = properties.getProperty("flutter.sdk")
+        assert flutterSdkPath != null, "flutter.sdk not set in local.properties"
+        return flutterSdkPath
+    }()
 
-def localPropertiesFile = new File(rootProject.projectDir, "local.properties")
-def properties = new Properties()
+    includeBuild("$flutterSdkPath/packages/flutter_tools/gradle")
 
-assert localPropertiesFile.exists()
-localPropertiesFile.withReader("UTF-8") { reader -> properties.load(reader) }
+    repositories {
+        google()
+        mavenCentral()
+        gradlePluginPortal()
+    }
+}
 
-def flutterSdkPath = properties.getProperty("flutter.sdk")
-assert flutterSdkPath != null, "flutter.sdk not set in local.properties"
-apply from: "$flutterSdkPath/packages/flutter_tools/gradle/app_plugin_loader.gradle"
+plugins {
+    id "dev.flutter.flutter-plugin-loader" version "1.0.0"
+    id "com.android.application" version "8.4.0" apply false
+    id "org.jetbrains.kotlin.android" version "2.0.20" apply false
+}
+
+include ":app"
\ No newline at end of file
diff --git a/packages/passkeys/passkeys/example/bundle.js b/packages/passkeys/passkeys/example/bundle.js
deleted file mode 100644
index e5078c4..0000000
--- a/packages/passkeys/passkeys/example/bundle.js
+++ /dev/null
@@ -1,354 +0,0 @@
-var PasskeyAuthenticator = (function (exports) {
-    'use strict';
-
-    /******************************************************************************
-    Copyright (c) Microsoft Corporation.
-
-    Permission to use, copy, modify, and/or distribute this software for any
-    purpose with or without fee is hereby granted.
-
-    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
-    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
-    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
-    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
-    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
-    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
-    PERFORMANCE OF THIS SOFTWARE.
-    ***************************************************************************** */
-    /* global Reflect, Promise, SuppressedError, Symbol */
-
-
-    function __classPrivateFieldGet(receiver, state, kind, f) {
-        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
-        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
-        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
-    }
-
-    function __classPrivateFieldSet(receiver, state, value, kind, f) {
-        if (kind === "m") throw new TypeError("Private method is not writable");
-        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
-        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
-        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
-    }
-
-    typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
-        var e = new Error(message);
-        return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
-    };
-
-    // src/webauthn-json/base64url.ts
-    function base64urlToBuffer(baseurl64String) {
-      const padding = "==".slice(0, (4 - baseurl64String.length % 4) % 4);
-      const base64String = baseurl64String.replace(/-/g, "+").replace(/_/g, "/") + padding;
-      const str = atob(base64String);
-      const buffer = new ArrayBuffer(str.length);
-      const byteView = new Uint8Array(buffer);
-      for (let i = 0; i < str.length; i++) {
-        byteView[i] = str.charCodeAt(i);
-      }
-      return buffer;
-    }
-    function bufferToBase64url(buffer) {
-      const byteView = new Uint8Array(buffer);
-      let str = "";
-      for (const charCode of byteView) {
-        str += String.fromCharCode(charCode);
-      }
-      const base64String = btoa(str);
-      const base64urlString = base64String.replace(/\+/g, "-").replace(
-        /\//g,
-        "_"
-      ).replace(/=/g, "");
-      return base64urlString;
-    }
-
-    // src/webauthn-json/convert.ts
-    var copyValue = "copy";
-    var convertValue = "convert";
-    function convert(conversionFn, schema2, input) {
-      if (schema2 === copyValue) {
-        return input;
-      }
-      if (schema2 === convertValue) {
-        return conversionFn(input);
-      }
-      if (schema2 instanceof Array) {
-        return input.map((v) => convert(conversionFn, schema2[0], v));
-      }
-      if (schema2 instanceof Object) {
-        const output = {};
-        for (const [key, schemaField] of Object.entries(schema2)) {
-          if (schemaField.derive) {
-            const v = schemaField.derive(input);
-            if (v !== void 0) {
-              input[key] = v;
-            }
-          }
-          if (!(key in input)) {
-            if (schemaField.required) {
-              throw new Error(`Missing key: ${key}`);
-            }
-            continue;
-          }
-          if (input[key] == null) {
-            output[key] = null;
-            continue;
-          }
-          output[key] = convert(
-            conversionFn,
-            schemaField.schema,
-            input[key]
-          );
-        }
-        return output;
-      }
-    }
-    function derived(schema2, derive) {
-      return {
-        required: true,
-        schema: schema2,
-        derive
-      };
-    }
-    function required(schema2) {
-      return {
-        required: true,
-        schema: schema2
-      };
-    }
-    function optional(schema2) {
-      return {
-        required: false,
-        schema: schema2
-      };
-    }
-
-    // src/webauthn-json/basic/schema.ts
-    var publicKeyCredentialDescriptorSchema = {
-      type: required(copyValue),
-      id: required(convertValue),
-      transports: optional(copyValue)
-    };
-    var simplifiedExtensionsSchema = {
-      appid: optional(copyValue),
-      appidExclude: optional(copyValue),
-      credProps: optional(copyValue)
-    };
-    var simplifiedClientExtensionResultsSchema = {
-      appid: optional(copyValue),
-      appidExclude: optional(copyValue),
-      credProps: optional(copyValue)
-    };
-    var credentialCreationOptions = {
-      publicKey: required({
-        rp: required(copyValue),
-        user: required({
-          id: required(convertValue),
-          name: required(copyValue),
-          displayName: required(copyValue)
-        }),
-        challenge: required(convertValue),
-        pubKeyCredParams: required(copyValue),
-        timeout: optional(copyValue),
-        excludeCredentials: optional([publicKeyCredentialDescriptorSchema]),
-        authenticatorSelection: optional(copyValue),
-        attestation: optional(copyValue),
-        extensions: optional(simplifiedExtensionsSchema)
-      }),
-      signal: optional(copyValue)
-    };
-    var publicKeyCredentialWithAttestation = {
-      type: required(copyValue),
-      id: required(copyValue),
-      rawId: required(convertValue),
-      authenticatorAttachment: optional(copyValue),
-      response: required({
-        clientDataJSON: required(convertValue),
-        attestationObject: required(convertValue),
-        transports: derived(
-          copyValue,
-          (response) => {
-            var _a;
-            return ((_a = response.getTransports) == null ? void 0 : _a.call(response)) || [];
-          }
-        )
-      }),
-      clientExtensionResults: derived(
-        simplifiedClientExtensionResultsSchema,
-        (pkc) => pkc.getClientExtensionResults()
-      )
-    };
-    var credentialRequestOptions = {
-      mediation: optional(copyValue),
-      publicKey: required({
-        challenge: required(convertValue),
-        timeout: optional(copyValue),
-        rpId: optional(copyValue),
-        allowCredentials: optional([publicKeyCredentialDescriptorSchema]),
-        userVerification: optional(copyValue),
-        extensions: optional(simplifiedExtensionsSchema)
-      }),
-      signal: optional(copyValue)
-    };
-    var publicKeyCredentialWithAssertion = {
-      type: required(copyValue),
-      id: required(copyValue),
-      rawId: required(convertValue),
-      authenticatorAttachment: optional(copyValue),
-      response: required({
-        clientDataJSON: required(convertValue),
-        authenticatorData: required(convertValue),
-        signature: required(convertValue),
-        userHandle: required(convertValue)
-      }),
-      clientExtensionResults: derived(
-        simplifiedClientExtensionResultsSchema,
-        (pkc) => pkc.getClientExtensionResults()
-      )
-    };
-
-    // src/webauthn-json/basic/api.ts
-    function createRequestFromJSON(requestJSON) {
-      return convert(base64urlToBuffer, credentialCreationOptions, requestJSON);
-    }
-    function createResponseToJSON(credential) {
-      return convert(
-        bufferToBase64url,
-        publicKeyCredentialWithAttestation,
-        credential
-      );
-    }
-    async function create(requestJSON) {
-      const credential = await navigator.credentials.create(
-        createRequestFromJSON(requestJSON)
-      );
-      return createResponseToJSON(credential);
-    }
-    function getRequestFromJSON(requestJSON) {
-      return convert(base64urlToBuffer, credentialRequestOptions, requestJSON);
-    }
-    function getResponseToJSON(credential) {
-      return convert(
-        bufferToBase64url,
-        publicKeyCredentialWithAssertion,
-        credential
-      );
-    }
-    async function get(requestJSON) {
-      const credential = await navigator.credentials.get(
-        getRequestFromJSON(requestJSON)
-      );
-      return getResponseToJSON(credential);
-    }
-
-    var _PasskeyAuthenticator_abortController;
-    const ABORTED_BY_USER = 'operation aborted by user.';
-    class PasskeyAuthenticator {
-        constructor() {
-            _PasskeyAuthenticator_abortController.set(this, void 0);
-        }
-        async register(params) {
-            try {
-                const typedParams = JSON.parse(params);
-                const out = await create(typedParams);
-                return JSON.stringify(out);
-            }
-            catch (e) {
-                let error;
-                if (e instanceof DOMException) {
-                    error = PlatformError.fromDOMException(e);
-                }
-                else if (e instanceof String) {
-                    error = PlatformError.unknownError(e.toString());
-                }
-                else {
-                    error = PlatformError.unknownError('-');
-                }
-                const serializedError = JSON.stringify(error);
-                console.log(serializedError);
-                return Promise.reject(serializedError);
-            }
-        }
-        async login(params) {
-            try {
-                __classPrivateFieldSet(this, _PasskeyAuthenticator_abortController, new AbortController(), "f");
-                const typedParams = JSON.parse(params);
-                typedParams.signal = __classPrivateFieldGet(this, _PasskeyAuthenticator_abortController, "f").signal;
-                const out = await get(typedParams);
-                return JSON.stringify(out);
-            }
-            catch (e) {
-                let error;
-                if (e instanceof DOMException) {
-                    error = PlatformError.fromDOMException(e);
-                }
-                else if (e instanceof String) {
-                    error = PlatformError.unknownError(e.toString());
-                }
-                else if (e === ABORTED_BY_USER) {
-                    error = PlatformError.cancelled();
-                }
-                else {
-                    error = PlatformError.unknownError('-');
-                }
-                const serializedError = JSON.stringify(error);
-                return Promise.reject(serializedError);
-            }
-        }
-        abortCurrentWebAuthnOperation() {
-            if (!__classPrivateFieldGet(this, _PasskeyAuthenticator_abortController, "f")) {
-                return;
-            }
-            __classPrivateFieldGet(this, _PasskeyAuthenticator_abortController, "f").abort(ABORTED_BY_USER);
-        }
-    }
-    _PasskeyAuthenticator_abortController = new WeakMap();
-    class PlatformError {
-        constructor(code, message, details) {
-            this.code = code;
-            this.message = message;
-            this.details = details;
-        }
-        static fromDOMException(error) {
-            switch (error.name) {
-                case 'NotAllowedError':
-                    return PlatformError.cancelled();
-                default:
-                    return new PlatformError(error.name, error.message, '');
-            }
-        }
-        static unknownError(error) {
-            return new PlatformError('unknown', error, '');
-        }
-        static cancelled() {
-            return new PlatformError('cancelled', 'operation was cancelled by the user.', '');
-        }
-    }
-
-    let passkeyAuthenticator = new PasskeyAuthenticator();
-    async function canAuthenticate() {
-        return await PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable();
-    }
-    function init() {
-        passkeyAuthenticator = new PasskeyAuthenticator();
-    }
-    function register(params) {
-        return passkeyAuthenticator.register(params);
-    }
-    function login(params) {
-        return passkeyAuthenticator.login(params);
-    }
-    function cancelCurrentAuthenticatorOperation() {
-    console.log('cancelCurrentAuthenticatorOperation')
-        passkeyAuthenticator.abortCurrentWebAuthnOperation();
-    }
-
-    exports.canAuthenticate = canAuthenticate;
-    exports.cancelCurrentAuthenticatorOperation = cancelCurrentAuthenticatorOperation;
-    exports.init = init;
-    exports.login = login;
-    exports.register = register;
-
-    return exports;
-
-})({});
diff --git a/packages/passkeys/passkeys/example/ios/Runner.xcodeproj/project.pbxproj b/packages/passkeys/passkeys/example/ios/Runner.xcodeproj/project.pbxproj
index 6011949..4fc0ddd 100644
--- a/packages/passkeys/passkeys/example/ios/Runner.xcodeproj/project.pbxproj
+++ b/packages/passkeys/passkeys/example/ios/Runner.xcodeproj/project.pbxproj
@@ -9,7 +9,7 @@
 /* Begin PBXBuildFile section */
 		1498D2341E8E89220040F4C2 /* GeneratedPluginRegistrant.m in Sources */ = {isa = PBXBuildFile; fileRef = 1498D2331E8E89220040F4C2 /* GeneratedPluginRegistrant.m */; };
 		3B3967161E833CAA004F5970 /* AppFrameworkInfo.plist in Resources */ = {isa = PBXBuildFile; fileRef = 3B3967151E833CAA004F5970 /* AppFrameworkInfo.plist */; };
-		6578EEA2C83B6388B886968C /* Pods_Runner.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 1D6986157739D9687AB6AFD6 /* Pods_Runner.framework */; };
+		5019089242D539002EF1DEA6 /* Pods_Runner.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = D30265AB0B7CDA1D91BCC43D /* Pods_Runner.framework */; };
 		74858FAF1ED2DC5600515810 /* AppDelegate.swift in Sources */ = {isa = PBXBuildFile; fileRef = 74858FAE1ED2DC5600515810 /* AppDelegate.swift */; };
 		97C146FC1CF9000F007C117D /* Main.storyboard in Resources */ = {isa = PBXBuildFile; fileRef = 97C146FA1CF9000F007C117D /* Main.storyboard */; };
 		97C146FE1CF9000F007C117D /* Assets.xcassets in Resources */ = {isa = PBXBuildFile; fileRef = 97C146FD1CF9000F007C117D /* Assets.xcassets */; };
@@ -30,15 +30,16 @@
 /* End PBXCopyFilesBuildPhase section */
 
 /* Begin PBXFileReference section */
+		0F584C7EE96D0E597895F0CB /* Pods-Runner.profile.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-Runner.profile.xcconfig"; path = "Target Support Files/Pods-Runner/Pods-Runner.profile.xcconfig"; sourceTree = "<group>"; };
 		1498D2321E8E86230040F4C2 /* GeneratedPluginRegistrant.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = GeneratedPluginRegistrant.h; sourceTree = "<group>"; };
 		1498D2331E8E89220040F4C2 /* GeneratedPluginRegistrant.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GeneratedPluginRegistrant.m; sourceTree = "<group>"; };
-		1D6986157739D9687AB6AFD6 /* Pods_Runner.framework */ = {isa = PBXFileReference; explicitFileType = wrapper.framework; includeInIndex = 0; path = Pods_Runner.framework; sourceTree = BUILT_PRODUCTS_DIR; };
+		21D62CD30C1A0456242EA203 /* Pods-Runner.debug.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-Runner.debug.xcconfig"; path = "Target Support Files/Pods-Runner/Pods-Runner.debug.xcconfig"; sourceTree = "<group>"; };
+		2816DBB62F3972E31AEC45DF /* Pods-Runner.release.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-Runner.release.xcconfig"; path = "Target Support Files/Pods-Runner/Pods-Runner.release.xcconfig"; sourceTree = "<group>"; };
 		3B3967151E833CAA004F5970 /* AppFrameworkInfo.plist */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.plist.xml; name = AppFrameworkInfo.plist; path = Flutter/AppFrameworkInfo.plist; sourceTree = "<group>"; };
 		613825442A326A3F00B49261 /* Runner.entitlements */ = {isa = PBXFileReference; lastKnownFileType = text.plist.entitlements; path = Runner.entitlements; sourceTree = "<group>"; };
 		74858FAD1ED2DC5600515810 /* Runner-Bridging-Header.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "Runner-Bridging-Header.h"; sourceTree = "<group>"; };
 		74858FAE1ED2DC5600515810 /* AppDelegate.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = AppDelegate.swift; sourceTree = "<group>"; };
 		7AFA3C8E1D35360C0083082E /* Release.xcconfig */ = {isa = PBXFileReference; lastKnownFileType = text.xcconfig; name = Release.xcconfig; path = Flutter/Release.xcconfig; sourceTree = "<group>"; };
-		92B43DD0AD58E6356D15892C /* Pods-Runner.debug.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-Runner.debug.xcconfig"; path = "Target Support Files/Pods-Runner/Pods-Runner.debug.xcconfig"; sourceTree = "<group>"; };
 		9740EEB21CF90195004384FC /* Debug.xcconfig */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.xcconfig; name = Debug.xcconfig; path = Flutter/Debug.xcconfig; sourceTree = "<group>"; };
 		9740EEB31CF90195004384FC /* Generated.xcconfig */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.xcconfig; name = Generated.xcconfig; path = Flutter/Generated.xcconfig; sourceTree = "<group>"; };
 		97C146EE1CF9000F007C117D /* Runner.app */ = {isa = PBXFileReference; explicitFileType = wrapper.application; includeInIndex = 0; path = Runner.app; sourceTree = BUILT_PRODUCTS_DIR; };
@@ -46,8 +47,7 @@
 		97C146FD1CF9000F007C117D /* Assets.xcassets */ = {isa = PBXFileReference; lastKnownFileType = folder.assetcatalog; path = Assets.xcassets; sourceTree = "<group>"; };
 		97C147001CF9000F007C117D /* Base */ = {isa = PBXFileReference; lastKnownFileType = file.storyboard; name = Base; path = Base.lproj/LaunchScreen.storyboard; sourceTree = "<group>"; };
 		97C147021CF9000F007C117D /* Info.plist */ = {isa = PBXFileReference; lastKnownFileType = text.plist.xml; path = Info.plist; sourceTree = "<group>"; };
-		C32DC939DE75A0BDF7B647A4 /* Pods-Runner.release.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-Runner.release.xcconfig"; path = "Target Support Files/Pods-Runner/Pods-Runner.release.xcconfig"; sourceTree = "<group>"; };
-		FC95DB849BF641CAD26B8123 /* Pods-Runner.profile.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-Runner.profile.xcconfig"; path = "Target Support Files/Pods-Runner/Pods-Runner.profile.xcconfig"; sourceTree = "<group>"; };
+		D30265AB0B7CDA1D91BCC43D /* Pods_Runner.framework */ = {isa = PBXFileReference; explicitFileType = wrapper.framework; includeInIndex = 0; path = Pods_Runner.framework; sourceTree = BUILT_PRODUCTS_DIR; };
 /* End PBXFileReference section */
 
 /* Begin PBXFrameworksBuildPhase section */
@@ -55,27 +55,19 @@
 			isa = PBXFrameworksBuildPhase;
 			buildActionMask = 2147483647;
 			files = (
-				6578EEA2C83B6388B886968C /* Pods_Runner.framework in Frameworks */,
+				5019089242D539002EF1DEA6 /* Pods_Runner.framework in Frameworks */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
 		};
 /* End PBXFrameworksBuildPhase section */
 
 /* Begin PBXGroup section */
-		71A9A1607E036E391BA6A301 /* Frameworks */ = {
-			isa = PBXGroup;
-			children = (
-				1D6986157739D9687AB6AFD6 /* Pods_Runner.framework */,
-			);
-			name = Frameworks;
-			sourceTree = "<group>";
-		};
 		9567CFDD8F7714B0D403105A /* Pods */ = {
 			isa = PBXGroup;
 			children = (
-				92B43DD0AD58E6356D15892C /* Pods-Runner.debug.xcconfig */,
-				C32DC939DE75A0BDF7B647A4 /* Pods-Runner.release.xcconfig */,
-				FC95DB849BF641CAD26B8123 /* Pods-Runner.profile.xcconfig */,
+				21D62CD30C1A0456242EA203 /* Pods-Runner.debug.xcconfig */,
+				2816DBB62F3972E31AEC45DF /* Pods-Runner.release.xcconfig */,
+				0F584C7EE96D0E597895F0CB /* Pods-Runner.profile.xcconfig */,
 			);
 			path = Pods;
 			sourceTree = "<group>";
@@ -98,7 +90,7 @@
 				97C146F01CF9000F007C117D /* Runner */,
 				97C146EF1CF9000F007C117D /* Products */,
 				9567CFDD8F7714B0D403105A /* Pods */,
-				71A9A1607E036E391BA6A301 /* Frameworks */,
+				D3C8F4D729428381AF234DE0 /* Frameworks */,
 			);
 			sourceTree = "<group>";
 		};
@@ -126,6 +118,14 @@
 			path = Runner;
 			sourceTree = "<group>";
 		};
+		D3C8F4D729428381AF234DE0 /* Frameworks */ = {
+			isa = PBXGroup;
+			children = (
+				D30265AB0B7CDA1D91BCC43D /* Pods_Runner.framework */,
+			);
+			name = Frameworks;
+			sourceTree = "<group>";
+		};
 /* End PBXGroup section */
 
 /* Begin PBXNativeTarget section */
@@ -133,14 +133,15 @@
 			isa = PBXNativeTarget;
 			buildConfigurationList = 97C147051CF9000F007C117D /* Build configuration list for PBXNativeTarget "Runner" */;
 			buildPhases = (
-				0266454444A641F4EB110FC5 /* [CP] Check Pods Manifest.lock */,
+				D83E41E7D544D234ABD7DEE4 /* [CP] Check Pods Manifest.lock */,
 				9740EEB61CF901F6004384FC /* Run Script */,
 				97C146EA1CF9000F007C117D /* Sources */,
 				97C146EB1CF9000F007C117D /* Frameworks */,
 				97C146EC1CF9000F007C117D /* Resources */,
 				9705A1C41CF9048500538489 /* Embed Frameworks */,
 				3B06AD1E1E4923F5004D2608 /* Thin Binary */,
-				40760E14F3E664153DAD2ABC /* [CP] Embed Pods Frameworks */,
+				1F5231B1C0B4B24BD6457DFB /* [CP] Embed Pods Frameworks */,
+				9CEC6E449BE981A7D4BCFF7C /* [CP] Copy Pods Resources */,
 			);
 			buildRules = (
 			);
@@ -202,26 +203,21 @@
 /* End PBXResourcesBuildPhase section */
 
 /* Begin PBXShellScriptBuildPhase section */
-		0266454444A641F4EB110FC5 /* [CP] Check Pods Manifest.lock */ = {
+		1F5231B1C0B4B24BD6457DFB /* [CP] Embed Pods Frameworks */ = {
 			isa = PBXShellScriptBuildPhase;
 			buildActionMask = 2147483647;
 			files = (
 			);
 			inputFileListPaths = (
+				"${PODS_ROOT}/Target Support Files/Pods-Runner/Pods-Runner-frameworks-${CONFIGURATION}-input-files.xcfilelist",
 			);
-			inputPaths = (
-				"${PODS_PODFILE_DIR_PATH}/Podfile.lock",
-				"${PODS_ROOT}/Manifest.lock",
-			);
-			name = "[CP] Check Pods Manifest.lock";
+			name = "[CP] Embed Pods Frameworks";
 			outputFileListPaths = (
-			);
-			outputPaths = (
-				"$(DERIVED_FILE_DIR)/Pods-Runner-checkManifestLockResult.txt",
+				"${PODS_ROOT}/Target Support Files/Pods-Runner/Pods-Runner-frameworks-${CONFIGURATION}-output-files.xcfilelist",
 			);
 			runOnlyForDeploymentPostprocessing = 0;
 			shellPath = /bin/sh;
-			shellScript = "diff \"${PODS_PODFILE_DIR_PATH}/Podfile.lock\" \"${PODS_ROOT}/Manifest.lock\" > /dev/null\nif [ $? != 0 ] ; then\n    # print error to STDERR\n    echo \"error: The sandbox is not in sync with the Podfile.lock. Run 'pod install' or update your CocoaPods installation.\" >&2\n    exit 1\nfi\n# This output is used by Xcode 'outputs' to avoid re-running this script phase.\necho \"SUCCESS\" > \"${SCRIPT_OUTPUT_FILE_0}\"\n";
+			shellScript = "\"${PODS_ROOT}/Target Support Files/Pods-Runner/Pods-Runner-frameworks.sh\"\n";
 			showEnvVarsInLog = 0;
 		};
 		3B06AD1E1E4923F5004D2608 /* Thin Binary */ = {
@@ -240,37 +236,59 @@
 			shellPath = /bin/sh;
 			shellScript = "/bin/sh \"$FLUTTER_ROOT/packages/flutter_tools/bin/xcode_backend.sh\" embed_and_thin";
 		};
-		40760E14F3E664153DAD2ABC /* [CP] Embed Pods Frameworks */ = {
+		9740EEB61CF901F6004384FC /* Run Script */ = {
+			isa = PBXShellScriptBuildPhase;
+			alwaysOutOfDate = 1;
+			buildActionMask = 2147483647;
+			files = (
+			);
+			inputPaths = (
+			);
+			name = "Run Script";
+			outputPaths = (
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+			shellPath = /bin/sh;
+			shellScript = "/bin/sh \"$FLUTTER_ROOT/packages/flutter_tools/bin/xcode_backend.sh\" build";
+		};
+		9CEC6E449BE981A7D4BCFF7C /* [CP] Copy Pods Resources */ = {
 			isa = PBXShellScriptBuildPhase;
 			buildActionMask = 2147483647;
 			files = (
 			);
 			inputFileListPaths = (
-				"${PODS_ROOT}/Target Support Files/Pods-Runner/Pods-Runner-frameworks-${CONFIGURATION}-input-files.xcfilelist",
+				"${PODS_ROOT}/Target Support Files/Pods-Runner/Pods-Runner-resources-${CONFIGURATION}-input-files.xcfilelist",
 			);
-			name = "[CP] Embed Pods Frameworks";
+			name = "[CP] Copy Pods Resources";
 			outputFileListPaths = (
-				"${PODS_ROOT}/Target Support Files/Pods-Runner/Pods-Runner-frameworks-${CONFIGURATION}-output-files.xcfilelist",
+				"${PODS_ROOT}/Target Support Files/Pods-Runner/Pods-Runner-resources-${CONFIGURATION}-output-files.xcfilelist",
 			);
 			runOnlyForDeploymentPostprocessing = 0;
 			shellPath = /bin/sh;
-			shellScript = "\"${PODS_ROOT}/Target Support Files/Pods-Runner/Pods-Runner-frameworks.sh\"\n";
+			shellScript = "\"${PODS_ROOT}/Target Support Files/Pods-Runner/Pods-Runner-resources.sh\"\n";
 			showEnvVarsInLog = 0;
 		};
-		9740EEB61CF901F6004384FC /* Run Script */ = {
+		D83E41E7D544D234ABD7DEE4 /* [CP] Check Pods Manifest.lock */ = {
 			isa = PBXShellScriptBuildPhase;
-			alwaysOutOfDate = 1;
 			buildActionMask = 2147483647;
 			files = (
 			);
+			inputFileListPaths = (
+			);
 			inputPaths = (
+				"${PODS_PODFILE_DIR_PATH}/Podfile.lock",
+				"${PODS_ROOT}/Manifest.lock",
+			);
+			name = "[CP] Check Pods Manifest.lock";
+			outputFileListPaths = (
 			);
-			name = "Run Script";
 			outputPaths = (
+				"$(DERIVED_FILE_DIR)/Pods-Runner-checkManifestLockResult.txt",
 			);
 			runOnlyForDeploymentPostprocessing = 0;
 			shellPath = /bin/sh;
-			shellScript = "/bin/sh \"$FLUTTER_ROOT/packages/flutter_tools/bin/xcode_backend.sh\" build";
+			shellScript = "diff \"${PODS_PODFILE_DIR_PATH}/Podfile.lock\" \"${PODS_ROOT}/Manifest.lock\" > /dev/null\nif [ $? != 0 ] ; then\n    # print error to STDERR\n    echo \"error: The sandbox is not in sync with the Podfile.lock. Run 'pod install' or update your CocoaPods installation.\" >&2\n    exit 1\nfi\n# This output is used by Xcode 'outputs' to avoid re-running this script phase.\necho \"SUCCESS\" > \"${SCRIPT_OUTPUT_FILE_0}\"\n";
+			showEnvVarsInLog = 0;
 		};
 /* End PBXShellScriptBuildPhase section */
 
@@ -366,7 +384,7 @@
 				CODE_SIGN_IDENTITY = "Apple Development";
 				CODE_SIGN_STYLE = Manual;
 				CURRENT_PROJECT_VERSION = "$(FLUTTER_BUILD_NUMBER)";
-				DEVELOPMENT_TEAM = "0000000000";
+				DEVELOPMENT_TEAM = 0000000000;
 				ENABLE_BITCODE = NO;
 				INFOPLIST_FILE = Runner/Info.plist;
 				LD_RUNPATH_SEARCH_PATHS = (
@@ -499,7 +517,7 @@
 				CODE_SIGN_IDENTITY = "Apple Development";
 				CODE_SIGN_STYLE = Manual;
 				CURRENT_PROJECT_VERSION = "$(FLUTTER_BUILD_NUMBER)";
-				DEVELOPMENT_TEAM = "0000000000";
+				DEVELOPMENT_TEAM = 0000000000;
 				ENABLE_BITCODE = NO;
 				INFOPLIST_FILE = Runner/Info.plist;
 				LD_RUNPATH_SEARCH_PATHS = (
@@ -526,7 +544,7 @@
 				CODE_SIGN_IDENTITY = "Apple Development";
 				CODE_SIGN_STYLE = Manual;
 				CURRENT_PROJECT_VERSION = "$(FLUTTER_BUILD_NUMBER)";
-				DEVELOPMENT_TEAM = "0000000000";
+				DEVELOPMENT_TEAM = 0000000000;
 				ENABLE_BITCODE = NO;
 				INFOPLIST_FILE = Runner/Info.plist;
 				LD_RUNPATH_SEARCH_PATHS = (
diff --git a/packages/passkeys/passkeys/example/ios/Runner/AppDelegate.swift b/packages/passkeys/passkeys/example/ios/Runner/AppDelegate.swift
index 70693e4..b636303 100644
--- a/packages/passkeys/passkeys/example/ios/Runner/AppDelegate.swift
+++ b/packages/passkeys/passkeys/example/ios/Runner/AppDelegate.swift
@@ -1,7 +1,7 @@
 import UIKit
 import Flutter
 
-@UIApplicationMain
+@main
 @objc class AppDelegate: FlutterAppDelegate {
   override func application(
     _ application: UIApplication,
diff --git a/packages/passkeys/passkeys/example/lib/auth_service.dart b/packages/passkeys/passkeys/example/lib/auth_service.dart
new file mode 100644
index 0000000..7045f9e
--- /dev/null
+++ b/packages/passkeys/passkeys/example/lib/auth_service.dart
@@ -0,0 +1,90 @@
+import 'package:passkeys/authenticator.dart';
+import 'package:passkeys/availability.dart';
+import 'package:passkeys_example/local_relying_party_server.dart';
+
+class Configuration {
+  Configuration(
+      {required this.name,
+      this.timeout,
+      this.excludeCredentials,
+      this.allowCredentials,
+      this.preferImmediatelyAvailableCredentials});
+
+  final String name;
+  final int? timeout;
+  final bool? excludeCredentials;
+  final bool? allowCredentials;
+  final bool? preferImmediatelyAvailableCredentials;
+}
+
+List<Configuration> SIGNUP_ANDROID_CONFIGURATIONS = [
+  Configuration(name: 'Default'),
+  Configuration(name: '5s Timeout', timeout: 5000),
+  Configuration(name: 'ExcludeCredentials', excludeCredentials: true),
+];
+
+List<Configuration> SIGNUP_IOS_CONFIGURATIONS = [
+  Configuration(name: 'Default'),
+  Configuration(name: 'ExcludeCredentials', excludeCredentials: true),
+];
+
+List<Configuration> LOGIN_ANDROID_CONFIGURATIONS = [
+  Configuration(name: 'Default'),
+  Configuration(name: '5s Timeout', timeout: 5000),
+  Configuration(name: 'AllowCredentials', allowCredentials: true),
+  Configuration(
+      name: 'PreferImmediatelyAvailableCredentials',
+      preferImmediatelyAvailableCredentials: true,
+      allowCredentials: true),
+];
+
+List<Configuration> LOGIN_IOS_CONFIGURATIONS = [
+  Configuration(name: 'Default'),
+  Configuration(
+      name: 'AllowCredentials And PreferImmediatelyAvailableCredentials',
+      allowCredentials: true,
+      preferImmediatelyAvailableCredentials: true),
+];
+
+class AuthService {
+  AuthService({required this.rps, required this.authenticator});
+
+  final LocalRelyingPartyServer rps;
+  final PasskeyAuthenticator authenticator;
+
+  Future<void> loginWithPasskey({required String email}) async {
+    final rps1 =
+        rps.startPasskeyLogin(name: email, configuration: loginConfiguration);
+    final authenticatorRes = await authenticator.authenticate(rps1);
+    rps.finishPasskeyLogin(response: authenticatorRes);
+  }
+
+  Future<void> loginWithPasskeyConditionalUI() async {
+    final rps1 = rps.startPasskeyLoginConditionalU();
+    final authenticatorRes = await authenticator.authenticate(rps1);
+    rps.finishPasskeyLoginConditionalUI(response: authenticatorRes);
+  }
+
+  Future<void> signupWithPasskey({required String email}) async {
+    final rps1 = rps.startPasskeyRegister(
+        name: email, configuration: signUpConfiguration);
+    final authenticatorRes = await authenticator.register(rps1);
+    rps.finishPasskeyRegister(response: authenticatorRes);
+  }
+
+  GetAvailability getAvailability() {
+    return authenticator.getAvailability();
+  }
+
+  // This is only related to testing and testing configurations.
+  Configuration? signUpConfiguration = null;
+  Configuration? loginConfiguration = null;
+
+  void setSignupConfiguration(Configuration? configuration) {
+    signUpConfiguration = configuration;
+  }
+
+  void setLoginConfiguration(Configuration? configuration) {
+    loginConfiguration = configuration;
+  }
+}
diff --git a/packages/passkeys/passkeys/example/lib/local_relying_party_server.dart b/packages/passkeys/passkeys/example/lib/local_relying_party_server.dart
new file mode 100644
index 0000000..0047af9
--- /dev/null
+++ b/packages/passkeys/passkeys/example/lib/local_relying_party_server.dart
@@ -0,0 +1,202 @@
+import 'dart:collection';
+import 'dart:convert';
+import 'dart:math';
+
+import 'package:passkeys/types.dart';
+import 'package:passkeys_example/auth_service.dart';
+
+class LocalUser {
+  LocalUser(
+      {required this.name,
+      required this.id,
+      this.credentialID,
+      required this.transports});
+
+  final String name;
+  final String id;
+  String? credentialID;
+  List<String> transports;
+}
+
+const rpID = 'flutter.corbado.io';
+
+/// This is a local version of a relying party server.
+///
+/// Note:
+/// The concept of a local relying party server works just in examples. It does not work in practice.
+/// Usually a relying party server is party of your backend.
+class LocalRelyingPartyServer {
+  LocalRelyingPartyServer();
+
+  final Map<String, LocalUser> _users = HashMap();
+  final Map<String, LocalUser> _inFlightChallenges = HashMap();
+  final Random _random = Random();
+
+  RegisterRequestType startPasskeyRegister(
+      {required String name, Configuration? configuration}) {
+    if (_users.containsKey(name)) {
+      throw Exception('User $name already exists. Please log in instead');
+    }
+
+    final userID = 'user-${_random.nextInt(100000000)}';
+    final newUser = LocalUser(id: userID, name: name, transports: []);
+    final challenge = generateChallenge();
+    _inFlightChallenges[challenge] = newUser;
+
+    final rp = RelyingPartyType(name: 'local-relying-party-server', id: rpID);
+    final user = UserType(
+      displayName: name,
+      name: name,
+      id: base64Url.encode(userID.codeUnits),
+    );
+    final authenticatorSelection = AuthenticatorSelectionType(
+      requireResidentKey: false,
+      residentKey: 'required',
+      userVerification: 'preferred',
+    );
+
+    return RegisterRequestType(
+      challenge: challenge,
+      relyingParty: rp,
+      user: user,
+      authSelectionType: authenticatorSelection,
+      pubKeyCredParams: [
+        PubKeyCredParamType(type: 'public-key', alg: -7),
+        PubKeyCredParamType(type: 'public-key', alg: -257),
+      ],
+      excludeCredentials: configuration?.excludeCredentials == true
+          ? _users.values
+              .map((e) => CredentialType(
+                    type: 'public-key',
+                    id: e.credentialID!,
+                    transports: ['internal'],
+                  ))
+              .toList()
+          : [],
+      timeout: configuration?.timeout,
+    );
+  }
+
+  /// Note: we don't implement a full relying party server here.
+  /// To safe effort we don't verify the response from the authenticator.
+  LocalUser finishPasskeyRegister({required RegisterResponseType response}) {
+    final raw = addBase64Padding(response.clientDataJSON);
+    final json = jsonDecode(String.fromCharCodes(base64.decode(raw)));
+
+    final challenge = json['challenge'];
+    final user = _inFlightChallenges[challenge];
+    if (user == null) {
+      throw Exception('invalid state: user does not exist');
+    }
+
+    user
+      ..credentialID = response.id
+      ..transports = response.transports.isEmpty
+          // When using FaceID or TouchID, the transports are empty.
+          ? ['internal', 'hybrid']
+          : response.transports as List<String>;
+    _users[user.name] = user;
+
+    return user;
+  }
+
+  AuthenticateRequestType startPasskeyLogin(
+      {required String name, Configuration? configuration}) {
+    if (!_users.containsKey(name)) {
+      throw Exception('User $name does not exist. Please register first');
+    }
+
+    final challenge = generateChallenge();
+    _inFlightChallenges[challenge] = _users[name]!;
+
+    return AuthenticateRequestType(
+      relyingPartyId: rpID,
+      challenge: challenge,
+      mediation: MediationType.Optional,
+      userVerification: 'preferred',
+      preferImmediatelyAvailableCredentials:
+          configuration?.preferImmediatelyAvailableCredentials == true
+              ? true
+              : false,
+      allowCredentials: configuration?.allowCredentials == true
+          ? [
+              CredentialType(
+                type: 'public-key',
+                id: 'id',
+                transports: ['internal'],
+              )
+            ]
+          : _users[name]!.credentialID != null
+              ? [
+                  CredentialType(
+                      type: 'public-key',
+                      id: _users[name]!.credentialID!,
+                      transports: _users[name]!.transports)
+                ]
+              : null,
+      timeout: configuration?.timeout,
+    );
+  }
+
+  /// Note: we don't implement a full relying party server here.
+  /// To safe effort we don't verify the response from the authenticator.
+  LocalUser finishPasskeyLogin({required AuthenticateResponseType response}) {
+    final raw = addBase64Padding(response.clientDataJSON);
+    final json = jsonDecode(String.fromCharCodes(base64.decode(raw)));
+
+    final challenge = json['challenge'];
+    final user = _inFlightChallenges[challenge];
+    if (user == null) {
+      throw Exception('invalid state: user does not exist');
+    }
+
+    return user;
+  }
+
+  AuthenticateRequestType startPasskeyLoginConditionalU() {
+    final challenge = generateChallenge();
+
+    return AuthenticateRequestType(
+      relyingPartyId: rpID,
+      challenge: challenge,
+      mediation: MediationType.Conditional,
+      preferImmediatelyAvailableCredentials: false,
+    );
+  }
+
+  /// Note: we don't implement a full relying party server here.
+  /// To safe effort we don't verify the response from the authenticator.
+  LocalUser finishPasskeyLoginConditionalUI(
+      {required AuthenticateResponseType response}) {
+    LocalUser? existingUser;
+    for (final user in _users.values) {
+      if (user.credentialID != null && user.credentialID == response.id) {
+        existingUser = user;
+      }
+    }
+
+    if (existingUser == null) {
+      throw Exception('User does not exist');
+    }
+
+    return existingUser;
+  }
+
+  String generateChallenge() {
+    const chars =
+        'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
+    var rawChallenge = '';
+    for (var i = 0; i < 32; i++) {
+      rawChallenge += chars[_random.nextInt(chars.length)];
+    }
+
+    final a = base64Url.encode(rawChallenge.codeUnits);
+
+    return a.substring(0, a.length - 1);
+  }
+
+  String addBase64Padding(String base64String) {
+    final missingPadding = (4 - (base64String.length % 4)) % 4;
+    return base64String + ('=' * missingPadding);
+  }
+}
diff --git a/packages/passkeys/passkeys/example/lib/main.dart b/packages/passkeys/passkeys/example/lib/main.dart
index 605e442..9cdae71 100644
--- a/packages/passkeys/passkeys/example/lib/main.dart
+++ b/packages/passkeys/passkeys/example/lib/main.dart
@@ -1,42 +1,17 @@
-import 'package:corbado_auth/corbado_auth.dart';
 import 'package:flutter/material.dart';
+import 'package:flutter_driver/driver_extension.dart';
 import 'package:flutter_riverpod/flutter_riverpod.dart';
-import 'package:passkeys_example/pages/error_page.dart';
-import 'package:passkeys_example/pages/loading_page.dart';
-import 'package:passkeys_example/providers.dart';
 import 'package:passkeys_example/router.dart';
 
 void main() async {
-  WidgetsFlutterBinding.ensureInitialized();
-
-  // This is a nice pattern if you need to initialize some of your services
-  // before the app starts.
-  // As we are using riverpod this initialization happens inside providers.
-  // First we show a loading page.
-  runApp(const LoadingPage());
-
-  // Now we do the initialization.
-
-  final relyingPartyServer = CustomCorbadoAuth();
-  const corbadoProjectId = String.fromEnvironment('CORBADO_PROJECT_ID');
-
-  if (corbadoProjectId.isEmpty) {
-    runApp(const ErrorPage(
-      error: 'CORBADO_PROJECT_ID is not set',
-      hint:
-          'Please add this at the end of your flutter run command: \n--dart-define=CORBADO_PROJECT_ID=pro-8751299119685489253',
-    ));
-    return;
+  bool isTestMode = const bool.fromEnvironment('TEST_MODE');
+  if (isTestMode) {
+    enableFlutterDriverExtension();
   }
-
-  await relyingPartyServer.init(corbadoProjectId);
-
+  WidgetsFlutterBinding.ensureInitialized();
   runApp(
-    ProviderScope(
-      overrides: [
-        relyingPartyServerProvider.overrideWithValue(relyingPartyServer),
-      ],
-      child: const MyApp(),
+    const ProviderScope(
+      child: MyApp(),
     ),
   );
 }
diff --git a/packages/passkeys/passkeys/example/lib/pages/profile_page.dart b/packages/passkeys/passkeys/example/lib/pages/profile_page.dart
index 662f967..5c2985e 100644
--- a/packages/passkeys/passkeys/example/lib/pages/profile_page.dart
+++ b/packages/passkeys/passkeys/example/lib/pages/profile_page.dart
@@ -15,6 +15,7 @@ class ProfilePage extends ConsumerWidget {
         crossAxisAlignment: CrossAxisAlignment.start,
         children: [
           const Padding(
+            key: Key('welcome-text'),
             padding: EdgeInsets.symmetric(horizontal: 10, vertical: 5),
             child: Text(
               'Welcome',
@@ -37,13 +38,14 @@ class ProfilePage extends ConsumerWidget {
           const Padding(
             padding: EdgeInsets.symmetric(horizontal: 10, vertical: 10),
             child: Text(
-              'You are currently logged in. You have a JWT token that you can use to make calls to your backend.',
+              'You are currently logged in. You can log out and log back in using a passkey.',
               style: TextStyle(
                 fontSize: 20,
               ),
             ),
           ),
           SizedBox(
+            key: Key('sign-out-button'),
             width: double.infinity,
             height: 50,
             child: OutlinedButton(
diff --git a/packages/passkeys/passkeys/example/lib/pages/sign_in_page.dart b/packages/passkeys/passkeys/example/lib/pages/sign_in_page.dart
index 84f48ff..56ee08c 100644
--- a/packages/passkeys/passkeys/example/lib/pages/sign_in_page.dart
+++ b/packages/passkeys/passkeys/example/lib/pages/sign_in_page.dart
@@ -1,12 +1,16 @@
+import 'dart:io';
+
 import 'package:flutter/foundation.dart';
 import 'package:flutter/material.dart';
 import 'package:flutter_hooks/flutter_hooks.dart';
 import 'package:go_router/go_router.dart';
 import 'package:hooks_riverpod/hooks_riverpod.dart';
 import 'package:passkeys/types.dart';
+import 'package:passkeys_example/auth_service.dart';
 import 'package:passkeys_example/pages/base_page.dart';
 import 'package:passkeys_example/providers.dart';
 import 'package:passkeys_example/router.dart';
+import 'package:passkeys_example/widgets/select_test_configuration.dart';
 
 class SignInPage extends StatefulHookConsumerWidget {
   const SignInPage({super.key});
@@ -18,16 +22,48 @@ class SignInPage extends StatefulHookConsumerWidget {
 class _SignInPageState extends ConsumerState<SignInPage> {
   final _emailController = TextEditingController();
 
+  bool isTestMode = const bool.fromEnvironment('TEST_MODE');
+
   @override
   void initState() {
     super.initState();
 
     WidgetsBinding.instance.addPostFrameCallback((_) {
-      final passkeyAuth = ref.watch(relyingPartyServerProvider);
+      final authService = ref.watch(authServiceProvider);
 
-      // As soon as the view has been loaded prepare the autocompleted passkey sign in.
-      passkeyAuth
-          .autocompletedLoginWithPasskey()
+      // You need to first check for the web platform because on Web calling
+      // Platform will cause an exception
+      if (kIsWeb) {
+        authService.authenticator.getAvailability().web().then((value) {
+          debugPrint('Web');
+          debugPrint('hasPasskeySupport: ${value.hasPasskeySupport}');
+          debugPrint('isUserVerifyingPlatformAuthenticatorAvailable: '
+              '${value.isUserVerifyingPlatformAuthenticatorAvailable}');
+          debugPrint('isConditionalMediationAvailable: '
+              '${value.isConditionalMediationAvailable}');
+          debugPrint('isNative: ${value.isNative}');
+        });
+      } else if (Platform.isIOS) {
+        authService.authenticator.getAvailability().iOS().then((value) {
+          debugPrint('iOS');
+          debugPrint('hasPasskeySupport: ${value.hasPasskeySupport}');
+          debugPrint('hasBiometrics: ${value.hasBiometrics}');
+          debugPrint('isNative: ${value.isNative}');
+        });
+      } else if (Platform.isAndroid) {
+        authService.authenticator.getAvailability().android().then((value) {
+          debugPrint('Android');
+          debugPrint('hasPasskeySupport: ${value.hasPasskeySupport}');
+          debugPrint('isUserVerifyingPlatformAuthenticatorAvailable:'
+              ' ${value.isUserVerifyingPlatformAuthenticatorAvailable}');
+          debugPrint('isNative: ${value.isNative}');
+        });
+      }
+
+      // As soon as the view has been loaded prepare the autocompleted passkey
+      // sign in.
+      authService
+          .loginWithPasskeyConditionalUI()
           .then((value) => context.go(Routes.profile))
           .onError(
         (error, stackTrace) {
@@ -46,7 +82,7 @@ class _SignInPageState extends ConsumerState<SignInPage> {
   @override
   Widget build(BuildContext context) {
     final error = useState<String?>(null);
-    final passkeyAuth = ref.watch(relyingPartyServerProvider);
+    final authService = ref.watch(authServiceProvider);
 
     return BasePage(
       child: Column(
@@ -74,6 +110,7 @@ class _SignInPageState extends ConsumerState<SignInPage> {
           Padding(
             padding: const EdgeInsets.symmetric(vertical: 4),
             child: TextField(
+              key: const Key('email-field'),
               controller: _emailController,
               autofillHints: [_getAutofillHint()],
               keyboardType: TextInputType.emailAddress,
@@ -85,6 +122,7 @@ class _SignInPageState extends ConsumerState<SignInPage> {
           ),
           if (error.value != null)
             Text(
+              key: const Key('error-text-login'),
               error.value!,
               style: TextStyle(color: Theme.of(context).colorScheme.error),
             )
@@ -95,10 +133,11 @@ class _SignInPageState extends ConsumerState<SignInPage> {
             width: double.infinity,
             height: 50,
             child: ElevatedButton(
+              key: const Key('sign-in-button'),
               onPressed: () async {
                 try {
                   final email = _emailController.value.text;
-                  await passkeyAuth.loginWithPasskey(email: email);
+                  await authService.loginWithPasskey(email: email);
                   context.go(Routes.profile);
                 } catch (e) {
                   if (e is PasskeyAuthCancelledException) {
@@ -109,13 +148,6 @@ class _SignInPageState extends ConsumerState<SignInPage> {
 
                   error.value = e.toString();
                   debugPrint('error: $e');
-                  ScaffoldMessenger.of(context).showSnackBar(
-                    SnackBar(
-                      backgroundColor: Theme.of(context).primaryColor,
-                      content: Text('$error'),
-                      duration: const Duration(seconds: 10),
-                    ),
-                  );
                 }
               },
               child: const Text('sign in'),
@@ -126,6 +158,7 @@ class _SignInPageState extends ConsumerState<SignInPage> {
             width: double.infinity,
             height: 50,
             child: OutlinedButton(
+              key: const Key('go-to-sign-up-button'),
               style: OutlinedButton.styleFrom(
                 padding: const EdgeInsets.symmetric(vertical: 10),
                 side:
@@ -135,6 +168,13 @@ class _SignInPageState extends ConsumerState<SignInPage> {
               child: const Text('I want to create a new account'),
             ),
           ),
+          if (isTestMode)
+            SelectTestConfiguration(
+              configurations:
+              Platform.isIOS ? LOGIN_IOS_CONFIGURATIONS : LOGIN_ANDROID_CONFIGURATIONS,
+              onSelectConfiguration: authService.setLoginConfiguration,
+              selectedConfiguration: authService.loginConfiguration,
+            ),
         ],
       ),
     );
diff --git a/packages/passkeys/passkeys/example/lib/pages/sign_up_page.dart b/packages/passkeys/passkeys/example/lib/pages/sign_up_page.dart
index ef8b3d1..555e63a 100644
--- a/packages/passkeys/passkeys/example/lib/pages/sign_up_page.dart
+++ b/packages/passkeys/passkeys/example/lib/pages/sign_up_page.dart
@@ -1,10 +1,15 @@
+import 'dart:io';
+
+import 'package:flutter/foundation.dart';
 import 'package:flutter/material.dart';
 import 'package:flutter_hooks/flutter_hooks.dart';
 import 'package:go_router/go_router.dart';
 import 'package:hooks_riverpod/hooks_riverpod.dart';
+import 'package:passkeys_example/auth_service.dart';
 import 'package:passkeys_example/pages/base_page.dart';
 import 'package:passkeys_example/providers.dart';
 import 'package:passkeys_example/router.dart';
+import 'package:passkeys_example/widgets/select_test_configuration.dart';
 
 class SignUpPage extends HookConsumerWidget {
   const SignUpPage({super.key});
@@ -13,7 +18,38 @@ class SignUpPage extends HookConsumerWidget {
   Widget build(BuildContext context, WidgetRef ref) {
     final emailController = TextEditingController();
     final error = useState<String?>(null);
-    final passkeyAuth = ref.watch(relyingPartyServerProvider);
+    final authService = ref.watch(authServiceProvider);
+
+    bool isTestMode = const bool.fromEnvironment('TEST_MODE');
+
+    // You need to first check for the web platform because on Web calling
+    // Platform will cause an exception
+    if (kIsWeb) {
+      authService.authenticator.getAvailability().web().then((value) {
+        debugPrint('Web');
+        debugPrint('hasPasskeySupport: ${value.hasPasskeySupport}');
+        debugPrint('isUserVerifyingPlatformAuthenticatorAvailable: '
+            '${value.isUserVerifyingPlatformAuthenticatorAvailable}');
+        debugPrint('isConditionalMediationAvailable: '
+            '${value.isConditionalMediationAvailable}');
+        debugPrint('isNative: ${value.isNative}');
+      });
+    } else if (Platform.isIOS) {
+      authService.authenticator.getAvailability().iOS().then((value) {
+        debugPrint('iOS');
+        debugPrint('hasPasskeySupport: ${value.hasPasskeySupport}');
+        debugPrint('hasBiometrics: ${value.hasBiometrics}');
+        debugPrint('isNative: ${value.isNative}');
+      });
+    } else if (Platform.isAndroid) {
+      authService.authenticator.getAvailability().android().then((value) {
+        debugPrint('Android');
+        debugPrint('hasPasskeySupport: ${value.hasPasskeySupport}');
+        debugPrint('isUserVerifyingPlatformAuthenticatorAvailable:'
+            ' ${value.isUserVerifyingPlatformAuthenticatorAvailable}');
+        debugPrint('isNative: ${value.isNative}');
+      });
+    }
 
     return BasePage(
       child: Column(
@@ -41,6 +77,7 @@ class SignUpPage extends HookConsumerWidget {
           Padding(
             padding: const EdgeInsets.symmetric(vertical: 4),
             child: TextField(
+              key: const Key('email-field'),
               controller: emailController,
               keyboardType: TextInputType.emailAddress,
               decoration: const InputDecoration(
@@ -51,6 +88,7 @@ class SignUpPage extends HookConsumerWidget {
           ),
           if (error.value != null)
             Text(
+              key: const Key('error-text'),
               error.value!,
               style: TextStyle(color: Theme.of(context).colorScheme.error),
             )
@@ -61,10 +99,11 @@ class SignUpPage extends HookConsumerWidget {
             width: double.infinity,
             height: 50,
             child: ElevatedButton(
+              key: const Key('sign-up-button'),
               onPressed: () async {
                 final email = emailController.value.text;
                 try {
-                  await passkeyAuth.signUpWithPasskey(email: email);
+                  await authService.signupWithPasskey(email: email);
                   context.go(Routes.profile);
                 } catch (e) {
                   error.value = e.toString();
@@ -78,6 +117,7 @@ class SignUpPage extends HookConsumerWidget {
             width: double.infinity,
             height: 50,
             child: OutlinedButton(
+              key: const Key('go-to-login-button'),
               style: OutlinedButton.styleFrom(
                 padding: const EdgeInsets.symmetric(vertical: 10),
                 side:
@@ -87,6 +127,13 @@ class SignUpPage extends HookConsumerWidget {
               child: const Text('I already have an account'),
             ),
           ),
+          if (isTestMode)
+            SelectTestConfiguration(
+              configurations:
+                  Platform.isIOS ? SIGNUP_IOS_CONFIGURATIONS : SIGNUP_ANDROID_CONFIGURATIONS,
+              onSelectConfiguration: authService.setSignupConfiguration,
+              selectedConfiguration: authService.signUpConfiguration,
+            ),
         ],
       ),
     );
diff --git a/packages/passkeys/passkeys/example/lib/providers.dart b/packages/passkeys/passkeys/example/lib/providers.dart
index 9f18fd4..33080aa 100644
--- a/packages/passkeys/passkeys/example/lib/providers.dart
+++ b/packages/passkeys/passkeys/example/lib/providers.dart
@@ -1,7 +1,12 @@
-import 'package:corbado_auth/corbado_auth.dart';
 import 'package:flutter_riverpod/flutter_riverpod.dart';
+import 'package:passkeys/authenticator.dart';
+import 'package:passkeys_example/auth_service.dart';
+import 'package:passkeys_example/local_relying_party_server.dart';
 
 // Relying party server provider.
-final relyingPartyServerProvider = Provider<CustomCorbadoAuth>(
-  (ref) => throw UnimplementedError('no instance of CustomCorbadoAuth'),
-);
+final authServiceProvider = Provider<AuthService>((ref) {
+  final rps = LocalRelyingPartyServer();
+  final authenticator = PasskeyAuthenticator();
+
+  return AuthService(rps: rps, authenticator: authenticator);
+});
diff --git a/packages/passkeys/passkeys/example/lib/widgets/select_test_configuration.dart b/packages/passkeys/passkeys/example/lib/widgets/select_test_configuration.dart
new file mode 100644
index 0000000..2275a9d
--- /dev/null
+++ b/packages/passkeys/passkeys/example/lib/widgets/select_test_configuration.dart
@@ -0,0 +1,67 @@
+import 'package:flutter/material.dart';
+import 'package:passkeys_example/auth_service.dart';
+import 'package:passkeys_example/local_relying_party_server.dart';
+
+class SelectTestConfiguration extends StatefulWidget {
+  const SelectTestConfiguration({
+    required this.configurations,
+    required this.selectedConfiguration,
+    required this.onSelectConfiguration,
+  }) : super();
+
+  final void Function(Configuration?) onSelectConfiguration;
+  final Configuration? selectedConfiguration;
+  final List<Configuration> configurations;
+
+  @override
+  _SelectTestConfigurationState createState() =>
+      _SelectTestConfigurationState();
+}
+
+class _SelectTestConfigurationState extends State<SelectTestConfiguration> {
+  Configuration? _selectedConfiguration;
+
+  @override
+  void initState() {
+    super.initState();
+    _selectedConfiguration = widget.selectedConfiguration;
+  }
+
+  @override
+  void didUpdateWidget(covariant SelectTestConfiguration oldWidget) {
+    super.didUpdateWidget(oldWidget);
+    if (oldWidget.selectedConfiguration != widget.selectedConfiguration) {
+      setState(() {
+        _selectedConfiguration = widget.selectedConfiguration;
+      });
+    }
+  }
+
+  @override
+  Widget build(BuildContext context) {
+    return DropdownButton<Configuration?>(
+      key: Key("test-selector"),
+      value: _selectedConfiguration,
+      elevation: 16,
+      style: const TextStyle(color: Colors.deepPurple),
+      hint: Text("Select Configuration"),
+      underline: Container(
+        height: 2,
+        color: Colors.deepPurpleAccent,
+      ),
+      items: widget.configurations
+          .map(
+              (Configuration configuration) => DropdownMenuItem<Configuration?>(
+                    value: configuration,
+                    child: Text(configuration.name),
+                  ))
+          .toList(),
+      onChanged: (Configuration? newValue) {
+        setState(() {
+          _selectedConfiguration = newValue;
+        });
+        widget.onSelectConfiguration(newValue);
+      },
+    );
+  }
+}
diff --git a/packages/passkeys/passkeys/example/pubspec.yaml b/packages/passkeys/passkeys/example/pubspec.yaml
index 7478dda..ae59b93 100644
--- a/packages/passkeys/passkeys/example/pubspec.yaml
+++ b/packages/passkeys/passkeys/example/pubspec.yaml
@@ -7,15 +7,16 @@ environment:
   sdk: ">=3.0.0 <4.0.0"
 
 dependencies:
-  corbado_auth: ^2.0.7
   flutter:
     sdk: flutter
-  passkeys: ^2.0.7
+  passkeys: ^2.7.0
   go_router: ^10.1.2
   flutter_hooks: ^0.20.3
   riverpod: ^2.3.10
   flutter_riverpod: ^2.3.10
   hooks_riverpod: 2.4.0
+  flutter_localization: ^0.2.1
+  jwt_decoder: ^2.0.1
 
 dev_dependencies:
   flutter_driver:
@@ -25,6 +26,7 @@ dev_dependencies:
   integration_test:
     sdk: flutter
   very_good_analysis: ^5.0.0
+  appium_flutter_server: 0.0.27
 
 flutter:
   uses-material-design: true
diff --git a/packages/passkeys/passkeys/example/tests/.gitignore b/packages/passkeys/passkeys/example/tests/.gitignore
new file mode 100644
index 0000000..b512c09
--- /dev/null
+++ b/packages/passkeys/passkeys/example/tests/.gitignore
@@ -0,0 +1 @@
+node_modules
\ No newline at end of file
diff --git a/packages/passkeys/passkeys/example/tests/android.spec.js b/packages/passkeys/passkeys/example/tests/android.spec.js
new file mode 100644
index 0000000..6d765f5
--- /dev/null
+++ b/packages/passkeys/passkeys/example/tests/android.spec.js
@@ -0,0 +1,242 @@
+import * as wdio from 'webdriverio';
+import {byValueKey, byText} from 'appium-flutter-finder';
+import {describe, test, beforeAll, afterAll, expect, beforeEach} from '@jest/globals';
+import {delay} from './util';
+
+const deviceName = process.argv.find(arg => arg.startsWith('--device='))?.split('=')[1] || "emulator-5554";
+
+// Desired capabilities for the iOS simulator
+const capsAndroid =
+    {
+        'platformName': 'Android',
+        'appium:deviceName': deviceName,
+        'appium:appPackage': "com.corbado.passkeys.pub",
+        'appium:appActivity': ".MainActivity",
+        'appium:noReset': true,
+        'appium:automationName': 'Flutter',
+        'appium:retryBackoffTime': 500
+    };
+
+const opts = {
+    port: 4567,
+    host: '127.0.0.1',
+    capabilities: capsAndroid
+};
+
+describe('Android Tests', () => {
+    let driver;
+
+    beforeAll(async () => {
+        driver = await wdio.remote(opts);
+
+        await driver.switchContext('FLUTTER');
+    });
+
+    afterAll(async () => {
+        await driver.terminateApp("com.corbado.passkeys.pub");
+        await driver.deleteSession();
+    });
+
+    describe('Signup Tests', () => {
+
+        test('Default Signup', async () => {
+            await driver.elementClick(byValueKey('test-selector'));
+            await driver.elementClick(byText('Default'));
+
+            // Fill in details
+            const emailField = byValueKey('email-field');
+            await driver.elementClick(emailField);
+            await driver.execute('flutter:enterText', 'test+1@example.com');
+            const signUpButton = byValueKey("sign-up-button");
+            await driver.elementClick(signUpButton);
+
+            // Simulate fingerprint authentication
+            await delay(1000);
+            await driver.switchContext('NATIVE_APP');
+
+            await driver.tap({x: 850, y: 1300});
+
+            await delay(1000);
+
+            await driver.fingerPrint(1);
+
+            await driver.switchContext('FLUTTER');
+            // Wait for the new screen to appear
+            await driver.execute('flutter:waitFor', byValueKey('welcome-text'));
+
+            await driver.elementClick(byValueKey('sign-out-button'));
+        });
+
+        test('5s Timeout', async () => {
+            await driver.elementClick(byValueKey('test-selector'));
+            await driver.elementClick(byText('5s Timeout'));
+
+            // Fill in details
+            const emailField = byValueKey('email-field');
+            await driver.elementClick(emailField);
+            await driver.execute('flutter:enterText', 'test+2@example.com');
+            const signUpButton = byValueKey("sign-up-button");
+            await driver.elementClick(signUpButton);
+
+            // Simulate fingerprint authentication
+            await delay(6000);
+
+            // Wait for the error to appear
+            const error = byValueKey('error-text');
+            const errorText = await driver.getElementText(error);
+
+            expect(errorText).toContain('TYPE_TIMEOUT_ERROR');
+        });
+
+        test('Exclude Credentials', async () => {
+            await driver.elementClick(byValueKey('test-selector'));
+            await driver.elementClick(byText('ExcludeCredentials'));
+
+            // Fill in details
+            await driver.elementClick(byValueKey('email-field'));
+            await driver.execute('flutter:enterText', 'test+3@example.com');
+            await driver.elementClick(byValueKey("sign-up-button"));
+
+            // Simulate fingerprint authentication
+            await delay(1000);
+            await driver.switchContext('NATIVE_APP');
+
+            await driver.tap({x: 850, y: 1300});
+
+            await delay(1000);
+
+            await driver.fingerPrint(1);
+
+            await delay(1000);
+
+            await driver.switchContext('FLUTTER');
+
+            // Wait for the error to appear
+            const error = byValueKey('error-text');
+            const errorText = await driver.getElementText(error);
+
+            expect(errorText).toContain('ExcludeCredentialsCanNotBeRegisteredException');
+        });
+    });
+
+    describe('Login Tests', () => {
+        beforeAll(async () => {
+            await driver.elementClick(byValueKey('test-selector'));
+            await driver.elementClick(byText('Default'));
+
+            // Fill in details
+            const emailField = byValueKey('email-field');
+            await driver.elementClick(emailField);
+            await driver.execute('flutter:enterText', 'test+login@gmail.com');
+            const signUpButton = byValueKey("sign-up-button");
+            await driver.elementClick(signUpButton);
+
+            // Simulate fingerprint authentication
+            await delay(1000);
+            await driver.switchContext('NATIVE_APP');
+
+            await driver.tap({x: 850, y: 1300});
+
+            await delay(1000);
+
+            await driver.fingerPrint(1);
+
+            await driver.switchContext('FLUTTER');
+            // Wait for the new screen to appear
+            await driver.execute('flutter:waitFor', byValueKey('welcome-text'));
+
+            await driver.elementClick(byValueKey('sign-out-button'));
+        });
+
+        beforeEach(async () => {
+            await driver.elementClick(byValueKey("go-to-login-button"));
+
+            await delay(1000);
+            await driver.switchContext('NATIVE_APP');
+
+            await driver.tap({x: 100, y: 100});
+            await delay(1000);
+            await driver.switchContext('FLUTTER');
+        })
+
+        test('Default Login', async () => {
+            await driver.elementClick(byValueKey('test-selector'));
+            await driver.elementClick(byText('Default'));
+
+            // Fill in details
+            await driver.elementClick(byValueKey('email-field'));
+            await driver.execute('flutter:enterText', 'test+login@gmail.com');
+            await driver.elementClick(byValueKey('sign-in-button'));
+
+            await delay(1000);
+            await driver.switchContext('NATIVE_APP');
+
+            await delay(1000);
+
+            await driver.fingerPrint(1);
+
+            await driver.switchContext('FLUTTER');
+            // Wait for the new screen to appear
+            await driver.execute('flutter:waitFor', byValueKey('welcome-text'));
+
+            await driver.elementClick(byValueKey('sign-out-button'));
+        });
+
+        test('5s Timeout', async () => {
+            await driver.elementClick(byValueKey('test-selector'));
+            await driver.elementClick(byText('5s Timeout'));
+
+            // Fill in details
+            await driver.elementClick(byValueKey('email-field'));
+            await driver.execute('flutter:enterText', 'test+login@gmail.com');
+            await driver.elementClick(byValueKey('sign-in-button'));
+
+            await delay(5000);
+            await driver.switchContext('NATIVE_APP');
+
+            await delay(1000);
+
+            await driver.fingerPrint(1);
+
+            await driver.switchContext('FLUTTER');
+            // Wait for the new screen to appear
+            const errorText = await driver.getElementText(byValueKey('error-text-login'));
+
+            expect(errorText).toContain('TYPE_TIMEOUT_ERROR');
+
+            await driver.elementClick(byValueKey("go-to-sign-up-button"));
+        });
+
+        test('allowCredentials', async () => {
+            await driver.elementClick(byValueKey('test-selector'));
+            await driver.elementClick(byText('AllowCredentials'));
+
+            // Fill in details
+            await driver.elementClick(byValueKey('email-field'));
+            await driver.execute('flutter:enterText', 'test+login@gmail.com');
+            await driver.elementClick(byValueKey('sign-in-button'));
+            // Wait for the new screen to appear
+            const errorText = await driver.getElementText(byValueKey('error-text-login'));
+
+            expect(errorText).toContain('NoCredentialsAvailableException');
+
+            await driver.elementClick(byValueKey("go-to-sign-up-button"));
+        });
+
+        test('PreferImmediatelyAvailableCredentials', async () => {
+            await driver.elementClick(byValueKey('test-selector'));
+            await driver.elementClick(byText('PreferImmediatelyAvailableCredentials'));
+
+            // Fill in details
+            await driver.elementClick(byValueKey('email-field'));
+            await driver.execute('flutter:enterText', 'test+login@gmail.com');
+            await driver.elementClick(byValueKey('sign-in-button'));
+            // Wait for the new screen to appear
+            const errorText = await driver.getElementText(byValueKey('error-text-login'));
+
+            expect(errorText).toContain('NoCredentialsAvailableException');
+
+            await driver.elementClick(byValueKey("go-to-sign-up-button"));
+        });
+    });
+});
\ No newline at end of file
diff --git a/packages/passkeys/passkeys/example/tests/ios.spec.js b/packages/passkeys/passkeys/example/tests/ios.spec.js
new file mode 100644
index 0000000..ab2ed27
--- /dev/null
+++ b/packages/passkeys/passkeys/example/tests/ios.spec.js
@@ -0,0 +1,218 @@
+import * as wdio from 'webdriverio';
+import {byValueKey, byText} from 'appium-flutter-finder';
+import {describe, test, beforeAll, afterAll, expect, beforeEach} from '@jest/globals';
+import {delay} from './util';
+
+const deviceName = process.argv.find(arg => arg.startsWith('--device='))?.split('=')[1] || "iPhone 16 Pro";
+
+// Desired capabilities for the iOS simulator
+const capsIos =
+    {
+        "platformName": "iOS",
+        "appium:deviceName": deviceName,
+        "appium:bundleId": "com.corbado.passkeys.pub",
+        "appium:noReset": true,
+        "appium:fullReset": false,
+        "appium:automationName": "Flutter",
+        "appium:showXcodeLog": true
+    };
+
+const opts = {
+    port: 4567,
+    host: '127.0.0.1',
+    capabilities: capsIos
+};
+
+describe('iOS Tests', () => {
+    let driver;
+
+    beforeAll(async () => {
+        driver = await wdio.remote(opts);
+
+        await driver.switchContext('NATIVE_APP');
+
+        // Enroll biometric (Face ID or Touch ID)
+        await driver.execute('mobile: enrollBiometric', {isEnabled: true});
+
+        await driver.switchContext('FLUTTER');
+    });
+
+    afterAll(async () => {
+        await driver.terminateApp("com.corbado.passkeys.pub");
+        await driver.deleteSession();
+    });
+
+    describe('Signup Tests', () => {
+
+        test('Default Signup', async () => {
+            await driver.elementClick(byValueKey('test-selector'));
+            await driver.elementClick(byText('Default'));
+
+            await delay(10000); // Wait for apple to download apple-app-site-association
+
+            // Fill in details
+            const emailField = byValueKey('email-field');
+            await driver.elementClick(emailField);
+            await driver.execute('flutter:enterText', 'test+1@example.com');
+            const signUpButton = byValueKey("sign-up-button");
+            await driver.elementClick(signUpButton);
+
+            // Simulate fingerprint authentication
+            await delay(2000);
+            await driver.switchContext('NATIVE_APP');
+
+            const windowSize = await driver.getWindowSize(); // Get screen dimensions
+            const screenWidth = windowSize.width;
+            const screenHeight = windowSize.height;
+
+            // Example: Tap at the center of the screen
+            const centerX = screenWidth / 2;
+
+            // Perform a tap at the center of the screen
+            await driver.execute('mobile:tap', {
+                x: centerX,
+                y: screenHeight - 100,
+            });
+
+            await driver.execute('mobile: sendBiometricMatch', {match: true});
+
+            await driver.switchContext('FLUTTER');
+            // Wait for the new screen to appear
+            await driver.execute('flutter:waitFor', byValueKey('welcome-text'));
+
+            await driver.elementClick(byValueKey('sign-out-button'));
+        });
+
+        test('Exclude Credentials', async () => {
+            await driver.elementClick(byValueKey('test-selector'));
+            await driver.elementClick(byText('ExcludeCredentials'));
+
+            // Fill in details
+            await driver.elementClick(byValueKey('email-field'));
+            await driver.execute('flutter:enterText', 'test+2@example.com');
+            await driver.elementClick(byValueKey("sign-up-button"));
+
+            // Simulate fingerprint authentication
+            await delay(2000);
+            await driver.switchContext('NATIVE_APP');
+
+            const windowSize = await driver.getWindowSize(); // Get screen dimensions
+            const screenWidth = windowSize.width;
+            const screenHeight = windowSize.height;
+
+            // Example: Tap at the center of the screen
+            const centerX = screenWidth / 2;
+
+            // Perform a tap at the center of the screen
+            await driver.execute('mobile:tap', {
+                x: centerX,
+                y: screenHeight - 100,
+            });
+
+            await driver.execute('mobile: sendBiometricMatch', {match: true});
+
+            await driver.switchContext('FLUTTER');
+
+            // Wait for the error to appear
+            const error = byValueKey('error-text');
+            const errorText = await driver.getElementText(error);
+
+            expect(errorText).toContain('AuthorizationError');
+        });
+    });
+
+    describe('Login Tests', () => {
+        beforeAll(async () => {
+            await driver.elementClick(byValueKey('test-selector'));
+            await driver.elementClick(byText('Default'));
+
+            // Fill in details
+            const emailField = byValueKey('email-field');
+            await driver.elementClick(emailField);
+            await driver.execute('flutter:enterText', 'test+login@gmail.com');
+            const signUpButton = byValueKey("sign-up-button");
+            await driver.elementClick(signUpButton);
+
+            // Simulate fingerprint authentication
+            await delay(2000);
+            await driver.switchContext('NATIVE_APP');
+
+            const windowSize = await driver.getWindowSize(); // Get screen dimensions
+            const screenWidth = windowSize.width;
+            const screenHeight = windowSize.height;
+
+            // Example: Tap at the center of the screen
+            const centerX = screenWidth / 2;
+
+            // Perform a tap at the center of the screen
+            await driver.execute('mobile:tap', {
+                x: centerX,
+                y: screenHeight - 100,
+            });
+
+            await driver.execute('mobile: sendBiometricMatch', {match: true});
+
+            await driver.switchContext('FLUTTER');
+            // Wait for the new screen to appear
+            await driver.execute('flutter:waitFor', byValueKey('welcome-text'));
+
+            await driver.elementClick(byValueKey('sign-out-button'));
+        });
+
+        beforeEach(async () => {
+            await driver.elementClick(byValueKey("go-to-login-button"));
+        })
+
+        test('Default Login', async () => {
+            await driver.elementClick(byValueKey('test-selector'));
+            await driver.elementClick(byText('Default'));
+
+            // Fill in details
+            await driver.elementClick(byValueKey('email-field'));
+            await driver.execute('flutter:enterText', 'test+login@gmail.com');
+            await driver.elementClick(byValueKey('sign-in-button'));
+
+            await delay(1000);
+            await driver.switchContext('NATIVE_APP');
+
+            const windowSize = await driver.getWindowSize(); // Get screen dimensions
+            const screenWidth = windowSize.width;
+            const screenHeight = windowSize.height;
+
+            // Example: Tap at the center of the screen
+            const centerX = screenWidth / 2;
+
+            // Perform a tap at the center of the screen
+            await driver.execute('mobile:tap', {
+                x: centerX,
+                y: screenHeight - 50,
+            });
+
+            await delay(1000);
+
+            await driver.execute('mobile: sendBiometricMatch', {match: true});
+
+            await driver.switchContext('FLUTTER');
+            // Wait for the new screen to appear
+            await driver.execute('flutter:waitFor', byValueKey('welcome-text'));
+
+            await driver.elementClick(byValueKey('sign-out-button'));
+        });
+
+        test('allowCredentials', async () => {
+            await driver.elementClick(byValueKey('test-selector'));
+            await driver.elementClick(byText('AllowCredentials And PreferImmediatelyAvailableCredentials'));
+
+            // Fill in details
+            await driver.elementClick(byValueKey('email-field'));
+            await driver.execute('flutter:enterText', 'test+login@gmail.com');
+            await driver.elementClick(byValueKey('sign-in-button'));
+            // Wait for the new screen to appear
+            const errorText = await driver.getElementText(byValueKey('error-text-login'));
+
+            expect(errorText).toContain('NoCredentialsAvailableException');
+
+            await driver.elementClick(byValueKey("go-to-sign-up-button"));
+        });
+    });
+});
\ No newline at end of file
diff --git a/packages/passkeys/passkeys/example/tests/package-lock.json b/packages/passkeys/passkeys/example/tests/package-lock.json
new file mode 100644
index 0000000..38b3d01
--- /dev/null
+++ b/packages/passkeys/passkeys/example/tests/package-lock.json
@@ -0,0 +1,6674 @@
+{
+  "name": "tests",
+  "lockfileVersion": 3,
+  "requires": true,
+  "packages": {
+    "": {
+      "dependencies": {
+        "appium-flutter-finder": "^0.2.0",
+        "jest": "^29.7.0",
+        "webdriverio": "^9.5.7"
+      }
+    },
+    "node_modules/@ampproject/remapping": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.3.0.tgz",
+      "integrity": "sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@jridgewell/gen-mapping": "^0.3.5",
+        "@jridgewell/trace-mapping": "^0.3.24"
+      },
+      "engines": {
+        "node": ">=6.0.0"
+      }
+    },
+    "node_modules/@babel/code-frame": {
+      "version": "7.26.2",
+      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.26.2.tgz",
+      "integrity": "sha512-RJlIHRueQgwWitWgF8OdFYGZX328Ax5BCemNGlqHfplnRT9ESi8JkFlvaVYbS+UubVY6dpv87Fs2u5M29iNFVQ==",
+      "license": "MIT",
+      "dependencies": {
+        "@babel/helper-validator-identifier": "^7.25.9",
+        "js-tokens": "^4.0.0",
+        "picocolors": "^1.0.0"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/compat-data": {
+      "version": "7.26.5",
+      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.26.5.tgz",
+      "integrity": "sha512-XvcZi1KWf88RVbF9wn8MN6tYFloU5qX8KjuF3E1PVBmJ9eypXfs4GRiJwLuTZL0iSnJUKn1BFPa5BPZZJyFzPg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/core": {
+      "version": "7.26.7",
+      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.26.7.tgz",
+      "integrity": "sha512-SRijHmF0PSPgLIBYlWnG0hyeJLwXE2CgpsXaMOrtt2yp9/86ALw6oUlj9KYuZ0JN07T4eBMVIW4li/9S1j2BGA==",
+      "license": "MIT",
+      "dependencies": {
+        "@ampproject/remapping": "^2.2.0",
+        "@babel/code-frame": "^7.26.2",
+        "@babel/generator": "^7.26.5",
+        "@babel/helper-compilation-targets": "^7.26.5",
+        "@babel/helper-module-transforms": "^7.26.0",
+        "@babel/helpers": "^7.26.7",
+        "@babel/parser": "^7.26.7",
+        "@babel/template": "^7.25.9",
+        "@babel/traverse": "^7.26.7",
+        "@babel/types": "^7.26.7",
+        "convert-source-map": "^2.0.0",
+        "debug": "^4.1.0",
+        "gensync": "^1.0.0-beta.2",
+        "json5": "^2.2.3",
+        "semver": "^6.3.1"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/babel"
+      }
+    },
+    "node_modules/@babel/core/node_modules/semver": {
+      "version": "6.3.1",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
+      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
+      "license": "ISC",
+      "bin": {
+        "semver": "bin/semver.js"
+      }
+    },
+    "node_modules/@babel/generator": {
+      "version": "7.26.5",
+      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.26.5.tgz",
+      "integrity": "sha512-2caSP6fN9I7HOe6nqhtft7V4g7/V/gfDsC3Ag4W7kEzzvRGKqiv0pu0HogPiZ3KaVSoNDhUws6IJjDjpfmYIXw==",
+      "license": "MIT",
+      "dependencies": {
+        "@babel/parser": "^7.26.5",
+        "@babel/types": "^7.26.5",
+        "@jridgewell/gen-mapping": "^0.3.5",
+        "@jridgewell/trace-mapping": "^0.3.25",
+        "jsesc": "^3.0.2"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/helper-compilation-targets": {
+      "version": "7.26.5",
+      "resolved": "https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.26.5.tgz",
+      "integrity": "sha512-IXuyn5EkouFJscIDuFF5EsiSolseme1s0CZB+QxVugqJLYmKdxI1VfIBOst0SUu4rnk2Z7kqTwmoO1lp3HIfnA==",
+      "license": "MIT",
+      "dependencies": {
+        "@babel/compat-data": "^7.26.5",
+        "@babel/helper-validator-option": "^7.25.9",
+        "browserslist": "^4.24.0",
+        "lru-cache": "^5.1.1",
+        "semver": "^6.3.1"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/helper-compilation-targets/node_modules/lru-cache": {
+      "version": "5.1.1",
+      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-5.1.1.tgz",
+      "integrity": "sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==",
+      "license": "ISC",
+      "dependencies": {
+        "yallist": "^3.0.2"
+      }
+    },
+    "node_modules/@babel/helper-compilation-targets/node_modules/semver": {
+      "version": "6.3.1",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
+      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
+      "license": "ISC",
+      "bin": {
+        "semver": "bin/semver.js"
+      }
+    },
+    "node_modules/@babel/helper-module-imports": {
+      "version": "7.25.9",
+      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.25.9.tgz",
+      "integrity": "sha512-tnUA4RsrmflIM6W6RFTLFSXITtl0wKjgpnLgXyowocVPrbYrLUXSBXDgTs8BlbmIzIdlBySRQjINYs2BAkiLtw==",
+      "license": "MIT",
+      "dependencies": {
+        "@babel/traverse": "^7.25.9",
+        "@babel/types": "^7.25.9"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/helper-module-transforms": {
+      "version": "7.26.0",
+      "resolved": "https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.26.0.tgz",
+      "integrity": "sha512-xO+xu6B5K2czEnQye6BHA7DolFFmS3LB7stHZFaOLb1pAwO1HWLS8fXA+eh0A2yIvltPVmx3eNNDBJA2SLHXFw==",
+      "license": "MIT",
+      "dependencies": {
+        "@babel/helper-module-imports": "^7.25.9",
+        "@babel/helper-validator-identifier": "^7.25.9",
+        "@babel/traverse": "^7.25.9"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      },
+      "peerDependencies": {
+        "@babel/core": "^7.0.0"
+      }
+    },
+    "node_modules/@babel/helper-plugin-utils": {
+      "version": "7.26.5",
+      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.26.5.tgz",
+      "integrity": "sha512-RS+jZcRdZdRFzMyr+wcsaqOmld1/EqTghfaBGQQd/WnRdzdlvSZ//kF7U8VQTxf1ynZ4cjUcYgjVGx13ewNPMg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/helper-string-parser": {
+      "version": "7.25.9",
+      "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.25.9.tgz",
+      "integrity": "sha512-4A/SCr/2KLd5jrtOMFzaKjVtAei3+2r/NChoBNoZ3EyP/+GlhoaEGoWOZUmFmoITP7zOJyHIMm+DYRd8o3PvHA==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/helper-validator-identifier": {
+      "version": "7.25.9",
+      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.25.9.tgz",
+      "integrity": "sha512-Ed61U6XJc3CVRfkERJWDz4dJwKe7iLmmJsbOGu9wSloNSFttHV0I8g6UAgb7qnK5ly5bGLPd4oXZlxCdANBOWQ==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/helper-validator-option": {
+      "version": "7.25.9",
+      "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.25.9.tgz",
+      "integrity": "sha512-e/zv1co8pp55dNdEcCynfj9X7nyUKUXoUEwfXqaZt0omVOmDe9oOTdKStH4GmAw6zxMFs50ZayuMfHDKlO7Tfw==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/helpers": {
+      "version": "7.26.7",
+      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.26.7.tgz",
+      "integrity": "sha512-8NHiL98vsi0mbPQmYAGWwfcFaOy4j2HY49fXJCfuDcdE7fMIsH9a7GdaeXpIBsbT7307WU8KCMp5pUVDNL4f9A==",
+      "license": "MIT",
+      "dependencies": {
+        "@babel/template": "^7.25.9",
+        "@babel/types": "^7.26.7"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/parser": {
+      "version": "7.26.7",
+      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.26.7.tgz",
+      "integrity": "sha512-kEvgGGgEjRUutvdVvZhbn/BxVt+5VSpwXz1j3WYXQbXDo8KzFOPNG2GQbdAiNq8g6wn1yKk7C/qrke03a84V+w==",
+      "license": "MIT",
+      "dependencies": {
+        "@babel/types": "^7.26.7"
+      },
+      "bin": {
+        "parser": "bin/babel-parser.js"
+      },
+      "engines": {
+        "node": ">=6.0.0"
+      }
+    },
+    "node_modules/@babel/plugin-syntax-async-generators": {
+      "version": "7.8.4",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-async-generators/-/plugin-syntax-async-generators-7.8.4.tgz",
+      "integrity": "sha512-tycmZxkGfZaxhMRbXlPXuVFpdWlXpir2W4AMhSJgRKzk/eDlIXOhb2LHWoLpDF7TEHylV5zNhykX6KAgHJmTNw==",
+      "license": "MIT",
+      "dependencies": {
+        "@babel/helper-plugin-utils": "^7.8.0"
+      },
+      "peerDependencies": {
+        "@babel/core": "^7.0.0-0"
+      }
+    },
+    "node_modules/@babel/plugin-syntax-bigint": {
+      "version": "7.8.3",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-bigint/-/plugin-syntax-bigint-7.8.3.tgz",
+      "integrity": "sha512-wnTnFlG+YxQm3vDxpGE57Pj0srRU4sHE/mDkt1qv2YJJSeUAec2ma4WLUnUPeKjyrfntVwe/N6dCXpU+zL3Npg==",
+      "license": "MIT",
+      "dependencies": {
+        "@babel/helper-plugin-utils": "^7.8.0"
+      },
+      "peerDependencies": {
+        "@babel/core": "^7.0.0-0"
+      }
+    },
+    "node_modules/@babel/plugin-syntax-class-properties": {
+      "version": "7.12.13",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-class-properties/-/plugin-syntax-class-properties-7.12.13.tgz",
+      "integrity": "sha512-fm4idjKla0YahUNgFNLCB0qySdsoPiZP3iQE3rky0mBUtMZ23yDJ9SJdg6dXTSDnulOVqiF3Hgr9nbXvXTQZYA==",
+      "license": "MIT",
+      "dependencies": {
+        "@babel/helper-plugin-utils": "^7.12.13"
+      },
+      "peerDependencies": {
+        "@babel/core": "^7.0.0-0"
+      }
+    },
+    "node_modules/@babel/plugin-syntax-class-static-block": {
+      "version": "7.14.5",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-class-static-block/-/plugin-syntax-class-static-block-7.14.5.tgz",
+      "integrity": "sha512-b+YyPmr6ldyNnM6sqYeMWE+bgJcJpO6yS4QD7ymxgH34GBPNDM/THBh8iunyvKIZztiwLH4CJZ0RxTk9emgpjw==",
+      "license": "MIT",
+      "dependencies": {
+        "@babel/helper-plugin-utils": "^7.14.5"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      },
+      "peerDependencies": {
+        "@babel/core": "^7.0.0-0"
+      }
+    },
+    "node_modules/@babel/plugin-syntax-import-attributes": {
+      "version": "7.26.0",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-import-attributes/-/plugin-syntax-import-attributes-7.26.0.tgz",
+      "integrity": "sha512-e2dttdsJ1ZTpi3B9UYGLw41hifAubg19AtCu/2I/F1QNVclOBr1dYpTdmdyZ84Xiz43BS/tCUkMAZNLv12Pi+A==",
+      "license": "MIT",
+      "dependencies": {
+        "@babel/helper-plugin-utils": "^7.25.9"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      },
+      "peerDependencies": {
+        "@babel/core": "^7.0.0-0"
+      }
+    },
+    "node_modules/@babel/plugin-syntax-import-meta": {
+      "version": "7.10.4",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-import-meta/-/plugin-syntax-import-meta-7.10.4.tgz",
+      "integrity": "sha512-Yqfm+XDx0+Prh3VSeEQCPU81yC+JWZ2pDPFSS4ZdpfZhp4MkFMaDC1UqseovEKwSUpnIL7+vK+Clp7bfh0iD7g==",
+      "license": "MIT",
+      "dependencies": {
+        "@babel/helper-plugin-utils": "^7.10.4"
+      },
+      "peerDependencies": {
+        "@babel/core": "^7.0.0-0"
+      }
+    },
+    "node_modules/@babel/plugin-syntax-json-strings": {
+      "version": "7.8.3",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-json-strings/-/plugin-syntax-json-strings-7.8.3.tgz",
+      "integrity": "sha512-lY6kdGpWHvjoe2vk4WrAapEuBR69EMxZl+RoGRhrFGNYVK8mOPAW8VfbT/ZgrFbXlDNiiaxQnAtgVCZ6jv30EA==",
+      "license": "MIT",
+      "dependencies": {
+        "@babel/helper-plugin-utils": "^7.8.0"
+      },
+      "peerDependencies": {
+        "@babel/core": "^7.0.0-0"
+      }
+    },
+    "node_modules/@babel/plugin-syntax-jsx": {
+      "version": "7.25.9",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-jsx/-/plugin-syntax-jsx-7.25.9.tgz",
+      "integrity": "sha512-ld6oezHQMZsZfp6pWtbjaNDF2tiiCYYDqQszHt5VV437lewP9aSi2Of99CK0D0XB21k7FLgnLcmQKyKzynfeAA==",
+      "license": "MIT",
+      "dependencies": {
+        "@babel/helper-plugin-utils": "^7.25.9"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      },
+      "peerDependencies": {
+        "@babel/core": "^7.0.0-0"
+      }
+    },
+    "node_modules/@babel/plugin-syntax-logical-assignment-operators": {
+      "version": "7.10.4",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-logical-assignment-operators/-/plugin-syntax-logical-assignment-operators-7.10.4.tgz",
+      "integrity": "sha512-d8waShlpFDinQ5MtvGU9xDAOzKH47+FFoney2baFIoMr952hKOLp1HR7VszoZvOsV/4+RRszNY7D17ba0te0ig==",
+      "license": "MIT",
+      "dependencies": {
+        "@babel/helper-plugin-utils": "^7.10.4"
+      },
+      "peerDependencies": {
+        "@babel/core": "^7.0.0-0"
+      }
+    },
+    "node_modules/@babel/plugin-syntax-nullish-coalescing-operator": {
+      "version": "7.8.3",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-nullish-coalescing-operator/-/plugin-syntax-nullish-coalescing-operator-7.8.3.tgz",
+      "integrity": "sha512-aSff4zPII1u2QD7y+F8oDsz19ew4IGEJg9SVW+bqwpwtfFleiQDMdzA/R+UlWDzfnHFCxxleFT0PMIrR36XLNQ==",
+      "license": "MIT",
+      "dependencies": {
+        "@babel/helper-plugin-utils": "^7.8.0"
+      },
+      "peerDependencies": {
+        "@babel/core": "^7.0.0-0"
+      }
+    },
+    "node_modules/@babel/plugin-syntax-numeric-separator": {
+      "version": "7.10.4",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-numeric-separator/-/plugin-syntax-numeric-separator-7.10.4.tgz",
+      "integrity": "sha512-9H6YdfkcK/uOnY/K7/aA2xpzaAgkQn37yzWUMRK7OaPOqOpGS1+n0H5hxT9AUw9EsSjPW8SVyMJwYRtWs3X3ug==",
+      "license": "MIT",
+      "dependencies": {
+        "@babel/helper-plugin-utils": "^7.10.4"
+      },
+      "peerDependencies": {
+        "@babel/core": "^7.0.0-0"
+      }
+    },
+    "node_modules/@babel/plugin-syntax-object-rest-spread": {
+      "version": "7.8.3",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-object-rest-spread/-/plugin-syntax-object-rest-spread-7.8.3.tgz",
+      "integrity": "sha512-XoqMijGZb9y3y2XskN+P1wUGiVwWZ5JmoDRwx5+3GmEplNyVM2s2Dg8ILFQm8rWM48orGy5YpI5Bl8U1y7ydlA==",
+      "license": "MIT",
+      "dependencies": {
+        "@babel/helper-plugin-utils": "^7.8.0"
+      },
+      "peerDependencies": {
+        "@babel/core": "^7.0.0-0"
+      }
+    },
+    "node_modules/@babel/plugin-syntax-optional-catch-binding": {
+      "version": "7.8.3",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-optional-catch-binding/-/plugin-syntax-optional-catch-binding-7.8.3.tgz",
+      "integrity": "sha512-6VPD0Pc1lpTqw0aKoeRTMiB+kWhAoT24PA+ksWSBrFtl5SIRVpZlwN3NNPQjehA2E/91FV3RjLWoVTglWcSV3Q==",
+      "license": "MIT",
+      "dependencies": {
+        "@babel/helper-plugin-utils": "^7.8.0"
+      },
+      "peerDependencies": {
+        "@babel/core": "^7.0.0-0"
+      }
+    },
+    "node_modules/@babel/plugin-syntax-optional-chaining": {
+      "version": "7.8.3",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-optional-chaining/-/plugin-syntax-optional-chaining-7.8.3.tgz",
+      "integrity": "sha512-KoK9ErH1MBlCPxV0VANkXW2/dw4vlbGDrFgz8bmUsBGYkFRcbRwMh6cIJubdPrkxRwuGdtCk0v/wPTKbQgBjkg==",
+      "license": "MIT",
+      "dependencies": {
+        "@babel/helper-plugin-utils": "^7.8.0"
+      },
+      "peerDependencies": {
+        "@babel/core": "^7.0.0-0"
+      }
+    },
+    "node_modules/@babel/plugin-syntax-private-property-in-object": {
+      "version": "7.14.5",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-private-property-in-object/-/plugin-syntax-private-property-in-object-7.14.5.tgz",
+      "integrity": "sha512-0wVnp9dxJ72ZUJDV27ZfbSj6iHLoytYZmh3rFcxNnvsJF3ktkzLDZPy/mA17HGsaQT3/DQsWYX1f1QGWkCoVUg==",
+      "license": "MIT",
+      "dependencies": {
+        "@babel/helper-plugin-utils": "^7.14.5"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      },
+      "peerDependencies": {
+        "@babel/core": "^7.0.0-0"
+      }
+    },
+    "node_modules/@babel/plugin-syntax-top-level-await": {
+      "version": "7.14.5",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-top-level-await/-/plugin-syntax-top-level-await-7.14.5.tgz",
+      "integrity": "sha512-hx++upLv5U1rgYfwe1xBQUhRmU41NEvpUvrp8jkrSCdvGSnM5/qdRMtylJ6PG5OFkBaHkbTAKTnd3/YyESRHFw==",
+      "license": "MIT",
+      "dependencies": {
+        "@babel/helper-plugin-utils": "^7.14.5"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      },
+      "peerDependencies": {
+        "@babel/core": "^7.0.0-0"
+      }
+    },
+    "node_modules/@babel/plugin-syntax-typescript": {
+      "version": "7.25.9",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-typescript/-/plugin-syntax-typescript-7.25.9.tgz",
+      "integrity": "sha512-hjMgRy5hb8uJJjUcdWunWVcoi9bGpJp8p5Ol1229PoN6aytsLwNMgmdftO23wnCLMfVmTwZDWMPNq/D1SY60JQ==",
+      "license": "MIT",
+      "dependencies": {
+        "@babel/helper-plugin-utils": "^7.25.9"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      },
+      "peerDependencies": {
+        "@babel/core": "^7.0.0-0"
+      }
+    },
+    "node_modules/@babel/template": {
+      "version": "7.25.9",
+      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.25.9.tgz",
+      "integrity": "sha512-9DGttpmPvIxBb/2uwpVo3dqJ+O6RooAFOS+lB+xDqoE2PVCE8nfoHMdZLpfCQRLwvohzXISPZcgxt80xLfsuwg==",
+      "license": "MIT",
+      "dependencies": {
+        "@babel/code-frame": "^7.25.9",
+        "@babel/parser": "^7.25.9",
+        "@babel/types": "^7.25.9"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/traverse": {
+      "version": "7.26.7",
+      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.26.7.tgz",
+      "integrity": "sha512-1x1sgeyRLC3r5fQOM0/xtQKsYjyxmFjaOrLJNtZ81inNjyJHGIolTULPiSc/2qe1/qfpFLisLQYFnnZl7QoedA==",
+      "license": "MIT",
+      "dependencies": {
+        "@babel/code-frame": "^7.26.2",
+        "@babel/generator": "^7.26.5",
+        "@babel/parser": "^7.26.7",
+        "@babel/template": "^7.25.9",
+        "@babel/types": "^7.26.7",
+        "debug": "^4.3.1",
+        "globals": "^11.1.0"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/types": {
+      "version": "7.26.7",
+      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.26.7.tgz",
+      "integrity": "sha512-t8kDRGrKXyp6+tjUh7hw2RLyclsW4TRoRvRHtSyAX9Bb5ldlFh+90YAYY6awRXrlB4G5G2izNeGySpATlFzmOg==",
+      "license": "MIT",
+      "dependencies": {
+        "@babel/helper-string-parser": "^7.25.9",
+        "@babel/helper-validator-identifier": "^7.25.9"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@bcoe/v8-coverage": {
+      "version": "0.2.3",
+      "resolved": "https://registry.npmjs.org/@bcoe/v8-coverage/-/v8-coverage-0.2.3.tgz",
+      "integrity": "sha512-0hYQ8SB4Db5zvZB4axdMHGwEaQjkZzFjQiN9LVYvIFB2nSUHW9tYpxWriPrWDASIxiaXax83REcLxuSdnGPZtw==",
+      "license": "MIT"
+    },
+    "node_modules/@isaacs/cliui": {
+      "version": "8.0.2",
+      "resolved": "https://registry.npmjs.org/@isaacs/cliui/-/cliui-8.0.2.tgz",
+      "integrity": "sha512-O8jcjabXaleOG9DQ0+ARXWZBTfnP4WNAqzuiJK7ll44AmxGKv/J2M4TPjxjY3znBCfvBXFzucm1twdyFybFqEA==",
+      "license": "ISC",
+      "dependencies": {
+        "string-width": "^5.1.2",
+        "string-width-cjs": "npm:string-width@^4.2.0",
+        "strip-ansi": "^7.0.1",
+        "strip-ansi-cjs": "npm:strip-ansi@^6.0.1",
+        "wrap-ansi": "^8.1.0",
+        "wrap-ansi-cjs": "npm:wrap-ansi@^7.0.0"
+      },
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@istanbuljs/load-nyc-config": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/@istanbuljs/load-nyc-config/-/load-nyc-config-1.1.0.tgz",
+      "integrity": "sha512-VjeHSlIzpv/NyD3N0YuHfXOPDIixcA1q2ZV98wsMqcYlPmv2n3Yb2lYP9XMElnaFVXg5A7YLTeLu6V84uQDjmQ==",
+      "license": "ISC",
+      "dependencies": {
+        "camelcase": "^5.3.1",
+        "find-up": "^4.1.0",
+        "get-package-type": "^0.1.0",
+        "js-yaml": "^3.13.1",
+        "resolve-from": "^5.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/@istanbuljs/schema": {
+      "version": "0.1.3",
+      "resolved": "https://registry.npmjs.org/@istanbuljs/schema/-/schema-0.1.3.tgz",
+      "integrity": "sha512-ZXRY4jNvVgSVQ8DL3LTcakaAtXwTVUxE81hslsyD2AtoXW/wVob10HkOJ1X/pAlcI7D+2YoZKg5do8G/w6RYgA==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/@jest/console": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/@jest/console/-/console-29.7.0.tgz",
+      "integrity": "sha512-5Ni4CU7XHQi32IJ398EEP4RrB8eV09sXP2ROqD4bksHrnTree52PsxvX8tpL8LvTZ3pFzXyPbNQReSN41CAhOg==",
+      "license": "MIT",
+      "dependencies": {
+        "@jest/types": "^29.6.3",
+        "@types/node": "*",
+        "chalk": "^4.0.0",
+        "jest-message-util": "^29.7.0",
+        "jest-util": "^29.7.0",
+        "slash": "^3.0.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/@jest/console/node_modules/ansi-styles": {
+      "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
+      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
+      "license": "MIT",
+      "dependencies": {
+        "color-convert": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/@jest/console/node_modules/chalk": {
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
+      }
+    },
+    "node_modules/@jest/core": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/@jest/core/-/core-29.7.0.tgz",
+      "integrity": "sha512-n7aeXWKMnGtDA48y8TLWJPJmLmmZ642Ceo78cYWEpiD7FzDgmNDV/GCVRorPABdXLJZ/9wzzgZAlHjXjxDHGsg==",
+      "license": "MIT",
+      "dependencies": {
+        "@jest/console": "^29.7.0",
+        "@jest/reporters": "^29.7.0",
+        "@jest/test-result": "^29.7.0",
+        "@jest/transform": "^29.7.0",
+        "@jest/types": "^29.6.3",
+        "@types/node": "*",
+        "ansi-escapes": "^4.2.1",
+        "chalk": "^4.0.0",
+        "ci-info": "^3.2.0",
+        "exit": "^0.1.2",
+        "graceful-fs": "^4.2.9",
+        "jest-changed-files": "^29.7.0",
+        "jest-config": "^29.7.0",
+        "jest-haste-map": "^29.7.0",
+        "jest-message-util": "^29.7.0",
+        "jest-regex-util": "^29.6.3",
+        "jest-resolve": "^29.7.0",
+        "jest-resolve-dependencies": "^29.7.0",
+        "jest-runner": "^29.7.0",
+        "jest-runtime": "^29.7.0",
+        "jest-snapshot": "^29.7.0",
+        "jest-util": "^29.7.0",
+        "jest-validate": "^29.7.0",
+        "jest-watcher": "^29.7.0",
+        "micromatch": "^4.0.4",
+        "pretty-format": "^29.7.0",
+        "slash": "^3.0.0",
+        "strip-ansi": "^6.0.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      },
+      "peerDependencies": {
+        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
+      },
+      "peerDependenciesMeta": {
+        "node-notifier": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@jest/core/node_modules/ansi-regex": {
+      "version": "5.0.1",
+      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
+      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/@jest/core/node_modules/ansi-styles": {
+      "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
+      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
+      "license": "MIT",
+      "dependencies": {
+        "color-convert": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/@jest/core/node_modules/chalk": {
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
+      }
+    },
+    "node_modules/@jest/core/node_modules/strip-ansi": {
+      "version": "6.0.1",
+      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
+      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
+      "license": "MIT",
+      "dependencies": {
+        "ansi-regex": "^5.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/@jest/environment": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/@jest/environment/-/environment-29.7.0.tgz",
+      "integrity": "sha512-aQIfHDq33ExsN4jP1NWGXhxgQ/wixs60gDiKO+XVMd8Mn0NWPWgc34ZQDTb2jKaUWQ7MuwoitXAsN2XVXNMpAw==",
+      "license": "MIT",
+      "dependencies": {
+        "@jest/fake-timers": "^29.7.0",
+        "@jest/types": "^29.6.3",
+        "@types/node": "*",
+        "jest-mock": "^29.7.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/@jest/expect": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/@jest/expect/-/expect-29.7.0.tgz",
+      "integrity": "sha512-8uMeAMycttpva3P1lBHB8VciS9V0XAr3GymPpipdyQXbBcuhkLQOSe8E/p92RyAdToS6ZD1tFkX+CkhoECE0dQ==",
+      "license": "MIT",
+      "dependencies": {
+        "expect": "^29.7.0",
+        "jest-snapshot": "^29.7.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/@jest/expect-utils": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/@jest/expect-utils/-/expect-utils-29.7.0.tgz",
+      "integrity": "sha512-GlsNBWiFQFCVi9QVSx7f5AgMeLxe9YCCs5PuP2O2LdjDAA8Jh9eX7lA1Jq/xdXw3Wb3hyvlFNfZIfcRetSzYcA==",
+      "license": "MIT",
+      "dependencies": {
+        "jest-get-type": "^29.6.3"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/@jest/fake-timers": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/@jest/fake-timers/-/fake-timers-29.7.0.tgz",
+      "integrity": "sha512-q4DH1Ha4TTFPdxLsqDXK1d3+ioSL7yL5oCMJZgDYm6i+6CygW5E5xVr/D1HdsGxjt1ZWSfUAs9OxSB/BNelWrQ==",
+      "license": "MIT",
+      "dependencies": {
+        "@jest/types": "^29.6.3",
+        "@sinonjs/fake-timers": "^10.0.2",
+        "@types/node": "*",
+        "jest-message-util": "^29.7.0",
+        "jest-mock": "^29.7.0",
+        "jest-util": "^29.7.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/@jest/globals": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/@jest/globals/-/globals-29.7.0.tgz",
+      "integrity": "sha512-mpiz3dutLbkW2MNFubUGUEVLkTGiqW6yLVTA+JbP6fI6J5iL9Y0Nlg8k95pcF8ctKwCS7WVxteBs29hhfAotzQ==",
+      "license": "MIT",
+      "dependencies": {
+        "@jest/environment": "^29.7.0",
+        "@jest/expect": "^29.7.0",
+        "@jest/types": "^29.6.3",
+        "jest-mock": "^29.7.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/@jest/reporters": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/@jest/reporters/-/reporters-29.7.0.tgz",
+      "integrity": "sha512-DApq0KJbJOEzAFYjHADNNxAE3KbhxQB1y5Kplb5Waqw6zVbuWatSnMjE5gs8FUgEPmNsnZA3NCWl9NG0ia04Pg==",
+      "license": "MIT",
+      "dependencies": {
+        "@bcoe/v8-coverage": "^0.2.3",
+        "@jest/console": "^29.7.0",
+        "@jest/test-result": "^29.7.0",
+        "@jest/transform": "^29.7.0",
+        "@jest/types": "^29.6.3",
+        "@jridgewell/trace-mapping": "^0.3.18",
+        "@types/node": "*",
+        "chalk": "^4.0.0",
+        "collect-v8-coverage": "^1.0.0",
+        "exit": "^0.1.2",
+        "glob": "^7.1.3",
+        "graceful-fs": "^4.2.9",
+        "istanbul-lib-coverage": "^3.0.0",
+        "istanbul-lib-instrument": "^6.0.0",
+        "istanbul-lib-report": "^3.0.0",
+        "istanbul-lib-source-maps": "^4.0.0",
+        "istanbul-reports": "^3.1.3",
+        "jest-message-util": "^29.7.0",
+        "jest-util": "^29.7.0",
+        "jest-worker": "^29.7.0",
+        "slash": "^3.0.0",
+        "string-length": "^4.0.1",
+        "strip-ansi": "^6.0.0",
+        "v8-to-istanbul": "^9.0.1"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      },
+      "peerDependencies": {
+        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
+      },
+      "peerDependenciesMeta": {
+        "node-notifier": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@jest/reporters/node_modules/ansi-regex": {
+      "version": "5.0.1",
+      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
+      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/@jest/reporters/node_modules/ansi-styles": {
+      "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
+      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
+      "license": "MIT",
+      "dependencies": {
+        "color-convert": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/@jest/reporters/node_modules/brace-expansion": {
+      "version": "1.1.11",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
+      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
+      "license": "MIT",
+      "dependencies": {
+        "balanced-match": "^1.0.0",
+        "concat-map": "0.0.1"
+      }
+    },
+    "node_modules/@jest/reporters/node_modules/chalk": {
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
+      }
+    },
+    "node_modules/@jest/reporters/node_modules/glob": {
+      "version": "7.2.3",
+      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
+      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
+      "deprecated": "Glob versions prior to v9 are no longer supported",
+      "license": "ISC",
+      "dependencies": {
+        "fs.realpath": "^1.0.0",
+        "inflight": "^1.0.4",
+        "inherits": "2",
+        "minimatch": "^3.1.1",
+        "once": "^1.3.0",
+        "path-is-absolute": "^1.0.0"
+      },
+      "engines": {
+        "node": "*"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/@jest/reporters/node_modules/minimatch": {
+      "version": "3.1.2",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
+      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
+      "license": "ISC",
+      "dependencies": {
+        "brace-expansion": "^1.1.7"
+      },
+      "engines": {
+        "node": "*"
+      }
+    },
+    "node_modules/@jest/reporters/node_modules/strip-ansi": {
+      "version": "6.0.1",
+      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
+      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
+      "license": "MIT",
+      "dependencies": {
+        "ansi-regex": "^5.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/@jest/schemas": {
+      "version": "29.6.3",
+      "resolved": "https://registry.npmjs.org/@jest/schemas/-/schemas-29.6.3.tgz",
+      "integrity": "sha512-mo5j5X+jIZmJQveBKeS/clAueipV7KgiX1vMgCxam1RNYiqE1w62n0/tJJnHtjW8ZHcQco5gY85jA3mi0L+nSA==",
+      "license": "MIT",
+      "dependencies": {
+        "@sinclair/typebox": "^0.27.8"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/@jest/source-map": {
+      "version": "29.6.3",
+      "resolved": "https://registry.npmjs.org/@jest/source-map/-/source-map-29.6.3.tgz",
+      "integrity": "sha512-MHjT95QuipcPrpLM+8JMSzFx6eHp5Bm+4XeFDJlwsvVBjmKNiIAvasGK2fxz2WbGRlnvqehFbh07MMa7n3YJnw==",
+      "license": "MIT",
+      "dependencies": {
+        "@jridgewell/trace-mapping": "^0.3.18",
+        "callsites": "^3.0.0",
+        "graceful-fs": "^4.2.9"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/@jest/test-result": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/@jest/test-result/-/test-result-29.7.0.tgz",
+      "integrity": "sha512-Fdx+tv6x1zlkJPcWXmMDAG2HBnaR9XPSd5aDWQVsfrZmLVT3lU1cwyxLgRmXR9yrq4NBoEm9BMsfgFzTQAbJYA==",
+      "license": "MIT",
+      "dependencies": {
+        "@jest/console": "^29.7.0",
+        "@jest/types": "^29.6.3",
+        "@types/istanbul-lib-coverage": "^2.0.0",
+        "collect-v8-coverage": "^1.0.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/@jest/test-sequencer": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/@jest/test-sequencer/-/test-sequencer-29.7.0.tgz",
+      "integrity": "sha512-GQwJ5WZVrKnOJuiYiAF52UNUJXgTZx1NHjFSEB0qEMmSZKAkdMoIzw/Cj6x6NF4AvV23AUqDpFzQkN/eYCYTxw==",
+      "license": "MIT",
+      "dependencies": {
+        "@jest/test-result": "^29.7.0",
+        "graceful-fs": "^4.2.9",
+        "jest-haste-map": "^29.7.0",
+        "slash": "^3.0.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/@jest/transform": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/@jest/transform/-/transform-29.7.0.tgz",
+      "integrity": "sha512-ok/BTPFzFKVMwO5eOHRrvnBVHdRy9IrsrW1GpMaQ9MCnilNLXQKmAX8s1YXDFaai9xJpac2ySzV0YeRRECr2Vw==",
+      "license": "MIT",
+      "dependencies": {
+        "@babel/core": "^7.11.6",
+        "@jest/types": "^29.6.3",
+        "@jridgewell/trace-mapping": "^0.3.18",
+        "babel-plugin-istanbul": "^6.1.1",
+        "chalk": "^4.0.0",
+        "convert-source-map": "^2.0.0",
+        "fast-json-stable-stringify": "^2.1.0",
+        "graceful-fs": "^4.2.9",
+        "jest-haste-map": "^29.7.0",
+        "jest-regex-util": "^29.6.3",
+        "jest-util": "^29.7.0",
+        "micromatch": "^4.0.4",
+        "pirates": "^4.0.4",
+        "slash": "^3.0.0",
+        "write-file-atomic": "^4.0.2"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/@jest/transform/node_modules/ansi-styles": {
+      "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
+      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
+      "license": "MIT",
+      "dependencies": {
+        "color-convert": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/@jest/transform/node_modules/chalk": {
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
+      }
+    },
+    "node_modules/@jest/types": {
+      "version": "29.6.3",
+      "resolved": "https://registry.npmjs.org/@jest/types/-/types-29.6.3.tgz",
+      "integrity": "sha512-u3UPsIilWKOM3F9CXtrG8LEJmNxwoCQC/XVj4IKYXvvpx7QIi/Kg1LI5uDmDpKlac62NUtX7eLjRh+jVZcLOzw==",
+      "license": "MIT",
+      "dependencies": {
+        "@jest/schemas": "^29.6.3",
+        "@types/istanbul-lib-coverage": "^2.0.0",
+        "@types/istanbul-reports": "^3.0.0",
+        "@types/node": "*",
+        "@types/yargs": "^17.0.8",
+        "chalk": "^4.0.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/@jest/types/node_modules/ansi-styles": {
+      "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
+      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
+      "license": "MIT",
+      "dependencies": {
+        "color-convert": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/@jest/types/node_modules/chalk": {
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
+      }
+    },
+    "node_modules/@jridgewell/gen-mapping": {
+      "version": "0.3.8",
+      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.8.tgz",
+      "integrity": "sha512-imAbBGkb+ebQyxKgzv5Hu2nmROxoDOXHh80evxdoXNOrvAnVx7zimzc1Oo5h9RlfV4vPXaE2iM5pOFbvOCClWA==",
+      "license": "MIT",
+      "dependencies": {
+        "@jridgewell/set-array": "^1.2.1",
+        "@jridgewell/sourcemap-codec": "^1.4.10",
+        "@jridgewell/trace-mapping": "^0.3.24"
+      },
+      "engines": {
+        "node": ">=6.0.0"
+      }
+    },
+    "node_modules/@jridgewell/resolve-uri": {
+      "version": "3.1.2",
+      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
+      "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=6.0.0"
+      }
+    },
+    "node_modules/@jridgewell/set-array": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/@jridgewell/set-array/-/set-array-1.2.1.tgz",
+      "integrity": "sha512-R8gLRTZeyp03ymzP/6Lil/28tGeGEzhx1q2k703KGWRAI1VdvPIXdG70VJc2pAMw3NA6JKL5hhFu1sJX0Mnn/A==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=6.0.0"
+      }
+    },
+    "node_modules/@jridgewell/sourcemap-codec": {
+      "version": "1.5.0",
+      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.0.tgz",
+      "integrity": "sha512-gv3ZRaISU3fjPAgNsriBRqGWQL6quFx04YMPW/zD8XMLsU32mhCCbfbO6KZFLjvYpCZ8zyDEgqsgf+PwPaM7GQ==",
+      "license": "MIT"
+    },
+    "node_modules/@jridgewell/trace-mapping": {
+      "version": "0.3.25",
+      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.25.tgz",
+      "integrity": "sha512-vNk6aEwybGtawWmy/PzwnGDOjCkLWSD2wqvjGGAgOAwCGWySYXfYoxt00IJkTF+8Lb57DwOb3Aa0o9CApepiYQ==",
+      "license": "MIT",
+      "dependencies": {
+        "@jridgewell/resolve-uri": "^3.1.0",
+        "@jridgewell/sourcemap-codec": "^1.4.14"
+      }
+    },
+    "node_modules/@pkgjs/parseargs": {
+      "version": "0.11.0",
+      "resolved": "https://registry.npmjs.org/@pkgjs/parseargs/-/parseargs-0.11.0.tgz",
+      "integrity": "sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg==",
+      "license": "MIT",
+      "optional": true,
+      "engines": {
+        "node": ">=14"
+      }
+    },
+    "node_modules/@promptbook/utils": {
+      "version": "0.69.5",
+      "resolved": "https://registry.npmjs.org/@promptbook/utils/-/utils-0.69.5.tgz",
+      "integrity": "sha512-xm5Ti/Hp3o4xHrsK9Yy3MS6KbDxYbq485hDsFvxqaNA7equHLPdo8H8faTitTeb14QCDfLW4iwCxdVYu5sn6YQ==",
+      "funding": [
+        {
+          "type": "individual",
+          "url": "https://buymeacoffee.com/hejny"
+        },
+        {
+          "type": "github",
+          "url": "https://github.com/webgptorg/promptbook/blob/main/README.md#%EF%B8%8F-contributing"
+        }
+      ],
+      "license": "CC-BY-4.0",
+      "dependencies": {
+        "spacetrim": "0.11.59"
+      }
+    },
+    "node_modules/@puppeteer/browsers": {
+      "version": "2.7.0",
+      "resolved": "https://registry.npmjs.org/@puppeteer/browsers/-/browsers-2.7.0.tgz",
+      "integrity": "sha512-bO61XnTuopsz9kvtfqhVbH6LTM1koxK0IlBR+yuVrM2LB7mk8+5o1w18l5zqd5cs8xlf+ntgambqRqGifMDjog==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "debug": "^4.4.0",
+        "extract-zip": "^2.0.1",
+        "progress": "^2.0.3",
+        "proxy-agent": "^6.5.0",
+        "semver": "^7.6.3",
+        "tar-fs": "^3.0.6",
+        "unbzip2-stream": "^1.4.3",
+        "yargs": "^17.7.2"
+      },
+      "bin": {
+        "browsers": "lib/cjs/main-cli.js"
+      },
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/@sinclair/typebox": {
+      "version": "0.27.8",
+      "resolved": "https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.27.8.tgz",
+      "integrity": "sha512-+Fj43pSMwJs4KRrH/938Uf+uAELIgVBmQzg/q1YG10djyfA3TnrU8N8XzqCh/okZdszqBQTZf96idMfE5lnwTA==",
+      "license": "MIT"
+    },
+    "node_modules/@sinonjs/commons": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/@sinonjs/commons/-/commons-3.0.1.tgz",
+      "integrity": "sha512-K3mCHKQ9sVh8o1C9cxkwxaOmXoAMlDxC1mYyHrjqOWEcBjYr76t96zL2zlj5dUGZ3HSw240X1qgH3Mjf1yJWpQ==",
+      "license": "BSD-3-Clause",
+      "dependencies": {
+        "type-detect": "4.0.8"
+      }
+    },
+    "node_modules/@sinonjs/fake-timers": {
+      "version": "10.3.0",
+      "resolved": "https://registry.npmjs.org/@sinonjs/fake-timers/-/fake-timers-10.3.0.tgz",
+      "integrity": "sha512-V4BG07kuYSUkTCSBHG8G8TNhM+F19jXFWnQtzj+we8DrkpSBCee9Z3Ms8yiGer/dlmhe35/Xdgyo3/0rQKg7YA==",
+      "license": "BSD-3-Clause",
+      "dependencies": {
+        "@sinonjs/commons": "^3.0.0"
+      }
+    },
+    "node_modules/@tootallnate/quickjs-emscripten": {
+      "version": "0.23.0",
+      "resolved": "https://registry.npmjs.org/@tootallnate/quickjs-emscripten/-/quickjs-emscripten-0.23.0.tgz",
+      "integrity": "sha512-C5Mc6rdnsaJDjO3UpGW/CQTHtCKaYlScZTly4JIu97Jxo/odCiH0ITnDXSJPTOrEKk/ycSZ0AOgTmkDtkOsvIA==",
+      "license": "MIT"
+    },
+    "node_modules/@types/babel__core": {
+      "version": "7.20.5",
+      "resolved": "https://registry.npmjs.org/@types/babel__core/-/babel__core-7.20.5.tgz",
+      "integrity": "sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA==",
+      "license": "MIT",
+      "dependencies": {
+        "@babel/parser": "^7.20.7",
+        "@babel/types": "^7.20.7",
+        "@types/babel__generator": "*",
+        "@types/babel__template": "*",
+        "@types/babel__traverse": "*"
+      }
+    },
+    "node_modules/@types/babel__generator": {
+      "version": "7.6.8",
+      "resolved": "https://registry.npmjs.org/@types/babel__generator/-/babel__generator-7.6.8.tgz",
+      "integrity": "sha512-ASsj+tpEDsEiFr1arWrlN6V3mdfjRMZt6LtK/Vp/kreFLnr5QH5+DhvD5nINYZXzwJvXeGq+05iUXcAzVrqWtw==",
+      "license": "MIT",
+      "dependencies": {
+        "@babel/types": "^7.0.0"
+      }
+    },
+    "node_modules/@types/babel__template": {
+      "version": "7.4.4",
+      "resolved": "https://registry.npmjs.org/@types/babel__template/-/babel__template-7.4.4.tgz",
+      "integrity": "sha512-h/NUaSyG5EyxBIp8YRxo4RMe2/qQgvyowRwVMzhYhBCONbW8PUsg4lkFMrhgZhUe5z3L3MiLDuvyJ/CaPa2A8A==",
+      "license": "MIT",
+      "dependencies": {
+        "@babel/parser": "^7.1.0",
+        "@babel/types": "^7.0.0"
+      }
+    },
+    "node_modules/@types/babel__traverse": {
+      "version": "7.20.6",
+      "resolved": "https://registry.npmjs.org/@types/babel__traverse/-/babel__traverse-7.20.6.tgz",
+      "integrity": "sha512-r1bzfrm0tomOI8g1SzvCaQHo6Lcv6zu0EA+W2kHrt8dyrHQxGzBBL4kdkzIS+jBMV+EYcMAEAqXqYaLJq5rOZg==",
+      "license": "MIT",
+      "dependencies": {
+        "@babel/types": "^7.20.7"
+      }
+    },
+    "node_modules/@types/graceful-fs": {
+      "version": "4.1.9",
+      "resolved": "https://registry.npmjs.org/@types/graceful-fs/-/graceful-fs-4.1.9.tgz",
+      "integrity": "sha512-olP3sd1qOEe5dXTSaFvQG+02VdRXcdytWLAZsAq1PecU8uqQAhkrnbli7DagjtXKW/Bl7YJbUsa8MPcuc8LHEQ==",
+      "license": "MIT",
+      "dependencies": {
+        "@types/node": "*"
+      }
+    },
+    "node_modules/@types/istanbul-lib-coverage": {
+      "version": "2.0.6",
+      "resolved": "https://registry.npmjs.org/@types/istanbul-lib-coverage/-/istanbul-lib-coverage-2.0.6.tgz",
+      "integrity": "sha512-2QF/t/auWm0lsy8XtKVPG19v3sSOQlJe/YHZgfjb/KBBHOGSV+J2q/S671rcq9uTBrLAXmZpqJiaQbMT+zNU1w==",
+      "license": "MIT"
+    },
+    "node_modules/@types/istanbul-lib-report": {
+      "version": "3.0.3",
+      "resolved": "https://registry.npmjs.org/@types/istanbul-lib-report/-/istanbul-lib-report-3.0.3.tgz",
+      "integrity": "sha512-NQn7AHQnk/RSLOxrBbGyJM/aVQ+pjj5HCgasFxc0K/KhoATfQ/47AyUl15I2yBUpihjmas+a+VJBOqecrFH+uA==",
+      "license": "MIT",
+      "dependencies": {
+        "@types/istanbul-lib-coverage": "*"
+      }
+    },
+    "node_modules/@types/istanbul-reports": {
+      "version": "3.0.4",
+      "resolved": "https://registry.npmjs.org/@types/istanbul-reports/-/istanbul-reports-3.0.4.tgz",
+      "integrity": "sha512-pk2B1NWalF9toCRu6gjBzR69syFjP4Od8WRAX+0mmf9lAjCRicLOWc+ZrxZHx/0XRjotgkF9t6iaMJ+aXcOdZQ==",
+      "license": "MIT",
+      "dependencies": {
+        "@types/istanbul-lib-report": "*"
+      }
+    },
+    "node_modules/@types/node": {
+      "version": "20.17.12",
+      "resolved": "https://registry.npmjs.org/@types/node/-/node-20.17.12.tgz",
+      "integrity": "sha512-vo/wmBgMIiEA23A/knMfn/cf37VnuF52nZh5ZoW0GWt4e4sxNquibrMRJ7UQsA06+MBx9r/H1jsI9grYjQCQlw==",
+      "license": "MIT",
+      "dependencies": {
+        "undici-types": "~6.19.2"
+      }
+    },
+    "node_modules/@types/sinonjs__fake-timers": {
+      "version": "8.1.5",
+      "resolved": "https://registry.npmjs.org/@types/sinonjs__fake-timers/-/sinonjs__fake-timers-8.1.5.tgz",
+      "integrity": "sha512-mQkU2jY8jJEF7YHjHvsQO8+3ughTL1mcnn96igfhONmR+fUPSKIkefQYpSe8bsly2Ep7oQbn/6VG5/9/0qcArQ==",
+      "license": "MIT"
+    },
+    "node_modules/@types/stack-utils": {
+      "version": "2.0.3",
+      "resolved": "https://registry.npmjs.org/@types/stack-utils/-/stack-utils-2.0.3.tgz",
+      "integrity": "sha512-9aEbYZ3TbYMznPdcdr3SmIrLXwC/AKZXQeCf9Pgao5CKb8CyHuEX5jzWPTkvregvhRJHcpRO6BFoGW9ycaOkYw==",
+      "license": "MIT"
+    },
+    "node_modules/@types/which": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/@types/which/-/which-2.0.2.tgz",
+      "integrity": "sha512-113D3mDkZDjo+EeUEHCFy0qniNc1ZpecGiAU7WSo7YDoSzolZIQKpYFHrPpjkB2nuyahcKfrmLXeQlh7gqJYdw==",
+      "license": "MIT"
+    },
+    "node_modules/@types/ws": {
+      "version": "8.5.13",
+      "resolved": "https://registry.npmjs.org/@types/ws/-/ws-8.5.13.tgz",
+      "integrity": "sha512-osM/gWBTPKgHV8XkTunnegTRIsvF6owmf5w+JtAfOw472dptdm0dlGv4xCt6GwQRcC2XVOvvRE/0bAoQcL2QkA==",
+      "license": "MIT",
+      "dependencies": {
+        "@types/node": "*"
+      }
+    },
+    "node_modules/@types/yargs": {
+      "version": "17.0.33",
+      "resolved": "https://registry.npmjs.org/@types/yargs/-/yargs-17.0.33.tgz",
+      "integrity": "sha512-WpxBCKWPLr4xSsHgz511rFJAM+wS28w2zEO1QDNY5zM/S8ok70NNfztH0xwhqKyaK0OHCbN98LDAZuy1ctxDkA==",
+      "license": "MIT",
+      "dependencies": {
+        "@types/yargs-parser": "*"
+      }
+    },
+    "node_modules/@types/yargs-parser": {
+      "version": "21.0.3",
+      "resolved": "https://registry.npmjs.org/@types/yargs-parser/-/yargs-parser-21.0.3.tgz",
+      "integrity": "sha512-I4q9QU9MQv4oEOz4tAHJtNz1cwuLxn2F3xcc2iV5WdqLPpUnj30aUuxt1mAxYTG+oe8CZMV/+6rU4S4gRDzqtQ==",
+      "license": "MIT"
+    },
+    "node_modules/@types/yauzl": {
+      "version": "2.10.3",
+      "resolved": "https://registry.npmjs.org/@types/yauzl/-/yauzl-2.10.3.tgz",
+      "integrity": "sha512-oJoftv0LSuaDZE3Le4DbKX+KS9G36NzOeSap90UIK0yMA/NhKJhqlSGtNDORNRaIbQfzjXDrQa0ytJ6mNRGz/Q==",
+      "license": "MIT",
+      "optional": true,
+      "dependencies": {
+        "@types/node": "*"
+      }
+    },
+    "node_modules/@wdio/config": {
+      "version": "9.5.0",
+      "resolved": "https://registry.npmjs.org/@wdio/config/-/config-9.5.0.tgz",
+      "integrity": "sha512-ty0laZy9J6pYpPd9BzNS4/P9RcRFCQfiacQuJFCkaM0NXjOtkWnyMnrqLP09nyUEQYhOGwANwShbsS+EaUkmSQ==",
+      "license": "MIT",
+      "dependencies": {
+        "@wdio/logger": "9.4.4",
+        "@wdio/types": "9.5.0",
+        "@wdio/utils": "9.5.0",
+        "deepmerge-ts": "^7.0.3",
+        "glob": "^10.2.2",
+        "import-meta-resolve": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=18.20.0"
+      }
+    },
+    "node_modules/@wdio/logger": {
+      "version": "9.4.4",
+      "resolved": "https://registry.npmjs.org/@wdio/logger/-/logger-9.4.4.tgz",
+      "integrity": "sha512-BXx8RXFUW2M4dcO6t5Le95Hi2ZkTQBRsvBQqLekT2rZ6Xmw8ZKZBPf0FptnoftFGg6dYmwnDidYv/0+4PiHjpQ==",
+      "license": "MIT",
+      "dependencies": {
+        "chalk": "^5.1.2",
+        "loglevel": "^1.6.0",
+        "loglevel-plugin-prefix": "^0.8.4",
+        "strip-ansi": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=18.20.0"
+      }
+    },
+    "node_modules/@wdio/protocols": {
+      "version": "9.4.4",
+      "resolved": "https://registry.npmjs.org/@wdio/protocols/-/protocols-9.4.4.tgz",
+      "integrity": "sha512-IqbAWe5feY3xOwjbiW/2iwcbDU+nm5CX5Om835mxaNWqEoQiaZuTin4YgtgsPeSEBcSFtQ+2ooswr/6vIZdxSw==",
+      "license": "MIT"
+    },
+    "node_modules/@wdio/repl": {
+      "version": "9.4.4",
+      "resolved": "https://registry.npmjs.org/@wdio/repl/-/repl-9.4.4.tgz",
+      "integrity": "sha512-kchPRhoG/pCn4KhHGiL/ocNhdpR8OkD2e6sANlSUZ4TGBVi86YSIEjc2yXUwLacHknC/EnQk/SFnqd4MsNjGGg==",
+      "license": "MIT",
+      "dependencies": {
+        "@types/node": "^20.1.0"
+      },
+      "engines": {
+        "node": ">=18.20.0"
+      }
+    },
+    "node_modules/@wdio/types": {
+      "version": "9.5.0",
+      "resolved": "https://registry.npmjs.org/@wdio/types/-/types-9.5.0.tgz",
+      "integrity": "sha512-sX1vH6VebVHvgdpySTOXzKNazHBu+yFr5bMvveJ2T4vKjJTJOAwO6nPftjKcgGDfhyYxM3xOCvboKICdQKFgEg==",
+      "license": "MIT",
+      "dependencies": {
+        "@types/node": "^20.1.0"
+      },
+      "engines": {
+        "node": ">=18.20.0"
+      }
+    },
+    "node_modules/@wdio/utils": {
+      "version": "9.5.0",
+      "resolved": "https://registry.npmjs.org/@wdio/utils/-/utils-9.5.0.tgz",
+      "integrity": "sha512-Lrom21pIdp60IiKznecJT6Za0GGeXxKikPyWHH5z9SY5TmuSoIhuG/bq40lfUjeSW7doiL1JEsFHbRbzt0bHYA==",
+      "license": "MIT",
+      "dependencies": {
+        "@puppeteer/browsers": "^2.2.0",
+        "@wdio/logger": "9.4.4",
+        "@wdio/types": "9.5.0",
+        "decamelize": "^6.0.0",
+        "deepmerge-ts": "^7.0.3",
+        "edgedriver": "^6.1.1",
+        "geckodriver": "^5.0.0",
+        "get-port": "^7.0.0",
+        "import-meta-resolve": "^4.0.0",
+        "locate-app": "^2.2.24",
+        "safaridriver": "^1.0.0",
+        "split2": "^4.2.0",
+        "wait-port": "^1.1.0"
+      },
+      "engines": {
+        "node": ">=18.20.0"
+      }
+    },
+    "node_modules/@zip.js/zip.js": {
+      "version": "2.7.54",
+      "resolved": "https://registry.npmjs.org/@zip.js/zip.js/-/zip.js-2.7.54.tgz",
+      "integrity": "sha512-qMrJVg2hoEsZJjMJez9yI2+nZlBUxgYzGV3mqcb2B/6T1ihXp0fWBDYlVHlHquuorgNUQP5a8qSmX6HF5rFJNg==",
+      "license": "BSD-3-Clause",
+      "engines": {
+        "bun": ">=0.7.0",
+        "deno": ">=1.0.0",
+        "node": ">=16.5.0"
+      }
+    },
+    "node_modules/abort-controller": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/abort-controller/-/abort-controller-3.0.0.tgz",
+      "integrity": "sha512-h8lQ8tacZYnR3vNQTgibj+tODHI5/+l06Au2Pcriv/Gmet0eaj4TwWH41sO9wnHDiQsEj19q0drzdWdeAHtweg==",
+      "license": "MIT",
+      "dependencies": {
+        "event-target-shim": "^5.0.0"
+      },
+      "engines": {
+        "node": ">=6.5"
+      }
+    },
+    "node_modules/agent-base": {
+      "version": "7.1.3",
+      "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-7.1.3.tgz",
+      "integrity": "sha512-jRR5wdylq8CkOe6hei19GGZnxM6rBGwFl3Bg0YItGDimvjGtAvdZk4Pu6Cl4u4Igsws4a1fd1Vq3ezrhn4KmFw==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 14"
+      }
+    },
+    "node_modules/ansi-escapes": {
+      "version": "4.3.2",
+      "resolved": "https://registry.npmjs.org/ansi-escapes/-/ansi-escapes-4.3.2.tgz",
+      "integrity": "sha512-gKXj5ALrKWQLsYG9jlTRmR/xKluxHV+Z9QEwNIgCfM1/uwPMCuzVVnh5mwTd+OuBZcwSIMbqssNWRm1lE51QaQ==",
+      "license": "MIT",
+      "dependencies": {
+        "type-fest": "^0.21.3"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/ansi-escapes/node_modules/type-fest": {
+      "version": "0.21.3",
+      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.21.3.tgz",
+      "integrity": "sha512-t0rzBq87m3fVcduHDUFhKmyyX+9eo6WQjZvf51Ea/M0Q7+T374Jp1aUiyUl0GKxp8M/OETVHSDvmkyPgvX+X2w==",
+      "license": "(MIT OR CC0-1.0)",
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/ansi-regex": {
+      "version": "6.1.0",
+      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.1.0.tgz",
+      "integrity": "sha512-7HSX4QQb4CspciLpVFwyRe79O3xsIZDDLER21kERQ71oaPodF8jL725AgJMFAYbooIqolJoRLuM81SpeUkpkvA==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-regex?sponsor=1"
+      }
+    },
+    "node_modules/ansi-styles": {
+      "version": "6.2.1",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-6.2.1.tgz",
+      "integrity": "sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/anymatch": {
+      "version": "3.1.3",
+      "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz",
+      "integrity": "sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==",
+      "license": "ISC",
+      "dependencies": {
+        "normalize-path": "^3.0.0",
+        "picomatch": "^2.0.4"
+      },
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/appium-flutter-finder": {
+      "version": "0.2.0",
+      "resolved": "https://registry.npmjs.org/appium-flutter-finder/-/appium-flutter-finder-0.2.0.tgz",
+      "integrity": "sha512-klwh74phzhU6OhSf/arHVHP7AF6fyQGZ2GgzX/wO+gPKIS+rNWOQgizPPimki3H4goB7wB0TaicamN/DCqLmRA==",
+      "license": "MIT"
+    },
+    "node_modules/archiver": {
+      "version": "7.0.1",
+      "resolved": "https://registry.npmjs.org/archiver/-/archiver-7.0.1.tgz",
+      "integrity": "sha512-ZcbTaIqJOfCc03QwD468Unz/5Ir8ATtvAHsK+FdXbDIbGfihqh9mrvdcYunQzqn4HrvWWaFyaxJhGZagaJJpPQ==",
+      "license": "MIT",
+      "dependencies": {
+        "archiver-utils": "^5.0.2",
+        "async": "^3.2.4",
+        "buffer-crc32": "^1.0.0",
+        "readable-stream": "^4.0.0",
+        "readdir-glob": "^1.1.2",
+        "tar-stream": "^3.0.0",
+        "zip-stream": "^6.0.1"
+      },
+      "engines": {
+        "node": ">= 14"
+      }
+    },
+    "node_modules/archiver-utils": {
+      "version": "5.0.2",
+      "resolved": "https://registry.npmjs.org/archiver-utils/-/archiver-utils-5.0.2.tgz",
+      "integrity": "sha512-wuLJMmIBQYCsGZgYLTy5FIB2pF6Lfb6cXMSF8Qywwk3t20zWnAi7zLcQFdKQmIB8wyZpY5ER38x08GbwtR2cLA==",
+      "license": "MIT",
+      "dependencies": {
+        "glob": "^10.0.0",
+        "graceful-fs": "^4.2.0",
+        "is-stream": "^2.0.1",
+        "lazystream": "^1.0.0",
+        "lodash": "^4.17.15",
+        "normalize-path": "^3.0.0",
+        "readable-stream": "^4.0.0"
+      },
+      "engines": {
+        "node": ">= 14"
+      }
+    },
+    "node_modules/argparse": {
+      "version": "1.0.10",
+      "resolved": "https://registry.npmjs.org/argparse/-/argparse-1.0.10.tgz",
+      "integrity": "sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==",
+      "license": "MIT",
+      "dependencies": {
+        "sprintf-js": "~1.0.2"
+      }
+    },
+    "node_modules/argparse/node_modules/sprintf-js": {
+      "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.0.3.tgz",
+      "integrity": "sha512-D9cPgkvLlV3t3IzL0D0YLvGA9Ahk4PcvVwUbN0dSGr1aP0Nrt4AEnTUbuGvquEC0mA64Gqt1fzirlRs5ibXx8g==",
+      "license": "BSD-3-Clause"
+    },
+    "node_modules/aria-query": {
+      "version": "5.3.2",
+      "resolved": "https://registry.npmjs.org/aria-query/-/aria-query-5.3.2.tgz",
+      "integrity": "sha512-COROpnaoap1E2F000S62r6A60uHZnmlvomhfyT2DlTcrY1OrBKn2UhH7qn5wTC9zMvD0AY7csdPSNwKP+7WiQw==",
+      "license": "Apache-2.0",
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/ast-types": {
+      "version": "0.13.4",
+      "resolved": "https://registry.npmjs.org/ast-types/-/ast-types-0.13.4.tgz",
+      "integrity": "sha512-x1FCFnFifvYDDzTaLII71vG5uvDwgtmDTEVWAxrgeiR8VjMONcCXJx7E+USjDtHlwFmt9MysbqgF9b9Vjr6w+w==",
+      "license": "MIT",
+      "dependencies": {
+        "tslib": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/async": {
+      "version": "3.2.6",
+      "resolved": "https://registry.npmjs.org/async/-/async-3.2.6.tgz",
+      "integrity": "sha512-htCUDlxyyCLMgaM3xXg0C0LW2xqfuQ6p05pCEIsXuyQ+a1koYKTuBMzRNwmybfLgvJDMd0r1LTn4+E0Ti6C2AA==",
+      "license": "MIT"
+    },
+    "node_modules/b4a": {
+      "version": "1.6.7",
+      "resolved": "https://registry.npmjs.org/b4a/-/b4a-1.6.7.tgz",
+      "integrity": "sha512-OnAYlL5b7LEkALw87fUVafQw5rVR9RjwGd4KUwNQ6DrrNmaVaUCgLipfVlzrPQ4tWOR9P0IXGNOx50jYCCdSJg==",
+      "license": "Apache-2.0"
+    },
+    "node_modules/babel-jest": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/babel-jest/-/babel-jest-29.7.0.tgz",
+      "integrity": "sha512-BrvGY3xZSwEcCzKvKsCi2GgHqDqsYkOP4/by5xCgIwGXQxIEh+8ew3gmrE1y7XRR6LHZIj6yLYnUi/mm2KXKBg==",
+      "license": "MIT",
+      "dependencies": {
+        "@jest/transform": "^29.7.0",
+        "@types/babel__core": "^7.1.14",
+        "babel-plugin-istanbul": "^6.1.1",
+        "babel-preset-jest": "^29.6.3",
+        "chalk": "^4.0.0",
+        "graceful-fs": "^4.2.9",
+        "slash": "^3.0.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      },
+      "peerDependencies": {
+        "@babel/core": "^7.8.0"
+      }
+    },
+    "node_modules/babel-jest/node_modules/ansi-styles": {
+      "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
+      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
+      "license": "MIT",
+      "dependencies": {
+        "color-convert": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/babel-jest/node_modules/chalk": {
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
+      }
+    },
+    "node_modules/babel-plugin-istanbul": {
+      "version": "6.1.1",
+      "resolved": "https://registry.npmjs.org/babel-plugin-istanbul/-/babel-plugin-istanbul-6.1.1.tgz",
+      "integrity": "sha512-Y1IQok9821cC9onCx5otgFfRm7Lm+I+wwxOx738M/WLPZ9Q42m4IG5W0FNX8WLL2gYMZo3JkuXIH2DOpWM+qwA==",
+      "license": "BSD-3-Clause",
+      "dependencies": {
+        "@babel/helper-plugin-utils": "^7.0.0",
+        "@istanbuljs/load-nyc-config": "^1.0.0",
+        "@istanbuljs/schema": "^0.1.2",
+        "istanbul-lib-instrument": "^5.0.4",
+        "test-exclude": "^6.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/babel-plugin-istanbul/node_modules/istanbul-lib-instrument": {
+      "version": "5.2.1",
+      "resolved": "https://registry.npmjs.org/istanbul-lib-instrument/-/istanbul-lib-instrument-5.2.1.tgz",
+      "integrity": "sha512-pzqtp31nLv/XFOzXGuvhCb8qhjmTVo5vjVk19XE4CRlSWz0KoeJ3bw9XsA7nOp9YBf4qHjwBxkDzKcME/J29Yg==",
+      "license": "BSD-3-Clause",
+      "dependencies": {
+        "@babel/core": "^7.12.3",
+        "@babel/parser": "^7.14.7",
+        "@istanbuljs/schema": "^0.1.2",
+        "istanbul-lib-coverage": "^3.2.0",
+        "semver": "^6.3.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/babel-plugin-istanbul/node_modules/semver": {
+      "version": "6.3.1",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
+      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
+      "license": "ISC",
+      "bin": {
+        "semver": "bin/semver.js"
+      }
+    },
+    "node_modules/babel-plugin-jest-hoist": {
+      "version": "29.6.3",
+      "resolved": "https://registry.npmjs.org/babel-plugin-jest-hoist/-/babel-plugin-jest-hoist-29.6.3.tgz",
+      "integrity": "sha512-ESAc/RJvGTFEzRwOTT4+lNDk/GNHMkKbNzsvT0qKRfDyyYTskxB5rnU2njIDYVxXCBHHEI1c0YwHob3WaYujOg==",
+      "license": "MIT",
+      "dependencies": {
+        "@babel/template": "^7.3.3",
+        "@babel/types": "^7.3.3",
+        "@types/babel__core": "^7.1.14",
+        "@types/babel__traverse": "^7.0.6"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/babel-preset-current-node-syntax": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/babel-preset-current-node-syntax/-/babel-preset-current-node-syntax-1.1.0.tgz",
+      "integrity": "sha512-ldYss8SbBlWva1bs28q78Ju5Zq1F+8BrqBZZ0VFhLBvhh6lCpC2o3gDJi/5DRLs9FgYZCnmPYIVFU4lRXCkyUw==",
+      "license": "MIT",
+      "dependencies": {
+        "@babel/plugin-syntax-async-generators": "^7.8.4",
+        "@babel/plugin-syntax-bigint": "^7.8.3",
+        "@babel/plugin-syntax-class-properties": "^7.12.13",
+        "@babel/plugin-syntax-class-static-block": "^7.14.5",
+        "@babel/plugin-syntax-import-attributes": "^7.24.7",
+        "@babel/plugin-syntax-import-meta": "^7.10.4",
+        "@babel/plugin-syntax-json-strings": "^7.8.3",
+        "@babel/plugin-syntax-logical-assignment-operators": "^7.10.4",
+        "@babel/plugin-syntax-nullish-coalescing-operator": "^7.8.3",
+        "@babel/plugin-syntax-numeric-separator": "^7.10.4",
+        "@babel/plugin-syntax-object-rest-spread": "^7.8.3",
+        "@babel/plugin-syntax-optional-catch-binding": "^7.8.3",
+        "@babel/plugin-syntax-optional-chaining": "^7.8.3",
+        "@babel/plugin-syntax-private-property-in-object": "^7.14.5",
+        "@babel/plugin-syntax-top-level-await": "^7.14.5"
+      },
+      "peerDependencies": {
+        "@babel/core": "^7.0.0"
+      }
+    },
+    "node_modules/babel-preset-jest": {
+      "version": "29.6.3",
+      "resolved": "https://registry.npmjs.org/babel-preset-jest/-/babel-preset-jest-29.6.3.tgz",
+      "integrity": "sha512-0B3bhxR6snWXJZtR/RliHTDPRgn1sNHOR0yVtq/IiQFyuOVjFS+wuio/R4gSNkyYmKmJB4wGZv2NZanmKmTnNA==",
+      "license": "MIT",
+      "dependencies": {
+        "babel-plugin-jest-hoist": "^29.6.3",
+        "babel-preset-current-node-syntax": "^1.0.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      },
+      "peerDependencies": {
+        "@babel/core": "^7.0.0"
+      }
+    },
+    "node_modules/balanced-match": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
+      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
+      "license": "MIT"
+    },
+    "node_modules/bare-buffer": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/bare-buffer/-/bare-buffer-3.0.1.tgz",
+      "integrity": "sha512-QuDV/Wv5k1xsevh24zQwEjlQJuRvt3tUC39VFai6PoJiDIwmISEoc76ZTae4yVcacRBw0HBArrHssV1o3TEKhQ==",
+      "license": "Apache-2.0",
+      "optional": true,
+      "peer": true,
+      "engines": {
+        "bare": ">=1.13.0"
+      }
+    },
+    "node_modules/bare-events": {
+      "version": "2.5.4",
+      "resolved": "https://registry.npmjs.org/bare-events/-/bare-events-2.5.4.tgz",
+      "integrity": "sha512-+gFfDkR8pj4/TrWCGUGWmJIkBwuxPS5F+a5yWjOHQt2hHvNZd5YLzadjmDUtFmMM4y429bnKLa8bYBMHcYdnQA==",
+      "license": "Apache-2.0",
+      "optional": true
+    },
+    "node_modules/bare-fs": {
+      "version": "2.3.5",
+      "resolved": "https://registry.npmjs.org/bare-fs/-/bare-fs-2.3.5.tgz",
+      "integrity": "sha512-SlE9eTxifPDJrT6YgemQ1WGFleevzwY+XAP1Xqgl56HtcrisC2CHCZ2tq6dBpcH2TnNxwUEUGhweo+lrQtYuiw==",
+      "license": "Apache-2.0",
+      "optional": true,
+      "dependencies": {
+        "bare-events": "^2.0.0",
+        "bare-path": "^2.0.0",
+        "bare-stream": "^2.0.0"
+      }
+    },
+    "node_modules/bare-os": {
+      "version": "2.4.4",
+      "resolved": "https://registry.npmjs.org/bare-os/-/bare-os-2.4.4.tgz",
+      "integrity": "sha512-z3UiI2yi1mK0sXeRdc4O1Kk8aOa/e+FNWZcTiPB/dfTWyLypuE99LibgRaQki914Jq//yAWylcAt+mknKdixRQ==",
+      "license": "Apache-2.0",
+      "optional": true
+    },
+    "node_modules/bare-path": {
+      "version": "2.1.3",
+      "resolved": "https://registry.npmjs.org/bare-path/-/bare-path-2.1.3.tgz",
+      "integrity": "sha512-lh/eITfU8hrj9Ru5quUp0Io1kJWIk1bTjzo7JH1P5dWmQ2EL4hFUlfI8FonAhSlgIfhn63p84CDY/x+PisgcXA==",
+      "license": "Apache-2.0",
+      "optional": true,
+      "dependencies": {
+        "bare-os": "^2.1.0"
+      }
+    },
+    "node_modules/bare-stream": {
+      "version": "2.6.3",
+      "resolved": "https://registry.npmjs.org/bare-stream/-/bare-stream-2.6.3.tgz",
+      "integrity": "sha512-AiqV593yTkEU3Lka0Sn+UT8X8U5hZ713RHa5Dg88GtJRite8TeD0oBOESNY6LnaBXTK0LjAW82OVhws+7L4JGA==",
+      "license": "Apache-2.0",
+      "optional": true,
+      "dependencies": {
+        "streamx": "^2.21.0"
+      },
+      "peerDependencies": {
+        "bare-buffer": "*",
+        "bare-events": "*"
+      }
+    },
+    "node_modules/base64-js": {
+      "version": "1.5.1",
+      "resolved": "https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz",
+      "integrity": "sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==",
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/feross"
+        },
+        {
+          "type": "patreon",
+          "url": "https://www.patreon.com/feross"
+        },
+        {
+          "type": "consulting",
+          "url": "https://feross.org/support"
+        }
+      ],
+      "license": "MIT"
+    },
+    "node_modules/basic-ftp": {
+      "version": "5.0.5",
+      "resolved": "https://registry.npmjs.org/basic-ftp/-/basic-ftp-5.0.5.tgz",
+      "integrity": "sha512-4Bcg1P8xhUuqcii/S0Z9wiHIrQVPMermM1any+MX5GeGD7faD3/msQUDGLol9wOcz4/jbg/WJnGqoJF6LiBdtg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=10.0.0"
+      }
+    },
+    "node_modules/boolbase": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/boolbase/-/boolbase-1.0.0.tgz",
+      "integrity": "sha512-JZOSA7Mo9sNGB8+UjSgzdLtokWAky1zbztM3WRLCbZ70/3cTANmQmOdR7y2g+J0e2WXywy1yS468tY+IruqEww==",
+      "license": "ISC"
+    },
+    "node_modules/brace-expansion": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.1.tgz",
+      "integrity": "sha512-XnAIvQ8eM+kC6aULx6wuQiwVsnzsi9d3WxzV3FpWTGA19F621kwdbsAcFKXgKUHZWsy+mY6iL1sHTxWEFCytDA==",
+      "license": "MIT",
+      "dependencies": {
+        "balanced-match": "^1.0.0"
+      }
+    },
+    "node_modules/braces": {
+      "version": "3.0.3",
+      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.3.tgz",
+      "integrity": "sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==",
+      "license": "MIT",
+      "dependencies": {
+        "fill-range": "^7.1.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/browserslist": {
+      "version": "4.24.4",
+      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.24.4.tgz",
+      "integrity": "sha512-KDi1Ny1gSePi1vm0q4oxSF8b4DR44GF4BbmS2YdhPLOEqd8pDviZOGH/GsmRwoWJ2+5Lr085X7naowMwKHDG1A==",
+      "funding": [
+        {
+          "type": "opencollective",
+          "url": "https://opencollective.com/browserslist"
+        },
+        {
+          "type": "tidelift",
+          "url": "https://tidelift.com/funding/github/npm/browserslist"
+        },
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/ai"
+        }
+      ],
+      "license": "MIT",
+      "dependencies": {
+        "caniuse-lite": "^1.0.30001688",
+        "electron-to-chromium": "^1.5.73",
+        "node-releases": "^2.0.19",
+        "update-browserslist-db": "^1.1.1"
+      },
+      "bin": {
+        "browserslist": "cli.js"
+      },
+      "engines": {
+        "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
+      }
+    },
+    "node_modules/bser": {
+      "version": "2.1.1",
+      "resolved": "https://registry.npmjs.org/bser/-/bser-2.1.1.tgz",
+      "integrity": "sha512-gQxTNE/GAfIIrmHLUE3oJyp5FO6HRBfhjnw4/wMmA63ZGDJnWBmgY/lyQBpnDUkGmAhbSe39tx2d/iTOAfglwQ==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "node-int64": "^0.4.0"
+      }
+    },
+    "node_modules/buffer": {
+      "version": "6.0.3",
+      "resolved": "https://registry.npmjs.org/buffer/-/buffer-6.0.3.tgz",
+      "integrity": "sha512-FTiCpNxtwiZZHEZbcbTIcZjERVICn9yq/pDFkTl95/AxzD1naBctN7YO68riM/gLSDY7sdrMby8hofADYuuqOA==",
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/feross"
+        },
+        {
+          "type": "patreon",
+          "url": "https://www.patreon.com/feross"
+        },
+        {
+          "type": "consulting",
+          "url": "https://feross.org/support"
+        }
+      ],
+      "license": "MIT",
+      "dependencies": {
+        "base64-js": "^1.3.1",
+        "ieee754": "^1.2.1"
+      }
+    },
+    "node_modules/buffer-crc32": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/buffer-crc32/-/buffer-crc32-1.0.0.tgz",
+      "integrity": "sha512-Db1SbgBS/fg/392AblrMJk97KggmvYhr4pB5ZIMTWtaivCPMWLkmb7m21cJvpvgK+J3nsU2CmmixNBZx4vFj/w==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=8.0.0"
+      }
+    },
+    "node_modules/buffer-from": {
+      "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/buffer-from/-/buffer-from-1.1.2.tgz",
+      "integrity": "sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==",
+      "license": "MIT"
+    },
+    "node_modules/callsites": {
+      "version": "3.1.0",
+      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
+      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/camelcase": {
+      "version": "5.3.1",
+      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-5.3.1.tgz",
+      "integrity": "sha512-L28STB170nwWS63UjtlEOE3dldQApaJXZkOI1uMFfzf3rRuPegHaHesyee+YxQ+W6SvRDQV6UrdOdRiR153wJg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/caniuse-lite": {
+      "version": "1.0.30001697",
+      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001697.tgz",
+      "integrity": "sha512-GwNPlWJin8E+d7Gxq96jxM6w0w+VFeyyXRsjU58emtkYqnbwHqXm5uT2uCmO0RQE9htWknOP4xtBlLmM/gWxvQ==",
+      "funding": [
+        {
+          "type": "opencollective",
+          "url": "https://opencollective.com/browserslist"
+        },
+        {
+          "type": "tidelift",
+          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
+        },
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/ai"
+        }
+      ],
+      "license": "CC-BY-4.0"
+    },
+    "node_modules/chalk": {
+      "version": "5.4.1",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-5.4.1.tgz",
+      "integrity": "sha512-zgVZuo2WcZgfUEmsn6eO3kINexW8RAE4maiQ8QNs8CtpPCSyMiYsULR3HQYkm3w8FIA3SberyMJMSldGsW+U3w==",
+      "license": "MIT",
+      "engines": {
+        "node": "^12.17.0 || ^14.13 || >=16.0.0"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
+      }
+    },
+    "node_modules/char-regex": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/char-regex/-/char-regex-1.0.2.tgz",
+      "integrity": "sha512-kWWXztvZ5SBQV+eRgKFeh8q5sLuZY2+8WUIzlxWVTg+oGwY14qylx1KbKzHd8P6ZYkAg0xyIDU9JMHhyJMZ1jw==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/cheerio": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/cheerio/-/cheerio-1.0.0.tgz",
+      "integrity": "sha512-quS9HgjQpdaXOvsZz82Oz7uxtXiy6UIsIQcpBj7HRw2M63Skasm9qlDocAM7jNuaxdhpPU7c4kJN+gA5MCu4ww==",
+      "license": "MIT",
+      "dependencies": {
+        "cheerio-select": "^2.1.0",
+        "dom-serializer": "^2.0.0",
+        "domhandler": "^5.0.3",
+        "domutils": "^3.1.0",
+        "encoding-sniffer": "^0.2.0",
+        "htmlparser2": "^9.1.0",
+        "parse5": "^7.1.2",
+        "parse5-htmlparser2-tree-adapter": "^7.0.0",
+        "parse5-parser-stream": "^7.1.2",
+        "undici": "^6.19.5",
+        "whatwg-mimetype": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=18.17"
+      },
+      "funding": {
+        "url": "https://github.com/cheeriojs/cheerio?sponsor=1"
+      }
+    },
+    "node_modules/cheerio-select": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/cheerio-select/-/cheerio-select-2.1.0.tgz",
+      "integrity": "sha512-9v9kG0LvzrlcungtnJtpGNxY+fzECQKhK4EGJX2vByejiMX84MFNQw4UxPJl3bFbTMw+Dfs37XaIkCwTZfLh4g==",
+      "license": "BSD-2-Clause",
+      "dependencies": {
+        "boolbase": "^1.0.0",
+        "css-select": "^5.1.0",
+        "css-what": "^6.1.0",
+        "domelementtype": "^2.3.0",
+        "domhandler": "^5.0.3",
+        "domutils": "^3.0.1"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/fb55"
+      }
+    },
+    "node_modules/ci-info": {
+      "version": "3.9.0",
+      "resolved": "https://registry.npmjs.org/ci-info/-/ci-info-3.9.0.tgz",
+      "integrity": "sha512-NIxF55hv4nSqQswkAeiOi1r83xy8JldOFDTWiug55KBu9Jnblncd2U6ViHmYgHf01TPZS77NJBhBMKdWj9HQMQ==",
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/sibiraj-s"
+        }
+      ],
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/cjs-module-lexer": {
+      "version": "1.4.3",
+      "resolved": "https://registry.npmjs.org/cjs-module-lexer/-/cjs-module-lexer-1.4.3.tgz",
+      "integrity": "sha512-9z8TZaGM1pfswYeXrUpzPrkx8UnWYdhJclsiYMm6x/w5+nN+8Tf/LnAgfLGQCm59qAOxU8WwHEq2vNwF6i4j+Q==",
+      "license": "MIT"
+    },
+    "node_modules/cliui": {
+      "version": "8.0.1",
+      "resolved": "https://registry.npmjs.org/cliui/-/cliui-8.0.1.tgz",
+      "integrity": "sha512-BSeNnyus75C4//NQ9gQt1/csTXyo/8Sb+afLAkzAptFuMsod9HFokGNudZpi/oQV73hnVK+sR+5PVRMd+Dr7YQ==",
+      "license": "ISC",
+      "dependencies": {
+        "string-width": "^4.2.0",
+        "strip-ansi": "^6.0.1",
+        "wrap-ansi": "^7.0.0"
+      },
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/cliui/node_modules/ansi-regex": {
+      "version": "5.0.1",
+      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
+      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/cliui/node_modules/ansi-styles": {
+      "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
+      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
+      "license": "MIT",
+      "dependencies": {
+        "color-convert": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/cliui/node_modules/emoji-regex": {
+      "version": "8.0.0",
+      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
+      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
+      "license": "MIT"
+    },
+    "node_modules/cliui/node_modules/string-width": {
+      "version": "4.2.3",
+      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
+      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
+      "license": "MIT",
+      "dependencies": {
+        "emoji-regex": "^8.0.0",
+        "is-fullwidth-code-point": "^3.0.0",
+        "strip-ansi": "^6.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/cliui/node_modules/strip-ansi": {
+      "version": "6.0.1",
+      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
+      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
+      "license": "MIT",
+      "dependencies": {
+        "ansi-regex": "^5.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/cliui/node_modules/wrap-ansi": {
+      "version": "7.0.0",
+      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
+      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.0.0",
+        "string-width": "^4.1.0",
+        "strip-ansi": "^6.0.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
+      }
+    },
+    "node_modules/co": {
+      "version": "4.6.0",
+      "resolved": "https://registry.npmjs.org/co/-/co-4.6.0.tgz",
+      "integrity": "sha512-QVb0dM5HvG+uaxitm8wONl7jltx8dqhfU33DcqtOZcLSVIKSDDLDi7+0LbAKiyI8hD9u42m2YxXSkMGWThaecQ==",
+      "license": "MIT",
+      "engines": {
+        "iojs": ">= 1.0.0",
+        "node": ">= 0.12.0"
+      }
+    },
+    "node_modules/collect-v8-coverage": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/collect-v8-coverage/-/collect-v8-coverage-1.0.2.tgz",
+      "integrity": "sha512-lHl4d5/ONEbLlJvaJNtsF/Lz+WvB07u2ycqTYbdrq7UypDXailES4valYb2eWiJFxZlVmpGekfqoxQhzyFdT4Q==",
+      "license": "MIT"
+    },
+    "node_modules/color-convert": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
+      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
+      "license": "MIT",
+      "dependencies": {
+        "color-name": "~1.1.4"
+      },
+      "engines": {
+        "node": ">=7.0.0"
+      }
+    },
+    "node_modules/color-name": {
+      "version": "1.1.4",
+      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
+      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
+      "license": "MIT"
+    },
+    "node_modules/commander": {
+      "version": "9.5.0",
+      "resolved": "https://registry.npmjs.org/commander/-/commander-9.5.0.tgz",
+      "integrity": "sha512-KRs7WVDKg86PWiuAqhDrAQnTXZKraVcCc6vFdL14qrZ/DcWwuRo7VoiYXalXO7S5GKpqYiVEwCbgFDfxNHKJBQ==",
+      "license": "MIT",
+      "engines": {
+        "node": "^12.20.0 || >=14"
+      }
+    },
+    "node_modules/compress-commons": {
+      "version": "6.0.2",
+      "resolved": "https://registry.npmjs.org/compress-commons/-/compress-commons-6.0.2.tgz",
+      "integrity": "sha512-6FqVXeETqWPoGcfzrXb37E50NP0LXT8kAMu5ooZayhWWdgEY4lBEEcbQNXtkuKQsGduxiIcI4gOTsxTmuq/bSg==",
+      "license": "MIT",
+      "dependencies": {
+        "crc-32": "^1.2.0",
+        "crc32-stream": "^6.0.0",
+        "is-stream": "^2.0.1",
+        "normalize-path": "^3.0.0",
+        "readable-stream": "^4.0.0"
+      },
+      "engines": {
+        "node": ">= 14"
+      }
+    },
+    "node_modules/concat-map": {
+      "version": "0.0.1",
+      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
+      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
+      "license": "MIT"
+    },
+    "node_modules/convert-source-map": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-2.0.0.tgz",
+      "integrity": "sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==",
+      "license": "MIT"
+    },
+    "node_modules/core-util-is": {
+      "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.3.tgz",
+      "integrity": "sha512-ZQBvi1DcpJ4GDqanjucZ2Hj3wEO5pZDS89BWbkcrvdxksJorwUDDZamX9ldFkp9aw2lmBDLgkObEA4DWNJ9FYQ==",
+      "license": "MIT"
+    },
+    "node_modules/crc-32": {
+      "version": "1.2.2",
+      "resolved": "https://registry.npmjs.org/crc-32/-/crc-32-1.2.2.tgz",
+      "integrity": "sha512-ROmzCKrTnOwybPcJApAA6WBWij23HVfGVNKqqrZpuyZOHqK2CwHSvpGuyt/UNNvaIjEd8X5IFGp4Mh+Ie1IHJQ==",
+      "license": "Apache-2.0",
+      "bin": {
+        "crc32": "bin/crc32.njs"
+      },
+      "engines": {
+        "node": ">=0.8"
+      }
+    },
+    "node_modules/crc32-stream": {
+      "version": "6.0.0",
+      "resolved": "https://registry.npmjs.org/crc32-stream/-/crc32-stream-6.0.0.tgz",
+      "integrity": "sha512-piICUB6ei4IlTv1+653yq5+KoqfBYmj9bw6LqXoOneTMDXk5nM1qt12mFW1caG3LlJXEKW1Bp0WggEmIfQB34g==",
+      "license": "MIT",
+      "dependencies": {
+        "crc-32": "^1.2.0",
+        "readable-stream": "^4.0.0"
+      },
+      "engines": {
+        "node": ">= 14"
+      }
+    },
+    "node_modules/create-jest": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/create-jest/-/create-jest-29.7.0.tgz",
+      "integrity": "sha512-Adz2bdH0Vq3F53KEMJOoftQFutWCukm6J24wbPWRO4k1kMY7gS7ds/uoJkNuV8wDCtWWnuwGcJwpWcih+zEW1Q==",
+      "license": "MIT",
+      "dependencies": {
+        "@jest/types": "^29.6.3",
+        "chalk": "^4.0.0",
+        "exit": "^0.1.2",
+        "graceful-fs": "^4.2.9",
+        "jest-config": "^29.7.0",
+        "jest-util": "^29.7.0",
+        "prompts": "^2.0.1"
+      },
+      "bin": {
+        "create-jest": "bin/create-jest.js"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/create-jest/node_modules/ansi-styles": {
+      "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
+      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
+      "license": "MIT",
+      "dependencies": {
+        "color-convert": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/create-jest/node_modules/chalk": {
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
+      }
+    },
+    "node_modules/cross-spawn": {
+      "version": "7.0.6",
+      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.6.tgz",
+      "integrity": "sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==",
+      "license": "MIT",
+      "dependencies": {
+        "path-key": "^3.1.0",
+        "shebang-command": "^2.0.0",
+        "which": "^2.0.1"
+      },
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/cross-spawn/node_modules/isexe": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
+      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
+      "license": "ISC"
+    },
+    "node_modules/cross-spawn/node_modules/which": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
+      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
+      "license": "ISC",
+      "dependencies": {
+        "isexe": "^2.0.0"
+      },
+      "bin": {
+        "node-which": "bin/node-which"
+      },
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/css-select": {
+      "version": "5.1.0",
+      "resolved": "https://registry.npmjs.org/css-select/-/css-select-5.1.0.tgz",
+      "integrity": "sha512-nwoRF1rvRRnnCqqY7updORDsuqKzqYJ28+oSMaJMMgOauh3fvwHqMS7EZpIPqK8GL+g9mKxF1vP/ZjSeNjEVHg==",
+      "license": "BSD-2-Clause",
+      "dependencies": {
+        "boolbase": "^1.0.0",
+        "css-what": "^6.1.0",
+        "domhandler": "^5.0.2",
+        "domutils": "^3.0.1",
+        "nth-check": "^2.0.1"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/fb55"
+      }
+    },
+    "node_modules/css-shorthand-properties": {
+      "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/css-shorthand-properties/-/css-shorthand-properties-1.1.2.tgz",
+      "integrity": "sha512-C2AugXIpRGQTxaCW0N7n5jD/p5irUmCrwl03TrnMFBHDbdq44CFWR2zO7rK9xPN4Eo3pUxC4vQzQgbIpzrD1PQ==",
+      "license": "MIT"
+    },
+    "node_modules/css-value": {
+      "version": "0.0.1",
+      "resolved": "https://registry.npmjs.org/css-value/-/css-value-0.0.1.tgz",
+      "integrity": "sha512-FUV3xaJ63buRLgHrLQVlVgQnQdR4yqdLGaDu7g8CQcWjInDfM9plBTPI9FRfpahju1UBSaMckeb2/46ApS/V1Q=="
+    },
+    "node_modules/css-what": {
+      "version": "6.1.0",
+      "resolved": "https://registry.npmjs.org/css-what/-/css-what-6.1.0.tgz",
+      "integrity": "sha512-HTUrgRJ7r4dsZKU6GjmpfRK1O76h97Z8MfS1G0FozR+oF2kG6Vfe8JE6zwrkbxigziPHinCJ+gCPjA9EaBDtRw==",
+      "license": "BSD-2-Clause",
+      "engines": {
+        "node": ">= 6"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/fb55"
+      }
+    },
+    "node_modules/data-uri-to-buffer": {
+      "version": "4.0.1",
+      "resolved": "https://registry.npmjs.org/data-uri-to-buffer/-/data-uri-to-buffer-4.0.1.tgz",
+      "integrity": "sha512-0R9ikRb668HB7QDxT1vkpuUBtqc53YyAwMwGeUFKRojY/NWKvdZ+9UYtRfGmhqNbRkTSVpMbmyhXipFFv2cb/A==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 12"
+      }
+    },
+    "node_modules/debug": {
+      "version": "4.4.0",
+      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.0.tgz",
+      "integrity": "sha512-6WTZ/IxCY/T6BALoZHaE4ctp9xm+Z5kY/pzYaCHRFeyVhojxlrm+46y68HA6hr0TcwEssoxNiDEUJQjfPZ/RYA==",
+      "license": "MIT",
+      "dependencies": {
+        "ms": "^2.1.3"
+      },
+      "engines": {
+        "node": ">=6.0"
+      },
+      "peerDependenciesMeta": {
+        "supports-color": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/decamelize": {
+      "version": "6.0.0",
+      "resolved": "https://registry.npmjs.org/decamelize/-/decamelize-6.0.0.tgz",
+      "integrity": "sha512-Fv96DCsdOgB6mdGl67MT5JaTNKRzrzill5OH5s8bjYJXVlcXyPYGyPsUkWyGV5p1TXI5esYIYMMeDJL0hEIwaA==",
+      "license": "MIT",
+      "engines": {
+        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/dedent": {
+      "version": "1.5.3",
+      "resolved": "https://registry.npmjs.org/dedent/-/dedent-1.5.3.tgz",
+      "integrity": "sha512-NHQtfOOW68WD8lgypbLA5oT+Bt0xXJhiYvoR6SmmNXZfpzOGXwdKWmcwG8N7PwVVWV3eF/68nmD9BaJSsTBhyQ==",
+      "license": "MIT",
+      "peerDependencies": {
+        "babel-plugin-macros": "^3.1.0"
+      },
+      "peerDependenciesMeta": {
+        "babel-plugin-macros": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/deepmerge": {
+      "version": "4.3.1",
+      "resolved": "https://registry.npmjs.org/deepmerge/-/deepmerge-4.3.1.tgz",
+      "integrity": "sha512-3sUqbMEc77XqpdNO7FRyRog+eW3ph+GYCbj+rK+uYyRMuwsVy0rMiVtPn+QJlKFvWP/1PYpapqYn0Me2knFn+A==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/deepmerge-ts": {
+      "version": "7.1.3",
+      "resolved": "https://registry.npmjs.org/deepmerge-ts/-/deepmerge-ts-7.1.3.tgz",
+      "integrity": "sha512-qCSH6I0INPxd9Y1VtAiLpnYvz5O//6rCfJXKk0z66Up9/VOSr+1yS8XSKA5IWRxjocFGlzPyaZYe+jxq7OOLtQ==",
+      "license": "BSD-3-Clause",
+      "engines": {
+        "node": ">=16.0.0"
+      }
+    },
+    "node_modules/degenerator": {
+      "version": "5.0.1",
+      "resolved": "https://registry.npmjs.org/degenerator/-/degenerator-5.0.1.tgz",
+      "integrity": "sha512-TllpMR/t0M5sqCXfj85i4XaAzxmS5tVA16dqvdkMwGmzI+dXLXnw3J+3Vdv7VKw+ThlTMboK6i9rnZ6Nntj5CQ==",
+      "license": "MIT",
+      "dependencies": {
+        "ast-types": "^0.13.4",
+        "escodegen": "^2.1.0",
+        "esprima": "^4.0.1"
+      },
+      "engines": {
+        "node": ">= 14"
+      }
+    },
+    "node_modules/detect-newline": {
+      "version": "3.1.0",
+      "resolved": "https://registry.npmjs.org/detect-newline/-/detect-newline-3.1.0.tgz",
+      "integrity": "sha512-TLz+x/vEXm/Y7P7wn1EJFNLxYpUD4TgMosxY6fAVJUnJMbupHBOncxyWUG9OpTaH9EBD7uFI5LfEgmMOc54DsA==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/diff-sequences": {
+      "version": "29.6.3",
+      "resolved": "https://registry.npmjs.org/diff-sequences/-/diff-sequences-29.6.3.tgz",
+      "integrity": "sha512-EjePK1srD3P08o2j4f0ExnylqRs5B9tJjcp9t1krH2qRi8CCdsYfwe9JgSLurFBWwq4uOlipzfk5fHNvwFKr8Q==",
+      "license": "MIT",
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/dom-serializer": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/dom-serializer/-/dom-serializer-2.0.0.tgz",
+      "integrity": "sha512-wIkAryiqt/nV5EQKqQpo3SToSOV9J0DnbJqwK7Wv/Trc92zIAYZ4FlMu+JPFW1DfGFt81ZTCGgDEabffXeLyJg==",
+      "license": "MIT",
+      "dependencies": {
+        "domelementtype": "^2.3.0",
+        "domhandler": "^5.0.2",
+        "entities": "^4.2.0"
+      },
+      "funding": {
+        "url": "https://github.com/cheeriojs/dom-serializer?sponsor=1"
+      }
+    },
+    "node_modules/domelementtype": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/domelementtype/-/domelementtype-2.3.0.tgz",
+      "integrity": "sha512-OLETBj6w0OsagBwdXnPdN0cnMfF9opN69co+7ZrbfPGrdpPVNBUj02spi6B1N7wChLQiPn4CSH/zJvXw56gmHw==",
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/fb55"
+        }
+      ],
+      "license": "BSD-2-Clause"
+    },
+    "node_modules/domhandler": {
+      "version": "5.0.3",
+      "resolved": "https://registry.npmjs.org/domhandler/-/domhandler-5.0.3.tgz",
+      "integrity": "sha512-cgwlv/1iFQiFnU96XXgROh8xTeetsnJiDsTc7TYCLFd9+/WNkIqPTxiM/8pSd8VIrhXGTf1Ny1q1hquVqDJB5w==",
+      "license": "BSD-2-Clause",
+      "dependencies": {
+        "domelementtype": "^2.3.0"
+      },
+      "engines": {
+        "node": ">= 4"
+      },
+      "funding": {
+        "url": "https://github.com/fb55/domhandler?sponsor=1"
+      }
+    },
+    "node_modules/domutils": {
+      "version": "3.2.2",
+      "resolved": "https://registry.npmjs.org/domutils/-/domutils-3.2.2.tgz",
+      "integrity": "sha512-6kZKyUajlDuqlHKVX1w7gyslj9MPIXzIFiz/rGu35uC1wMi+kMhQwGhl4lt9unC9Vb9INnY9Z3/ZA3+FhASLaw==",
+      "license": "BSD-2-Clause",
+      "dependencies": {
+        "dom-serializer": "^2.0.0",
+        "domelementtype": "^2.3.0",
+        "domhandler": "^5.0.3"
+      },
+      "funding": {
+        "url": "https://github.com/fb55/domutils?sponsor=1"
+      }
+    },
+    "node_modules/eastasianwidth": {
+      "version": "0.2.0",
+      "resolved": "https://registry.npmjs.org/eastasianwidth/-/eastasianwidth-0.2.0.tgz",
+      "integrity": "sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA==",
+      "license": "MIT"
+    },
+    "node_modules/edge-paths": {
+      "version": "3.0.5",
+      "resolved": "https://registry.npmjs.org/edge-paths/-/edge-paths-3.0.5.tgz",
+      "integrity": "sha512-sB7vSrDnFa4ezWQk9nZ/n0FdpdUuC6R1EOrlU3DL+bovcNFK28rqu2emmAUjujYEJTWIgQGqgVVWUZXMnc8iWg==",
+      "license": "MIT",
+      "dependencies": {
+        "@types/which": "^2.0.1",
+        "which": "^2.0.2"
+      },
+      "engines": {
+        "node": ">=14.0.0"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/shirshak55"
+      }
+    },
+    "node_modules/edge-paths/node_modules/isexe": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
+      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
+      "license": "ISC"
+    },
+    "node_modules/edge-paths/node_modules/which": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
+      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
+      "license": "ISC",
+      "dependencies": {
+        "isexe": "^2.0.0"
+      },
+      "bin": {
+        "node-which": "bin/node-which"
+      },
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/edgedriver": {
+      "version": "6.1.1",
+      "resolved": "https://registry.npmjs.org/edgedriver/-/edgedriver-6.1.1.tgz",
+      "integrity": "sha512-/dM/PoBf22Xg3yypMWkmRQrBKEnSyNaZ7wHGCT9+qqT14izwtFT+QvdR89rjNkMfXwW+bSFoqOfbcvM+2Cyc7w==",
+      "hasInstallScript": true,
+      "license": "MIT",
+      "dependencies": {
+        "@wdio/logger": "^9.1.3",
+        "@zip.js/zip.js": "^2.7.53",
+        "decamelize": "^6.0.0",
+        "edge-paths": "^3.0.5",
+        "fast-xml-parser": "^4.5.0",
+        "http-proxy-agent": "^7.0.2",
+        "https-proxy-agent": "^7.0.5",
+        "node-fetch": "^3.3.2",
+        "which": "^5.0.0"
+      },
+      "bin": {
+        "edgedriver": "bin/edgedriver.js"
+      },
+      "engines": {
+        "node": ">=18.0.0"
+      }
+    },
+    "node_modules/electron-to-chromium": {
+      "version": "1.5.91",
+      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.91.tgz",
+      "integrity": "sha512-sNSHHyq048PFmZY4S90ax61q+gLCs0X0YmcOII9wG9S2XwbVr+h4VW2wWhnbp/Eys3cCwTxVF292W3qPaxIapQ==",
+      "license": "ISC"
+    },
+    "node_modules/emittery": {
+      "version": "0.13.1",
+      "resolved": "https://registry.npmjs.org/emittery/-/emittery-0.13.1.tgz",
+      "integrity": "sha512-DeWwawk6r5yR9jFgnDKYt4sLS0LmHJJi3ZOnb5/JdbYwj3nW+FxQnHIjhBKz8YLC7oRNPVM9NQ47I3CVx34eqQ==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/sindresorhus/emittery?sponsor=1"
+      }
+    },
+    "node_modules/emoji-regex": {
+      "version": "9.2.2",
+      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-9.2.2.tgz",
+      "integrity": "sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg==",
+      "license": "MIT"
+    },
+    "node_modules/encoding-sniffer": {
+      "version": "0.2.0",
+      "resolved": "https://registry.npmjs.org/encoding-sniffer/-/encoding-sniffer-0.2.0.tgz",
+      "integrity": "sha512-ju7Wq1kg04I3HtiYIOrUrdfdDvkyO9s5XM8QAj/bN61Yo/Vb4vgJxy5vi4Yxk01gWHbrofpPtpxM8bKger9jhg==",
+      "license": "MIT",
+      "dependencies": {
+        "iconv-lite": "^0.6.3",
+        "whatwg-encoding": "^3.1.1"
+      },
+      "funding": {
+        "url": "https://github.com/fb55/encoding-sniffer?sponsor=1"
+      }
+    },
+    "node_modules/end-of-stream": {
+      "version": "1.4.4",
+      "resolved": "https://registry.npmjs.org/end-of-stream/-/end-of-stream-1.4.4.tgz",
+      "integrity": "sha512-+uw1inIHVPQoaVuHzRyXd21icM+cnt4CzD5rW+NC1wjOUSTOs+Te7FOv7AhN7vS9x/oIyhLP5PR1H+phQAHu5Q==",
+      "license": "MIT",
+      "dependencies": {
+        "once": "^1.4.0"
+      }
+    },
+    "node_modules/entities": {
+      "version": "4.5.0",
+      "resolved": "https://registry.npmjs.org/entities/-/entities-4.5.0.tgz",
+      "integrity": "sha512-V0hjH4dGPh9Ao5p0MoRY6BVqtwCjhz6vI5LT8AJ55H+4g9/4vbHx1I54fS0XuclLhDHArPQCiMjDxjaL8fPxhw==",
+      "license": "BSD-2-Clause",
+      "engines": {
+        "node": ">=0.12"
+      },
+      "funding": {
+        "url": "https://github.com/fb55/entities?sponsor=1"
+      }
+    },
+    "node_modules/error-ex": {
+      "version": "1.3.2",
+      "resolved": "https://registry.npmjs.org/error-ex/-/error-ex-1.3.2.tgz",
+      "integrity": "sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==",
+      "license": "MIT",
+      "dependencies": {
+        "is-arrayish": "^0.2.1"
+      }
+    },
+    "node_modules/escalade": {
+      "version": "3.2.0",
+      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz",
+      "integrity": "sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/escape-string-regexp": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-2.0.0.tgz",
+      "integrity": "sha512-UpzcLCXolUWcNu5HtVMHYdXJjArjsF9C0aNnquZYY4uW/Vu0miy5YoWvbV345HauVvcAUnpRuhMMcqTcGOY2+w==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/escodegen": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/escodegen/-/escodegen-2.1.0.tgz",
+      "integrity": "sha512-2NlIDTwUWJN0mRPQOdtQBzbUHvdGY2P1VXSyU83Q3xKxM7WHX2Ql8dKq782Q9TgQUNOLEzEYu9bzLNj1q88I5w==",
+      "license": "BSD-2-Clause",
+      "dependencies": {
+        "esprima": "^4.0.1",
+        "estraverse": "^5.2.0",
+        "esutils": "^2.0.2"
+      },
+      "bin": {
+        "escodegen": "bin/escodegen.js",
+        "esgenerate": "bin/esgenerate.js"
+      },
+      "engines": {
+        "node": ">=6.0"
+      },
+      "optionalDependencies": {
+        "source-map": "~0.6.1"
+      }
+    },
+    "node_modules/esprima": {
+      "version": "4.0.1",
+      "resolved": "https://registry.npmjs.org/esprima/-/esprima-4.0.1.tgz",
+      "integrity": "sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A==",
+      "license": "BSD-2-Clause",
+      "bin": {
+        "esparse": "bin/esparse.js",
+        "esvalidate": "bin/esvalidate.js"
+      },
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/estraverse": {
+      "version": "5.3.0",
+      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
+      "integrity": "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
+      "license": "BSD-2-Clause",
+      "engines": {
+        "node": ">=4.0"
+      }
+    },
+    "node_modules/esutils": {
+      "version": "2.0.3",
+      "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
+      "integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
+      "license": "BSD-2-Clause",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/event-target-shim": {
+      "version": "5.0.1",
+      "resolved": "https://registry.npmjs.org/event-target-shim/-/event-target-shim-5.0.1.tgz",
+      "integrity": "sha512-i/2XbnSz/uxRCU6+NdVJgKWDTM427+MqYbkQzD321DuCQJUqOuJKIA0IM2+W2xtYHdKOmZ4dR6fExsd4SXL+WQ==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/events": {
+      "version": "3.3.0",
+      "resolved": "https://registry.npmjs.org/events/-/events-3.3.0.tgz",
+      "integrity": "sha512-mQw+2fkQbALzQ7V0MY0IqdnXNOeTtP4r0lN9z7AAawCXgqea7bDii20AYrIBrFd/Hx0M2Ocz6S111CaFkUcb0Q==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.8.x"
+      }
+    },
+    "node_modules/execa": {
+      "version": "5.1.1",
+      "resolved": "https://registry.npmjs.org/execa/-/execa-5.1.1.tgz",
+      "integrity": "sha512-8uSpZZocAZRBAPIEINJj3Lo9HyGitllczc27Eh5YYojjMFMn8yHMDMaUHE2Jqfq05D/wucwI4JGURyXt1vchyg==",
+      "license": "MIT",
+      "dependencies": {
+        "cross-spawn": "^7.0.3",
+        "get-stream": "^6.0.0",
+        "human-signals": "^2.1.0",
+        "is-stream": "^2.0.0",
+        "merge-stream": "^2.0.0",
+        "npm-run-path": "^4.0.1",
+        "onetime": "^5.1.2",
+        "signal-exit": "^3.0.3",
+        "strip-final-newline": "^2.0.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sindresorhus/execa?sponsor=1"
+      }
+    },
+    "node_modules/execa/node_modules/get-stream": {
+      "version": "6.0.1",
+      "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-6.0.1.tgz",
+      "integrity": "sha512-ts6Wi+2j3jQjqi70w5AlN8DFnkSwC+MqmxEzdEALB2qXZYV3X/b1CTfgPLGJNMeAWxdPfU8FO1ms3NUfaHCPYg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/execa/node_modules/signal-exit": {
+      "version": "3.0.7",
+      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
+      "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==",
+      "license": "ISC"
+    },
+    "node_modules/exit": {
+      "version": "0.1.2",
+      "resolved": "https://registry.npmjs.org/exit/-/exit-0.1.2.tgz",
+      "integrity": "sha512-Zk/eNKV2zbjpKzrsQ+n1G6poVbErQxJ0LBOJXaKZ1EViLzH+hrLu9cdXI4zw9dBQJslwBEpbQ2P1oS7nDxs6jQ==",
+      "engines": {
+        "node": ">= 0.8.0"
+      }
+    },
+    "node_modules/expect": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/expect/-/expect-29.7.0.tgz",
+      "integrity": "sha512-2Zks0hf1VLFYI1kbh0I5jP3KHHyCHpkfyHBzsSXRFgl/Bg9mWYfMW8oD+PdMPlEwy5HNsR9JutYy6pMeOh61nw==",
+      "license": "MIT",
+      "dependencies": {
+        "@jest/expect-utils": "^29.7.0",
+        "jest-get-type": "^29.6.3",
+        "jest-matcher-utils": "^29.7.0",
+        "jest-message-util": "^29.7.0",
+        "jest-util": "^29.7.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/extract-zip": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/extract-zip/-/extract-zip-2.0.1.tgz",
+      "integrity": "sha512-GDhU9ntwuKyGXdZBUgTIe+vXnWj0fppUEtMDL0+idd5Sta8TGpHssn/eusA9mrPr9qNDym6SxAYZjNvCn/9RBg==",
+      "license": "BSD-2-Clause",
+      "dependencies": {
+        "debug": "^4.1.1",
+        "get-stream": "^5.1.0",
+        "yauzl": "^2.10.0"
+      },
+      "bin": {
+        "extract-zip": "cli.js"
+      },
+      "engines": {
+        "node": ">= 10.17.0"
+      },
+      "optionalDependencies": {
+        "@types/yauzl": "^2.9.1"
+      }
+    },
+    "node_modules/fast-deep-equal": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-2.0.1.tgz",
+      "integrity": "sha512-bCK/2Z4zLidyB4ReuIsvALH6w31YfAQDmXMqMx6FyfHqvBxtjC0eRumeSu4Bs3XtXwpyIywtSTrVT99BxY1f9w==",
+      "license": "MIT"
+    },
+    "node_modules/fast-fifo": {
+      "version": "1.3.2",
+      "resolved": "https://registry.npmjs.org/fast-fifo/-/fast-fifo-1.3.2.tgz",
+      "integrity": "sha512-/d9sfos4yxzpwkDkuN7k2SqFKtYNmCTzgfEpz82x34IM9/zc8KGxQoXg1liNC/izpRM/MBdt44Nmx41ZWqk+FQ==",
+      "license": "MIT"
+    },
+    "node_modules/fast-json-stable-stringify": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
+      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==",
+      "license": "MIT"
+    },
+    "node_modules/fast-xml-parser": {
+      "version": "4.5.1",
+      "resolved": "https://registry.npmjs.org/fast-xml-parser/-/fast-xml-parser-4.5.1.tgz",
+      "integrity": "sha512-y655CeyUQ+jj7KBbYMc4FG01V8ZQqjN+gDYGJ50RtfsUB8iG9AmwmwoAgeKLJdmueKKMrH1RJ7yXHTSoczdv5w==",
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/NaturalIntelligence"
+        },
+        {
+          "type": "paypal",
+          "url": "https://paypal.me/naturalintelligence"
+        }
+      ],
+      "license": "MIT",
+      "dependencies": {
+        "strnum": "^1.0.5"
+      },
+      "bin": {
+        "fxparser": "src/cli/cli.js"
+      }
+    },
+    "node_modules/fb-watchman": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/fb-watchman/-/fb-watchman-2.0.2.tgz",
+      "integrity": "sha512-p5161BqbuCaSnB8jIbzQHOlpgsPmK5rJVDfDKO91Axs5NC1uu3HRQm6wt9cd9/+GtQQIO53JdGXXoyDpTAsgYA==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "bser": "2.1.1"
+      }
+    },
+    "node_modules/fd-slicer": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/fd-slicer/-/fd-slicer-1.1.0.tgz",
+      "integrity": "sha512-cE1qsB/VwyQozZ+q1dGxR8LBYNZeofhEdUNGSMbQD3Gw2lAzX9Zb3uIU6Ebc/Fmyjo9AWWfnn0AUCHqtevs/8g==",
+      "license": "MIT",
+      "dependencies": {
+        "pend": "~1.2.0"
+      }
+    },
+    "node_modules/fetch-blob": {
+      "version": "3.2.0",
+      "resolved": "https://registry.npmjs.org/fetch-blob/-/fetch-blob-3.2.0.tgz",
+      "integrity": "sha512-7yAQpD2UMJzLi1Dqv7qFYnPbaPx7ZfFK6PiIxQ4PfkGPyNyl2Ugx+a/umUonmKqjhM4DnfbMvdX6otXq83soQQ==",
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/jimmywarting"
+        },
+        {
+          "type": "paypal",
+          "url": "https://paypal.me/jimmywarting"
+        }
+      ],
+      "license": "MIT",
+      "dependencies": {
+        "node-domexception": "^1.0.0",
+        "web-streams-polyfill": "^3.0.3"
+      },
+      "engines": {
+        "node": "^12.20 || >= 14.13"
+      }
+    },
+    "node_modules/fill-range": {
+      "version": "7.1.1",
+      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz",
+      "integrity": "sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==",
+      "license": "MIT",
+      "dependencies": {
+        "to-regex-range": "^5.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/find-up": {
+      "version": "4.1.0",
+      "resolved": "https://registry.npmjs.org/find-up/-/find-up-4.1.0.tgz",
+      "integrity": "sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==",
+      "license": "MIT",
+      "dependencies": {
+        "locate-path": "^5.0.0",
+        "path-exists": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/foreground-child": {
+      "version": "3.3.0",
+      "resolved": "https://registry.npmjs.org/foreground-child/-/foreground-child-3.3.0.tgz",
+      "integrity": "sha512-Ld2g8rrAyMYFXBhEqMz8ZAHBi4J4uS1i/CxGMDnjyFWddMXLVcDp051DZfu+t7+ab7Wv6SMqpWmyFIj5UbfFvg==",
+      "license": "ISC",
+      "dependencies": {
+        "cross-spawn": "^7.0.0",
+        "signal-exit": "^4.0.1"
+      },
+      "engines": {
+        "node": ">=14"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/formdata-polyfill": {
+      "version": "4.0.10",
+      "resolved": "https://registry.npmjs.org/formdata-polyfill/-/formdata-polyfill-4.0.10.tgz",
+      "integrity": "sha512-buewHzMvYL29jdeQTVILecSaZKnt/RJWjoZCF5OW60Z67/GmSLBkOFM7qh1PI3zFNtJbaZL5eQu1vLfazOwj4g==",
+      "license": "MIT",
+      "dependencies": {
+        "fetch-blob": "^3.1.2"
+      },
+      "engines": {
+        "node": ">=12.20.0"
+      }
+    },
+    "node_modules/fs.realpath": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
+      "integrity": "sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==",
+      "license": "ISC"
+    },
+    "node_modules/fsevents": {
+      "version": "2.3.3",
+      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
+      "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
+      "hasInstallScript": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "darwin"
+      ],
+      "engines": {
+        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
+      }
+    },
+    "node_modules/function-bind": {
+      "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
+      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
+      "license": "MIT",
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/geckodriver": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/geckodriver/-/geckodriver-5.0.0.tgz",
+      "integrity": "sha512-vn7TtQ3b9VMJtVXsyWtQQl1fyBVFhQy7UvJF96kPuuJ0or5THH496AD3eUyaDD11+EqCxH9t6V+EP9soZQk4YQ==",
+      "hasInstallScript": true,
+      "license": "MIT",
+      "dependencies": {
+        "@wdio/logger": "^9.1.3",
+        "@zip.js/zip.js": "^2.7.53",
+        "decamelize": "^6.0.0",
+        "http-proxy-agent": "^7.0.2",
+        "https-proxy-agent": "^7.0.5",
+        "node-fetch": "^3.3.2",
+        "tar-fs": "^3.0.6",
+        "which": "^5.0.0"
+      },
+      "bin": {
+        "geckodriver": "bin/geckodriver.js"
+      },
+      "engines": {
+        "node": ">=18.0.0"
+      }
+    },
+    "node_modules/gensync": {
+      "version": "1.0.0-beta.2",
+      "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
+      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/get-caller-file": {
+      "version": "2.0.5",
+      "resolved": "https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz",
+      "integrity": "sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==",
+      "license": "ISC",
+      "engines": {
+        "node": "6.* || 8.* || >= 10.*"
+      }
+    },
+    "node_modules/get-package-type": {
+      "version": "0.1.0",
+      "resolved": "https://registry.npmjs.org/get-package-type/-/get-package-type-0.1.0.tgz",
+      "integrity": "sha512-pjzuKtY64GYfWizNAJ0fr9VqttZkNiK2iS430LtIHzjBEr6bX8Am2zm4sW4Ro5wjWW5cAlRL1qAMTcXbjNAO2Q==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=8.0.0"
+      }
+    },
+    "node_modules/get-port": {
+      "version": "7.1.0",
+      "resolved": "https://registry.npmjs.org/get-port/-/get-port-7.1.0.tgz",
+      "integrity": "sha512-QB9NKEeDg3xxVwCCwJQ9+xycaz6pBB6iQ76wiWMl1927n0Kir6alPiP+yuiICLLU4jpMe08dXfpebuQppFA2zw==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=16"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/get-stream": {
+      "version": "5.2.0",
+      "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-5.2.0.tgz",
+      "integrity": "sha512-nBF+F1rAZVCu/p7rjzgA+Yb4lfYXrpl7a6VmJrU8wF9I1CKvP/QwPNZHnOlwbTkY6dvtFIzFMSyQXbLoTQPRpA==",
+      "license": "MIT",
+      "dependencies": {
+        "pump": "^3.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/get-uri": {
+      "version": "6.0.4",
+      "resolved": "https://registry.npmjs.org/get-uri/-/get-uri-6.0.4.tgz",
+      "integrity": "sha512-E1b1lFFLvLgak2whF2xDBcOy6NLVGZBqqjJjsIhvopKfWWEi64pLVTWWehV8KlLerZkfNTA95sTe2OdJKm1OzQ==",
+      "license": "MIT",
+      "dependencies": {
+        "basic-ftp": "^5.0.2",
+        "data-uri-to-buffer": "^6.0.2",
+        "debug": "^4.3.4"
+      },
+      "engines": {
+        "node": ">= 14"
+      }
+    },
+    "node_modules/get-uri/node_modules/data-uri-to-buffer": {
+      "version": "6.0.2",
+      "resolved": "https://registry.npmjs.org/data-uri-to-buffer/-/data-uri-to-buffer-6.0.2.tgz",
+      "integrity": "sha512-7hvf7/GW8e86rW0ptuwS3OcBGDjIi6SZva7hCyWC0yYry2cOPmLIjXAUHI6DK2HsnwJd9ifmt57i8eV2n4YNpw==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 14"
+      }
+    },
+    "node_modules/glob": {
+      "version": "10.4.5",
+      "resolved": "https://registry.npmjs.org/glob/-/glob-10.4.5.tgz",
+      "integrity": "sha512-7Bv8RF0k6xjo7d4A/PxYLbUCfb6c+Vpd2/mB2yRDlew7Jb5hEXiCD9ibfO7wpk8i4sevK6DFny9h7EYbM3/sHg==",
+      "license": "ISC",
+      "dependencies": {
+        "foreground-child": "^3.1.0",
+        "jackspeak": "^3.1.2",
+        "minimatch": "^9.0.4",
+        "minipass": "^7.1.2",
+        "package-json-from-dist": "^1.0.0",
+        "path-scurry": "^1.11.1"
+      },
+      "bin": {
+        "glob": "dist/esm/bin.mjs"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/globals": {
+      "version": "11.12.0",
+      "resolved": "https://registry.npmjs.org/globals/-/globals-11.12.0.tgz",
+      "integrity": "sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/graceful-fs": {
+      "version": "4.2.11",
+      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.11.tgz",
+      "integrity": "sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==",
+      "license": "ISC"
+    },
+    "node_modules/grapheme-splitter": {
+      "version": "1.0.4",
+      "resolved": "https://registry.npmjs.org/grapheme-splitter/-/grapheme-splitter-1.0.4.tgz",
+      "integrity": "sha512-bzh50DW9kTPM00T8y4o8vQg89Di9oLJVLW/KaOGIXJWP/iqCN6WKYkbNOF04vFLJhwcpYUh9ydh/+5vpOqV4YQ==",
+      "license": "MIT"
+    },
+    "node_modules/has-flag": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
+      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/hasown": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
+      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
+      "license": "MIT",
+      "dependencies": {
+        "function-bind": "^1.1.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/html-escaper": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/html-escaper/-/html-escaper-2.0.2.tgz",
+      "integrity": "sha512-H2iMtd0I4Mt5eYiapRdIDjp+XzelXQ0tFE4JS7YFwFevXXMmOp9myNrUvCg0D6ws8iqkRPBfKHgbwig1SmlLfg==",
+      "license": "MIT"
+    },
+    "node_modules/htmlfy": {
+      "version": "0.5.1",
+      "resolved": "https://registry.npmjs.org/htmlfy/-/htmlfy-0.5.1.tgz",
+      "integrity": "sha512-nb66M9g0zKrvmR3kk/WOM+5tOT3DzO1yJ4yEJXsz2zfZ3gXiCTrlGvbc4lQzTZyylJj7at+XSVDxFvAVH6J6tQ==",
+      "license": "MIT"
+    },
+    "node_modules/htmlparser2": {
+      "version": "9.1.0",
+      "resolved": "https://registry.npmjs.org/htmlparser2/-/htmlparser2-9.1.0.tgz",
+      "integrity": "sha512-5zfg6mHUoaer/97TxnGpxmbR7zJtPwIYFMZ/H5ucTlPZhKvtum05yiPK3Mgai3a0DyVxv7qYqoweaEd2nrYQzQ==",
+      "funding": [
+        "https://github.com/fb55/htmlparser2?sponsor=1",
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/fb55"
+        }
+      ],
+      "license": "MIT",
+      "dependencies": {
+        "domelementtype": "^2.3.0",
+        "domhandler": "^5.0.3",
+        "domutils": "^3.1.0",
+        "entities": "^4.5.0"
+      }
+    },
+    "node_modules/http-proxy-agent": {
+      "version": "7.0.2",
+      "resolved": "https://registry.npmjs.org/http-proxy-agent/-/http-proxy-agent-7.0.2.tgz",
+      "integrity": "sha512-T1gkAiYYDWYx3V5Bmyu7HcfcvL7mUrTWiM6yOfa3PIphViJ/gFPbvidQ+veqSOHci/PxBcDabeUNCzpOODJZig==",
+      "license": "MIT",
+      "dependencies": {
+        "agent-base": "^7.1.0",
+        "debug": "^4.3.4"
+      },
+      "engines": {
+        "node": ">= 14"
+      }
+    },
+    "node_modules/https-proxy-agent": {
+      "version": "7.0.6",
+      "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-7.0.6.tgz",
+      "integrity": "sha512-vK9P5/iUfdl95AI+JVyUuIcVtd4ofvtrOr3HNtM2yxC9bnMbEdp3x01OhQNnjb8IJYi38VlTE3mBXwcfvywuSw==",
+      "license": "MIT",
+      "dependencies": {
+        "agent-base": "^7.1.2",
+        "debug": "4"
+      },
+      "engines": {
+        "node": ">= 14"
+      }
+    },
+    "node_modules/human-signals": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/human-signals/-/human-signals-2.1.0.tgz",
+      "integrity": "sha512-B4FFZ6q/T2jhhksgkbEW3HBvWIfDW85snkQgawt07S7J5QXTk6BkNV+0yAeZrM5QpMAdYlocGoljn0sJ/WQkFw==",
+      "license": "Apache-2.0",
+      "engines": {
+        "node": ">=10.17.0"
+      }
+    },
+    "node_modules/iconv-lite": {
+      "version": "0.6.3",
+      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.6.3.tgz",
+      "integrity": "sha512-4fCk79wshMdzMp2rH06qWrJE4iolqLhCUH+OiuIgU++RB0+94NlDL81atO7GX55uUKueo0txHNtvEyI6D7WdMw==",
+      "license": "MIT",
+      "dependencies": {
+        "safer-buffer": ">= 2.1.2 < 3.0.0"
+      },
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/ieee754": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/ieee754/-/ieee754-1.2.1.tgz",
+      "integrity": "sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA==",
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/feross"
+        },
+        {
+          "type": "patreon",
+          "url": "https://www.patreon.com/feross"
+        },
+        {
+          "type": "consulting",
+          "url": "https://feross.org/support"
+        }
+      ],
+      "license": "BSD-3-Clause"
+    },
+    "node_modules/immediate": {
+      "version": "3.0.6",
+      "resolved": "https://registry.npmjs.org/immediate/-/immediate-3.0.6.tgz",
+      "integrity": "sha512-XXOFtyqDjNDAQxVfYxuF7g9Il/IbWmmlQg2MYKOH8ExIT1qg6xc4zyS3HaEEATgs1btfzxq15ciUiY7gjSXRGQ==",
+      "license": "MIT"
+    },
+    "node_modules/import-local": {
+      "version": "3.2.0",
+      "resolved": "https://registry.npmjs.org/import-local/-/import-local-3.2.0.tgz",
+      "integrity": "sha512-2SPlun1JUPWoM6t3F0dw0FkCF/jWY8kttcY4f599GLTSjh2OCuuhdTkJQsEcZzBqbXZGKMK2OqW1oZsjtf/gQA==",
+      "license": "MIT",
+      "dependencies": {
+        "pkg-dir": "^4.2.0",
+        "resolve-cwd": "^3.0.0"
+      },
+      "bin": {
+        "import-local-fixture": "fixtures/cli.js"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/import-meta-resolve": {
+      "version": "4.1.0",
+      "resolved": "https://registry.npmjs.org/import-meta-resolve/-/import-meta-resolve-4.1.0.tgz",
+      "integrity": "sha512-I6fiaX09Xivtk+THaMfAwnA3MVA5Big1WHF1Dfx9hFuvNIWpXnorlkzhcQf6ehrqQiiZECRt1poOAkPmer3ruw==",
+      "license": "MIT",
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/wooorm"
+      }
+    },
+    "node_modules/imurmurhash": {
+      "version": "0.1.4",
+      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
+      "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.8.19"
+      }
+    },
+    "node_modules/inflight": {
+      "version": "1.0.6",
+      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
+      "integrity": "sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==",
+      "deprecated": "This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.",
+      "license": "ISC",
+      "dependencies": {
+        "once": "^1.3.0",
+        "wrappy": "1"
+      }
+    },
+    "node_modules/inherits": {
+      "version": "2.0.4",
+      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
+      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
+      "license": "ISC"
+    },
+    "node_modules/ip-address": {
+      "version": "9.0.5",
+      "resolved": "https://registry.npmjs.org/ip-address/-/ip-address-9.0.5.tgz",
+      "integrity": "sha512-zHtQzGojZXTwZTHQqra+ETKd4Sn3vgi7uBmlPoXVWZqYvuKmtI0l/VZTjqGmJY9x88GGOaZ9+G9ES8hC4T4X8g==",
+      "license": "MIT",
+      "dependencies": {
+        "jsbn": "1.1.0",
+        "sprintf-js": "^1.1.3"
+      },
+      "engines": {
+        "node": ">= 12"
+      }
+    },
+    "node_modules/is-arrayish": {
+      "version": "0.2.1",
+      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.2.1.tgz",
+      "integrity": "sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg==",
+      "license": "MIT"
+    },
+    "node_modules/is-core-module": {
+      "version": "2.16.1",
+      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.16.1.tgz",
+      "integrity": "sha512-UfoeMA6fIJ8wTYFEUjelnaGI67v6+N7qXJEvQuIGa99l4xsCruSYOVSQ0uPANn4dAzm8lkYPaKLrrijLq7x23w==",
+      "license": "MIT",
+      "dependencies": {
+        "hasown": "^2.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/is-fullwidth-code-point": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
+      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/is-generator-fn": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/is-generator-fn/-/is-generator-fn-2.1.0.tgz",
+      "integrity": "sha512-cTIB4yPYL/Grw0EaSzASzg6bBy9gqCofvWN8okThAYIxKJZC+udlRAmGbM0XLeniEJSs8uEgHPGuHSe1XsOLSQ==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/is-number": {
+      "version": "7.0.0",
+      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
+      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.12.0"
+      }
+    },
+    "node_modules/is-plain-obj": {
+      "version": "4.1.0",
+      "resolved": "https://registry.npmjs.org/is-plain-obj/-/is-plain-obj-4.1.0.tgz",
+      "integrity": "sha512-+Pgi+vMuUNkJyExiMBt5IlFoMyKnr5zhJ4Uspz58WOhBF5QoIZkFyNHIbBAtHwzVAgk5RtndVNsDRN61/mmDqg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/is-stream": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-2.0.1.tgz",
+      "integrity": "sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/isarray": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz",
+      "integrity": "sha512-VLghIWNM6ELQzo7zwmcg0NmTVyWKYjvIeM83yjp0wRDTmUnrM678fQbcKBo6n2CJEF0szoG//ytg+TKla89ALQ==",
+      "license": "MIT"
+    },
+    "node_modules/isexe": {
+      "version": "3.1.1",
+      "resolved": "https://registry.npmjs.org/isexe/-/isexe-3.1.1.tgz",
+      "integrity": "sha512-LpB/54B+/2J5hqQ7imZHfdU31OlgQqx7ZicVlkm9kzg9/w8GKLEcFfJl/t7DCEDueOyBAD6zCCwTO6Fzs0NoEQ==",
+      "license": "ISC",
+      "engines": {
+        "node": ">=16"
+      }
+    },
+    "node_modules/istanbul-lib-coverage": {
+      "version": "3.2.2",
+      "resolved": "https://registry.npmjs.org/istanbul-lib-coverage/-/istanbul-lib-coverage-3.2.2.tgz",
+      "integrity": "sha512-O8dpsF+r0WV/8MNRKfnmrtCWhuKjxrq2w+jpzBL5UZKTi2LeVWnWOmWRxFlesJONmc+wLAGvKQZEOanko0LFTg==",
+      "license": "BSD-3-Clause",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/istanbul-lib-instrument": {
+      "version": "6.0.3",
+      "resolved": "https://registry.npmjs.org/istanbul-lib-instrument/-/istanbul-lib-instrument-6.0.3.tgz",
+      "integrity": "sha512-Vtgk7L/R2JHyyGW07spoFlB8/lpjiOLTjMdms6AFMraYt3BaJauod/NGrfnVG/y4Ix1JEuMRPDPEj2ua+zz1/Q==",
+      "license": "BSD-3-Clause",
+      "dependencies": {
+        "@babel/core": "^7.23.9",
+        "@babel/parser": "^7.23.9",
+        "@istanbuljs/schema": "^0.1.3",
+        "istanbul-lib-coverage": "^3.2.0",
+        "semver": "^7.5.4"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/istanbul-lib-report": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/istanbul-lib-report/-/istanbul-lib-report-3.0.1.tgz",
+      "integrity": "sha512-GCfE1mtsHGOELCU8e/Z7YWzpmybrx/+dSTfLrvY8qRmaY6zXTKWn6WQIjaAFw069icm6GVMNkgu0NzI4iPZUNw==",
+      "license": "BSD-3-Clause",
+      "dependencies": {
+        "istanbul-lib-coverage": "^3.0.0",
+        "make-dir": "^4.0.0",
+        "supports-color": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/istanbul-lib-source-maps": {
+      "version": "4.0.1",
+      "resolved": "https://registry.npmjs.org/istanbul-lib-source-maps/-/istanbul-lib-source-maps-4.0.1.tgz",
+      "integrity": "sha512-n3s8EwkdFIJCG3BPKBYvskgXGoy88ARzvegkitk60NxRdwltLOTaH7CUiMRXvwYorl0Q712iEjcWB+fK/MrWVw==",
+      "license": "BSD-3-Clause",
+      "dependencies": {
+        "debug": "^4.1.1",
+        "istanbul-lib-coverage": "^3.0.0",
+        "source-map": "^0.6.1"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/istanbul-reports": {
+      "version": "3.1.7",
+      "resolved": "https://registry.npmjs.org/istanbul-reports/-/istanbul-reports-3.1.7.tgz",
+      "integrity": "sha512-BewmUXImeuRk2YY0PVbxgKAysvhRPUQE0h5QRM++nVWyubKGV0l8qQ5op8+B2DOmwSe63Jivj0BjkPQVf8fP5g==",
+      "license": "BSD-3-Clause",
+      "dependencies": {
+        "html-escaper": "^2.0.0",
+        "istanbul-lib-report": "^3.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/jackspeak": {
+      "version": "3.4.3",
+      "resolved": "https://registry.npmjs.org/jackspeak/-/jackspeak-3.4.3.tgz",
+      "integrity": "sha512-OGlZQpz2yfahA/Rd1Y8Cd9SIEsqvXkLVoSw/cgwhnhFMDbsQFeZYoJJ7bIZBS9BcamUW96asq/npPWugM+RQBw==",
+      "license": "BlueOak-1.0.0",
+      "dependencies": {
+        "@isaacs/cliui": "^8.0.2"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      },
+      "optionalDependencies": {
+        "@pkgjs/parseargs": "^0.11.0"
+      }
+    },
+    "node_modules/jest": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest/-/jest-29.7.0.tgz",
+      "integrity": "sha512-NIy3oAFp9shda19hy4HK0HRTWKtPJmGdnvywu01nOqNC2vZg+Z+fvJDxpMQA88eb2I9EcafcdjYgsDthnYTvGw==",
+      "license": "MIT",
+      "dependencies": {
+        "@jest/core": "^29.7.0",
+        "@jest/types": "^29.6.3",
+        "import-local": "^3.0.2",
+        "jest-cli": "^29.7.0"
+      },
+      "bin": {
+        "jest": "bin/jest.js"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      },
+      "peerDependencies": {
+        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
+      },
+      "peerDependenciesMeta": {
+        "node-notifier": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/jest-changed-files": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-changed-files/-/jest-changed-files-29.7.0.tgz",
+      "integrity": "sha512-fEArFiwf1BpQ+4bXSprcDc3/x4HSzL4al2tozwVpDFpsxALjLYdyiIK4e5Vz66GQJIbXJ82+35PtysofptNX2w==",
+      "license": "MIT",
+      "dependencies": {
+        "execa": "^5.0.0",
+        "jest-util": "^29.7.0",
+        "p-limit": "^3.1.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/jest-circus": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-circus/-/jest-circus-29.7.0.tgz",
+      "integrity": "sha512-3E1nCMgipcTkCocFwM90XXQab9bS+GMsjdpmPrlelaxwD93Ad8iVEjX/vvHPdLPnFf+L40u+5+iutRdA1N9myw==",
+      "license": "MIT",
+      "dependencies": {
+        "@jest/environment": "^29.7.0",
+        "@jest/expect": "^29.7.0",
+        "@jest/test-result": "^29.7.0",
+        "@jest/types": "^29.6.3",
+        "@types/node": "*",
+        "chalk": "^4.0.0",
+        "co": "^4.6.0",
+        "dedent": "^1.0.0",
+        "is-generator-fn": "^2.0.0",
+        "jest-each": "^29.7.0",
+        "jest-matcher-utils": "^29.7.0",
+        "jest-message-util": "^29.7.0",
+        "jest-runtime": "^29.7.0",
+        "jest-snapshot": "^29.7.0",
+        "jest-util": "^29.7.0",
+        "p-limit": "^3.1.0",
+        "pretty-format": "^29.7.0",
+        "pure-rand": "^6.0.0",
+        "slash": "^3.0.0",
+        "stack-utils": "^2.0.3"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/jest-circus/node_modules/ansi-styles": {
+      "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
+      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
+      "license": "MIT",
+      "dependencies": {
+        "color-convert": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/jest-circus/node_modules/chalk": {
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
+      }
+    },
+    "node_modules/jest-cli": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-cli/-/jest-cli-29.7.0.tgz",
+      "integrity": "sha512-OVVobw2IubN/GSYsxETi+gOe7Ka59EFMR/twOU3Jb2GnKKeMGJB5SGUUrEz3SFVmJASUdZUzy83sLNNQ2gZslg==",
+      "license": "MIT",
+      "dependencies": {
+        "@jest/core": "^29.7.0",
+        "@jest/test-result": "^29.7.0",
+        "@jest/types": "^29.6.3",
+        "chalk": "^4.0.0",
+        "create-jest": "^29.7.0",
+        "exit": "^0.1.2",
+        "import-local": "^3.0.2",
+        "jest-config": "^29.7.0",
+        "jest-util": "^29.7.0",
+        "jest-validate": "^29.7.0",
+        "yargs": "^17.3.1"
+      },
+      "bin": {
+        "jest": "bin/jest.js"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      },
+      "peerDependencies": {
+        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
+      },
+      "peerDependenciesMeta": {
+        "node-notifier": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/jest-cli/node_modules/ansi-styles": {
+      "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
+      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
+      "license": "MIT",
+      "dependencies": {
+        "color-convert": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/jest-cli/node_modules/chalk": {
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
+      }
+    },
+    "node_modules/jest-config": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-config/-/jest-config-29.7.0.tgz",
+      "integrity": "sha512-uXbpfeQ7R6TZBqI3/TxCU4q4ttk3u0PJeC+E0zbfSoSjq6bJ7buBPxzQPL0ifrkY4DNu4JUdk0ImlBUYi840eQ==",
+      "license": "MIT",
+      "dependencies": {
+        "@babel/core": "^7.11.6",
+        "@jest/test-sequencer": "^29.7.0",
+        "@jest/types": "^29.6.3",
+        "babel-jest": "^29.7.0",
+        "chalk": "^4.0.0",
+        "ci-info": "^3.2.0",
+        "deepmerge": "^4.2.2",
+        "glob": "^7.1.3",
+        "graceful-fs": "^4.2.9",
+        "jest-circus": "^29.7.0",
+        "jest-environment-node": "^29.7.0",
+        "jest-get-type": "^29.6.3",
+        "jest-regex-util": "^29.6.3",
+        "jest-resolve": "^29.7.0",
+        "jest-runner": "^29.7.0",
+        "jest-util": "^29.7.0",
+        "jest-validate": "^29.7.0",
+        "micromatch": "^4.0.4",
+        "parse-json": "^5.2.0",
+        "pretty-format": "^29.7.0",
+        "slash": "^3.0.0",
+        "strip-json-comments": "^3.1.1"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      },
+      "peerDependencies": {
+        "@types/node": "*",
+        "ts-node": ">=9.0.0"
+      },
+      "peerDependenciesMeta": {
+        "@types/node": {
+          "optional": true
+        },
+        "ts-node": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/jest-config/node_modules/ansi-styles": {
+      "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
+      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
+      "license": "MIT",
+      "dependencies": {
+        "color-convert": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/jest-config/node_modules/brace-expansion": {
+      "version": "1.1.11",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
+      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
+      "license": "MIT",
+      "dependencies": {
+        "balanced-match": "^1.0.0",
+        "concat-map": "0.0.1"
+      }
+    },
+    "node_modules/jest-config/node_modules/chalk": {
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
+      }
+    },
+    "node_modules/jest-config/node_modules/glob": {
+      "version": "7.2.3",
+      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
+      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
+      "deprecated": "Glob versions prior to v9 are no longer supported",
+      "license": "ISC",
+      "dependencies": {
+        "fs.realpath": "^1.0.0",
+        "inflight": "^1.0.4",
+        "inherits": "2",
+        "minimatch": "^3.1.1",
+        "once": "^1.3.0",
+        "path-is-absolute": "^1.0.0"
+      },
+      "engines": {
+        "node": "*"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/jest-config/node_modules/minimatch": {
+      "version": "3.1.2",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
+      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
+      "license": "ISC",
+      "dependencies": {
+        "brace-expansion": "^1.1.7"
+      },
+      "engines": {
+        "node": "*"
+      }
+    },
+    "node_modules/jest-diff": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-diff/-/jest-diff-29.7.0.tgz",
+      "integrity": "sha512-LMIgiIrhigmPrs03JHpxUh2yISK3vLFPkAodPeo0+BuF7wA2FoQbkEg1u8gBYBThncu7e1oEDUfIXVuTqLRUjw==",
+      "license": "MIT",
+      "dependencies": {
+        "chalk": "^4.0.0",
+        "diff-sequences": "^29.6.3",
+        "jest-get-type": "^29.6.3",
+        "pretty-format": "^29.7.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/jest-diff/node_modules/ansi-styles": {
+      "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
+      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
+      "license": "MIT",
+      "dependencies": {
+        "color-convert": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/jest-diff/node_modules/chalk": {
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
+      }
+    },
+    "node_modules/jest-docblock": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-docblock/-/jest-docblock-29.7.0.tgz",
+      "integrity": "sha512-q617Auw3A612guyaFgsbFeYpNP5t2aoUNLwBUbc/0kD1R4t9ixDbyFTHd1nok4epoVFpr7PmeWHrhvuV3XaJ4g==",
+      "license": "MIT",
+      "dependencies": {
+        "detect-newline": "^3.0.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/jest-each": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-each/-/jest-each-29.7.0.tgz",
+      "integrity": "sha512-gns+Er14+ZrEoC5fhOfYCY1LOHHr0TI+rQUHZS8Ttw2l7gl+80eHc/gFf2Ktkw0+SIACDTeWvpFcv3B04VembQ==",
+      "license": "MIT",
+      "dependencies": {
+        "@jest/types": "^29.6.3",
+        "chalk": "^4.0.0",
+        "jest-get-type": "^29.6.3",
+        "jest-util": "^29.7.0",
+        "pretty-format": "^29.7.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/jest-each/node_modules/ansi-styles": {
+      "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
+      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
+      "license": "MIT",
+      "dependencies": {
+        "color-convert": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/jest-each/node_modules/chalk": {
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
+      }
+    },
+    "node_modules/jest-environment-node": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-environment-node/-/jest-environment-node-29.7.0.tgz",
+      "integrity": "sha512-DOSwCRqXirTOyheM+4d5YZOrWcdu0LNZ87ewUoywbcb2XR4wKgqiG8vNeYwhjFMbEkfju7wx2GYH0P2gevGvFw==",
+      "license": "MIT",
+      "dependencies": {
+        "@jest/environment": "^29.7.0",
+        "@jest/fake-timers": "^29.7.0",
+        "@jest/types": "^29.6.3",
+        "@types/node": "*",
+        "jest-mock": "^29.7.0",
+        "jest-util": "^29.7.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/jest-get-type": {
+      "version": "29.6.3",
+      "resolved": "https://registry.npmjs.org/jest-get-type/-/jest-get-type-29.6.3.tgz",
+      "integrity": "sha512-zrteXnqYxfQh7l5FHyL38jL39di8H8rHoecLH3JNxH3BwOrBsNeabdap5e0I23lD4HHI8W5VFBZqG4Eaq5LNcw==",
+      "license": "MIT",
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/jest-haste-map": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-haste-map/-/jest-haste-map-29.7.0.tgz",
+      "integrity": "sha512-fP8u2pyfqx0K1rGn1R9pyE0/KTn+G7PxktWidOBTqFPLYX0b9ksaMFkhK5vrS3DVun09pckLdlx90QthlW7AmA==",
+      "license": "MIT",
+      "dependencies": {
+        "@jest/types": "^29.6.3",
+        "@types/graceful-fs": "^4.1.3",
+        "@types/node": "*",
+        "anymatch": "^3.0.3",
+        "fb-watchman": "^2.0.0",
+        "graceful-fs": "^4.2.9",
+        "jest-regex-util": "^29.6.3",
+        "jest-util": "^29.7.0",
+        "jest-worker": "^29.7.0",
+        "micromatch": "^4.0.4",
+        "walker": "^1.0.8"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      },
+      "optionalDependencies": {
+        "fsevents": "^2.3.2"
+      }
+    },
+    "node_modules/jest-leak-detector": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-leak-detector/-/jest-leak-detector-29.7.0.tgz",
+      "integrity": "sha512-kYA8IJcSYtST2BY9I+SMC32nDpBT3J2NvWJx8+JCuCdl/CR1I4EKUJROiP8XtCcxqgTTBGJNdbB1A8XRKbTetw==",
+      "license": "MIT",
+      "dependencies": {
+        "jest-get-type": "^29.6.3",
+        "pretty-format": "^29.7.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/jest-matcher-utils": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-matcher-utils/-/jest-matcher-utils-29.7.0.tgz",
+      "integrity": "sha512-sBkD+Xi9DtcChsI3L3u0+N0opgPYnCRPtGcQYrgXmR+hmt/fYfWAL0xRXYU8eWOdfuLgBe0YCW3AFtnRLagq/g==",
+      "license": "MIT",
+      "dependencies": {
+        "chalk": "^4.0.0",
+        "jest-diff": "^29.7.0",
+        "jest-get-type": "^29.6.3",
+        "pretty-format": "^29.7.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/jest-matcher-utils/node_modules/ansi-styles": {
+      "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
+      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
+      "license": "MIT",
+      "dependencies": {
+        "color-convert": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/jest-matcher-utils/node_modules/chalk": {
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
+      }
+    },
+    "node_modules/jest-message-util": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-message-util/-/jest-message-util-29.7.0.tgz",
+      "integrity": "sha512-GBEV4GRADeP+qtB2+6u61stea8mGcOT4mCtrYISZwfu9/ISHFJ/5zOMXYbpBE9RsS5+Gb63DW4FgmnKJ79Kf6w==",
+      "license": "MIT",
+      "dependencies": {
+        "@babel/code-frame": "^7.12.13",
+        "@jest/types": "^29.6.3",
+        "@types/stack-utils": "^2.0.0",
+        "chalk": "^4.0.0",
+        "graceful-fs": "^4.2.9",
+        "micromatch": "^4.0.4",
+        "pretty-format": "^29.7.0",
+        "slash": "^3.0.0",
+        "stack-utils": "^2.0.3"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/jest-message-util/node_modules/ansi-styles": {
+      "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
+      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
+      "license": "MIT",
+      "dependencies": {
+        "color-convert": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/jest-message-util/node_modules/chalk": {
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
+      }
+    },
+    "node_modules/jest-mock": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-mock/-/jest-mock-29.7.0.tgz",
+      "integrity": "sha512-ITOMZn+UkYS4ZFh83xYAOzWStloNzJFO2s8DWrE4lhtGD+AorgnbkiKERe4wQVBydIGPx059g6riW5Btp6Llnw==",
+      "license": "MIT",
+      "dependencies": {
+        "@jest/types": "^29.6.3",
+        "@types/node": "*",
+        "jest-util": "^29.7.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/jest-pnp-resolver": {
+      "version": "1.2.3",
+      "resolved": "https://registry.npmjs.org/jest-pnp-resolver/-/jest-pnp-resolver-1.2.3.tgz",
+      "integrity": "sha512-+3NpwQEnRoIBtx4fyhblQDPgJI0H1IEIkX7ShLUjPGA7TtUTvI1oiKi3SR4oBR0hQhQR80l4WAe5RrXBwWMA8w==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      },
+      "peerDependencies": {
+        "jest-resolve": "*"
+      },
+      "peerDependenciesMeta": {
+        "jest-resolve": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/jest-regex-util": {
+      "version": "29.6.3",
+      "resolved": "https://registry.npmjs.org/jest-regex-util/-/jest-regex-util-29.6.3.tgz",
+      "integrity": "sha512-KJJBsRCyyLNWCNBOvZyRDnAIfUiRJ8v+hOBQYGn8gDyF3UegwiP4gwRR3/SDa42g1YbVycTidUF3rKjyLFDWbg==",
+      "license": "MIT",
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/jest-resolve": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-resolve/-/jest-resolve-29.7.0.tgz",
+      "integrity": "sha512-IOVhZSrg+UvVAshDSDtHyFCCBUl/Q3AAJv8iZ6ZjnZ74xzvwuzLXid9IIIPgTnY62SJjfuupMKZsZQRsCvxEgA==",
+      "license": "MIT",
+      "dependencies": {
+        "chalk": "^4.0.0",
+        "graceful-fs": "^4.2.9",
+        "jest-haste-map": "^29.7.0",
+        "jest-pnp-resolver": "^1.2.2",
+        "jest-util": "^29.7.0",
+        "jest-validate": "^29.7.0",
+        "resolve": "^1.20.0",
+        "resolve.exports": "^2.0.0",
+        "slash": "^3.0.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/jest-resolve-dependencies": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-resolve-dependencies/-/jest-resolve-dependencies-29.7.0.tgz",
+      "integrity": "sha512-un0zD/6qxJ+S0et7WxeI3H5XSe9lTBBR7bOHCHXkKR6luG5mwDDlIzVQ0V5cZCuoTgEdcdwzTghYkTWfubi+nA==",
+      "license": "MIT",
+      "dependencies": {
+        "jest-regex-util": "^29.6.3",
+        "jest-snapshot": "^29.7.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/jest-resolve/node_modules/ansi-styles": {
+      "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
+      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
+      "license": "MIT",
+      "dependencies": {
+        "color-convert": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/jest-resolve/node_modules/chalk": {
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
+      }
+    },
+    "node_modules/jest-runner": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-runner/-/jest-runner-29.7.0.tgz",
+      "integrity": "sha512-fsc4N6cPCAahybGBfTRcq5wFR6fpLznMg47sY5aDpsoejOcVYFb07AHuSnR0liMcPTgBsA3ZJL6kFOjPdoNipQ==",
+      "license": "MIT",
+      "dependencies": {
+        "@jest/console": "^29.7.0",
+        "@jest/environment": "^29.7.0",
+        "@jest/test-result": "^29.7.0",
+        "@jest/transform": "^29.7.0",
+        "@jest/types": "^29.6.3",
+        "@types/node": "*",
+        "chalk": "^4.0.0",
+        "emittery": "^0.13.1",
+        "graceful-fs": "^4.2.9",
+        "jest-docblock": "^29.7.0",
+        "jest-environment-node": "^29.7.0",
+        "jest-haste-map": "^29.7.0",
+        "jest-leak-detector": "^29.7.0",
+        "jest-message-util": "^29.7.0",
+        "jest-resolve": "^29.7.0",
+        "jest-runtime": "^29.7.0",
+        "jest-util": "^29.7.0",
+        "jest-watcher": "^29.7.0",
+        "jest-worker": "^29.7.0",
+        "p-limit": "^3.1.0",
+        "source-map-support": "0.5.13"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/jest-runner/node_modules/ansi-styles": {
+      "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
+      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
+      "license": "MIT",
+      "dependencies": {
+        "color-convert": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/jest-runner/node_modules/chalk": {
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
+      }
+    },
+    "node_modules/jest-runtime": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-runtime/-/jest-runtime-29.7.0.tgz",
+      "integrity": "sha512-gUnLjgwdGqW7B4LvOIkbKs9WGbn+QLqRQQ9juC6HndeDiezIwhDP+mhMwHWCEcfQ5RUXa6OPnFF8BJh5xegwwQ==",
+      "license": "MIT",
+      "dependencies": {
+        "@jest/environment": "^29.7.0",
+        "@jest/fake-timers": "^29.7.0",
+        "@jest/globals": "^29.7.0",
+        "@jest/source-map": "^29.6.3",
+        "@jest/test-result": "^29.7.0",
+        "@jest/transform": "^29.7.0",
+        "@jest/types": "^29.6.3",
+        "@types/node": "*",
+        "chalk": "^4.0.0",
+        "cjs-module-lexer": "^1.0.0",
+        "collect-v8-coverage": "^1.0.0",
+        "glob": "^7.1.3",
+        "graceful-fs": "^4.2.9",
+        "jest-haste-map": "^29.7.0",
+        "jest-message-util": "^29.7.0",
+        "jest-mock": "^29.7.0",
+        "jest-regex-util": "^29.6.3",
+        "jest-resolve": "^29.7.0",
+        "jest-snapshot": "^29.7.0",
+        "jest-util": "^29.7.0",
+        "slash": "^3.0.0",
+        "strip-bom": "^4.0.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/jest-runtime/node_modules/ansi-styles": {
+      "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
+      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
+      "license": "MIT",
+      "dependencies": {
+        "color-convert": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/jest-runtime/node_modules/brace-expansion": {
+      "version": "1.1.11",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
+      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
+      "license": "MIT",
+      "dependencies": {
+        "balanced-match": "^1.0.0",
+        "concat-map": "0.0.1"
+      }
+    },
+    "node_modules/jest-runtime/node_modules/chalk": {
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
+      }
+    },
+    "node_modules/jest-runtime/node_modules/glob": {
+      "version": "7.2.3",
+      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
+      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
+      "deprecated": "Glob versions prior to v9 are no longer supported",
+      "license": "ISC",
+      "dependencies": {
+        "fs.realpath": "^1.0.0",
+        "inflight": "^1.0.4",
+        "inherits": "2",
+        "minimatch": "^3.1.1",
+        "once": "^1.3.0",
+        "path-is-absolute": "^1.0.0"
+      },
+      "engines": {
+        "node": "*"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/jest-runtime/node_modules/minimatch": {
+      "version": "3.1.2",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
+      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
+      "license": "ISC",
+      "dependencies": {
+        "brace-expansion": "^1.1.7"
+      },
+      "engines": {
+        "node": "*"
+      }
+    },
+    "node_modules/jest-snapshot": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-snapshot/-/jest-snapshot-29.7.0.tgz",
+      "integrity": "sha512-Rm0BMWtxBcioHr1/OX5YCP8Uov4riHvKPknOGs804Zg9JGZgmIBkbtlxJC/7Z4msKYVbIJtfU+tKb8xlYNfdkw==",
+      "license": "MIT",
+      "dependencies": {
+        "@babel/core": "^7.11.6",
+        "@babel/generator": "^7.7.2",
+        "@babel/plugin-syntax-jsx": "^7.7.2",
+        "@babel/plugin-syntax-typescript": "^7.7.2",
+        "@babel/types": "^7.3.3",
+        "@jest/expect-utils": "^29.7.0",
+        "@jest/transform": "^29.7.0",
+        "@jest/types": "^29.6.3",
+        "babel-preset-current-node-syntax": "^1.0.0",
+        "chalk": "^4.0.0",
+        "expect": "^29.7.0",
+        "graceful-fs": "^4.2.9",
+        "jest-diff": "^29.7.0",
+        "jest-get-type": "^29.6.3",
+        "jest-matcher-utils": "^29.7.0",
+        "jest-message-util": "^29.7.0",
+        "jest-util": "^29.7.0",
+        "natural-compare": "^1.4.0",
+        "pretty-format": "^29.7.0",
+        "semver": "^7.5.3"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/jest-snapshot/node_modules/ansi-styles": {
+      "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
+      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
+      "license": "MIT",
+      "dependencies": {
+        "color-convert": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/jest-snapshot/node_modules/chalk": {
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
+      }
+    },
+    "node_modules/jest-util": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-util/-/jest-util-29.7.0.tgz",
+      "integrity": "sha512-z6EbKajIpqGKU56y5KBUgy1dt1ihhQJgWzUlZHArA/+X2ad7Cb5iF+AK1EWVL/Bo7Rz9uurpqw6SiBCefUbCGA==",
+      "license": "MIT",
+      "dependencies": {
+        "@jest/types": "^29.6.3",
+        "@types/node": "*",
+        "chalk": "^4.0.0",
+        "ci-info": "^3.2.0",
+        "graceful-fs": "^4.2.9",
+        "picomatch": "^2.2.3"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/jest-util/node_modules/ansi-styles": {
+      "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
+      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
+      "license": "MIT",
+      "dependencies": {
+        "color-convert": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/jest-util/node_modules/chalk": {
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
+      }
+    },
+    "node_modules/jest-validate": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-validate/-/jest-validate-29.7.0.tgz",
+      "integrity": "sha512-ZB7wHqaRGVw/9hST/OuFUReG7M8vKeq0/J2egIGLdvjHCmYqGARhzXmtgi+gVeZ5uXFF219aOc3Ls2yLg27tkw==",
+      "license": "MIT",
+      "dependencies": {
+        "@jest/types": "^29.6.3",
+        "camelcase": "^6.2.0",
+        "chalk": "^4.0.0",
+        "jest-get-type": "^29.6.3",
+        "leven": "^3.1.0",
+        "pretty-format": "^29.7.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/jest-validate/node_modules/ansi-styles": {
+      "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
+      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
+      "license": "MIT",
+      "dependencies": {
+        "color-convert": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/jest-validate/node_modules/camelcase": {
+      "version": "6.3.0",
+      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-6.3.0.tgz",
+      "integrity": "sha512-Gmy6FhYlCY7uOElZUSbxo2UCDH8owEk996gkbrpsgGtrJLM3J7jGxl9Ic7Qwwj4ivOE5AWZWRMecDdF7hqGjFA==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/jest-validate/node_modules/chalk": {
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
+      }
+    },
+    "node_modules/jest-watcher": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-watcher/-/jest-watcher-29.7.0.tgz",
+      "integrity": "sha512-49Fg7WXkU3Vl2h6LbLtMQ/HyB6rXSIX7SqvBLQmssRBGN9I0PNvPmAmCWSOY6SOvrjhI/F7/bGAv9RtnsPA03g==",
+      "license": "MIT",
+      "dependencies": {
+        "@jest/test-result": "^29.7.0",
+        "@jest/types": "^29.6.3",
+        "@types/node": "*",
+        "ansi-escapes": "^4.2.1",
+        "chalk": "^4.0.0",
+        "emittery": "^0.13.1",
+        "jest-util": "^29.7.0",
+        "string-length": "^4.0.1"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/jest-watcher/node_modules/ansi-styles": {
+      "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
+      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
+      "license": "MIT",
+      "dependencies": {
+        "color-convert": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/jest-watcher/node_modules/chalk": {
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
+      }
+    },
+    "node_modules/jest-worker": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-worker/-/jest-worker-29.7.0.tgz",
+      "integrity": "sha512-eIz2msL/EzL9UFTFFx7jBTkeZfku0yUAyZZZmJ93H2TYEiroIx2PQjEXcwYtYl8zXCxb+PAmA2hLIt/6ZEkPHw==",
+      "license": "MIT",
+      "dependencies": {
+        "@types/node": "*",
+        "jest-util": "^29.7.0",
+        "merge-stream": "^2.0.0",
+        "supports-color": "^8.0.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/jest-worker/node_modules/supports-color": {
+      "version": "8.1.1",
+      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-8.1.1.tgz",
+      "integrity": "sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==",
+      "license": "MIT",
+      "dependencies": {
+        "has-flag": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/supports-color?sponsor=1"
+      }
+    },
+    "node_modules/js-tokens": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
+      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
+      "license": "MIT"
+    },
+    "node_modules/js-yaml": {
+      "version": "3.14.1",
+      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-3.14.1.tgz",
+      "integrity": "sha512-okMH7OXXJ7YrN9Ok3/SXrnu4iX9yOk+25nqX4imS2npuvTYDmo/QEZoqwZkYaIDk3jVvBOTOIEgEhaLOynBS9g==",
+      "license": "MIT",
+      "dependencies": {
+        "argparse": "^1.0.7",
+        "esprima": "^4.0.0"
+      },
+      "bin": {
+        "js-yaml": "bin/js-yaml.js"
+      }
+    },
+    "node_modules/jsbn": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/jsbn/-/jsbn-1.1.0.tgz",
+      "integrity": "sha512-4bYVV3aAMtDTTu4+xsDYa6sy9GyJ69/amsu9sYF2zqjiEoZA5xJi3BrfX3uY+/IekIu7MwdObdbDWpoZdBv3/A==",
+      "license": "MIT"
+    },
+    "node_modules/jsesc": {
+      "version": "3.1.0",
+      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-3.1.0.tgz",
+      "integrity": "sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA==",
+      "license": "MIT",
+      "bin": {
+        "jsesc": "bin/jsesc"
+      },
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/json-parse-even-better-errors": {
+      "version": "2.3.1",
+      "resolved": "https://registry.npmjs.org/json-parse-even-better-errors/-/json-parse-even-better-errors-2.3.1.tgz",
+      "integrity": "sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==",
+      "license": "MIT"
+    },
+    "node_modules/json5": {
+      "version": "2.2.3",
+      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
+      "integrity": "sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==",
+      "license": "MIT",
+      "bin": {
+        "json5": "lib/cli.js"
+      },
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/jszip": {
+      "version": "3.10.1",
+      "resolved": "https://registry.npmjs.org/jszip/-/jszip-3.10.1.tgz",
+      "integrity": "sha512-xXDvecyTpGLrqFrvkrUSoxxfJI5AH7U8zxxtVclpsUtMCq4JQ290LY8AW5c7Ggnr/Y/oK+bQMbqK2qmtk3pN4g==",
+      "license": "(MIT OR GPL-3.0-or-later)",
+      "dependencies": {
+        "lie": "~3.3.0",
+        "pako": "~1.0.2",
+        "readable-stream": "~2.3.6",
+        "setimmediate": "^1.0.5"
+      }
+    },
+    "node_modules/jszip/node_modules/readable-stream": {
+      "version": "2.3.8",
+      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.8.tgz",
+      "integrity": "sha512-8p0AUk4XODgIewSi0l8Epjs+EVnWiK7NoDIEGU0HhE7+ZyY8D1IMY7odu5lRrFXGg71L15KG8QrPmum45RTtdA==",
+      "license": "MIT",
+      "dependencies": {
+        "core-util-is": "~1.0.0",
+        "inherits": "~2.0.3",
+        "isarray": "~1.0.0",
+        "process-nextick-args": "~2.0.0",
+        "safe-buffer": "~5.1.1",
+        "string_decoder": "~1.1.1",
+        "util-deprecate": "~1.0.1"
+      }
+    },
+    "node_modules/jszip/node_modules/safe-buffer": {
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
+      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==",
+      "license": "MIT"
+    },
+    "node_modules/jszip/node_modules/string_decoder": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz",
+      "integrity": "sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==",
+      "license": "MIT",
+      "dependencies": {
+        "safe-buffer": "~5.1.0"
+      }
+    },
+    "node_modules/kleur": {
+      "version": "3.0.3",
+      "resolved": "https://registry.npmjs.org/kleur/-/kleur-3.0.3.tgz",
+      "integrity": "sha512-eTIzlVOSUR+JxdDFepEYcBMtZ9Qqdef+rnzWdRZuMbOywu5tO2w2N7rqjoANZ5k9vywhL6Br1VRjUIgTQx4E8w==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/lazystream": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/lazystream/-/lazystream-1.0.1.tgz",
+      "integrity": "sha512-b94GiNHQNy6JNTrt5w6zNyffMrNkXZb3KTkCZJb2V1xaEGCk093vkZ2jk3tpaeP33/OiXC+WvK9AxUebnf5nbw==",
+      "license": "MIT",
+      "dependencies": {
+        "readable-stream": "^2.0.5"
+      },
+      "engines": {
+        "node": ">= 0.6.3"
+      }
+    },
+    "node_modules/lazystream/node_modules/readable-stream": {
+      "version": "2.3.8",
+      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.8.tgz",
+      "integrity": "sha512-8p0AUk4XODgIewSi0l8Epjs+EVnWiK7NoDIEGU0HhE7+ZyY8D1IMY7odu5lRrFXGg71L15KG8QrPmum45RTtdA==",
+      "license": "MIT",
+      "dependencies": {
+        "core-util-is": "~1.0.0",
+        "inherits": "~2.0.3",
+        "isarray": "~1.0.0",
+        "process-nextick-args": "~2.0.0",
+        "safe-buffer": "~5.1.1",
+        "string_decoder": "~1.1.1",
+        "util-deprecate": "~1.0.1"
+      }
+    },
+    "node_modules/lazystream/node_modules/safe-buffer": {
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
+      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==",
+      "license": "MIT"
+    },
+    "node_modules/lazystream/node_modules/string_decoder": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz",
+      "integrity": "sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==",
+      "license": "MIT",
+      "dependencies": {
+        "safe-buffer": "~5.1.0"
+      }
+    },
+    "node_modules/leven": {
+      "version": "3.1.0",
+      "resolved": "https://registry.npmjs.org/leven/-/leven-3.1.0.tgz",
+      "integrity": "sha512-qsda+H8jTaUaN/x5vzW2rzc+8Rw4TAQ/4KjB46IwK5VH+IlVeeeje/EoZRpiXvIqjFgK84QffqPztGI3VBLG1A==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/lie": {
+      "version": "3.3.0",
+      "resolved": "https://registry.npmjs.org/lie/-/lie-3.3.0.tgz",
+      "integrity": "sha512-UaiMJzeWRlEujzAuw5LokY1L5ecNQYZKfmyZ9L7wDHb/p5etKaxXhohBcrw0EYby+G/NA52vRSN4N39dxHAIwQ==",
+      "license": "MIT",
+      "dependencies": {
+        "immediate": "~3.0.5"
+      }
+    },
+    "node_modules/lines-and-columns": {
+      "version": "1.2.4",
+      "resolved": "https://registry.npmjs.org/lines-and-columns/-/lines-and-columns-1.2.4.tgz",
+      "integrity": "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==",
+      "license": "MIT"
+    },
+    "node_modules/locate-app": {
+      "version": "2.5.0",
+      "resolved": "https://registry.npmjs.org/locate-app/-/locate-app-2.5.0.tgz",
+      "integrity": "sha512-xIqbzPMBYArJRmPGUZD9CzV9wOqmVtQnaAn3wrj3s6WYW0bQvPI7x+sPYUGmDTYMHefVK//zc6HEYZ1qnxIK+Q==",
+      "funding": [
+        {
+          "type": "individual",
+          "url": "https://buymeacoffee.com/hejny"
+        },
+        {
+          "type": "github",
+          "url": "https://github.com/hejny/locate-app/blob/main/README.md#%EF%B8%8F-contributing"
+        }
+      ],
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@promptbook/utils": "0.69.5",
+        "type-fest": "4.26.0",
+        "userhome": "1.0.1"
+      }
+    },
+    "node_modules/locate-path": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-5.0.0.tgz",
+      "integrity": "sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==",
+      "license": "MIT",
+      "dependencies": {
+        "p-locate": "^4.1.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/lodash": {
+      "version": "4.17.21",
+      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
+      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==",
+      "license": "MIT"
+    },
+    "node_modules/lodash.clonedeep": {
+      "version": "4.5.0",
+      "resolved": "https://registry.npmjs.org/lodash.clonedeep/-/lodash.clonedeep-4.5.0.tgz",
+      "integrity": "sha512-H5ZhCF25riFd9uB5UCkVKo61m3S/xZk1x4wA6yp/L3RFP6Z/eHH1ymQcGLo7J3GMPfm0V/7m1tryHuGVxpqEBQ==",
+      "license": "MIT"
+    },
+    "node_modules/lodash.zip": {
+      "version": "4.2.0",
+      "resolved": "https://registry.npmjs.org/lodash.zip/-/lodash.zip-4.2.0.tgz",
+      "integrity": "sha512-C7IOaBBK/0gMORRBd8OETNx3kmOkgIWIPvyDpZSCTwUrpYmgZwJkjZeOD8ww4xbOUOs4/attY+pciKvadNfFbg==",
+      "license": "MIT"
+    },
+    "node_modules/loglevel": {
+      "version": "1.9.2",
+      "resolved": "https://registry.npmjs.org/loglevel/-/loglevel-1.9.2.tgz",
+      "integrity": "sha512-HgMmCqIJSAKqo68l0rS2AanEWfkxaZ5wNiEFb5ggm08lDs9Xl2KxBlX3PTcaD2chBM1gXAYf491/M2Rv8Jwayg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.6.0"
+      },
+      "funding": {
+        "type": "tidelift",
+        "url": "https://tidelift.com/funding/github/npm/loglevel"
+      }
+    },
+    "node_modules/loglevel-plugin-prefix": {
+      "version": "0.8.4",
+      "resolved": "https://registry.npmjs.org/loglevel-plugin-prefix/-/loglevel-plugin-prefix-0.8.4.tgz",
+      "integrity": "sha512-WpG9CcFAOjz/FtNht+QJeGpvVl/cdR6P0z6OcXSkr8wFJOsV2GRj2j10JLfjuA4aYkcKCNIEqRGCyTife9R8/g==",
+      "license": "MIT"
+    },
+    "node_modules/lru-cache": {
+      "version": "10.4.3",
+      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-10.4.3.tgz",
+      "integrity": "sha512-JNAzZcXrCt42VGLuYz0zfAzDfAvJWW6AfYlDBQyDV5DClI2m5sAmK+OIO7s59XfsRsWHp02jAJrRadPRGTt6SQ==",
+      "license": "ISC"
+    },
+    "node_modules/make-dir": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-4.0.0.tgz",
+      "integrity": "sha512-hXdUTZYIVOt1Ex//jAQi+wTZZpUpwBj/0QsOzqegb3rGMMeJiSEu5xLHnYfBrRV4RH2+OCSOO95Is/7x1WJ4bw==",
+      "license": "MIT",
+      "dependencies": {
+        "semver": "^7.5.3"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/makeerror": {
+      "version": "1.0.12",
+      "resolved": "https://registry.npmjs.org/makeerror/-/makeerror-1.0.12.tgz",
+      "integrity": "sha512-JmqCvUhmt43madlpFzG4BQzG2Z3m6tvQDNKdClZnO3VbIudJYmxsT0FNJMeiB2+JTSlTQTSbU8QdesVmwJcmLg==",
+      "license": "BSD-3-Clause",
+      "dependencies": {
+        "tmpl": "1.0.5"
+      }
+    },
+    "node_modules/merge-stream": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/merge-stream/-/merge-stream-2.0.0.tgz",
+      "integrity": "sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w==",
+      "license": "MIT"
+    },
+    "node_modules/micromatch": {
+      "version": "4.0.8",
+      "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.8.tgz",
+      "integrity": "sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==",
+      "license": "MIT",
+      "dependencies": {
+        "braces": "^3.0.3",
+        "picomatch": "^2.3.1"
+      },
+      "engines": {
+        "node": ">=8.6"
+      }
+    },
+    "node_modules/mimic-fn": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/mimic-fn/-/mimic-fn-2.1.0.tgz",
+      "integrity": "sha512-OqbOk5oEQeAZ8WXWydlu9HJjz9WVdEIvamMCcXmuqUYjTknH/sqsWvhQ3vgwKFRR1HpjvNBKQ37nbJgYzGqGcg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/minimatch": {
+      "version": "9.0.5",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.5.tgz",
+      "integrity": "sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==",
+      "license": "ISC",
+      "dependencies": {
+        "brace-expansion": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=16 || 14 >=14.17"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/minipass": {
+      "version": "7.1.2",
+      "resolved": "https://registry.npmjs.org/minipass/-/minipass-7.1.2.tgz",
+      "integrity": "sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==",
+      "license": "ISC",
+      "engines": {
+        "node": ">=16 || 14 >=14.17"
+      }
+    },
+    "node_modules/ms": {
+      "version": "2.1.3",
+      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
+      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
+      "license": "MIT"
+    },
+    "node_modules/natural-compare": {
+      "version": "1.4.0",
+      "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
+      "integrity": "sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==",
+      "license": "MIT"
+    },
+    "node_modules/netmask": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/netmask/-/netmask-2.0.2.tgz",
+      "integrity": "sha512-dBpDMdxv9Irdq66304OLfEmQ9tbNRFnFTuZiLo+bD+r332bBmMJ8GBLXklIXXgxd3+v9+KUnZaUR5PJMa75Gsg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4.0"
+      }
+    },
+    "node_modules/node-domexception": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/node-domexception/-/node-domexception-1.0.0.tgz",
+      "integrity": "sha512-/jKZoMpw0F8GRwl4/eLROPA3cfcXtLApP0QzLmUT/HuPCZWyB7IY9ZrMeKw2O/nFIqPQB3PVM9aYm0F312AXDQ==",
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/jimmywarting"
+        },
+        {
+          "type": "github",
+          "url": "https://paypal.me/jimmywarting"
+        }
+      ],
+      "license": "MIT",
+      "engines": {
+        "node": ">=10.5.0"
+      }
+    },
+    "node_modules/node-fetch": {
+      "version": "3.3.2",
+      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-3.3.2.tgz",
+      "integrity": "sha512-dRB78srN/l6gqWulah9SrxeYnxeddIG30+GOqK/9OlLVyLg3HPnr6SqOWTWOXKRwC2eGYCkZ59NNuSgvSrpgOA==",
+      "license": "MIT",
+      "dependencies": {
+        "data-uri-to-buffer": "^4.0.0",
+        "fetch-blob": "^3.1.4",
+        "formdata-polyfill": "^4.0.10"
+      },
+      "engines": {
+        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/node-fetch"
+      }
+    },
+    "node_modules/node-int64": {
+      "version": "0.4.0",
+      "resolved": "https://registry.npmjs.org/node-int64/-/node-int64-0.4.0.tgz",
+      "integrity": "sha512-O5lz91xSOeoXP6DulyHfllpq+Eg00MWitZIbtPfoSEvqIHdl5gfcY6hYzDWnj0qD5tz52PI08u9qUvSVeUBeHw==",
+      "license": "MIT"
+    },
+    "node_modules/node-releases": {
+      "version": "2.0.19",
+      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.19.tgz",
+      "integrity": "sha512-xxOWJsBKtzAq7DY0J+DTzuz58K8e7sJbdgwkbMWQe8UYB6ekmsQ45q0M/tJDsGaZmbC+l7n57UV8Hl5tHxO9uw==",
+      "license": "MIT"
+    },
+    "node_modules/normalize-path": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
+      "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/npm-run-path": {
+      "version": "4.0.1",
+      "resolved": "https://registry.npmjs.org/npm-run-path/-/npm-run-path-4.0.1.tgz",
+      "integrity": "sha512-S48WzZW777zhNIrn7gxOlISNAqi9ZC/uQFnRdbeIHhZhCA6UqpkOT8T1G7BvfdgP4Er8gF4sUbaS0i7QvIfCWw==",
+      "license": "MIT",
+      "dependencies": {
+        "path-key": "^3.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/nth-check": {
+      "version": "2.1.1",
+      "resolved": "https://registry.npmjs.org/nth-check/-/nth-check-2.1.1.tgz",
+      "integrity": "sha512-lqjrjmaOoAnWfMmBPL+XNnynZh2+swxiX3WUE0s4yEHI6m+AwrK2UZOimIRl3X/4QctVqS8AiZjFqyOGrMXb/w==",
+      "license": "BSD-2-Clause",
+      "dependencies": {
+        "boolbase": "^1.0.0"
+      },
+      "funding": {
+        "url": "https://github.com/fb55/nth-check?sponsor=1"
+      }
+    },
+    "node_modules/once": {
+      "version": "1.4.0",
+      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
+      "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
+      "license": "ISC",
+      "dependencies": {
+        "wrappy": "1"
+      }
+    },
+    "node_modules/onetime": {
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/onetime/-/onetime-5.1.2.tgz",
+      "integrity": "sha512-kbpaSSGJTWdAY5KPVeMOKXSrPtr8C8C7wodJbcsd51jRnmD+GZu8Y0VoU6Dm5Z4vWr0Ig/1NKuWRKf7j5aaYSg==",
+      "license": "MIT",
+      "dependencies": {
+        "mimic-fn": "^2.1.0"
+      },
+      "engines": {
+        "node": ">=6"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/p-limit": {
+      "version": "3.1.0",
+      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
+      "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
+      "license": "MIT",
+      "dependencies": {
+        "yocto-queue": "^0.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/p-locate": {
+      "version": "4.1.0",
+      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-4.1.0.tgz",
+      "integrity": "sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==",
+      "license": "MIT",
+      "dependencies": {
+        "p-limit": "^2.2.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/p-locate/node_modules/p-limit": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-2.3.0.tgz",
+      "integrity": "sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==",
+      "license": "MIT",
+      "dependencies": {
+        "p-try": "^2.0.0"
+      },
+      "engines": {
+        "node": ">=6"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/p-try": {
+      "version": "2.2.0",
+      "resolved": "https://registry.npmjs.org/p-try/-/p-try-2.2.0.tgz",
+      "integrity": "sha512-R4nPAVTAU0B9D35/Gk3uJf/7XYbQcyohSKdvAxIRSNghFl4e71hVoGnBNQz9cWaXxO2I10KTC+3jMdvvoKw6dQ==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/pac-proxy-agent": {
+      "version": "7.1.0",
+      "resolved": "https://registry.npmjs.org/pac-proxy-agent/-/pac-proxy-agent-7.1.0.tgz",
+      "integrity": "sha512-Z5FnLVVZSnX7WjBg0mhDtydeRZ1xMcATZThjySQUHqr+0ksP8kqaw23fNKkaaN/Z8gwLUs/W7xdl0I75eP2Xyw==",
+      "license": "MIT",
+      "dependencies": {
+        "@tootallnate/quickjs-emscripten": "^0.23.0",
+        "agent-base": "^7.1.2",
+        "debug": "^4.3.4",
+        "get-uri": "^6.0.1",
+        "http-proxy-agent": "^7.0.0",
+        "https-proxy-agent": "^7.0.6",
+        "pac-resolver": "^7.0.1",
+        "socks-proxy-agent": "^8.0.5"
+      },
+      "engines": {
+        "node": ">= 14"
+      }
+    },
+    "node_modules/pac-resolver": {
+      "version": "7.0.1",
+      "resolved": "https://registry.npmjs.org/pac-resolver/-/pac-resolver-7.0.1.tgz",
+      "integrity": "sha512-5NPgf87AT2STgwa2ntRMr45jTKrYBGkVU36yT0ig/n/GMAa3oPqhZfIQ2kMEimReg0+t9kZViDVZ83qfVUlckg==",
+      "license": "MIT",
+      "dependencies": {
+        "degenerator": "^5.0.0",
+        "netmask": "^2.0.2"
+      },
+      "engines": {
+        "node": ">= 14"
+      }
+    },
+    "node_modules/package-json-from-dist": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/package-json-from-dist/-/package-json-from-dist-1.0.1.tgz",
+      "integrity": "sha512-UEZIS3/by4OC8vL3P2dTXRETpebLI2NiI5vIrjaD/5UtrkFX/tNbwjTSRAGC/+7CAo2pIcBaRgWmcBBHcsaCIw==",
+      "license": "BlueOak-1.0.0"
+    },
+    "node_modules/pako": {
+      "version": "1.0.11",
+      "resolved": "https://registry.npmjs.org/pako/-/pako-1.0.11.tgz",
+      "integrity": "sha512-4hLB8Py4zZce5s4yd9XzopqwVv/yGNhV1Bl8NTmCq1763HeK2+EwVTv+leGeL13Dnh2wfbqowVPXCIO0z4taYw==",
+      "license": "(MIT AND Zlib)"
+    },
+    "node_modules/parse-json": {
+      "version": "5.2.0",
+      "resolved": "https://registry.npmjs.org/parse-json/-/parse-json-5.2.0.tgz",
+      "integrity": "sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg==",
+      "license": "MIT",
+      "dependencies": {
+        "@babel/code-frame": "^7.0.0",
+        "error-ex": "^1.3.1",
+        "json-parse-even-better-errors": "^2.3.0",
+        "lines-and-columns": "^1.1.6"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/parse5": {
+      "version": "7.2.1",
+      "resolved": "https://registry.npmjs.org/parse5/-/parse5-7.2.1.tgz",
+      "integrity": "sha512-BuBYQYlv1ckiPdQi/ohiivi9Sagc9JG+Ozs0r7b/0iK3sKmrb0b9FdWdBbOdx6hBCM/F9Ir82ofnBhtZOjCRPQ==",
+      "license": "MIT",
+      "dependencies": {
+        "entities": "^4.5.0"
+      },
+      "funding": {
+        "url": "https://github.com/inikulin/parse5?sponsor=1"
+      }
+    },
+    "node_modules/parse5-htmlparser2-tree-adapter": {
+      "version": "7.1.0",
+      "resolved": "https://registry.npmjs.org/parse5-htmlparser2-tree-adapter/-/parse5-htmlparser2-tree-adapter-7.1.0.tgz",
+      "integrity": "sha512-ruw5xyKs6lrpo9x9rCZqZZnIUntICjQAd0Wsmp396Ul9lN/h+ifgVV1x1gZHi8euej6wTfpqX8j+BFQxF0NS/g==",
+      "license": "MIT",
+      "dependencies": {
+        "domhandler": "^5.0.3",
+        "parse5": "^7.0.0"
+      },
+      "funding": {
+        "url": "https://github.com/inikulin/parse5?sponsor=1"
+      }
+    },
+    "node_modules/parse5-parser-stream": {
+      "version": "7.1.2",
+      "resolved": "https://registry.npmjs.org/parse5-parser-stream/-/parse5-parser-stream-7.1.2.tgz",
+      "integrity": "sha512-JyeQc9iwFLn5TbvvqACIF/VXG6abODeB3Fwmv/TGdLk2LfbWkaySGY72at4+Ty7EkPZj854u4CrICqNk2qIbow==",
+      "license": "MIT",
+      "dependencies": {
+        "parse5": "^7.0.0"
+      },
+      "funding": {
+        "url": "https://github.com/inikulin/parse5?sponsor=1"
+      }
+    },
+    "node_modules/path-exists": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
+      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/path-is-absolute": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
+      "integrity": "sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/path-key": {
+      "version": "3.1.1",
+      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
+      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/path-parse": {
+      "version": "1.0.7",
+      "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
+      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
+      "license": "MIT"
+    },
+    "node_modules/path-scurry": {
+      "version": "1.11.1",
+      "resolved": "https://registry.npmjs.org/path-scurry/-/path-scurry-1.11.1.tgz",
+      "integrity": "sha512-Xa4Nw17FS9ApQFJ9umLiJS4orGjm7ZzwUrwamcGQuHSzDyth9boKDaycYdDcZDuqYATXw4HFXgaqWTctW/v1HA==",
+      "license": "BlueOak-1.0.0",
+      "dependencies": {
+        "lru-cache": "^10.2.0",
+        "minipass": "^5.0.0 || ^6.0.2 || ^7.0.0"
+      },
+      "engines": {
+        "node": ">=16 || 14 >=14.18"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/pend": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/pend/-/pend-1.2.0.tgz",
+      "integrity": "sha512-F3asv42UuXchdzt+xXqfW1OGlVBe+mxa2mqI0pg5yAHZPvFmY3Y6drSf/GQ1A86WgWEN9Kzh/WrgKa6iGcHXLg==",
+      "license": "MIT"
+    },
+    "node_modules/picocolors": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz",
+      "integrity": "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==",
+      "license": "ISC"
+    },
+    "node_modules/picomatch": {
+      "version": "2.3.1",
+      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
+      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=8.6"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/jonschlinkert"
+      }
+    },
+    "node_modules/pirates": {
+      "version": "4.0.6",
+      "resolved": "https://registry.npmjs.org/pirates/-/pirates-4.0.6.tgz",
+      "integrity": "sha512-saLsH7WeYYPiD25LDuLRRY/i+6HaPYr6G1OUlN39otzkSTxKnubR9RTxS3/Kk50s1g2JTgFwWQDQyplC5/SHZg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 6"
+      }
+    },
+    "node_modules/pkg-dir": {
+      "version": "4.2.0",
+      "resolved": "https://registry.npmjs.org/pkg-dir/-/pkg-dir-4.2.0.tgz",
+      "integrity": "sha512-HRDzbaKjC+AOWVXxAU/x54COGeIv9eb+6CkDSQoNTt4XyWoIJvuPsXizxu/Fr23EiekbtZwmh1IcIG/l/a10GQ==",
+      "license": "MIT",
+      "dependencies": {
+        "find-up": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/pretty-format": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/pretty-format/-/pretty-format-29.7.0.tgz",
+      "integrity": "sha512-Pdlw/oPxN+aXdmM9R00JVC9WVFoCLTKJvDVLgmJ+qAffBMxsV85l/Lu7sNx4zSzPyoL2euImuEwHhOXdEgNFZQ==",
+      "license": "MIT",
+      "dependencies": {
+        "@jest/schemas": "^29.6.3",
+        "ansi-styles": "^5.0.0",
+        "react-is": "^18.0.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/pretty-format/node_modules/ansi-styles": {
+      "version": "5.2.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-5.2.0.tgz",
+      "integrity": "sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/process": {
+      "version": "0.11.10",
+      "resolved": "https://registry.npmjs.org/process/-/process-0.11.10.tgz",
+      "integrity": "sha512-cdGef/drWFoydD1JsMzuFf8100nZl+GT+yacc2bEced5f9Rjk4z+WtFUTBu9PhOi9j/jfmBPu0mMEY4wIdAF8A==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.6.0"
+      }
+    },
+    "node_modules/process-nextick-args": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/process-nextick-args/-/process-nextick-args-2.0.1.tgz",
+      "integrity": "sha512-3ouUOpQhtgrbOa17J7+uxOTpITYWaGP7/AhoR3+A+/1e9skrzelGi/dXzEYyvbxubEF6Wn2ypscTKiKJFFn1ag==",
+      "license": "MIT"
+    },
+    "node_modules/progress": {
+      "version": "2.0.3",
+      "resolved": "https://registry.npmjs.org/progress/-/progress-2.0.3.tgz",
+      "integrity": "sha512-7PiHtLll5LdnKIMw100I+8xJXR5gW2QwWYkT6iJva0bXitZKa/XMrSbdmg3r2Xnaidz9Qumd0VPaMrZlF9V9sA==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.4.0"
+      }
+    },
+    "node_modules/prompts": {
+      "version": "2.4.2",
+      "resolved": "https://registry.npmjs.org/prompts/-/prompts-2.4.2.tgz",
+      "integrity": "sha512-NxNv/kLguCA7p3jE8oL2aEBsrJWgAakBpgmgK6lpPWV+WuOmY6r2/zbAVnP+T8bQlA0nzHXSJSJW0Hq7ylaD2Q==",
+      "license": "MIT",
+      "dependencies": {
+        "kleur": "^3.0.3",
+        "sisteransi": "^1.0.5"
+      },
+      "engines": {
+        "node": ">= 6"
+      }
+    },
+    "node_modules/proxy-agent": {
+      "version": "6.5.0",
+      "resolved": "https://registry.npmjs.org/proxy-agent/-/proxy-agent-6.5.0.tgz",
+      "integrity": "sha512-TmatMXdr2KlRiA2CyDu8GqR8EjahTG3aY3nXjdzFyoZbmB8hrBsTyMezhULIXKnC0jpfjlmiZ3+EaCzoInSu/A==",
+      "license": "MIT",
+      "dependencies": {
+        "agent-base": "^7.1.2",
+        "debug": "^4.3.4",
+        "http-proxy-agent": "^7.0.1",
+        "https-proxy-agent": "^7.0.6",
+        "lru-cache": "^7.14.1",
+        "pac-proxy-agent": "^7.1.0",
+        "proxy-from-env": "^1.1.0",
+        "socks-proxy-agent": "^8.0.5"
+      },
+      "engines": {
+        "node": ">= 14"
+      }
+    },
+    "node_modules/proxy-agent/node_modules/lru-cache": {
+      "version": "7.18.3",
+      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-7.18.3.tgz",
+      "integrity": "sha512-jumlc0BIUrS3qJGgIkWZsyfAM7NCWiBcCDhnd+3NNM5KbBmLTgHVfWBcg6W+rLUsIpzpERPsvwUP7CckAQSOoA==",
+      "license": "ISC",
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/proxy-from-env": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/proxy-from-env/-/proxy-from-env-1.1.0.tgz",
+      "integrity": "sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg==",
+      "license": "MIT"
+    },
+    "node_modules/pump": {
+      "version": "3.0.2",
+      "resolved": "https://registry.npmjs.org/pump/-/pump-3.0.2.tgz",
+      "integrity": "sha512-tUPXtzlGM8FE3P0ZL6DVs/3P58k9nk8/jZeQCurTJylQA8qFYzHFfhBJkuqyE0FifOsQ0uKWekiZ5g8wtr28cw==",
+      "license": "MIT",
+      "dependencies": {
+        "end-of-stream": "^1.1.0",
+        "once": "^1.3.1"
+      }
+    },
+    "node_modules/pure-rand": {
+      "version": "6.1.0",
+      "resolved": "https://registry.npmjs.org/pure-rand/-/pure-rand-6.1.0.tgz",
+      "integrity": "sha512-bVWawvoZoBYpp6yIoQtQXHZjmz35RSVHnUOTefl8Vcjr8snTPY1wnpSPMWekcFwbxI6gtmT7rSYPFvz71ldiOA==",
+      "funding": [
+        {
+          "type": "individual",
+          "url": "https://github.com/sponsors/dubzzz"
+        },
+        {
+          "type": "opencollective",
+          "url": "https://opencollective.com/fast-check"
+        }
+      ],
+      "license": "MIT"
+    },
+    "node_modules/query-selector-shadow-dom": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/query-selector-shadow-dom/-/query-selector-shadow-dom-1.0.1.tgz",
+      "integrity": "sha512-lT5yCqEBgfoMYpf3F2xQRK7zEr1rhIIZuceDK6+xRkJQ4NMbHTwXqk4NkwDwQMNqXgG9r9fyHnzwNVs6zV5KRw==",
+      "license": "MIT"
+    },
+    "node_modules/queue-tick": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/queue-tick/-/queue-tick-1.0.1.tgz",
+      "integrity": "sha512-kJt5qhMxoszgU/62PLP1CJytzd2NKetjSRnyuj31fDd3Rlcz3fzlFdFLD1SItunPwyqEOkca6GbV612BWfaBag==",
+      "license": "MIT"
+    },
+    "node_modules/react-is": {
+      "version": "18.3.1",
+      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.3.1.tgz",
+      "integrity": "sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg==",
+      "license": "MIT"
+    },
+    "node_modules/readable-stream": {
+      "version": "4.7.0",
+      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-4.7.0.tgz",
+      "integrity": "sha512-oIGGmcpTLwPga8Bn6/Z75SVaH1z5dUut2ibSyAMVhmUggWpmDn2dapB0n7f8nwaSiRtepAsfJyfXIO5DCVAODg==",
+      "license": "MIT",
+      "dependencies": {
+        "abort-controller": "^3.0.0",
+        "buffer": "^6.0.3",
+        "events": "^3.3.0",
+        "process": "^0.11.10",
+        "string_decoder": "^1.3.0"
+      },
+      "engines": {
+        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
+      }
+    },
+    "node_modules/readdir-glob": {
+      "version": "1.1.3",
+      "resolved": "https://registry.npmjs.org/readdir-glob/-/readdir-glob-1.1.3.tgz",
+      "integrity": "sha512-v05I2k7xN8zXvPD9N+z/uhXPaj0sUFCe2rcWZIpBsqxfP7xXFQ0tipAd/wjj1YxWyWtUS5IDJpOG82JKt2EAVA==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "minimatch": "^5.1.0"
+      }
+    },
+    "node_modules/readdir-glob/node_modules/minimatch": {
+      "version": "5.1.6",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-5.1.6.tgz",
+      "integrity": "sha512-lKwV/1brpG6mBUFHtb7NUmtABCb2WZZmm2wNiOA5hAb8VdCS4B3dtMWyvcoViccwAW/COERjXLt0zP1zXUN26g==",
+      "license": "ISC",
+      "dependencies": {
+        "brace-expansion": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/require-directory": {
+      "version": "2.1.1",
+      "resolved": "https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz",
+      "integrity": "sha512-fGxEI7+wsG9xrvdjsrlmL22OMTTiHRwAMroiEeMgq8gzoLC/PQr7RsRDSTLUg/bZAZtF+TVIkHc6/4RIKrui+Q==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/resolve": {
+      "version": "1.22.10",
+      "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.10.tgz",
+      "integrity": "sha512-NPRy+/ncIMeDlTAsuqwKIiferiawhefFJtkNSW0qZJEqMEb+qBt/77B/jGeeek+F0uOeN05CDa6HXbbIgtVX4w==",
+      "license": "MIT",
+      "dependencies": {
+        "is-core-module": "^2.16.0",
+        "path-parse": "^1.0.7",
+        "supports-preserve-symlinks-flag": "^1.0.0"
+      },
+      "bin": {
+        "resolve": "bin/resolve"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/resolve-cwd": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/resolve-cwd/-/resolve-cwd-3.0.0.tgz",
+      "integrity": "sha512-OrZaX2Mb+rJCpH/6CpSqt9xFVpN++x01XnN2ie9g6P5/3xelLAkXWVADpdz1IHD/KFfEXyE6V0U01OQ3UO2rEg==",
+      "license": "MIT",
+      "dependencies": {
+        "resolve-from": "^5.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/resolve-from": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-5.0.0.tgz",
+      "integrity": "sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/resolve.exports": {
+      "version": "2.0.3",
+      "resolved": "https://registry.npmjs.org/resolve.exports/-/resolve.exports-2.0.3.tgz",
+      "integrity": "sha512-OcXjMsGdhL4XnbShKpAcSqPMzQoYkYyhbEaeSko47MjRP9NfEQMhZkXL1DoFlt9LWQn4YttrdnV6X2OiyzBi+A==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/resq": {
+      "version": "1.11.0",
+      "resolved": "https://registry.npmjs.org/resq/-/resq-1.11.0.tgz",
+      "integrity": "sha512-G10EBz+zAAy3zUd/CDoBbXRL6ia9kOo3xRHrMDsHljI0GDkhYlyjwoCx5+3eCC4swi1uCoZQhskuJkj7Gp57Bw==",
+      "license": "MIT",
+      "dependencies": {
+        "fast-deep-equal": "^2.0.1"
+      }
+    },
+    "node_modules/rgb2hex": {
+      "version": "0.2.5",
+      "resolved": "https://registry.npmjs.org/rgb2hex/-/rgb2hex-0.2.5.tgz",
+      "integrity": "sha512-22MOP1Rh7sAo1BZpDG6R5RFYzR2lYEgwq7HEmyW2qcsOqR2lQKmn+O//xV3YG/0rrhMC6KVX2hU+ZXuaw9a5bw==",
+      "license": "MIT"
+    },
+    "node_modules/safaridriver": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/safaridriver/-/safaridriver-1.0.0.tgz",
+      "integrity": "sha512-J92IFbskyo7OYB3Dt4aTdyhag1GlInrfbPCmMteb7aBK7PwlnGz1HI0+oyNN97j7pV9DqUAVoVgkNRMrfY47mQ==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=18.0.0"
+      }
+    },
+    "node_modules/safe-buffer": {
+      "version": "5.2.1",
+      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
+      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/feross"
+        },
+        {
+          "type": "patreon",
+          "url": "https://www.patreon.com/feross"
+        },
+        {
+          "type": "consulting",
+          "url": "https://feross.org/support"
+        }
+      ],
+      "license": "MIT"
+    },
+    "node_modules/safer-buffer": {
+      "version": "2.1.2",
+      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
+      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==",
+      "license": "MIT"
+    },
+    "node_modules/semver": {
+      "version": "7.6.3",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-7.6.3.tgz",
+      "integrity": "sha512-oVekP1cKtI+CTDvHWYFUcMtsK/00wmAEfyqKfNdARm8u1wNVhSgaX7A8d4UuIlUI5e84iEwOhs7ZPYRmzU9U6A==",
+      "license": "ISC",
+      "bin": {
+        "semver": "bin/semver.js"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/serialize-error": {
+      "version": "11.0.3",
+      "resolved": "https://registry.npmjs.org/serialize-error/-/serialize-error-11.0.3.tgz",
+      "integrity": "sha512-2G2y++21dhj2R7iHAdd0FIzjGwuKZld+7Pl/bTU6YIkrC2ZMbVUjm+luj6A6V34Rv9XfKJDKpTWu9W4Gse1D9g==",
+      "license": "MIT",
+      "dependencies": {
+        "type-fest": "^2.12.2"
+      },
+      "engines": {
+        "node": ">=14.16"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/serialize-error/node_modules/type-fest": {
+      "version": "2.19.0",
+      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-2.19.0.tgz",
+      "integrity": "sha512-RAH822pAdBgcNMAfWnCBU3CFZcfZ/i1eZjwFU/dsLKumyuuP3niueg2UAukXYF0E2AAoc82ZSSf9J0WQBinzHA==",
+      "license": "(MIT OR CC0-1.0)",
+      "engines": {
+        "node": ">=12.20"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/setimmediate": {
+      "version": "1.0.5",
+      "resolved": "https://registry.npmjs.org/setimmediate/-/setimmediate-1.0.5.tgz",
+      "integrity": "sha512-MATJdZp8sLqDl/68LfQmbP8zKPLQNV6BIZoIgrscFDQ+RsvK/BxeDQOgyxKKoh0y/8h3BqVFnCqQ/gd+reiIXA==",
+      "license": "MIT"
+    },
+    "node_modules/shebang-command": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
+      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
+      "license": "MIT",
+      "dependencies": {
+        "shebang-regex": "^3.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/shebang-regex": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
+      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/signal-exit": {
+      "version": "4.1.0",
+      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-4.1.0.tgz",
+      "integrity": "sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==",
+      "license": "ISC",
+      "engines": {
+        "node": ">=14"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/sisteransi": {
+      "version": "1.0.5",
+      "resolved": "https://registry.npmjs.org/sisteransi/-/sisteransi-1.0.5.tgz",
+      "integrity": "sha512-bLGGlR1QxBcynn2d5YmDX4MGjlZvy2MRBDRNHLJ8VI6l6+9FUiyTFNJ0IveOSP0bcXgVDPRcfGqA0pjaqUpfVg==",
+      "license": "MIT"
+    },
+    "node_modules/slash": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/slash/-/slash-3.0.0.tgz",
+      "integrity": "sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/smart-buffer": {
+      "version": "4.2.0",
+      "resolved": "https://registry.npmjs.org/smart-buffer/-/smart-buffer-4.2.0.tgz",
+      "integrity": "sha512-94hK0Hh8rPqQl2xXc3HsaBoOXKV20MToPkcXvwbISWLEs+64sBq5kFgn2kJDHb1Pry9yrP0dxrCI9RRci7RXKg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 6.0.0",
+        "npm": ">= 3.0.0"
+      }
+    },
+    "node_modules/socks": {
+      "version": "2.8.3",
+      "resolved": "https://registry.npmjs.org/socks/-/socks-2.8.3.tgz",
+      "integrity": "sha512-l5x7VUUWbjVFbafGLxPWkYsHIhEvmF85tbIeFZWc8ZPtoMyybuEhL7Jye/ooC4/d48FgOjSJXgsF/AJPYCW8Zw==",
+      "license": "MIT",
+      "dependencies": {
+        "ip-address": "^9.0.5",
+        "smart-buffer": "^4.2.0"
+      },
+      "engines": {
+        "node": ">= 10.0.0",
+        "npm": ">= 3.0.0"
+      }
+    },
+    "node_modules/socks-proxy-agent": {
+      "version": "8.0.5",
+      "resolved": "https://registry.npmjs.org/socks-proxy-agent/-/socks-proxy-agent-8.0.5.tgz",
+      "integrity": "sha512-HehCEsotFqbPW9sJ8WVYB6UbmIMv7kUUORIF2Nncq4VQvBfNBLibW9YZR5dlYCSUhwcD628pRllm7n+E+YTzJw==",
+      "license": "MIT",
+      "dependencies": {
+        "agent-base": "^7.1.2",
+        "debug": "^4.3.4",
+        "socks": "^2.8.3"
+      },
+      "engines": {
+        "node": ">= 14"
+      }
+    },
+    "node_modules/source-map": {
+      "version": "0.6.1",
+      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
+      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
+      "license": "BSD-3-Clause",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/source-map-support": {
+      "version": "0.5.13",
+      "resolved": "https://registry.npmjs.org/source-map-support/-/source-map-support-0.5.13.tgz",
+      "integrity": "sha512-SHSKFHadjVA5oR4PPqhtAVdcBWwRYVd6g6cAXnIbRiIwc2EhPrTuKUBdSLvlEKyIP3GCf89fltvcZiP9MMFA1w==",
+      "license": "MIT",
+      "dependencies": {
+        "buffer-from": "^1.0.0",
+        "source-map": "^0.6.0"
+      }
+    },
+    "node_modules/spacetrim": {
+      "version": "0.11.59",
+      "resolved": "https://registry.npmjs.org/spacetrim/-/spacetrim-0.11.59.tgz",
+      "integrity": "sha512-lLYsktklSRKprreOm7NXReW8YiX2VBjbgmXYEziOoGf/qsJqAEACaDvoTtUOycwjpaSh+bT8eu0KrJn7UNxiCg==",
+      "funding": [
+        {
+          "type": "individual",
+          "url": "https://buymeacoffee.com/hejny"
+        },
+        {
+          "type": "github",
+          "url": "https://github.com/hejny/spacetrim/blob/main/README.md#%EF%B8%8F-contributing"
+        }
+      ],
+      "license": "Apache-2.0"
+    },
+    "node_modules/split2": {
+      "version": "4.2.0",
+      "resolved": "https://registry.npmjs.org/split2/-/split2-4.2.0.tgz",
+      "integrity": "sha512-UcjcJOWknrNkF6PLX83qcHM6KHgVKNkV62Y8a5uYDVv9ydGQVwAHMKqHdJje1VTWpljG0WYpCDhrCdAOYH4TWg==",
+      "license": "ISC",
+      "engines": {
+        "node": ">= 10.x"
+      }
+    },
+    "node_modules/sprintf-js": {
+      "version": "1.1.3",
+      "resolved": "https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.1.3.tgz",
+      "integrity": "sha512-Oo+0REFV59/rz3gfJNKQiBlwfHaSESl1pcGyABQsnnIfWOFt6JNj5gCog2U6MLZ//IGYD+nA8nI+mTShREReaA==",
+      "license": "BSD-3-Clause"
+    },
+    "node_modules/stack-utils": {
+      "version": "2.0.6",
+      "resolved": "https://registry.npmjs.org/stack-utils/-/stack-utils-2.0.6.tgz",
+      "integrity": "sha512-XlkWvfIm6RmsWtNJx+uqtKLS8eqFbxUg0ZzLXqY0caEy9l7hruX8IpiDnjsLavoBgqCCR71TqWO8MaXYheJ3RQ==",
+      "license": "MIT",
+      "dependencies": {
+        "escape-string-regexp": "^2.0.0"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/streamx": {
+      "version": "2.21.1",
+      "resolved": "https://registry.npmjs.org/streamx/-/streamx-2.21.1.tgz",
+      "integrity": "sha512-PhP9wUnFLa+91CPy3N6tiQsK+gnYyUNuk15S3YG/zjYE7RuPeCjJngqnzpC31ow0lzBHQ+QGO4cNJnd0djYUsw==",
+      "license": "MIT",
+      "dependencies": {
+        "fast-fifo": "^1.3.2",
+        "queue-tick": "^1.0.1",
+        "text-decoder": "^1.1.0"
+      },
+      "optionalDependencies": {
+        "bare-events": "^2.2.0"
+      }
+    },
+    "node_modules/string_decoder": {
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.3.0.tgz",
+      "integrity": "sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==",
+      "license": "MIT",
+      "dependencies": {
+        "safe-buffer": "~5.2.0"
+      }
+    },
+    "node_modules/string-length": {
+      "version": "4.0.2",
+      "resolved": "https://registry.npmjs.org/string-length/-/string-length-4.0.2.tgz",
+      "integrity": "sha512-+l6rNN5fYHNhZZy41RXsYptCjA2Igmq4EG7kZAYFQI1E1VTXarr6ZPXBg6eq7Y6eK4FEhY6AJlyuFIb/v/S0VQ==",
+      "license": "MIT",
+      "dependencies": {
+        "char-regex": "^1.0.2",
+        "strip-ansi": "^6.0.0"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/string-length/node_modules/ansi-regex": {
+      "version": "5.0.1",
+      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
+      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/string-length/node_modules/strip-ansi": {
+      "version": "6.0.1",
+      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
+      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
+      "license": "MIT",
+      "dependencies": {
+        "ansi-regex": "^5.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/string-width": {
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/string-width/-/string-width-5.1.2.tgz",
+      "integrity": "sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==",
+      "license": "MIT",
+      "dependencies": {
+        "eastasianwidth": "^0.2.0",
+        "emoji-regex": "^9.2.2",
+        "strip-ansi": "^7.0.1"
+      },
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/string-width-cjs": {
+      "name": "string-width",
+      "version": "4.2.3",
+      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
+      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
+      "license": "MIT",
+      "dependencies": {
+        "emoji-regex": "^8.0.0",
+        "is-fullwidth-code-point": "^3.0.0",
+        "strip-ansi": "^6.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/string-width-cjs/node_modules/ansi-regex": {
+      "version": "5.0.1",
+      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
+      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/string-width-cjs/node_modules/emoji-regex": {
+      "version": "8.0.0",
+      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
+      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
+      "license": "MIT"
+    },
+    "node_modules/string-width-cjs/node_modules/strip-ansi": {
+      "version": "6.0.1",
+      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
+      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
+      "license": "MIT",
+      "dependencies": {
+        "ansi-regex": "^5.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/strip-ansi": {
+      "version": "7.1.0",
+      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.0.tgz",
+      "integrity": "sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==",
+      "license": "MIT",
+      "dependencies": {
+        "ansi-regex": "^6.0.1"
+      },
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/strip-ansi?sponsor=1"
+      }
+    },
+    "node_modules/strip-ansi-cjs": {
+      "name": "strip-ansi",
+      "version": "6.0.1",
+      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
+      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
+      "license": "MIT",
+      "dependencies": {
+        "ansi-regex": "^5.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/strip-ansi-cjs/node_modules/ansi-regex": {
+      "version": "5.0.1",
+      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
+      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/strip-bom": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/strip-bom/-/strip-bom-4.0.0.tgz",
+      "integrity": "sha512-3xurFv5tEgii33Zi8Jtp55wEIILR9eh34FAW00PZf+JnSsTmV/ioewSgQl97JHvgjoRGwPShsWm+IdrxB35d0w==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/strip-final-newline": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/strip-final-newline/-/strip-final-newline-2.0.0.tgz",
+      "integrity": "sha512-BrpvfNAE3dcvq7ll3xVumzjKjZQ5tI1sEUIKr3Uoks0XUl45St3FlatVqef9prk4jRDzhW6WZg+3bk93y6pLjA==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/strip-json-comments": {
+      "version": "3.1.1",
+      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
+      "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/strnum": {
+      "version": "1.0.5",
+      "resolved": "https://registry.npmjs.org/strnum/-/strnum-1.0.5.tgz",
+      "integrity": "sha512-J8bbNyKKXl5qYcR36TIO8W3mVGVHrmmxsd5PAItGkmyzwJvybiw2IVq5nqd0i4LSNSkB/sx9VHllbfFdr9k1JA==",
+      "license": "MIT"
+    },
+    "node_modules/supports-color": {
+      "version": "7.2.0",
+      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
+      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
+      "license": "MIT",
+      "dependencies": {
+        "has-flag": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/supports-preserve-symlinks-flag": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
+      "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/tar-fs": {
+      "version": "3.0.7",
+      "resolved": "https://registry.npmjs.org/tar-fs/-/tar-fs-3.0.7.tgz",
+      "integrity": "sha512-2sAfoF/zw/2n8goUGnGRZTWTD4INtnScPZvyYBI6BDlJ3wNR5o1dw03EfBvuhG6GBLvC4J+C7j7W+64aZ0ogQA==",
+      "license": "MIT",
+      "dependencies": {
+        "pump": "^3.0.0",
+        "tar-stream": "^3.1.5"
+      },
+      "optionalDependencies": {
+        "bare-fs": "^2.1.1",
+        "bare-path": "^2.1.0"
+      }
+    },
+    "node_modules/tar-stream": {
+      "version": "3.1.7",
+      "resolved": "https://registry.npmjs.org/tar-stream/-/tar-stream-3.1.7.tgz",
+      "integrity": "sha512-qJj60CXt7IU1Ffyc3NJMjh6EkuCFej46zUqJ4J7pqYlThyd9bO0XBTmcOIhSzZJVWfsLks0+nle/j538YAW9RQ==",
+      "license": "MIT",
+      "dependencies": {
+        "b4a": "^1.6.4",
+        "fast-fifo": "^1.2.0",
+        "streamx": "^2.15.0"
+      }
+    },
+    "node_modules/test-exclude": {
+      "version": "6.0.0",
+      "resolved": "https://registry.npmjs.org/test-exclude/-/test-exclude-6.0.0.tgz",
+      "integrity": "sha512-cAGWPIyOHU6zlmg88jwm7VRyXnMN7iV68OGAbYDk/Mh/xC/pzVPlQtY6ngoIH/5/tciuhGfvESU8GrHrcxD56w==",
+      "license": "ISC",
+      "dependencies": {
+        "@istanbuljs/schema": "^0.1.2",
+        "glob": "^7.1.4",
+        "minimatch": "^3.0.4"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/test-exclude/node_modules/brace-expansion": {
+      "version": "1.1.11",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
+      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
+      "license": "MIT",
+      "dependencies": {
+        "balanced-match": "^1.0.0",
+        "concat-map": "0.0.1"
+      }
+    },
+    "node_modules/test-exclude/node_modules/glob": {
+      "version": "7.2.3",
+      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
+      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
+      "deprecated": "Glob versions prior to v9 are no longer supported",
+      "license": "ISC",
+      "dependencies": {
+        "fs.realpath": "^1.0.0",
+        "inflight": "^1.0.4",
+        "inherits": "2",
+        "minimatch": "^3.1.1",
+        "once": "^1.3.0",
+        "path-is-absolute": "^1.0.0"
+      },
+      "engines": {
+        "node": "*"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/test-exclude/node_modules/minimatch": {
+      "version": "3.1.2",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
+      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
+      "license": "ISC",
+      "dependencies": {
+        "brace-expansion": "^1.1.7"
+      },
+      "engines": {
+        "node": "*"
+      }
+    },
+    "node_modules/text-decoder": {
+      "version": "1.2.3",
+      "resolved": "https://registry.npmjs.org/text-decoder/-/text-decoder-1.2.3.tgz",
+      "integrity": "sha512-3/o9z3X0X0fTupwsYvR03pJ/DjWuqqrfwBgTQzdWDiQSm9KitAyz/9WqsT2JQW7KV2m+bC2ol/zqpW37NHxLaA==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "b4a": "^1.6.4"
+      }
+    },
+    "node_modules/through": {
+      "version": "2.3.8",
+      "resolved": "https://registry.npmjs.org/through/-/through-2.3.8.tgz",
+      "integrity": "sha512-w89qg7PI8wAdvX60bMDP+bFoD5Dvhm9oLheFp5O4a2QF0cSBGsBX4qZmadPMvVqlLJBBci+WqGGOAPvcDeNSVg==",
+      "license": "MIT"
+    },
+    "node_modules/tmpl": {
+      "version": "1.0.5",
+      "resolved": "https://registry.npmjs.org/tmpl/-/tmpl-1.0.5.tgz",
+      "integrity": "sha512-3f0uOEAQwIqGuWW2MVzYg8fV/QNnc/IpuJNG837rLuczAaLVHslWHZQj4IGiEl5Hs3kkbhwL9Ab7Hrsmuj+Smw==",
+      "license": "BSD-3-Clause"
+    },
+    "node_modules/to-regex-range": {
+      "version": "5.0.1",
+      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
+      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
+      "license": "MIT",
+      "dependencies": {
+        "is-number": "^7.0.0"
+      },
+      "engines": {
+        "node": ">=8.0"
+      }
+    },
+    "node_modules/tslib": {
+      "version": "2.8.1",
+      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.8.1.tgz",
+      "integrity": "sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==",
+      "license": "0BSD"
+    },
+    "node_modules/type-detect": {
+      "version": "4.0.8",
+      "resolved": "https://registry.npmjs.org/type-detect/-/type-detect-4.0.8.tgz",
+      "integrity": "sha512-0fr/mIH1dlO+x7TlcMy+bIDqKPsw/70tVyeHW787goQjhmqaZe10uwLujubK9q9Lg6Fiho1KUKDYz0Z7k7g5/g==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/type-fest": {
+      "version": "4.26.0",
+      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-4.26.0.tgz",
+      "integrity": "sha512-OduNjVJsFbifKb57UqZ2EMP1i4u64Xwow3NYXUtBbD4vIwJdQd4+xl8YDou1dlm4DVrtwT/7Ky8z8WyCULVfxw==",
+      "license": "(MIT OR CC0-1.0)",
+      "engines": {
+        "node": ">=16"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/unbzip2-stream": {
+      "version": "1.4.3",
+      "resolved": "https://registry.npmjs.org/unbzip2-stream/-/unbzip2-stream-1.4.3.tgz",
+      "integrity": "sha512-mlExGW4w71ebDJviH16lQLtZS32VKqsSfk80GCfUlwT/4/hNRFsoscrF/c++9xinkMzECL1uL9DDwXqFWkruPg==",
+      "license": "MIT",
+      "dependencies": {
+        "buffer": "^5.2.1",
+        "through": "^2.3.8"
+      }
+    },
+    "node_modules/unbzip2-stream/node_modules/buffer": {
+      "version": "5.7.1",
+      "resolved": "https://registry.npmjs.org/buffer/-/buffer-5.7.1.tgz",
+      "integrity": "sha512-EHcyIPBQ4BSGlvjB16k5KgAJ27CIsHY/2JBmCRReo48y9rQ3MaUzWX3KVlBa4U7MyX02HdVj0K7C3WaB3ju7FQ==",
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/feross"
+        },
+        {
+          "type": "patreon",
+          "url": "https://www.patreon.com/feross"
+        },
+        {
+          "type": "consulting",
+          "url": "https://feross.org/support"
+        }
+      ],
+      "license": "MIT",
+      "dependencies": {
+        "base64-js": "^1.3.1",
+        "ieee754": "^1.1.13"
+      }
+    },
+    "node_modules/undici": {
+      "version": "6.21.0",
+      "resolved": "https://registry.npmjs.org/undici/-/undici-6.21.0.tgz",
+      "integrity": "sha512-BUgJXc752Kou3oOIuU1i+yZZypyZRqNPW0vqoMPl8VaoalSfeR0D8/t4iAS3yirs79SSMTxTag+ZC86uswv+Cw==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=18.17"
+      }
+    },
+    "node_modules/undici-types": {
+      "version": "6.19.8",
+      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-6.19.8.tgz",
+      "integrity": "sha512-ve2KP6f/JnbPBFyobGHuerC9g1FYGn/F8n1LWTwNxCEzd6IfqTwUQcNXgEtmmQ6DlRrC1hrSrBnCZPokRrDHjw==",
+      "license": "MIT"
+    },
+    "node_modules/update-browserslist-db": {
+      "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.1.2.tgz",
+      "integrity": "sha512-PPypAm5qvlD7XMZC3BujecnaOxwhrtoFR+Dqkk5Aa/6DssiH0ibKoketaj9w8LP7Bont1rYeoV5plxD7RTEPRg==",
+      "funding": [
+        {
+          "type": "opencollective",
+          "url": "https://opencollective.com/browserslist"
+        },
+        {
+          "type": "tidelift",
+          "url": "https://tidelift.com/funding/github/npm/browserslist"
+        },
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/ai"
+        }
+      ],
+      "license": "MIT",
+      "dependencies": {
+        "escalade": "^3.2.0",
+        "picocolors": "^1.1.1"
+      },
+      "bin": {
+        "update-browserslist-db": "cli.js"
+      },
+      "peerDependencies": {
+        "browserslist": ">= 4.21.0"
+      }
+    },
+    "node_modules/urlpattern-polyfill": {
+      "version": "10.0.0",
+      "resolved": "https://registry.npmjs.org/urlpattern-polyfill/-/urlpattern-polyfill-10.0.0.tgz",
+      "integrity": "sha512-H/A06tKD7sS1O1X2SshBVeA5FLycRpjqiBeqGKmBwBDBy28EnRjORxTNe269KSSr5un5qyWi1iL61wLxpd+ZOg==",
+      "license": "MIT"
+    },
+    "node_modules/userhome": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/userhome/-/userhome-1.0.1.tgz",
+      "integrity": "sha512-5cnLm4gseXjAclKowC4IjByaGsjtAoV6PrOQOljplNB54ReUYJP8HdAFq2muHinSDAh09PPX/uXDPfdxRHvuSA==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.8.0"
+      }
+    },
+    "node_modules/util-deprecate": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
+      "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==",
+      "license": "MIT"
+    },
+    "node_modules/v8-to-istanbul": {
+      "version": "9.3.0",
+      "resolved": "https://registry.npmjs.org/v8-to-istanbul/-/v8-to-istanbul-9.3.0.tgz",
+      "integrity": "sha512-kiGUalWN+rgBJ/1OHZsBtU4rXZOfj/7rKQxULKlIzwzQSvMJUUNgPwJEEh7gU6xEVxC0ahoOBvN2YI8GH6FNgA==",
+      "license": "ISC",
+      "dependencies": {
+        "@jridgewell/trace-mapping": "^0.3.12",
+        "@types/istanbul-lib-coverage": "^2.0.1",
+        "convert-source-map": "^2.0.0"
+      },
+      "engines": {
+        "node": ">=10.12.0"
+      }
+    },
+    "node_modules/wait-port": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/wait-port/-/wait-port-1.1.0.tgz",
+      "integrity": "sha512-3e04qkoN3LxTMLakdqeWth8nih8usyg+sf1Bgdf9wwUkp05iuK1eSY/QpLvscT/+F/gA89+LpUmmgBtesbqI2Q==",
+      "license": "MIT",
+      "dependencies": {
+        "chalk": "^4.1.2",
+        "commander": "^9.3.0",
+        "debug": "^4.3.4"
+      },
+      "bin": {
+        "wait-port": "bin/wait-port.js"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/wait-port/node_modules/ansi-styles": {
+      "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
+      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
+      "license": "MIT",
+      "dependencies": {
+        "color-convert": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/wait-port/node_modules/chalk": {
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
+      }
+    },
+    "node_modules/walker": {
+      "version": "1.0.8",
+      "resolved": "https://registry.npmjs.org/walker/-/walker-1.0.8.tgz",
+      "integrity": "sha512-ts/8E8l5b7kY0vlWLewOkDXMmPdLcVV4GmOQLyxuSswIJsweeFZtAsMF7k1Nszz+TYBQrlYRmzOnr398y1JemQ==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "makeerror": "1.0.12"
+      }
+    },
+    "node_modules/web-streams-polyfill": {
+      "version": "3.3.3",
+      "resolved": "https://registry.npmjs.org/web-streams-polyfill/-/web-streams-polyfill-3.3.3.tgz",
+      "integrity": "sha512-d2JWLCivmZYTSIoge9MsgFCZrt571BikcWGYkjC1khllbTeDlGqZ2D8vD8E/lJa8WGWbb7Plm8/XJYV7IJHZZw==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/webdriver": {
+      "version": "9.5.4",
+      "resolved": "https://registry.npmjs.org/webdriver/-/webdriver-9.5.4.tgz",
+      "integrity": "sha512-wmuIL8XMLUUjmpXuQTqH1fhvWnh+8PA4TemYbXfLP/U1gdAowgxy3+rWMc+LGHkDOZLBIB4tHcdxkj7xbSOvLQ==",
+      "license": "MIT",
+      "dependencies": {
+        "@types/node": "^20.1.0",
+        "@types/ws": "^8.5.3",
+        "@wdio/config": "9.5.0",
+        "@wdio/logger": "9.4.4",
+        "@wdio/protocols": "9.4.4",
+        "@wdio/types": "9.5.0",
+        "@wdio/utils": "9.5.0",
+        "deepmerge-ts": "^7.0.3",
+        "undici": "^6.20.1",
+        "ws": "^8.8.0"
+      },
+      "engines": {
+        "node": ">=18.20.0"
+      }
+    },
+    "node_modules/webdriverio": {
+      "version": "9.5.7",
+      "resolved": "https://registry.npmjs.org/webdriverio/-/webdriverio-9.5.7.tgz",
+      "integrity": "sha512-Uvro6y9AvDzlrEzoEM+J/C8/foQVKisvTFXdr+XF63BYsPBKZAhL2cKiHuwwj0FaSVC/VIhd0IVj+oGdkDKs/Q==",
+      "license": "MIT",
+      "dependencies": {
+        "@types/node": "^20.11.30",
+        "@types/sinonjs__fake-timers": "^8.1.5",
+        "@wdio/config": "9.5.0",
+        "@wdio/logger": "9.4.4",
+        "@wdio/protocols": "9.4.4",
+        "@wdio/repl": "9.4.4",
+        "@wdio/types": "9.5.0",
+        "@wdio/utils": "9.5.0",
+        "archiver": "^7.0.1",
+        "aria-query": "^5.3.0",
+        "cheerio": "^1.0.0-rc.12",
+        "css-shorthand-properties": "^1.1.1",
+        "css-value": "^0.0.1",
+        "grapheme-splitter": "^1.0.4",
+        "htmlfy": "^0.5.0",
+        "import-meta-resolve": "^4.0.0",
+        "is-plain-obj": "^4.1.0",
+        "jszip": "^3.10.1",
+        "lodash.clonedeep": "^4.5.0",
+        "lodash.zip": "^4.2.0",
+        "minimatch": "^9.0.3",
+        "query-selector-shadow-dom": "^1.0.1",
+        "resq": "^1.11.0",
+        "rgb2hex": "0.2.5",
+        "serialize-error": "^11.0.3",
+        "urlpattern-polyfill": "^10.0.0",
+        "webdriver": "9.5.4"
+      },
+      "engines": {
+        "node": ">=18.20.0"
+      },
+      "peerDependencies": {
+        "puppeteer-core": "^22.3.0"
+      },
+      "peerDependenciesMeta": {
+        "puppeteer-core": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/whatwg-encoding": {
+      "version": "3.1.1",
+      "resolved": "https://registry.npmjs.org/whatwg-encoding/-/whatwg-encoding-3.1.1.tgz",
+      "integrity": "sha512-6qN4hJdMwfYBtE3YBTTHhoeuUrDBPZmbQaxWAqSALV/MeEnR5z1xd8UKud2RAkFoPkmB+hli1TZSnyi84xz1vQ==",
+      "license": "MIT",
+      "dependencies": {
+        "iconv-lite": "0.6.3"
+      },
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/whatwg-mimetype": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/whatwg-mimetype/-/whatwg-mimetype-4.0.0.tgz",
+      "integrity": "sha512-QaKxh0eNIi2mE9p2vEdzfagOKHCcj1pJ56EEHGQOVxp8r9/iszLUUV7v89x9O1p/T+NlTM5W7jW6+cz4Fq1YVg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/which": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/which/-/which-5.0.0.tgz",
+      "integrity": "sha512-JEdGzHwwkrbWoGOlIHqQ5gtprKGOenpDHpxE9zVR1bWbOtYRyPPHMe9FaP6x61CmNaTThSkb0DAJte5jD+DmzQ==",
+      "license": "ISC",
+      "dependencies": {
+        "isexe": "^3.1.1"
+      },
+      "bin": {
+        "node-which": "bin/which.js"
+      },
+      "engines": {
+        "node": "^18.17.0 || >=20.5.0"
+      }
+    },
+    "node_modules/wrap-ansi": {
+      "version": "8.1.0",
+      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-8.1.0.tgz",
+      "integrity": "sha512-si7QWI6zUMq56bESFvagtmzMdGOtoxfR+Sez11Mobfc7tm+VkUckk9bW2UeffTGVUbOksxmSw0AA2gs8g71NCQ==",
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^6.1.0",
+        "string-width": "^5.0.1",
+        "strip-ansi": "^7.0.1"
+      },
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
+      }
+    },
+    "node_modules/wrap-ansi-cjs": {
+      "name": "wrap-ansi",
+      "version": "7.0.0",
+      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
+      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
+      "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.0.0",
+        "string-width": "^4.1.0",
+        "strip-ansi": "^6.0.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
+      }
+    },
+    "node_modules/wrap-ansi-cjs/node_modules/ansi-regex": {
+      "version": "5.0.1",
+      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
+      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/wrap-ansi-cjs/node_modules/ansi-styles": {
+      "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
+      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
+      "license": "MIT",
+      "dependencies": {
+        "color-convert": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/wrap-ansi-cjs/node_modules/emoji-regex": {
+      "version": "8.0.0",
+      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
+      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
+      "license": "MIT"
+    },
+    "node_modules/wrap-ansi-cjs/node_modules/string-width": {
+      "version": "4.2.3",
+      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
+      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
+      "license": "MIT",
+      "dependencies": {
+        "emoji-regex": "^8.0.0",
+        "is-fullwidth-code-point": "^3.0.0",
+        "strip-ansi": "^6.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/wrap-ansi-cjs/node_modules/strip-ansi": {
+      "version": "6.0.1",
+      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
+      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
+      "license": "MIT",
+      "dependencies": {
+        "ansi-regex": "^5.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/wrappy": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
+      "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==",
+      "license": "ISC"
+    },
+    "node_modules/write-file-atomic": {
+      "version": "4.0.2",
+      "resolved": "https://registry.npmjs.org/write-file-atomic/-/write-file-atomic-4.0.2.tgz",
+      "integrity": "sha512-7KxauUdBmSdWnmpaGFg+ppNjKF8uNLry8LyzjauQDOVONfFLNKrKvQOxZ/VuTIcS/gge/YNahf5RIIQWTSarlg==",
+      "license": "ISC",
+      "dependencies": {
+        "imurmurhash": "^0.1.4",
+        "signal-exit": "^3.0.7"
+      },
+      "engines": {
+        "node": "^12.13.0 || ^14.15.0 || >=16.0.0"
+      }
+    },
+    "node_modules/write-file-atomic/node_modules/signal-exit": {
+      "version": "3.0.7",
+      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
+      "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==",
+      "license": "ISC"
+    },
+    "node_modules/ws": {
+      "version": "8.18.0",
+      "resolved": "https://registry.npmjs.org/ws/-/ws-8.18.0.tgz",
+      "integrity": "sha512-8VbfWfHLbbwu3+N6OKsOMpBdT4kXPDDB9cJk2bJ6mh9ucxdlnNvH1e+roYkKmN9Nxw2yjz7VzeO9oOz2zJ04Pw==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=10.0.0"
+      },
+      "peerDependencies": {
+        "bufferutil": "^4.0.1",
+        "utf-8-validate": ">=5.0.2"
+      },
+      "peerDependenciesMeta": {
+        "bufferutil": {
+          "optional": true
+        },
+        "utf-8-validate": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/y18n": {
+      "version": "5.0.8",
+      "resolved": "https://registry.npmjs.org/y18n/-/y18n-5.0.8.tgz",
+      "integrity": "sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==",
+      "license": "ISC",
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/yallist": {
+      "version": "3.1.1",
+      "resolved": "https://registry.npmjs.org/yallist/-/yallist-3.1.1.tgz",
+      "integrity": "sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==",
+      "license": "ISC"
+    },
+    "node_modules/yargs": {
+      "version": "17.7.2",
+      "resolved": "https://registry.npmjs.org/yargs/-/yargs-17.7.2.tgz",
+      "integrity": "sha512-7dSzzRQ++CKnNI/krKnYRV7JKKPUXMEh61soaHKg9mrWEhzFWhFnxPxGl+69cD1Ou63C13NUPCnmIcrvqCuM6w==",
+      "license": "MIT",
+      "dependencies": {
+        "cliui": "^8.0.1",
+        "escalade": "^3.1.1",
+        "get-caller-file": "^2.0.5",
+        "require-directory": "^2.1.1",
+        "string-width": "^4.2.3",
+        "y18n": "^5.0.5",
+        "yargs-parser": "^21.1.1"
+      },
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/yargs-parser": {
+      "version": "21.1.1",
+      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-21.1.1.tgz",
+      "integrity": "sha512-tVpsJW7DdjecAiFpbIB1e3qxIQsE6NoPc5/eTdrbbIC4h0LVsWhnoa3g+m2HclBIujHzsxZ4VJVA+GUuc2/LBw==",
+      "license": "ISC",
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/yargs/node_modules/ansi-regex": {
+      "version": "5.0.1",
+      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
+      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/yargs/node_modules/emoji-regex": {
+      "version": "8.0.0",
+      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
+      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
+      "license": "MIT"
+    },
+    "node_modules/yargs/node_modules/string-width": {
+      "version": "4.2.3",
+      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
+      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
+      "license": "MIT",
+      "dependencies": {
+        "emoji-regex": "^8.0.0",
+        "is-fullwidth-code-point": "^3.0.0",
+        "strip-ansi": "^6.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/yargs/node_modules/strip-ansi": {
+      "version": "6.0.1",
+      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
+      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
+      "license": "MIT",
+      "dependencies": {
+        "ansi-regex": "^5.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/yauzl": {
+      "version": "2.10.0",
+      "resolved": "https://registry.npmjs.org/yauzl/-/yauzl-2.10.0.tgz",
+      "integrity": "sha512-p4a9I6X6nu6IhoGmBqAcbJy1mlC4j27vEPZX9F4L4/vZT3Lyq1VkFHw/V/PUcB9Buo+DG3iHkT0x3Qya58zc3g==",
+      "license": "MIT",
+      "dependencies": {
+        "buffer-crc32": "~0.2.3",
+        "fd-slicer": "~1.1.0"
+      }
+    },
+    "node_modules/yauzl/node_modules/buffer-crc32": {
+      "version": "0.2.13",
+      "resolved": "https://registry.npmjs.org/buffer-crc32/-/buffer-crc32-0.2.13.tgz",
+      "integrity": "sha512-VO9Ht/+p3SN7SKWqcrgEzjGbRSJYTx+Q1pTQC0wrWqHx0vpJraQ6GtHx8tvcg1rlK1byhU5gccxgOgj7B0TDkQ==",
+      "license": "MIT",
+      "engines": {
+        "node": "*"
+      }
+    },
+    "node_modules/yocto-queue": {
+      "version": "0.1.0",
+      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
+      "integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/zip-stream": {
+      "version": "6.0.1",
+      "resolved": "https://registry.npmjs.org/zip-stream/-/zip-stream-6.0.1.tgz",
+      "integrity": "sha512-zK7YHHz4ZXpW89AHXUPbQVGKI7uvkd3hzusTdotCg1UxyaVtg0zFJSTfW/Dq5f7OBBVnq6cZIaC8Ti4hb6dtCA==",
+      "license": "MIT",
+      "dependencies": {
+        "archiver-utils": "^5.0.0",
+        "compress-commons": "^6.0.2",
+        "readable-stream": "^4.0.0"
+      },
+      "engines": {
+        "node": ">= 14"
+      }
+    }
+  }
+}
diff --git a/packages/passkeys/passkeys/example/tests/package.json b/packages/passkeys/passkeys/example/tests/package.json
new file mode 100644
index 0000000..5b6b9d2
--- /dev/null
+++ b/packages/passkeys/passkeys/example/tests/package.json
@@ -0,0 +1,15 @@
+{
+  "type": "module",
+  "scripts": {
+    "test:android": "node --experimental-vm-modules node_modules/jest/bin/jest.js android.spec.js",
+    "test:ios": "node --experimental-vm-modules node_modules/jest/bin/jest.js ios.spec.js"
+  },
+  "jest": {
+    "testTimeout": 20000
+  },
+  "dependencies": {
+    "appium-flutter-finder": "^0.2.0",
+    "jest": "^29.7.0",
+    "webdriverio": "^9.5.7"
+  }
+}
diff --git a/packages/passkeys/passkeys/example/tests/util.js b/packages/passkeys/passkeys/example/tests/util.js
new file mode 100644
index 0000000..49a4f01
--- /dev/null
+++ b/packages/passkeys/passkeys/example/tests/util.js
@@ -0,0 +1,3 @@
+export function delay(ms) {
+    return new Promise(resolve => setTimeout(resolve, ms));
+}
\ No newline at end of file
diff --git a/packages/passkeys/passkeys/example/web/bundle.js b/packages/passkeys/passkeys/example/web/bundle.js
index f36999d..fbec4a7 100644
--- a/packages/passkeys/passkeys/example/web/bundle.js
+++ b/packages/passkeys/passkeys/example/web/bundle.js
@@ -1,39 +1,39 @@
 var PasskeyAuthenticator = (function (exports) {
     'use strict';
 
-    /******************************************************************************
-    Copyright (c) Microsoft Corporation.
-
-    Permission to use, copy, modify, and/or distribute this software for any
-    purpose with or without fee is hereby granted.
-
-    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
-    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
-    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
-    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
-    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
-    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
-    PERFORMANCE OF THIS SOFTWARE.
-    ***************************************************************************** */
-    /* global Reflect, Promise, SuppressedError, Symbol */
-
-
-    function __classPrivateFieldGet(receiver, state, kind, f) {
-        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
-        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
-        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
-    }
-
-    function __classPrivateFieldSet(receiver, state, value, kind, f) {
-        if (kind === "m") throw new TypeError("Private method is not writable");
-        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
-        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
-        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
-    }
-
-    typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
-        var e = new Error(message);
-        return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
+    /******************************************************************************
+    Copyright (c) Microsoft Corporation.
+
+    Permission to use, copy, modify, and/or distribute this software for any
+    purpose with or without fee is hereby granted.
+
+    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
+    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
+    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
+    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
+    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
+    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
+    PERFORMANCE OF THIS SOFTWARE.
+    ***************************************************************************** */
+    /* global Reflect, Promise, SuppressedError, Symbol */
+
+
+    function __classPrivateFieldGet(receiver, state, kind, f) {
+        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
+        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
+        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
+    }
+
+    function __classPrivateFieldSet(receiver, state, value, kind, f) {
+        if (kind === "m") throw new TypeError("Private method is not writable");
+        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
+        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
+        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
+    }
+
+    typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
+        var e = new Error(message);
+        return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
     };
 
     // src/webauthn-json/base64url.ts
@@ -80,7 +80,7 @@ var PasskeyAuthenticator = (function (exports) {
         for (const [key, schemaField] of Object.entries(schema2)) {
           if (schemaField.derive) {
             const v = schemaField.derive(input);
-            if (v !== void 0) {
+            if (v !== undefined) {
               input[key] = v;
             }
           }
@@ -169,7 +169,7 @@ var PasskeyAuthenticator = (function (exports) {
           copyValue,
           (response) => {
             var _a;
-            return ((_a = response.getTransports) == null ? void 0 : _a.call(response)) || [];
+            return ((_a = response.getTransports) == null ? undefined : _a.call(response)) || [];
           }
         )
       }),
@@ -245,7 +245,7 @@ var PasskeyAuthenticator = (function (exports) {
     const ABORTED_BY_USER = 'operation aborted by user.';
     class PasskeyAuthenticator {
         constructor() {
-            _PasskeyAuthenticator_abortController.set(this, void 0);
+            _PasskeyAuthenticator_abortController.set(this, undefined);
         }
         async register(params) {
             try {
@@ -326,8 +326,30 @@ var PasskeyAuthenticator = (function (exports) {
     }
 
     let passkeyAuthenticator = new PasskeyAuthenticator();
-    async function canAuthenticate() {
-        return await PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable();
+    async function isUserVerifyingPlatformAuthenticatorAvailable() {
+        if (!window.PublicKeyCredential) {
+            return undefined;
+        }
+        try {
+            return await window.PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable();
+        }
+        catch (e) {
+            return undefined;
+        }
+    }
+    async function isConditionalMediationAvailable() {
+        if (!window.PublicKeyCredential) {
+            return undefined;
+        }
+        try {
+            return await window.PublicKeyCredential.isConditionalMediationAvailable();
+        }
+        catch (e) {
+            return undefined;
+        }
+    }
+    function hasPasskeySupport() {
+        return Boolean(window.PublicKeyCredential);
     }
     function init() {
         passkeyAuthenticator = new PasskeyAuthenticator();
@@ -342,9 +364,11 @@ var PasskeyAuthenticator = (function (exports) {
         passkeyAuthenticator.abortCurrentWebAuthnOperation();
     }
 
-    exports.canAuthenticate = canAuthenticate;
     exports.cancelCurrentAuthenticatorOperation = cancelCurrentAuthenticatorOperation;
+    exports.hasPasskeySupport = hasPasskeySupport;
     exports.init = init;
+    exports.isConditionalMediationAvailable = isConditionalMediationAvailable;
+    exports.isUserVerifyingPlatformAuthenticatorAvailable = isUserVerifyingPlatformAuthenticatorAvailable;
     exports.login = login;
     exports.register = register;
 
diff --git a/packages/passkeys/passkeys/example/web/index.html b/packages/passkeys/passkeys/example/web/index.html
index b88ec20..acbcf5e 100644
--- a/packages/passkeys/passkeys/example/web/index.html
+++ b/packages/passkeys/passkeys/example/web/index.html
@@ -18,7 +18,9 @@
 </head>
 <body>
 
-<script src="bundle.js" type="application/javascript"></script>
-<script src="main.dart.js" type="application/javascript"></script>
+<!-- Use this script instead when you are developing to check changes in real-time -->
+<!-- <script src="bundle.js" type="application/javascript"></script> -->
+<script src="https://github.com/corbado/flutter-passkeys/releases/download/2.4.0/bundle.js"></script>
+<script src="flutter_bootstrap.js" type="application/javascript"></script>
 </body>
 </html>
diff --git a/packages/passkeys/passkeys/lib/authenticator.dart b/packages/passkeys/passkeys/lib/authenticator.dart
index 5b82c86..e29938c 100644
--- a/packages/passkeys/passkeys/lib/authenticator.dart
+++ b/packages/passkeys/passkeys/lib/authenticator.dart
@@ -1,4 +1,5 @@
 import 'package:flutter/services.dart';
+import 'package:passkeys/availability.dart';
 import 'package:passkeys/types.dart';
 import 'package:passkeys_platform_interface/passkeys_platform_interface.dart';
 
@@ -11,6 +12,7 @@ class PasskeyAuthenticator {
   final PasskeysPlatform _platform;
 
   /// Returns true only if passkeys are supported by the platform.
+  @deprecated
   Future<bool> canAuthenticate() {
     return _platform.canAuthenticate();
   }
@@ -38,6 +40,14 @@ class PasskeyAuthenticator {
           throw MissingGoogleSignInException();
         case 'android-sync-account-not-available':
           throw SyncAccountNotAvailableException();
+        case 'domain-not-associated':
+          throw DomainNotAssociatedException(e.message);
+        case 'deviceNotSupported':
+          throw DeviceNotSupportedException();
+        case 'android-timeout':
+          throw TimeoutException(e.message);
+        case 'ios-security-key-timeout':
+          throw TimeoutException(e.message);
         default:
           rethrow;
       }
@@ -48,8 +58,8 @@ class PasskeyAuthenticator {
   /// Returns [AuthenticateResponseType] which must be sent to the relying party
   /// server.
   Future<AuthenticateResponseType> authenticate(
-    AuthenticateRequestType request,
-  ) async {
+      AuthenticateRequestType request,
+      ) async {
     try {
       await _platform.cancelCurrentAuthenticatorOperation();
       final r = await _platform.authenticate(request);
@@ -57,10 +67,22 @@ class PasskeyAuthenticator {
       return r;
     } on PlatformException catch (e) {
       switch (e.code) {
+        case 'domain-not-associated':
+          throw DomainNotAssociatedException(e.message);
+        case 'no-credentials-available':
+          throw NoCredentialsAvailableException();
         case 'cancelled':
           throw PasskeyAuthCancelledException();
         case 'android-no-credential':
           throw NoCredentialsAvailableException();
+        case 'deviceNotSupported':
+          throw DeviceNotSupportedException();
+        case 'android-no-create-option':
+          throw NoCreateOptionException(e.message);
+        case 'android-timeout':
+          throw TimeoutException(e.message);
+        case 'ios-security-key-timeout':
+          throw TimeoutException(e.message);
         default:
           if (e.code.startsWith('android-unhandled')) {
             throw UnhandledAuthenticatorException(e.code, e.message, e.details);
@@ -72,4 +94,25 @@ class PasskeyAuthenticator {
       }
     }
   }
-}
+
+  /// Returns platform-specific information about the availability of passkeys.
+  ///
+  /// This function returns an instance of [GetAvailability], which provides
+  /// platform-specific methods to query the availability of passkeys.
+  ///
+  /// Supported methods:
+  /// - [GetAvailability.web]: For web-based platforms.
+  /// - [GetAvailability.android]: For Android platforms.
+  /// - [GetAvailability.iOS]: For iOS platforms.
+  ///
+  /// ### Example Usage
+  /// ```dart
+  /// final webAvailability = await getAvailability().web();
+  /// final androidAvailability = await getAvailability().android();
+  /// final iosAvailability = await getAvailability().iOS();
+  /// ```
+  ///
+  /// ### Notes
+  /// - Ensure you are using the correct method for the platform being queried.
+  GetAvailability getAvailability() => GetAvailability(platform: _platform);
+}
\ No newline at end of file
diff --git a/packages/passkeys/passkeys/lib/availability.dart b/packages/passkeys/passkeys/lib/availability.dart
new file mode 100644
index 0000000..c4c080f
--- /dev/null
+++ b/packages/passkeys/passkeys/lib/availability.dart
@@ -0,0 +1,43 @@
+import 'package:passkeys_platform_interface/passkeys_platform_interface.dart';
+import 'package:passkeys_platform_interface/types/types.dart';
+
+/// Provides platform-specific methods to query the availability of passkeys.
+///
+/// The [GetAvailability] class acts as a wrapper around the [PasskeysPlatform]
+/// interface, exposing methods to check the availability of passkeys on different platforms.
+///
+/// Supported methods:
+/// - [Web]: Queries availability for web-based platforms.
+/// - [Android]: Queries availability for Android platforms.
+/// - [IOS]: Queries availability for iOS platforms.
+///
+/// ### Example Usage
+/// ```dart
+/// final availabilityChecker = GetAvailability(platform: myPlatformInstance);
+/// final webAvailability = await availabilityChecker.web();
+/// final androidAvailability = await availabilityChecker.android();
+/// final iosAvailability = await availabilityChecker.iOS();
+/// ```
+///
+/// ### Constructor
+/// - [GetAvailability]: Requires a [PasskeysPlatform] instance to function.
+class GetAvailability {
+  GetAvailability({required PasskeysPlatform platform}) : _platform = platform;
+
+  final PasskeysPlatform _platform;
+
+  /// Queries the availability of passkeys for web-based platforms.
+  Future<AvailabilityTypeWeb> web() {
+    return _platform.getAvailability() as Future<AvailabilityTypeWeb>;
+  }
+
+  /// Queries the availability of passkeys for Android platforms.
+  Future<AvailabilityTypeAndroid> android() {
+    return _platform.getAvailability() as Future<AvailabilityTypeAndroid>;
+  }
+
+  /// Queries the availability of passkeys for iOS platforms.
+  Future<AvailabilityTypeIOS> iOS() {
+    return _platform.getAvailability() as Future<AvailabilityTypeIOS>;
+  }
+}
diff --git a/packages/passkeys/passkeys/lib/exceptions.dart b/packages/passkeys/passkeys/lib/exceptions.dart
index 01599de..3f92c63 100644
--- a/packages/passkeys/passkeys/lib/exceptions.dart
+++ b/packages/passkeys/passkeys/lib/exceptions.dart
@@ -67,6 +67,54 @@ class NoCredentialsAvailableException implements AuthenticatorException {
   NoCredentialsAvailableException();
 }
 
+class DomainNotAssociatedException implements AuthenticatorException {
+  final String? message;
+  /// Constructor
+  DomainNotAssociatedException(this.message);
+
+  String toString() => message ?? '';
+}
+
+/// This exception is thrown when the device does not support passkeys.
+/// Suggestions:
+/// - update the device OS to a newer version
+class DeviceNotSupportedException implements AuthenticatorException {
+  /// Constructor
+  DeviceNotSupportedException();
+}
+
+/// During the create credential flow, this is thrown when no viable creation
+/// options were found for the given CreateCredentialRequest. (no passkeys
+/// providers available or none enabled)
+///
+/// Platforms: Android
+///
+/// Suggestions:
+/// - use a fallback method (e.g. redirect the user to the device settings)
+/// - ask the user to enable passkeys in the device settings
+class NoCreateOptionException implements AuthenticatorException {
+  final String? message;
+  /// Constructor
+  NoCreateOptionException(this.message);
+
+  String toString() => message ?? '';
+}
+
+/// This exception is thrown when the user tries to login or register but the
+/// operation times out.
+///
+/// Platforms: Android, iOS
+///
+/// Suggestions:
+/// - ask the user to try again
+class TimeoutException implements AuthenticatorException {
+  final String? message;
+  /// Constructor
+  TimeoutException(this.message);
+
+  String toString() => message ?? '';
+}
+
 /// This exception is thrown when an exception is thrown by the authenticator
 /// that we do not handle so far in this package.
 ///
diff --git a/packages/passkeys/passkeys/pubspec.yaml b/packages/passkeys/passkeys/pubspec.yaml
index 959958e..bb19511 100644
--- a/packages/passkeys/passkeys/pubspec.yaml
+++ b/packages/passkeys/passkeys/pubspec.yaml
@@ -2,7 +2,7 @@ name: passkeys
 description: Flutter plugin enabling simple passkey authentication. Can be either used with a ready-to-use relying party server (Corbado) or with your custom relying party.
 homepage: https://docs.corbado.com/overview/welcome
 repository: https://github.com/corbado/flutter-passkeys/tree/main/packages/passkeys/passkeys
-version: 2.0.7
+version: 2.7.0
 
 environment:
   sdk: ">=3.0.0 <4.0.0"
@@ -20,15 +20,13 @@ flutter:
 
 dependencies:
   convert: ^3.1.1
-  corbado_frontend_api_client: ^1.1.0
   flutter:
     sdk: flutter
   json_annotation: ^4.8.1
-  openapi_generator_annotations: ^4.10.0
-  passkeys_android: ^2.0.3
-  passkeys_ios: ^2.0.3
-  passkeys_platform_interface: ^2.0.1
-  passkeys_web: ^2.0.1
+  passkeys_android: ^2.7.0
+  passkeys_ios: ^2.6.0
+  passkeys_platform_interface: ^2.3.1
+  passkeys_web: ^2.5.0
   ua_client_hints: ^1.1.3
 
 dev_dependencies:
@@ -37,7 +35,6 @@ dev_dependencies:
     sdk: flutter
   json_serializable: ^6.7.0
   mocktail: ^1.0.0
-  openapi_generator: ^4.10.0
   plugin_platform_interface: ^2.0.0
   very_good_analysis: ^5.0.0
 
diff --git a/packages/passkeys/passkeys_android/CHANGELOG.md b/packages/passkeys/passkeys_android/CHANGELOG.md
index 11c990f..0577e69 100644
--- a/packages/passkeys/passkeys_android/CHANGELOG.md
+++ b/packages/passkeys/passkeys_android/CHANGELOG.md
@@ -1,3 +1,31 @@
+## 2.7.0
+* Implement `passkeys_platform_interface 2.3.1`
+* Handles timeout exceptions
+
+## 2.6.0
+* Added `transports` to RegistrationResponse
+* Fixes `hasPasskeySupport` in `getAvailability`
+
+## 2.5.0
+* Added `getAvailability` api to check for passkey support
+* Upgrade `androidx.credentials:credentials` to 1.3.0
+
+## 2.4.0
+* Added handling for `CreateCredentialNoCreateOptionException` when no viable creation options were found 
+
+## 2.3.0
+* Fixed `requireResidentKey` mapping error (string instead of boolean) causing 1Password failures
+* Added support for `preferImmediatelyAvailableCredentials`
+
+## 2.2.0
+* Added support for AGP 8.0 and newer
+
+## 2.1.0
+* Added support for preferImmediatelyAvailableCredentials
+
+## 2.0.4
+* Added NoCredentialsAvailableException to indicate that no credentials are available during a login
+
 ## 2.0.3
 * Bump androidx.credentials:credentials to 1.2.0 => release builds will no work on Android 13 and below without custom proguard rules
 
diff --git a/packages/passkeys/passkeys_android/android/build.gradle b/packages/passkeys/passkeys_android/android/build.gradle
index abfe533..f5594ef 100644
--- a/packages/passkeys/passkeys_android/android/build.gradle
+++ b/packages/passkeys/passkeys_android/android/build.gradle
@@ -25,6 +25,11 @@ apply plugin: 'com.android.library'
 apply plugin: 'kotlin-android'
 
 android {
+    // Conditional for compatibility with AGP <4.2.
+    if (project.android.hasProperty("namespace")) {
+        namespace 'com.corbado.passkeys_android'
+    }
+
     compileSdkVersion 34
 
     compileOptions {
@@ -49,11 +54,11 @@ android {
 dependencies {
     implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
     implementation 'androidx.annotation:annotation:1.6.0'
-    implementation("androidx.credentials:credentials:1.2.2")
+    implementation("androidx.credentials:credentials:1.3.0")
 
     // optional - needed for credentials support from play services, for devices running
     // Android 13 and below.0
-    implementation("androidx.credentials:credentials-play-services-auth:1.2.2")
+    implementation("androidx.credentials:credentials-play-services-auth:1.3.0")
     implementation 'com.google.android.gms:play-services-auth:20.5.0'
     implementation 'com.google.android.gms:play-services-fido:20.0.1'
     implementation 'androidx.multidex:multidex:2.0.1'
diff --git a/packages/passkeys/passkeys_android/android/src/main/java/com/corbado/passkeys_android/MessageHandler.java b/packages/passkeys/passkeys_android/android/src/main/java/com/corbado/passkeys_android/MessageHandler.java
index b124da5..bbf1390 100644
--- a/packages/passkeys/passkeys_android/android/src/main/java/com/corbado/passkeys_android/MessageHandler.java
+++ b/packages/passkeys/passkeys_android/android/src/main/java/com/corbado/passkeys_android/MessageHandler.java
@@ -1,9 +1,6 @@
 package com.corbado.passkeys_android;
 
 import android.app.Activity;
-import android.content.pm.PackageManager;
-import android.content.pm.Signature;
-import android.os.Build;
 import android.os.CancellationSignal;
 import android.util.Log;
 
@@ -20,17 +17,17 @@ import androidx.credentials.GetPublicKeyCredentialOption;
 import androidx.credentials.PublicKeyCredential;
 import androidx.credentials.exceptions.CreateCredentialCancellationException;
 import androidx.credentials.exceptions.CreateCredentialException;
+import androidx.credentials.exceptions.CreateCredentialNoCreateOptionException;
 import androidx.credentials.exceptions.GetCredentialCancellationException;
 import androidx.credentials.exceptions.GetCredentialException;
 import androidx.credentials.exceptions.NoCredentialException;
 import androidx.credentials.exceptions.publickeycredential.CreatePublicKeyCredentialDomException;
-import androidx.credentials.exceptions.publickeycredential.CreatePublicKeyCredentialException;
 import androidx.credentials.exceptions.publickeycredential.GetPublicKeyCredentialDomException;
 
 import com.corbado.passkeys_android.models.login.AllowCredentialType;
+import com.corbado.passkeys_android.models.login.GetCredentialOptions;
 import com.corbado.passkeys_android.models.signup.AuthenticatorSelectionType;
 import com.corbado.passkeys_android.models.signup.CreateCredentialOptions;
-import com.corbado.passkeys_android.models.login.GetCredentialOptions;
 import com.corbado.passkeys_android.models.signup.ExcludeCredentialType;
 import com.corbado.passkeys_android.models.signup.PubKeyCredParamType;
 import com.corbado.passkeys_android.models.signup.RelyingPartyType;
@@ -39,11 +36,10 @@ import com.google.android.gms.fido.Fido;
 import com.google.android.gms.fido.fido2.Fido2ApiClient;
 import com.google.android.gms.tasks.Task;
 
+import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
 
-import java.security.MessageDigest;
-import java.security.NoSuchAlgorithmException;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Objects;
@@ -55,6 +51,8 @@ public class MessageHandler implements Messages.PasskeysApi {
     private static final String SYNC_ACCOUNT_NOT_AVAILABLE_ERROR = "Sync account could not be accessed. If you are running on an emulator, please restart that device (select 'Could boot now').";
     private static final String MISSING_GOOGLE_SIGN_IN_ERROR = "Please sign in with a Google account first to create a new passkey.";
     private static final String EXCLUDE_CREDENTIALS_MATCH_ERROR = "You can not create a credential on this device because one of the excluded credentials exists on the local device.";
+    private static final String MISSING_CREATION_OPTIONS = "Please make sure you enable a passwords or passkeys provider in your device settings.";
+    private static final String TIMEOUT_ERROR = "Passkey operation timed out, please try again";
 
     private final FlutterPasskeysPlugin plugin;
 
@@ -66,7 +64,6 @@ public class MessageHandler implements Messages.PasskeysApi {
 
     @Override
     public void canAuthenticate(@NonNull Messages.Result<Boolean> result) {
-
         Activity activity = plugin.requireActivity();
         Fido2ApiClient fido2ApiClient = Fido.getFido2ApiClient(activity.getApplicationContext());
 
@@ -90,12 +87,16 @@ public class MessageHandler implements Messages.PasskeysApi {
 
         UserType userType = new UserType(user.getName(), user.getDisplayName(), user.getId(), user.getIcon());
         RelyingPartyType relyingPartyType = new RelyingPartyType(relyingParty.getId(), relyingParty.getName());
-        AuthenticatorSelectionType authSelectionType = new AuthenticatorSelectionType(authenticatorSelection.getAuthenticatorAttachment(), authenticatorSelection.getRequireResidentKey(), authenticatorSelection.getResidentKey(), authenticatorSelection.getUserVerification());
+        AuthenticatorSelectionType authSelectionType = new AuthenticatorSelectionType(
+                authenticatorSelection.getAuthenticatorAttachment(), authenticatorSelection.getRequireResidentKey(),
+                authenticatorSelection.getResidentKey(), authenticatorSelection.getUserVerification());
         List<PubKeyCredParamType> pubKeyCredParamsType = new ArrayList<>();
         if (pubKeyCredParams != null) {
-            pubKeyCredParamsType = pubKeyCredParams.stream().map(p -> new PubKeyCredParamType(p.getType(), p.getAlg())).collect(Collectors.toList());
+            pubKeyCredParamsType = pubKeyCredParams.stream().map(p -> new PubKeyCredParamType(p.getType(), p.getAlg()))
+                    .collect(Collectors.toList());
         }
-        final List<ExcludeCredentialType> excludeCredentialsType = excludeCredentials.stream().map(c -> new ExcludeCredentialType(c.getType(), c.getId())).collect(Collectors.toList());
+        final List<ExcludeCredentialType> excludeCredentialsType = excludeCredentials.stream()
+                .map(c -> new ExcludeCredentialType(c.getType(), c.getId())).collect(Collectors.toList());
 
         CreateCredentialOptions createCredentialOptions = new CreateCredentialOptions(
                 challenge,
@@ -105,56 +106,76 @@ public class MessageHandler implements Messages.PasskeysApi {
                 timeout,
                 authSelectionType,
                 attestation,
-                excludeCredentialsType
-        );
+                excludeCredentialsType);
 
         try {
             String options = createCredentialOptions.toJSON().toString();
 
             Activity activity = plugin.requireActivity();
             CredentialManager credentialManager = CredentialManager.create(activity);
-            CreatePublicKeyCredentialRequest createPublicKeyCredentialRequest = new CreatePublicKeyCredentialRequest(options);
+            CreatePublicKeyCredentialRequest createPublicKeyCredentialRequest = new CreatePublicKeyCredentialRequest(
+                    options);
             currentCancellationSignal = new CancellationSignal();
-            credentialManager.createCredentialAsync(activity, createPublicKeyCredentialRequest, currentCancellationSignal, Runnable::run, new CredentialManagerCallback<CreateCredentialResponse, CreateCredentialException>() {
-
-                @Override
-                public void onResult(CreateCredentialResponse res) {
-                    String resp = res.getData().getString("androidx.credentials.BUNDLE_KEY_REGISTRATION_RESPONSE_JSON");
-                    try {
-                        JSONObject json = new JSONObject(resp);
-                        JSONObject response = json.getJSONObject("response");
-                        result.success(new Messages.RegisterResponse.Builder().setId(json.getString("id")).setRawId(json.getString("rawId")).setClientDataJSON(response.getString("clientDataJSON")).setAttestationObject(response.getString("attestationObject")).build());
-                    } catch (JSONException e) {
-                        Log.e(TAG, "Error parsing response: " + resp, e);
-                        result.error(e);
-                    }
-                }
-
-                @Override
-                public void onError(CreateCredentialException e) {
-                    Exception platformException = e;
-                    if (Objects.equals(e.getMessage(), "Unable to create key during registration")) {
-                        // currently, Android throws this error when users skip the fingerPrint animation => we interpret this as a cancellation for now
-                        platformException = new Messages.FlutterError("cancelled", e.getMessage(), "");
-                    } else if (e instanceof CreateCredentialCancellationException) {
-                        platformException = new Messages.FlutterError("cancelled", e.getMessage(), "");
-                    } else if (e instanceof CreatePublicKeyCredentialDomException) {
-                        if (Objects.equals(e.getMessage(), "User is unable to create passkeys.")) {
-                            platformException = new Messages.FlutterError("android-missing-google-sign-in", e.getMessage(), MISSING_GOOGLE_SIGN_IN_ERROR);
-                        } else if (Objects.equals(e.getMessage(), "Unable to get sync account.")) {
-                            platformException = new Messages.FlutterError("android-sync-account-not-available", e.getMessage(), SYNC_ACCOUNT_NOT_AVAILABLE_ERROR);
-                        } else if (Objects.equals(e.getMessage(), "One of the excluded credentials exists on the local device")) {
-                            platformException = new Messages.FlutterError("exclude-credentials-match", e.getMessage(), EXCLUDE_CREDENTIALS_MATCH_ERROR);
-                        } else {
-                            platformException = new Messages.FlutterError("android-unhandled: " + e.getType(), e.getMessage(), e.getErrorMessage());
+            credentialManager.createCredentialAsync(activity, createPublicKeyCredentialRequest,
+                    currentCancellationSignal, Runnable::run,
+                    new CredentialManagerCallback<CreateCredentialResponse, CreateCredentialException>() {
+
+                        @Override
+                        public void onResult(CreateCredentialResponse res) {
+                            String resp = res.getData()
+                                    .getString("androidx.credentials.BUNDLE_KEY_REGISTRATION_RESPONSE_JSON");
+                            try {
+                                JSONObject json = new JSONObject(resp);
+                                JSONObject response = json.getJSONObject("response");
+
+                                List<String> typedTransports = new ArrayList<>();
+                                JSONArray transports = response.getJSONArray("transports");
+                                for (int i = 0; i < transports.length(); i++) {
+                                    typedTransports.add(transports.getString(i));
+                                }
+
+                                result.success(new Messages.RegisterResponse.Builder()
+                                        .setId(json.getString("id"))
+                                        .setRawId(json.getString("rawId"))
+                                        .setClientDataJSON(response.getString("clientDataJSON"))
+                                        .setAttestationObject(response.getString("attestationObject"))
+                                        .setTransports(typedTransports)
+                                        .build());
+                            } catch (JSONException e) {
+                                Log.e(TAG, "Error parsing response: " + resp, e);
+                                result.error(e);
+                            }
                         }
-                    } else {
-                        platformException = new Messages.FlutterError("android-unhandled" + e.getType(), e.getMessage(), e.getErrorMessage());
-                    }
 
-                    result.error(platformException);
-                }
-            });
+                        @Override
+                        public void onError(CreateCredentialException e) {
+                            Exception platformException = e;
+                            if (Objects.equals(e.getMessage(), "Unable to create key during registration")) {
+                                // currently, Android throws this error when users skip the fingerPrint animation => we interpret this as a cancellation for now
+                                platformException = new Messages.FlutterError("cancelled", e.getMessage(), "");
+                            } else if (e instanceof CreateCredentialCancellationException) {
+                                platformException = new Messages.FlutterError("cancelled", e.getMessage(), "");
+                            } else if (e instanceof CreatePublicKeyCredentialDomException) {
+                                if (Objects.equals(e.getMessage(), "User is unable to create passkeys.")) {
+                                    platformException = new Messages.FlutterError("android-missing-google-sign-in", e.getMessage(), MISSING_GOOGLE_SIGN_IN_ERROR);
+                                } else if (Objects.equals(e.getMessage(), "Unable to get sync account.")) {
+                                    platformException = new Messages.FlutterError("android-sync-account-not-available", e.getMessage(), SYNC_ACCOUNT_NOT_AVAILABLE_ERROR);
+                                } else if (Objects.equals(e.getMessage(), "One of the excluded credentials exists on the local device")) {
+                                    platformException = new Messages.FlutterError("exclude-credentials-match", e.getMessage(), EXCLUDE_CREDENTIALS_MATCH_ERROR);
+                                } else if (Objects.equals(e.getMessage(), "[15] Flow has timed out.")) {
+                                    platformException = new Messages.FlutterError("android-timeout", e.getMessage(), TIMEOUT_ERROR);
+                                } else {
+                                    platformException = new Messages.FlutterError("android-unhandled: " + e.getType(), e.getMessage(), e.getErrorMessage());
+                                }
+                            } else if (e instanceof CreateCredentialNoCreateOptionException) {
+                                platformException = new Messages.FlutterError("android-no-create-option", e.getMessage(), MISSING_CREATION_OPTIONS);
+                            } else {
+                                platformException = new Messages.FlutterError("android-unhandled" + e.getType(), e.getMessage(), e.getErrorMessage());
+                            }
+
+                            result.error(platformException);
+                        }
+                    });
         } catch (JSONException e) {
             Log.e(TAG, "Error creating JSON", e);
             result.error(e);
@@ -162,22 +183,32 @@ public class MessageHandler implements Messages.PasskeysApi {
     }
 
     @Override
-    public void authenticate(@NonNull String relyingPartyId, @NonNull String challenge, @Nullable Long timeout, @Nullable String userVerification, @Nullable List<Messages.AllowCredential> allowCredentials, @NonNull Messages.Result<Messages.AuthenticateResponse> result) {
+    public void authenticate(@NonNull String relyingPartyId, @NonNull String challenge, @Nullable Long timeout, @Nullable String userVerification, @Nullable List<Messages.AllowCredential> allowCredentials, @Nullable Boolean preferImmediatelyAvailableCredentials, @NonNull Messages.Result<Messages.AuthenticateResponse> result) {
 
         List<AllowCredentialType> allowCredentialsType = new ArrayList<>();
         if (allowCredentials != null) {
-            allowCredentialsType = allowCredentials.stream().map(c -> new AllowCredentialType(c.getType(), c.getId(), c.getTransports())).collect(Collectors.toList());
+            allowCredentialsType = allowCredentials.stream()
+                    .map(c -> new AllowCredentialType(c.getType(), c.getId(), c.getTransports()))
+                    .collect(Collectors.toList());
         }
-        GetCredentialOptions getCredentialOptions = new GetCredentialOptions(challenge, timeout, relyingPartyId, allowCredentialsType, userVerification);
+        GetCredentialOptions getCredentialOptions = new GetCredentialOptions(challenge, timeout, relyingPartyId,
+                allowCredentialsType, userVerification);
         try {
             String options = getCredentialOptions.toJSON().toString();
 
             Activity activity = plugin.requireActivity();
 
             CredentialManager credentialManager = CredentialManager.create(activity);
+
             GetPublicKeyCredentialOption getPublicKeyCredentialOption = new GetPublicKeyCredentialOption(options);
 
-            GetCredentialRequest getCredRequest = new GetCredentialRequest.Builder().addCredentialOption(getPublicKeyCredentialOption).build();
+            GetCredentialRequest.Builder builder = new GetCredentialRequest.Builder().addCredentialOption(getPublicKeyCredentialOption);
+
+            if (preferImmediatelyAvailableCredentials != null) {
+                builder.setPreferImmediatelyAvailableCredentials(preferImmediatelyAvailableCredentials);
+            }
+
+            GetCredentialRequest getCredRequest = builder.build();
             currentCancellationSignal = new CancellationSignal();
 
             credentialManager.getCredentialAsync(activity, getCredRequest, currentCancellationSignal, Runnable::run, new CredentialManagerCallback<GetCredentialResponse, GetCredentialException>() {
@@ -225,6 +256,8 @@ public class MessageHandler implements Messages.PasskeysApi {
                     } else if (e instanceof GetPublicKeyCredentialDomException) {
                         if (Objects.equals(e.getMessage(), "Failed to decrypt credential.")) {
                             platformException = new Messages.FlutterError("android-sync-account-not-available", e.getMessage(), SYNC_ACCOUNT_NOT_AVAILABLE_ERROR);
+                        } else if (Objects.equals(e.getMessage(), "[15] Flow has timed out.")) {
+                            platformException = new Messages.FlutterError("android-timeout", e.getMessage(), TIMEOUT_ERROR);
                         } else {
                             platformException = new Messages.FlutterError("android-unhandled: " + e.getType(), e.getMessage(), e.getErrorMessage());
                         }
diff --git a/packages/passkeys/passkeys_android/android/src/main/java/com/corbado/passkeys_android/Messages.java b/packages/passkeys/passkeys_android/android/src/main/java/com/corbado/passkeys_android/Messages.java
index 5f69aaa..ecabfae 100644
--- a/packages/passkeys/passkeys_android/android/src/main/java/com/corbado/passkeys_android/Messages.java
+++ b/packages/passkeys/passkeys_android/android/src/main/java/com/corbado/passkeys_android/Messages.java
@@ -527,16 +527,13 @@ public class Messages {
    */
   public static final class AuthenticatorSelection {
     /** The authenticator attachment */
-    private @NonNull String authenticatorAttachment;
+    private @Nullable String authenticatorAttachment;
 
-    public @NonNull String getAuthenticatorAttachment() {
+    public @Nullable String getAuthenticatorAttachment() {
       return authenticatorAttachment;
     }
 
-    public void setAuthenticatorAttachment(@NonNull String setterArg) {
-      if (setterArg == null) {
-        throw new IllegalStateException("Nonnull field \"authenticatorAttachment\" is null.");
-      }
+    public void setAuthenticatorAttachment(@Nullable String setterArg) {
       this.authenticatorAttachment = setterArg;
     }
 
@@ -589,7 +586,7 @@ public class Messages {
 
       private @Nullable String authenticatorAttachment;
 
-      public @NonNull Builder setAuthenticatorAttachment(@NonNull String setterArg) {
+      public @NonNull Builder setAuthenticatorAttachment(@Nullable String setterArg) {
         this.authenticatorAttachment = setterArg;
         return this;
       }
@@ -711,6 +708,20 @@ public class Messages {
       this.attestationObject = setterArg;
     }
 
+    /** The supported transports for the authenticator */
+    private @NonNull List<String> transports;
+
+    public @NonNull List<String> getTransports() {
+      return transports;
+    }
+
+    public void setTransports(@NonNull List<String> setterArg) {
+      if (setterArg == null) {
+        throw new IllegalStateException("Nonnull field \"transports\" is null.");
+      }
+      this.transports = setterArg;
+    }
+
     /** Constructor is non-public to enforce null safety; use Builder. */
     RegisterResponse() {}
 
@@ -744,23 +755,32 @@ public class Messages {
         return this;
       }
 
+      private @Nullable List<String> transports;
+
+      public @NonNull Builder setTransports(@NonNull List<String> setterArg) {
+        this.transports = setterArg;
+        return this;
+      }
+
       public @NonNull RegisterResponse build() {
         RegisterResponse pigeonReturn = new RegisterResponse();
         pigeonReturn.setId(id);
         pigeonReturn.setRawId(rawId);
         pigeonReturn.setClientDataJSON(clientDataJSON);
         pigeonReturn.setAttestationObject(attestationObject);
+        pigeonReturn.setTransports(transports);
         return pigeonReturn;
       }
     }
 
     @NonNull
     ArrayList<Object> toList() {
-      ArrayList<Object> toListResult = new ArrayList<Object>(4);
+      ArrayList<Object> toListResult = new ArrayList<Object>(5);
       toListResult.add(id);
       toListResult.add(rawId);
       toListResult.add(clientDataJSON);
       toListResult.add(attestationObject);
+      toListResult.add(transports);
       return toListResult;
     }
 
@@ -774,6 +794,8 @@ public class Messages {
       pigeonResult.setClientDataJSON((String) clientDataJSON);
       Object attestationObject = list.get(3);
       pigeonResult.setAttestationObject((String) attestationObject);
+      Object transports = list.get(4);
+      pigeonResult.setTransports((List<String>) transports);
       return pigeonResult;
     }
   }
@@ -1031,7 +1053,7 @@ public class Messages {
 
     void register(@NonNull String challenge, @NonNull RelyingParty relyingParty, @NonNull User user, @NonNull AuthenticatorSelection authenticatorSelection, @Nullable List<PubKeyCredParam> pubKeyCredParams, @Nullable Long timeout, @Nullable String attestation, @NonNull List<ExcludeCredential> excludeCredentials, @NonNull Result<RegisterResponse> result);
 
-    void authenticate(@NonNull String relyingPartyId, @NonNull String challenge, @Nullable Long timeout, @Nullable String userVerification, @Nullable List<AllowCredential> allowCredentials, @NonNull Result<AuthenticateResponse> result);
+    void authenticate(@NonNull String relyingPartyId, @NonNull String challenge, @Nullable Long timeout, @Nullable String userVerification, @Nullable List<AllowCredential> allowCredentials, @Nullable Boolean preferImmediatelyAvailableCredentials, @NonNull Result<AuthenticateResponse> result);
 
     void cancelCurrentAuthenticatorOperation(@NonNull Result<Void> result);
 
@@ -1118,6 +1140,7 @@ public class Messages {
                 Number timeoutArg = (Number) args.get(2);
                 String userVerificationArg = (String) args.get(3);
                 List<AllowCredential> allowCredentialsArg = (List<AllowCredential>) args.get(4);
+                Boolean preferImmediatelyAvailableCredentialsArg = (Boolean) args.get(5);
                 Result<AuthenticateResponse> resultCallback =
                     new Result<AuthenticateResponse>() {
                       public void success(AuthenticateResponse result) {
@@ -1131,7 +1154,7 @@ public class Messages {
                       }
                     };
 
-                api.authenticate(relyingPartyIdArg, challengeArg, (timeoutArg == null) ? null : timeoutArg.longValue(), userVerificationArg, allowCredentialsArg, resultCallback);
+                api.authenticate(relyingPartyIdArg, challengeArg, (timeoutArg == null) ? null : timeoutArg.longValue(), userVerificationArg, allowCredentialsArg, preferImmediatelyAvailableCredentialsArg, resultCallback);
               });
         } else {
           channel.setMessageHandler(null);
diff --git a/packages/passkeys/passkeys_android/android/src/main/java/com/corbado/passkeys_android/models/login/GetCredentialOptions.java b/packages/passkeys/passkeys_android/android/src/main/java/com/corbado/passkeys_android/models/login/GetCredentialOptions.java
index f3706ad..60f7869 100644
--- a/packages/passkeys/passkeys_android/android/src/main/java/com/corbado/passkeys_android/models/login/GetCredentialOptions.java
+++ b/packages/passkeys/passkeys_android/android/src/main/java/com/corbado/passkeys_android/models/login/GetCredentialOptions.java
@@ -33,7 +33,7 @@ public class GetCredentialOptions {
         if (rpId != null) map.put("rpId", rpId);
         if (userVerification != null) map.put("userVerification", userVerification);
         JSONObject json = new JSONObject(map);
-        if(allowCredentials != null) {
+        if (allowCredentials != null) {
             json.put("allowCredentials", new JSONArray(allowCredentials.stream().map(e -> {
                 try {
                     return e.toJSON();
diff --git a/packages/passkeys/passkeys_android/android/src/main/java/com/corbado/passkeys_android/models/signup/AuthenticatorSelectionType.java b/packages/passkeys/passkeys_android/android/src/main/java/com/corbado/passkeys_android/models/signup/AuthenticatorSelectionType.java
index f0fe543..6f3d4a3 100644
--- a/packages/passkeys/passkeys_android/android/src/main/java/com/corbado/passkeys_android/models/signup/AuthenticatorSelectionType.java
+++ b/packages/passkeys/passkeys_android/android/src/main/java/com/corbado/passkeys_android/models/signup/AuthenticatorSelectionType.java
@@ -1,5 +1,6 @@
 package com.corbado.passkeys_android.models.signup;
 
+import org.json.JSONException;
 import org.json.JSONObject;
 
 import java.util.HashMap;
@@ -17,13 +18,19 @@ public class AuthenticatorSelectionType {
         this.userVerification = userVerification;
     }
 
-    public JSONObject toJSON() {
-        HashMap<String, String> map = new HashMap<>();
-        if (authenticatorAttachment != null)
-            map.put("authenticatorAttachment", authenticatorAttachment);
-        map.put("requireResidentKey", String.valueOf(requireResidentKey));
-        if (residentKey != null) map.put("residentKey", residentKey);
-        if (userVerification != null) map.put("userVerification", userVerification);
-        return new JSONObject(map);
+    public JSONObject toJSON() throws JSONException {
+        JSONObject json = new JSONObject();
+        if (authenticatorAttachment != null) {
+            json.put("authenticatorAttachment", authenticatorAttachment);
+        }
+        json.put("requireResidentKey", requireResidentKey);
+        if (residentKey != null) {
+            json.put("residentKey", residentKey);
+        }
+        if (userVerification != null) {
+            json.put("userVerification", userVerification);
+        }
+
+        return json;
     }
 }
diff --git a/packages/passkeys/passkeys_android/lib/messages.g.dart b/packages/passkeys/passkeys_android/lib/messages.g.dart
index 221ff6f..6bfaaff 100644
--- a/packages/passkeys/passkeys_android/lib/messages.g.dart
+++ b/packages/passkeys/passkeys_android/lib/messages.g.dart
@@ -173,14 +173,14 @@ class ExcludeCredential {
 /// Represents an authenticator selection
 class AuthenticatorSelection {
   AuthenticatorSelection({
-    required this.authenticatorAttachment,
+    this.authenticatorAttachment,
     required this.requireResidentKey,
     required this.residentKey,
     required this.userVerification,
   });
 
   /// The authenticator attachment
-  String authenticatorAttachment;
+  String? authenticatorAttachment;
 
   /// Whether a resident key is required
   bool requireResidentKey;
@@ -203,7 +203,7 @@ class AuthenticatorSelection {
   static AuthenticatorSelection decode(Object result) {
     result as List<Object?>;
     return AuthenticatorSelection(
-      authenticatorAttachment: result[0]! as String,
+      authenticatorAttachment: result[0] as String?,
       requireResidentKey: result[1]! as bool,
       residentKey: result[2]! as String,
       userVerification: result[3]! as String,
@@ -218,6 +218,7 @@ class RegisterResponse {
     required this.rawId,
     required this.clientDataJSON,
     required this.attestationObject,
+    required this.transports,
   });
 
   /// The ID
@@ -232,12 +233,16 @@ class RegisterResponse {
   /// The attestation object
   String attestationObject;
 
+  /// The supported transports for the authenticator
+  List<String?> transports;
+
   Object encode() {
     return <Object?>[
       id,
       rawId,
       clientDataJSON,
       attestationObject,
+      transports,
     ];
   }
 
@@ -248,6 +253,7 @@ class RegisterResponse {
       rawId: result[1]! as String,
       clientDataJSON: result[2]! as String,
       attestationObject: result[3]! as String,
+      transports: (result[4] as List<Object?>?)!.cast<String?>(),
     );
   }
 }
@@ -426,12 +432,12 @@ class PasskeysApi {
     }
   }
 
-  Future<AuthenticateResponse> authenticate(String arg_relyingPartyId, String arg_challenge, int? arg_timeout, String? arg_userVerification, List<AllowCredential?>? arg_allowCredentials) async {
+  Future<AuthenticateResponse> authenticate(String arg_relyingPartyId, String arg_challenge, int? arg_timeout, String? arg_userVerification, List<AllowCredential?>? arg_allowCredentials, bool? arg_preferImmediatelyAvailableCredentials) async {
     final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
         'dev.flutter.pigeon.passkeys_android.PasskeysApi.authenticate', codec,
         binaryMessenger: _binaryMessenger);
     final List<Object?>? replyList =
-        await channel.send(<Object?>[arg_relyingPartyId, arg_challenge, arg_timeout, arg_userVerification, arg_allowCredentials]) as List<Object?>?;
+        await channel.send(<Object?>[arg_relyingPartyId, arg_challenge, arg_timeout, arg_userVerification, arg_allowCredentials, arg_preferImmediatelyAvailableCredentials]) as List<Object?>?;
     if (replyList == null) {
       throw PlatformException(
         code: 'channel-error',
diff --git a/packages/passkeys/passkeys_android/lib/passkeys_android.dart b/packages/passkeys/passkeys_android/lib/passkeys_android.dart
index f17545d..bf0209d 100644
--- a/packages/passkeys/passkeys_android/lib/passkeys_android.dart
+++ b/packages/passkeys/passkeys_android/lib/passkeys_android.dart
@@ -31,6 +31,7 @@ class PasskeysAndroid extends PasskeysPlatform {
           transports: e.transports,
         );
       }).toList(),
+      request.preferImmediatelyAvailableCredentials,
     );
 
     return AuthenticateResponseType(
@@ -68,25 +69,25 @@ class PasskeysAndroid extends PasskeysPlatform {
     );
 
     final r = await _api.register(
-      request.challenge,
-      relyingPartyArg,
-      userArg,
-      authSelection,
-      request.pubKeyCredParams
-          ?.map((e) => PubKeyCredParam(alg: e.alg, type: e.type))
-          .toList(),
-      request.timeout,
-      request.attestation,
-      request.excludeCredentials
-          .map((e) => ExcludeCredential(id: e.id, type: e.type))
-          .toList(),
-    );
+        request.challenge,
+        relyingPartyArg,
+        userArg,
+        authSelection,
+        request.pubKeyCredParams
+            ?.map((e) => PubKeyCredParam(alg: e.alg, type: e.type))
+            .toList(),
+        request.timeout,
+        request.attestation,
+        request.excludeCredentials
+            .map((e) => ExcludeCredential(id: e.id, type: e.type))
+            .toList());
 
     return RegisterResponseType(
       id: r.id,
       rawId: r.rawId,
       clientDataJSON: r.clientDataJSON,
       attestationObject: r.attestationObject,
+      transports: r.transports.whereType<String>().toList(),
     );
   }
 
@@ -95,4 +96,14 @@ class PasskeysAndroid extends PasskeysPlatform {
   Future<void> cancelCurrentAuthenticatorOperation() async {
     return;
   }
+
+  // In case of android we link passkey support to the availability of the biometric authentication
+  @override
+  Future<AvailabilityTypeAndroid> getAvailability() async {
+    final isUserVerifyingPlatformAuthenticatorAvailable = await _api.canAuthenticate();
+    return AvailabilityTypeAndroid(
+        hasPasskeySupport: true, // Android has passkey support for available Android Versions
+        isUserVerifyingPlatformAuthenticatorAvailable: isUserVerifyingPlatformAuthenticatorAvailable,
+        isNative: true);
+  }
 }
diff --git a/packages/passkeys/passkeys_android/pigeons/messages.dart b/packages/passkeys/passkeys_android/pigeons/messages.dart
index 3652f92..f235dd1 100644
--- a/packages/passkeys/passkeys_android/pigeons/messages.dart
+++ b/packages/passkeys/passkeys_android/pigeons/messages.dart
@@ -84,7 +84,7 @@ class AuthenticatorSelection {
       this.requireResidentKey, this.residentKey, this.userVerification);
 
   /// The authenticator attachment
-  final String authenticatorAttachment;
+  final String? authenticatorAttachment;
 
   /// Whether a resident key is required
   final bool requireResidentKey;
@@ -104,6 +104,7 @@ class RegisterResponse {
     required this.rawId,
     required this.clientDataJSON,
     required this.attestationObject,
+    required this.transports,
   });
 
   /// The ID
@@ -117,6 +118,9 @@ class RegisterResponse {
 
   /// The attestation object
   final String attestationObject;
+
+  /// The supported transports for the authenticator
+  final List<String?> transports;
 }
 
 /// Represents an authenticate response
@@ -173,6 +177,7 @@ abstract class PasskeysApi {
     int? timeout,
     String? userVerification,
     List<AllowCredential>? allowCredentials,
+    bool? preferImmediatelyAvailableCredentials
   );
 
   @async
diff --git a/packages/passkeys/passkeys_android/pubspec.yaml b/packages/passkeys/passkeys_android/pubspec.yaml
index c15a139..3b58ec9 100644
--- a/packages/passkeys/passkeys_android/pubspec.yaml
+++ b/packages/passkeys/passkeys_android/pubspec.yaml
@@ -2,7 +2,7 @@ name: passkeys_android
 description: Android implementation of the Corbado passkeys plugin. Manages the creation of passkeys on Android devices.
 homepage: https://docs.corbado.com/overview/welcome
 repository: https://github.com/corbado/flutter-passkeys/tree/main/packages/passkeys/passkeys_android
-version: 2.0.3
+version: 2.7.0
 
 environment:
   sdk: ">=3.0.0 <4.0.0"
@@ -20,7 +20,7 @@ flutter:
 dependencies:
   flutter:
     sdk: flutter
-  passkeys_platform_interface: ^2.0.1
+  passkeys_platform_interface: ^2.3.1
 
 dev_dependencies:
   flutter_test:
diff --git a/packages/passkeys/passkeys_ios/CHANGELOG.md b/packages/passkeys/passkeys_ios/CHANGELOG.md
index b862207..dd72b9a 100644
--- a/packages/passkeys/passkeys_ios/CHANGELOG.md
+++ b/packages/passkeys/passkeys_ios/CHANGELOG.md
@@ -1,13 +1,41 @@
+## 2.6.0
+* Added external security keys support (Yubikeys)
+* Handles new Security Key timeout exception
+
+## 2.5.0
+* Added `transports` to RegistrationResponse
+
+## 2.4.0
+
+* Added `getAvailability` api to check for passkey support
+* Fixes issue with iOS 16.0 and above where the `DeviceNotSupported` exception was thrown when the device was supported
+
+## 2.3.0
+
+* Fixed an issue where iOS treated `.preferImmediatelyAvailableCredentials` as always enabled, causing improper behavior
+
+## 2.2.0
+
+* Added a new DeviceNotSupported exception to handle cases where the iOS version is lower than 16.0
+
+## 2.1.0
+
+* Added support for preferImmediatelyAvailableCredentials
+
 ## 2.0.3
-* Make excludeCredentials only available for iOS 17.4 and above  
+
+* Make excludeCredentials only available for iOS 17.4 and above
 
 ## 2.0.2
+
 * Map excludeCredentials error to typed exception
 
 ## 2.0.1
+
 * Added excludeCredentials support
 
 ## 2.0.0
+
 * Fixed issue with userHandle that prevented synced passkeys from working in some situations.
 * Changed conditional UI (use performAutoFillAssistedRequests)
 * Removed getFacetID (no longer needed)
@@ -15,9 +43,11 @@
 * Adapted to new passkeys_platform_interface
 
 ## 2.0.0-dev.3
+
 * Fixed issue with userHandle that prevented synced passkeys from working in some situations.
 
 ## 2.0.0-dev.2
+
 * Fixes to conditionalUI on iOS
 
 ## 2.0.0-dev.1
@@ -33,7 +63,7 @@
 
 ## 1.1.1
 
-* Improved exception handling. 
+* Improved exception handling.
 
 ## 1.1.0
 
diff --git a/packages/passkeys/passkeys_ios/ios/Classes/AuthenticateController.swift b/packages/passkeys/passkeys_ios/ios/Classes/AuthenticateController.swift
index 4c55c1b..8bd0879 100644
--- a/packages/passkeys/passkeys_ios/ios/Classes/AuthenticateController.swift
+++ b/packages/passkeys/passkeys_ios/ios/Classes/AuthenticateController.swift
@@ -12,27 +12,46 @@ class AuthenticateController: NSObject, ASAuthorizationControllerDelegate, ASAut
         self.completion = completion;
     }
     
-    func run(request: ASAuthorizationPlatformPublicKeyCredentialAssertionRequest, conditionalUI: Bool) {
-        let authorizationController = ASAuthorizationController(authorizationRequests: [request])
+    func run(requests: [ASAuthorizationRequest], conditionalUI: Bool, preferImmediatelyAvailableCredentials: Bool) {
+        let authorizationController = ASAuthorizationController(authorizationRequests: requests)
         authorizationController.delegate = self
         authorizationController.presentationContextProvider = self
         
         if (conditionalUI) {
             authorizationController.performAutoFillAssistedRequests()
         } else {
-            authorizationController.performRequests()
+            // The `.preferImmediatelyAvailableCredentials` option in `ASAuthorizationController`
+            // does not distinguish between `true` and `false` values. If the option is included
+            // in the `options` parameter, iOS assumes the behavior is enabled.
+            if preferImmediatelyAvailableCredentials {
+                authorizationController.performRequests(options: .preferImmediatelyAvailableCredentials)
+            } else {
+                authorizationController.performRequests()
+            }
         }
 
         func cancel() {
             authorizationController.cancel();
         }
-        
+
         self.innerCancel = cancel
     }
     
     func authorizationController(controller: ASAuthorizationController, didCompleteWithAuthorization authorization: ASAuthorization) {
         switch authorization.credential {
-        case let r as ASAuthorizationPublicKeyCredentialAssertion:
+        case let r as ASAuthorizationSecurityKeyPublicKeyCredentialAssertion:
+            let response = AuthenticateResponse(
+                id: r.credentialID.toBase64URL(),
+                rawId: r.credentialID.toBase64URL(),
+                clientDataJSON: r.rawClientDataJSON.toBase64URL(),
+                authenticatorData: r.rawAuthenticatorData.toBase64URL(),
+                signature: r.signature.toBase64URL(),
+                userHandle: r.userID.toBase64URL()
+            )
+
+            completion?(.success(response))
+            break
+        case let r as ASAuthorizationPlatformPublicKeyCredentialAssertion:
             let response = AuthenticateResponse(
                 id: r.credentialID.toBase64URL(),
                 rawId: r.credentialID.toBase64URL(),
@@ -55,7 +74,9 @@ class AuthenticateController: NSObject, ASAuthorizationControllerDelegate, ASAut
             completion?(.failure(FlutterError(from: err)))
         }
 
-        completion?(.failure(FlutterError(code: CustomErrors.unknown)))
+        let nsErr = error as NSError
+        completion?(.failure(FlutterError(fromNSError: nsErr)))
+        return
     }
 
     func presentationAnchor(for controller: ASAuthorizationController) -> ASPresentationAnchor {
diff --git a/packages/passkeys/passkeys_ios/ios/Classes/ErrorExtension.swift b/packages/passkeys/passkeys_ios/ios/Classes/ErrorExtension.swift
index cb8da1e..ede630c 100644
--- a/packages/passkeys/passkeys_ios/ios/Classes/ErrorExtension.swift
+++ b/packages/passkeys/passkeys_ios/ios/Classes/ErrorExtension.swift
@@ -11,7 +11,11 @@ extension FlutterError: Error {
             code = "unknown"
             break
         case ASAuthorizationError.canceled:
-            code = "cancelled"
+            if (error.localizedDescription.contains("No credentials available for login.")) {
+                code = "no-credentials-available"
+            } else {
+                code = "cancelled"
+            }
             break
         case ASAuthorizationError.invalidResponse:
             code = "invalidResponse"
@@ -38,6 +42,9 @@ extension FlutterError: Error {
         var code = ""
         if (error.domain == "WKErrorDomain" && error.code == 8) {
             code = "exclude-credentials-match"
+        }else if(error.domain == "WKErrorDomain" && error.code == 31){
+            // This error happens when the security key prompt times out (2 minutes)
+            code = "ios-security-key-timeout"
         } else {
             code = "ios-unhandled-" + error.domain
         }
@@ -51,6 +58,7 @@ extension FlutterError: Error {
 }
 
 enum CustomErrors: Error {
+    case deviceNotSupported
     case decodingChallenge
     case unexpectedAuthorizationResponse
     case unknown
diff --git a/packages/passkeys/passkeys_ios/ios/Classes/PasskeysPlugin.swift b/packages/passkeys/passkeys_ios/ios/Classes/PasskeysPlugin.swift
index 4add960..8099689 100644
--- a/packages/passkeys/passkeys_ios/ios/Classes/PasskeysPlugin.swift
+++ b/packages/passkeys/passkeys_ios/ios/Classes/PasskeysPlugin.swift
@@ -11,8 +11,8 @@ protocol Cancellable {
 
 @available(iOS 16.0, *)
 public class PasskeysPlugin: NSObject, FlutterPlugin, PasskeysApi {
-    var inFlightController: Cancellable?;
-    let lock: NSLock = NSLock();
+    var inFlightController: Cancellable?
+    let lock = NSLock()
     
     public static func register(with registrar: FlutterPluginRegistrar) {
         let instance = PasskeysPlugin()
@@ -22,7 +22,11 @@ public class PasskeysPlugin: NSObject, FlutterPlugin, PasskeysApi {
     func canAuthenticate() throws -> Bool {
         return LocalAuth.shared.canAuthenticate()
     }
-
+    
+    func hasBiometrics() throws -> Bool {
+        return LocalAuth.shared.hasBiometrics()
+    }
+    
     func getFacetID(completion: @escaping (Result<String, Error>) -> Void) {
         completion(.success(""))
     }
@@ -31,9 +35,17 @@ public class PasskeysPlugin: NSObject, FlutterPlugin, PasskeysApi {
         challenge: String,
         relyingParty: RelyingParty,
         user: User,
-        excludeCredentialIDs: [String],
+        excludeCredentials: [CredentialType],
+        pubKeyCredValues: [Int64],
+        canBePlatformAuthenticator: Bool = true,
+        canBeSecurityKey: Bool = true,
         completion: @escaping (Result<RegisterResponse, Error>) -> Void
-    ) {        
+    ) {
+        guard (try? canAuthenticate()) == true else {
+            completion(.failure(CustomErrors.deviceNotSupported))
+            return
+        }
+        
         guard let decodedChallenge = Data.fromBase64Url(challenge) else {
             completion(.failure(CustomErrors.decodingChallenge))
             return
@@ -44,76 +56,157 @@ public class PasskeysPlugin: NSObject, FlutterPlugin, PasskeysApi {
             return
         }
         
-        
+        var requests: [ASAuthorizationRequest] = []
         let rp = relyingParty.id
-        let platformProvider = ASAuthorizationPlatformPublicKeyCredentialProvider(relyingPartyIdentifier: rp)
-        let request = platformProvider.createCredentialRegistrationRequest(
-            challenge: decodedChallenge,
-            name: user.name,
-            userID: decodedUserId
-        )
-
-        if #available(iOS 17.4, *) {
-            request.excludedCredentials = parseCredentials(credentialIDs: excludeCredentialIDs)
+        
+        if(canBePlatformAuthenticator){
+            // Create a platform (onâ€‘device) registration request.
+            let platformProvider = ASAuthorizationPlatformPublicKeyCredentialProvider(relyingPartyIdentifier: rp)
+            let platformRequest = platformProvider.createCredentialRegistrationRequest(
+                challenge: decodedChallenge,
+                name: user.name,
+                userID: decodedUserId
+            )
+            
+            if #available(iOS 17.4, *) {
+                let excluded = parseCredentials(credentials: excludeCredentials)
+                platformRequest.excludedCredentials = excluded
+            }
+            
+            requests.append(platformRequest)
         }
-
+        
+        if(canBeSecurityKey){
+            // Create an external (security key) registration request.
+            let securityKeyProvider = ASAuthorizationSecurityKeyPublicKeyCredentialProvider(relyingPartyIdentifier: rp)
+            let externalRequest = securityKeyProvider.createCredentialRegistrationRequest(
+                challenge: decodedChallenge,
+                displayName: user.name,   // displayName as provided by the new API
+                name: user.name,
+                userID: decodedUserId
+            )
+            
+            if #available(iOS 17.4, *) {
+                let excludedSecurityKeys = parseSecurityKeyCredentials(credentials: excludeCredentials)
+                externalRequest.excludedCredentials = excludedSecurityKeys
+            }
+            
+            externalRequest.credentialParameters = pubKeyCredValues.map { rawValue in
+                let intValue = Int(rawValue)
+                
+                return ASAuthorizationPublicKeyCredentialParameters(
+                    algorithm: ASCOSEAlgorithmIdentifier(rawValue: intValue)
+                )
+            }
+            
+            requests.append(externalRequest)
+        }
+        
         func wrappedCompletion(result: Result<RegisterResponse, Error>) {
             lock.unlock()
             completion(result)
         }
         
-        let con = RegisterController(completion: completion)
-        con.run(request: request)
+        let con = RegisterController(completion: wrappedCompletion)
+        con.run(requests: requests)
         inFlightController = con
     }
-
-    func authenticate(relyingPartyId: String, challenge: String, conditionalUI: Bool, allowedCredentialIDs: [String], completion: @escaping (Result<AuthenticateResponse, Error>) -> Void) {
-
+    
+    func authenticate(
+        relyingPartyId: String,
+        challenge: String,
+        conditionalUI: Bool,
+        allowedCredentials: [CredentialType],
+        preferImmediatelyAvailableCredentials: Bool,
+        completion: @escaping (Result<AuthenticateResponse, Error>) -> Void
+    ) {
+        guard (try? canAuthenticate()) == true else {
+            completion(.failure(CustomErrors.deviceNotSupported))
+            return
+        }
+        
         guard let decodedChallenge = Data.fromBase64Url(challenge) else {
             completion(.failure(CustomErrors.decodingChallenge))
             return
         }
-
+        
+        var requests: [ASAuthorizationRequest] = []
+        
         let platformProvider = ASAuthorizationPlatformPublicKeyCredentialProvider(relyingPartyIdentifier: relyingPartyId)
-        let request = platformProvider.createCredentialAssertionRequest(
-            challenge: decodedChallenge
-        )
-                
-        request.allowedCredentials = parseCredentials(credentialIDs: allowedCredentialIDs)
-                
+        let platformRequest = platformProvider.createCredentialAssertionRequest(challenge: decodedChallenge)
+        platformRequest.allowedCredentials = parseCredentials(credentials: allowedCredentials)
+        requests.append(platformRequest)
+        
+        // We should not show the security key flow when preferImmediatelyAvailable is set to true
+        if !preferImmediatelyAvailableCredentials {
+            let securityKeyProvider = ASAuthorizationSecurityKeyPublicKeyCredentialProvider(relyingPartyIdentifier: relyingPartyId)
+            let externalRequest = securityKeyProvider.createCredentialAssertionRequest(challenge: decodedChallenge)
+            externalRequest.allowedCredentials = parseSecurityKeyCredentials(credentials: allowedCredentials)
+            requests.append(externalRequest)
+        }
+        
         let con = AuthenticateController(completion: completion)
-        con.run(request: request, conditionalUI: conditionalUI)
+        con.run(requests: requests, conditionalUI: conditionalUI, preferImmediatelyAvailableCredentials: preferImmediatelyAvailableCredentials)
         inFlightController = con
     }
     
     func cancelCurrentAuthenticatorOperation(completion: @escaping (Result<Void, Error>) -> Void) {
         inFlightController?.cancel()
-        
-        completion(.success(Void()))
+        completion(.success(()))
     }
     
-    private func parseCredentials(credentialIDs: [String]) -> [ASAuthorizationPlatformPublicKeyCredentialDescriptor] {
-        return credentialIDs.compactMap {
-            if let credentialId = Data.fromBase64Url($0) {
-                return ASAuthorizationPlatformPublicKeyCredentialDescriptor.init(credentialID: credentialId)
-            } else {
+    private func parseCredentials(credentials: [CredentialType]) -> [ASAuthorizationPlatformPublicKeyCredentialDescriptor] {
+        return credentials.compactMap { credential in
+            guard let credentialData = Data.fromBase64Url(credential.id) else {
                 return nil
             }
+            return ASAuthorizationPlatformPublicKeyCredentialDescriptor(credentialID: credentialData)
+        }
+    }
+    
+    private func parseSecurityKeyCredentials(credentials: [CredentialType]) -> [ASAuthorizationSecurityKeyPublicKeyCredentialDescriptor] {
+        return credentials.compactMap { credential in
+            guard let credentialData = Data.fromBase64Url(credential.id) else {
+                return nil
+            }
+            
+            let parsedTransports: [ASAuthorizationSecurityKeyPublicKeyCredentialDescriptor.Transport] = credential.transports.compactMap { transport in
+                switch transport {
+                case "nfc":
+                    return .nfc
+                case "usb":
+                    return .usb
+                case "bluetooth":
+                    return .bluetooth
+                default:
+                    return nil
+                }
+            }
+            
+            return ASAuthorizationSecurityKeyPublicKeyCredentialDescriptor(
+                credentialID: credentialData,
+                transports: parsedTransports
+            )
         }
     }
 }
 
 open class LocalAuth: NSObject {
     public static let shared = LocalAuth()
-
-    override private init() {}
-
+    private override init() {}
+    
     var laContext = LAContext()
-
+    
     func canAuthenticate() -> Bool {
+        if #unavailable(iOS 16.0) {
+            return false
+        }
+        return true
+    }
+    
+    func hasBiometrics() -> Bool {
         var error: NSError?
-        let hasTouchId = laContext.canEvaluatePolicy(.deviceOwnerAuthenticationWithBiometrics, error: &error)
-        return hasTouchId
+        return laContext.canEvaluatePolicy(.deviceOwnerAuthenticationWithBiometrics, error: &error)
     }
 }
 
@@ -135,20 +228,17 @@ struct PublicKeyCredentialCreateResponse: Codable {
 }
 
 public extension Data {
-    /// Same as ``Data(base64Encoded:)``, but adds padding automatically
-    /// (if missing, instead of returning `nil`).
+    /// Same as Data(base64Encoded:), but adds padding automatically (if missing).
     static func fromBase64(_ encoded: String) -> Data? {
-        // Prefixes padding-character(s) (if needed).
         var encoded = encoded
         let remainder = encoded.count % 4
         if remainder > 0 {
             encoded = encoded.padding(
                 toLength: encoded.count + 4 - remainder,
-                withPad: "=", startingAt: 0
+                withPad: "=",
+                startingAt: 0
             )
         }
-
-        // Finally, decode.
         return Data(base64Encoded: encoded)
     }
 
@@ -158,11 +248,8 @@ public extension Data {
     }
 
     private static func base64UrlToBase64(base64Url: String) -> String {
-        let base64 = base64Url
-            .replacingOccurrences(of: "-", with: "+")
-            .replacingOccurrences(of: "_", with: "/")
-
-        return base64
+        return base64Url.replacingOccurrences(of: "-", with: "+")
+                         .replacingOccurrences(of: "_", with: "/")
     }
 }
 
@@ -177,9 +264,7 @@ public extension String {
 
 extension Data {
     func toBase64URL() -> String {
-        let current = self
-
-        var result = current.base64EncodedString()
+        var result = self.base64EncodedString()
         result = result.replacingOccurrences(of: "+", with: "-")
         result = result.replacingOccurrences(of: "/", with: "_")
         result = result.replacingOccurrences(of: "=", with: "")
diff --git a/packages/passkeys/passkeys_ios/ios/Classes/RegisterController.swift b/packages/passkeys/passkeys_ios/ios/Classes/RegisterController.swift
index 9400d45..8a5d1d1 100644
--- a/packages/passkeys/passkeys_ios/ios/Classes/RegisterController.swift
+++ b/packages/passkeys/passkeys_ios/ios/Classes/RegisterController.swift
@@ -12,9 +12,9 @@ class RegisterController: NSObject, ASAuthorizationControllerDelegate, ASAuthori
         self.completion = completion;
     }
     
-    func run(request: ASAuthorizationPlatformPublicKeyCredentialRegistrationRequest) {
+    func run(requests: [ASAuthorizationRequest]) {
         
-        let authorizationController = ASAuthorizationController(authorizationRequests: [request])
+        let authorizationController = ASAuthorizationController(authorizationRequests: requests)
 
         authorizationController.delegate = self
         authorizationController.presentationContextProvider = self
@@ -34,12 +34,41 @@ class RegisterController: NSObject, ASAuthorizationControllerDelegate, ASAuthori
                 id: credentialRegistration.credentialID.toBase64URL(),
                 rawId: credentialRegistration.credentialID.toBase64URL(),
                 clientDataJSON: credentialRegistration.rawClientDataJSON.toBase64URL(),
-                attestationObject: credentialRegistration.rawAttestationObject!.toBase64URL()
+                attestationObject: credentialRegistration.rawAttestationObject!.toBase64URL(),
+                transports: []
+            )
+            completion?(.success(response))
+            break
+        case let securityKeyRegistration as ASAuthorizationSecurityKeyPublicKeyCredentialRegistration:
+            var transportStrings: [String] = []
+            
+            if #available(iOS 17.5, *) {
+                for transport in securityKeyRegistration.transports {
+                    switch transport {
+                    case .usb:
+                        transportStrings.append("usb")
+                    case .nfc:
+                        transportStrings.append("nfc")
+                    case .bluetooth:
+                        transportStrings.append("bluetooth")
+                    default:
+                        transportStrings.append("unknown")
+                    }
+                }
+            }
+
+                
+            let response = RegisterResponse(
+                id: securityKeyRegistration.credentialID.toBase64URL(),
+                rawId: securityKeyRegistration.credentialID.toBase64URL(),
+                clientDataJSON: securityKeyRegistration.rawClientDataJSON.toBase64URL(),
+                attestationObject: securityKeyRegistration.rawAttestationObject!.toBase64URL(),
+                transports: transportStrings
             )
             completion?(.success(response))
             break
         default:
-            let message = "Expected instance of ASAuthorizationPlatformPublicKeyCredentialRegistration but got: " + authorization.credential.description
+            let message = "Expected instance of ASAuthorizationPlatformPublicKeyCredentialRegistration or ASAuthorizationSecurityKeyPublicKeyCredentialRegistration but got: " + authorization.credential.description
             completion?(.failure(FlutterError(code: CustomErrors.unexpectedAuthorizationResponse, message: message)))
         }
 
diff --git a/packages/passkeys/passkeys_ios/ios/Classes/messages.swift b/packages/passkeys/passkeys_ios/ios/Classes/messages.swift
index 982f060..b244f7d 100644
--- a/packages/passkeys/passkeys_ios/ios/Classes/messages.swift
+++ b/packages/passkeys/passkeys_ios/ios/Classes/messages.swift
@@ -64,6 +64,37 @@ struct RelyingParty {
   }
 }
 
+/// Represents a credential
+///
+/// Generated class from Pigeon that represents data sent in messages.
+struct CredentialType {
+  /// The type of the credential.
+  var type: String
+  /// The ID of the credential.
+  var id: String
+  /// The transports of the credential.
+  var transports: [String?]
+
+  static func fromList(_ list: [Any?]) -> CredentialType? {
+    let type = list[0] as! String
+    let id = list[1] as! String
+    let transports = list[2] as! [String?]
+
+    return CredentialType(
+      type: type,
+      id: id,
+      transports: transports
+    )
+  }
+  func toList() -> [Any?] {
+    return [
+      type,
+      id,
+      transports,
+    ]
+  }
+}
+
 /// Represents a user
 ///
 /// Generated class from Pigeon that represents data sent in messages.
@@ -102,18 +133,22 @@ struct RegisterResponse {
   var clientDataJSON: String
   /// The attestation object
   var attestationObject: String
+  /// The supported transports for the authenticator
+  var transports: [String?]
 
   static func fromList(_ list: [Any?]) -> RegisterResponse? {
     let id = list[0] as! String
     let rawId = list[1] as! String
     let clientDataJSON = list[2] as! String
     let attestationObject = list[3] as! String
+    let transports = list[4] as! [String?]
 
     return RegisterResponse(
       id: id,
       rawId: rawId,
       clientDataJSON: clientDataJSON,
-      attestationObject: attestationObject
+      attestationObject: attestationObject,
+      transports: transports
     )
   }
   func toList() -> [Any?] {
@@ -122,6 +157,7 @@ struct RegisterResponse {
       rawId,
       clientDataJSON,
       attestationObject,
+      transports,
     ]
   }
 }
@@ -177,10 +213,12 @@ private class PasskeysApiCodecReader: FlutterStandardReader {
       case 128:
         return AuthenticateResponse.fromList(self.readValue() as! [Any?])
       case 129:
-        return RegisterResponse.fromList(self.readValue() as! [Any?])
+        return CredentialType.fromList(self.readValue() as! [Any?])
       case 130:
-        return RelyingParty.fromList(self.readValue() as! [Any?])
+        return RegisterResponse.fromList(self.readValue() as! [Any?])
       case 131:
+        return RelyingParty.fromList(self.readValue() as! [Any?])
+      case 132:
         return User.fromList(self.readValue() as! [Any?])
       default:
         return super.readValue(ofType: type)
@@ -193,15 +231,18 @@ private class PasskeysApiCodecWriter: FlutterStandardWriter {
     if let value = value as? AuthenticateResponse {
       super.writeByte(128)
       super.writeValue(value.toList())
-    } else if let value = value as? RegisterResponse {
+    } else if let value = value as? CredentialType {
       super.writeByte(129)
       super.writeValue(value.toList())
-    } else if let value = value as? RelyingParty {
+    } else if let value = value as? RegisterResponse {
       super.writeByte(130)
       super.writeValue(value.toList())
-    } else if let value = value as? User {
+    } else if let value = value as? RelyingParty {
       super.writeByte(131)
       super.writeValue(value.toList())
+    } else if let value = value as? User {
+      super.writeByte(132)
+      super.writeValue(value.toList())
     } else {
       super.writeValue(value)
     }
@@ -225,8 +266,9 @@ class PasskeysApiCodec: FlutterStandardMessageCodec {
 /// Generated protocol from Pigeon that represents a handler of messages from Flutter.
 protocol PasskeysApi {
   func canAuthenticate() throws -> Bool
-  func register(challenge: String, relyingParty: RelyingParty, user: User, excludeCredentialIDs: [String], completion: @escaping (Result<RegisterResponse, Error>) -> Void)
-  func authenticate(relyingPartyId: String, challenge: String, conditionalUI: Bool, allowedCredentialIDs: [String], completion: @escaping (Result<AuthenticateResponse, Error>) -> Void)
+  func hasBiometrics() throws -> Bool
+  func register(challenge: String, relyingParty: RelyingParty, user: User, excludeCredentials: [CredentialType], pubKeyCredValues: [Int64], canBePlatformAuthenticator: Bool, canBeSecurityKey: Bool, completion: @escaping (Result<RegisterResponse, Error>) -> Void)
+  func authenticate(relyingPartyId: String, challenge: String, conditionalUI: Bool, allowedCredentials: [CredentialType], preferImmediatelyAvailableCredentials: Bool, completion: @escaping (Result<AuthenticateResponse, Error>) -> Void)
   func cancelCurrentAuthenticatorOperation(completion: @escaping (Result<Void, Error>) -> Void)
 }
 
@@ -249,6 +291,19 @@ class PasskeysApiSetup {
     } else {
       canAuthenticateChannel.setMessageHandler(nil)
     }
+    let hasBiometricsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.passkeys_ios.PasskeysApi.hasBiometrics", binaryMessenger: binaryMessenger, codec: codec)
+    if let api = api {
+      hasBiometricsChannel.setMessageHandler { _, reply in
+        do {
+          let result = try api.hasBiometrics()
+          reply(wrapResult(result))
+        } catch {
+          reply(wrapError(error))
+        }
+      }
+    } else {
+      hasBiometricsChannel.setMessageHandler(nil)
+    }
     let registerChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.passkeys_ios.PasskeysApi.register", binaryMessenger: binaryMessenger, codec: codec)
     if let api = api {
       registerChannel.setMessageHandler { message, reply in
@@ -256,8 +311,11 @@ class PasskeysApiSetup {
         let challengeArg = args[0] as! String
         let relyingPartyArg = args[1] as! RelyingParty
         let userArg = args[2] as! User
-        let excludeCredentialIDsArg = args[3] as! [String]
-        api.register(challenge: challengeArg, relyingParty: relyingPartyArg, user: userArg, excludeCredentialIDs: excludeCredentialIDsArg) { result in
+        let excludeCredentialsArg = args[3] as! [CredentialType]
+        let pubKeyCredValuesArg = args[4] as! [Int64]
+        let canBePlatformAuthenticatorArg = args[5] as! Bool
+        let canBeSecurityKeyArg = args[6] as! Bool
+        api.register(challenge: challengeArg, relyingParty: relyingPartyArg, user: userArg, excludeCredentials: excludeCredentialsArg, pubKeyCredValues: pubKeyCredValuesArg, canBePlatformAuthenticator: canBePlatformAuthenticatorArg, canBeSecurityKey: canBeSecurityKeyArg) { result in
           switch result {
             case .success(let res):
               reply(wrapResult(res))
@@ -276,8 +334,9 @@ class PasskeysApiSetup {
         let relyingPartyIdArg = args[0] as! String
         let challengeArg = args[1] as! String
         let conditionalUIArg = args[2] as! Bool
-        let allowedCredentialIDsArg = args[3] as! [String]
-        api.authenticate(relyingPartyId: relyingPartyIdArg, challenge: challengeArg, conditionalUI: conditionalUIArg, allowedCredentialIDs: allowedCredentialIDsArg) { result in
+        let allowedCredentialsArg = args[3] as! [CredentialType]
+        let preferImmediatelyAvailableCredentialsArg = args[4] as! Bool
+        api.authenticate(relyingPartyId: relyingPartyIdArg, challenge: challengeArg, conditionalUI: conditionalUIArg, allowedCredentials: allowedCredentialsArg, preferImmediatelyAvailableCredentials: preferImmediatelyAvailableCredentialsArg) { result in
           switch result {
             case .success(let res):
               reply(wrapResult(res))
diff --git a/packages/passkeys/passkeys_ios/lib/messages.g.dart b/packages/passkeys/passkeys_ios/lib/messages.g.dart
index 9cafeea..cafe18a 100644
--- a/packages/passkeys/passkeys_ios/lib/messages.g.dart
+++ b/packages/passkeys/passkeys_ios/lib/messages.g.dart
@@ -37,6 +37,41 @@ class RelyingParty {
   }
 }
 
+/// Represents a credential
+class CredentialType {
+  CredentialType({
+    required this.type,
+    required this.id,
+    required this.transports,
+  });
+
+  /// The type of the credential.
+  String type;
+
+  /// The ID of the credential.
+  String id;
+
+  /// The transports of the credential.
+  List<String?> transports;
+
+  Object encode() {
+    return <Object?>[
+      type,
+      id,
+      transports,
+    ];
+  }
+
+  static CredentialType decode(Object result) {
+    result as List<Object?>;
+    return CredentialType(
+      type: result[0]! as String,
+      id: result[1]! as String,
+      transports: (result[2] as List<Object?>?)!.cast<String?>(),
+    );
+  }
+}
+
 /// Represents a user
 class User {
   User({
@@ -73,6 +108,7 @@ class RegisterResponse {
     required this.rawId,
     required this.clientDataJSON,
     required this.attestationObject,
+    required this.transports,
   });
 
   /// The ID
@@ -87,12 +123,16 @@ class RegisterResponse {
   /// The attestation object
   String attestationObject;
 
+  /// The supported transports for the authenticator
+  List<String?> transports;
+
   Object encode() {
     return <Object?>[
       id,
       rawId,
       clientDataJSON,
       attestationObject,
+      transports,
     ];
   }
 
@@ -103,6 +143,7 @@ class RegisterResponse {
       rawId: result[1]! as String,
       clientDataJSON: result[2]! as String,
       attestationObject: result[3]! as String,
+      transports: (result[4] as List<Object?>?)!.cast<String?>(),
     );
   }
 }
@@ -166,15 +207,18 @@ class _PasskeysApiCodec extends StandardMessageCodec {
     if (value is AuthenticateResponse) {
       buffer.putUint8(128);
       writeValue(buffer, value.encode());
-    } else if (value is RegisterResponse) {
+    } else if (value is CredentialType) {
       buffer.putUint8(129);
       writeValue(buffer, value.encode());
-    } else if (value is RelyingParty) {
+    } else if (value is RegisterResponse) {
       buffer.putUint8(130);
       writeValue(buffer, value.encode());
-    } else if (value is User) {
+    } else if (value is RelyingParty) {
       buffer.putUint8(131);
       writeValue(buffer, value.encode());
+    } else if (value is User) {
+      buffer.putUint8(132);
+      writeValue(buffer, value.encode());
     } else {
       super.writeValue(buffer, value);
     }
@@ -186,10 +230,12 @@ class _PasskeysApiCodec extends StandardMessageCodec {
       case 128: 
         return AuthenticateResponse.decode(readValue(buffer)!);
       case 129: 
-        return RegisterResponse.decode(readValue(buffer)!);
+        return CredentialType.decode(readValue(buffer)!);
       case 130: 
-        return RelyingParty.decode(readValue(buffer)!);
+        return RegisterResponse.decode(readValue(buffer)!);
       case 131: 
+        return RelyingParty.decode(readValue(buffer)!);
+      case 132: 
         return User.decode(readValue(buffer)!);
       default:
         return super.readValueOfType(type, buffer);
@@ -234,12 +280,39 @@ class PasskeysApi {
     }
   }
 
-  Future<RegisterResponse> register(String arg_challenge, RelyingParty arg_relyingParty, User arg_user, List<String?> arg_excludeCredentialIDs) async {
+  Future<bool> hasBiometrics() async {
+    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
+        'dev.flutter.pigeon.passkeys_ios.PasskeysApi.hasBiometrics', codec,
+        binaryMessenger: _binaryMessenger);
+    final List<Object?>? replyList =
+        await channel.send(null) as List<Object?>?;
+    if (replyList == null) {
+      throw PlatformException(
+        code: 'channel-error',
+        message: 'Unable to establish connection on channel.',
+      );
+    } else if (replyList.length > 1) {
+      throw PlatformException(
+        code: replyList[0]! as String,
+        message: replyList[1] as String?,
+        details: replyList[2],
+      );
+    } else if (replyList[0] == null) {
+      throw PlatformException(
+        code: 'null-error',
+        message: 'Host platform returned null value for non-null return value.',
+      );
+    } else {
+      return (replyList[0] as bool?)!;
+    }
+  }
+
+  Future<RegisterResponse> register(String arg_challenge, RelyingParty arg_relyingParty, User arg_user, List<CredentialType?> arg_excludeCredentials, List<int?> arg_pubKeyCredValues, bool arg_canBePlatformAuthenticator, bool arg_canBeSecurityKey) async {
     final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
         'dev.flutter.pigeon.passkeys_ios.PasskeysApi.register', codec,
         binaryMessenger: _binaryMessenger);
     final List<Object?>? replyList =
-        await channel.send(<Object?>[arg_challenge, arg_relyingParty, arg_user, arg_excludeCredentialIDs]) as List<Object?>?;
+        await channel.send(<Object?>[arg_challenge, arg_relyingParty, arg_user, arg_excludeCredentials, arg_pubKeyCredValues, arg_canBePlatformAuthenticator, arg_canBeSecurityKey]) as List<Object?>?;
     if (replyList == null) {
       throw PlatformException(
         code: 'channel-error',
@@ -261,12 +334,12 @@ class PasskeysApi {
     }
   }
 
-  Future<AuthenticateResponse> authenticate(String arg_relyingPartyId, String arg_challenge, bool arg_conditionalUI, List<String?> arg_allowedCredentialIDs) async {
+  Future<AuthenticateResponse> authenticate(String arg_relyingPartyId, String arg_challenge, bool arg_conditionalUI, List<CredentialType?> arg_allowedCredentials, bool arg_preferImmediatelyAvailableCredentials) async {
     final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
         'dev.flutter.pigeon.passkeys_ios.PasskeysApi.authenticate', codec,
         binaryMessenger: _binaryMessenger);
     final List<Object?>? replyList =
-        await channel.send(<Object?>[arg_relyingPartyId, arg_challenge, arg_conditionalUI, arg_allowedCredentialIDs]) as List<Object?>?;
+        await channel.send(<Object?>[arg_relyingPartyId, arg_challenge, arg_conditionalUI, arg_allowedCredentials, arg_preferImmediatelyAvailableCredentials]) as List<Object?>?;
     if (replyList == null) {
       throw PlatformException(
         code: 'channel-error',
diff --git a/packages/passkeys/passkeys_ios/lib/passkeys_ios.dart b/packages/passkeys/passkeys_ios/lib/passkeys_ios.dart
index b6f27b8..d2d4d04 100644
--- a/packages/passkeys/passkeys_ios/lib/passkeys_ios.dart
+++ b/packages/passkeys/passkeys_ios/lib/passkeys_ios.dart
@@ -32,7 +32,13 @@ class PasskeysIOS extends PasskeysPlatform {
       request.challenge,
       relyingPartyArg,
       userArg,
-      request.excludeCredentials.map((e) => e.id).toList(),
+      request.excludeCredentials
+          .map((e) =>
+              CredentialType(type: e.type, id: e.id, transports: e.transports))
+          .toList(),
+      request.pubKeyCredParams?.map((e) => e.alg).toList() ?? [],
+      request.authSelectionType.authenticatorAttachment != 'cross-platform',
+      request.authSelectionType.authenticatorAttachment != 'platform',
     );
 
     return RegisterResponseType(
@@ -40,6 +46,7 @@ class PasskeysIOS extends PasskeysPlatform {
       rawId: r.rawId,
       clientDataJSON: r.clientDataJSON,
       attestationObject: r.attestationObject,
+      transports: r.transports.whereType<String>().toList(),
     );
   }
 
@@ -56,7 +63,12 @@ class PasskeysIOS extends PasskeysPlatform {
       request.relyingPartyId,
       request.challenge,
       conditionalUI,
-      request.allowCredentials?.map((e) => e.id).toList() ?? [],
+      request.allowCredentials
+              ?.map((e) => CredentialType(
+                  type: e.type, id: e.id, transports: e.transports))
+              .toList() ??
+          [],
+      request.preferImmediatelyAvailableCredentials,
     );
 
     return AuthenticateResponseType(
@@ -72,4 +84,16 @@ class PasskeysIOS extends PasskeysPlatform {
   @override
   Future<void> cancelCurrentAuthenticatorOperation() =>
       _api.cancelCurrentAuthenticatorOperation();
+
+  @override
+  Future<AvailabilityTypeIOS> getAvailability() async {
+    final availability = await _api.canAuthenticate();
+    final hasBiometrics = await _api.hasBiometrics();
+
+    return AvailabilityTypeIOS(
+      hasPasskeySupport: availability,
+      hasBiometrics: hasBiometrics,
+      isNative: true,
+    );
+  }
 }
diff --git a/packages/passkeys/passkeys_ios/pigeons/messages.dart b/packages/passkeys/passkeys_ios/pigeons/messages.dart
index c508d0e..dff8112 100644
--- a/packages/passkeys/passkeys_ios/pigeons/messages.dart
+++ b/packages/passkeys/passkeys_ios/pigeons/messages.dart
@@ -18,6 +18,25 @@ class RelyingParty {
   final String id;
 }
 
+/// Represents a credential
+class CredentialType {
+  /// Constructor
+  const CredentialType({
+    required this.type,
+    required this.id,
+    required this.transports,
+  });
+
+  /// The type of the credential.
+  final String type;
+
+  /// The ID of the credential.
+  final String id;
+
+  /// The transports of the credential.
+  final List<String?> transports;
+}
+
 /// Represents a user
 class User {
   /// Constructor
@@ -38,6 +57,7 @@ class RegisterResponse {
     required this.rawId,
     required this.clientDataJSON,
     required this.attestationObject,
+    required this.transports,
   });
 
   /// The ID
@@ -51,6 +71,9 @@ class RegisterResponse {
 
   /// The attestation object
   final String attestationObject;
+
+  /// The supported transports for the authenticator
+  final List<String?> transports;
 }
 
 /// Represents an authenticate response
@@ -87,12 +110,17 @@ class AuthenticateResponse {
 abstract class PasskeysApi {
   bool canAuthenticate();
 
+  bool hasBiometrics();
+
   @async
   RegisterResponse register(
     String challenge,
     RelyingParty relyingParty,
     User user,
-    List<String> excludeCredentialIDs,
+    List<CredentialType> excludeCredentials,
+    List<int> pubKeyCredValues,
+    bool canBePlatformAuthenticator,
+    bool canBeSecurityKey,
   );
 
   @async
@@ -100,7 +128,8 @@ abstract class PasskeysApi {
     String relyingPartyId,
     String challenge,
     bool conditionalUI,
-    List<String> allowedCredentialIDs,
+    List<CredentialType> allowedCredentials,
+    bool preferImmediatelyAvailableCredentials,
   );
 
   @async
diff --git a/packages/passkeys/passkeys_ios/pubspec.yaml b/packages/passkeys/passkeys_ios/pubspec.yaml
index 61fa708..d4ccc2a 100644
--- a/packages/passkeys/passkeys_ios/pubspec.yaml
+++ b/packages/passkeys/passkeys_ios/pubspec.yaml
@@ -2,7 +2,7 @@ name: passkeys_ios
 description: iOS implementation of the Corbado passkeys plugin. Manages the creation of passkeys on iOS devices.
 homepage: https://docs.corbado.com/overview/welcome
 repository: https://github.com/corbado/flutter-passkeys/tree/main/packages/passkeys/passkeys_ios
-version: 2.0.3
+version: 2.6.0
 
 environment:
   sdk: ">=3.0.0 <4.0.0"
@@ -19,7 +19,7 @@ flutter:
 dependencies:
   flutter:
     sdk: flutter
-  passkeys_platform_interface: ^2.0.1
+  passkeys_platform_interface: ^2.3.1
 
 dev_dependencies:
   flutter_test:
diff --git a/packages/passkeys/passkeys_platform_interface/CHANGELOG.md b/packages/passkeys/passkeys_platform_interface/CHANGELOG.md
index f77f014..bd640fa 100644
--- a/packages/passkeys/passkeys_platform_interface/CHANGELOG.md
+++ b/packages/passkeys/passkeys_platform_interface/CHANGELOG.md
@@ -1,3 +1,20 @@
+## 2.3.1
+* Fixed Exception when trying to register while `authenticatorAttachment` is null on Safari or IOS device.
+
+## 2.3.0
+* Added `transports` to RegistrationResponse
+
+## 2.2.1
+* Fixes bug with new added types
+
+## 2.2.0
+* Added `hasPasskeySupport` to `AvailabilityType`
+* Separate `AvailabilityType` for each supported platform
+
+## 2.1.0
+* Added getAvailability().
+* Added preferImmediatelyAvailableCredentials.
+
 ## 2.0.1
 * Added excludeCredentials to RegisterRequestType
 
diff --git a/packages/passkeys/passkeys_platform_interface/lib/method_channel_passkeys.dart b/packages/passkeys/passkeys_platform_interface/lib/method_channel_passkeys.dart
index 0861728..4c02318 100644
--- a/packages/passkeys/passkeys_platform_interface/lib/method_channel_passkeys.dart
+++ b/packages/passkeys/passkeys_platform_interface/lib/method_channel_passkeys.dart
@@ -1,4 +1,5 @@
 import 'package:passkeys_platform_interface/passkeys_platform_interface.dart';
+import 'package:passkeys_platform_interface/types/availability.dart';
 import 'package:passkeys_platform_interface/types/types.dart';
 
 /// An implementation of [PasskeysPlatform] that uses method channels.
@@ -22,4 +23,7 @@ class MethodChannelPasskeys extends PasskeysPlatform {
   Future<void> cancelCurrentAuthenticatorOperation() {
     return Future.value();
   }
+
+  @override
+  Future<AvailabilityType> getAvailability() => throw UnimplementedError();
 }
diff --git a/packages/passkeys/passkeys_platform_interface/lib/passkeys_platform_interface.dart b/packages/passkeys/passkeys_platform_interface/lib/passkeys_platform_interface.dart
index 64f3844..5af29c9 100644
--- a/packages/passkeys/passkeys_platform_interface/lib/passkeys_platform_interface.dart
+++ b/packages/passkeys/passkeys_platform_interface/lib/passkeys_platform_interface.dart
@@ -1,4 +1,5 @@
 import 'package:passkeys_platform_interface/method_channel_passkeys.dart';
+import 'package:passkeys_platform_interface/types/availability.dart';
 import 'package:passkeys_platform_interface/types/types.dart';
 import 'package:plugin_platform_interface/plugin_platform_interface.dart';
 
@@ -30,7 +31,11 @@ abstract class PasskeysPlatform extends PlatformInterface {
   }
 
   /// Returns true if passkeys are supported by the device
-  Future<bool> canAuthenticate();
+  /// We have deprecated this function (it will now always return true).
+  @deprecated
+  Future<bool> canAuthenticate() async {
+    return true;
+  }
 
   /// Handles the platform-specific steps for the registration flow
   /// (see https://webauthn.guide/#registration)
@@ -48,4 +53,8 @@ abstract class PasskeysPlatform extends PlatformInterface {
   /// This is important for the case when conditional UI has been started but
   /// the user decides ignore that and login by typing his username instead.
   Future<void> cancelCurrentAuthenticatorOperation();
+
+  /// Retrieves the availability information for passkeys, user-verifying platform authenticators,
+  /// and conditional mediation whenever possible
+  Future<AvailabilityType> getAvailability();
 }
diff --git a/packages/passkeys/passkeys_platform_interface/lib/types/authenticate_request.dart b/packages/passkeys/passkeys_platform_interface/lib/types/authenticate_request.dart
index f9fdac9..b0ea1ba 100644
--- a/packages/passkeys/passkeys_platform_interface/lib/types/authenticate_request.dart
+++ b/packages/passkeys/passkeys_platform_interface/lib/types/authenticate_request.dart
@@ -6,10 +6,11 @@ class AuthenticateRequestType {
   const AuthenticateRequestType({
     required this.relyingPartyId,
     required this.challenge,
-    required this.timeout,
-    required this.userVerification,
-    required this.allowCredentials,
+    this.timeout,
+    this.userVerification,
+    this.allowCredentials,
     required this.mediation,
+    required this.preferImmediatelyAvailableCredentials,
   });
 
   final String relyingPartyId;
@@ -18,4 +19,5 @@ class AuthenticateRequestType {
   final String? userVerification;
   final List<CredentialType>? allowCredentials;
   final MediationType mediation;
+  final bool preferImmediatelyAvailableCredentials;
 }
diff --git a/packages/passkeys/passkeys_platform_interface/lib/types/authenticator_selection.dart b/packages/passkeys/passkeys_platform_interface/lib/types/authenticator_selection.dart
index a710772..4b78cea 100644
--- a/packages/passkeys/passkeys_platform_interface/lib/types/authenticator_selection.dart
+++ b/packages/passkeys/passkeys_platform_interface/lib/types/authenticator_selection.dart
@@ -9,13 +9,14 @@ class AuthenticatorSelectionType {
 
   /// Constructs a new instance.
   AuthenticatorSelectionType({
-    required this.authenticatorAttachment,
+    this.authenticatorAttachment,
     required this.requireResidentKey,
     required this.residentKey,
     required this.userVerification,
   });
 
-  final String authenticatorAttachment;
+  @JsonKey(includeIfNull: false)
+  final String? authenticatorAttachment;
   final bool requireResidentKey;
   final String residentKey;
   final String userVerification;
diff --git a/packages/passkeys/passkeys_platform_interface/lib/types/authenticator_selection.g.dart b/packages/passkeys/passkeys_platform_interface/lib/types/authenticator_selection.g.dart
index a6bbde2..a7d11ca 100644
--- a/packages/passkeys/passkeys_platform_interface/lib/types/authenticator_selection.g.dart
+++ b/packages/passkeys/passkeys_platform_interface/lib/types/authenticator_selection.g.dart
@@ -9,7 +9,7 @@ part of 'authenticator_selection.dart';
 AuthenticatorSelectionType _$AuthenticatorSelectionTypeFromJson(
         Map<String, dynamic> json) =>
     AuthenticatorSelectionType(
-      authenticatorAttachment: json['authenticatorAttachment'] as String,
+      authenticatorAttachment: json['authenticatorAttachment'] as String?,
       requireResidentKey: json['requireResidentKey'] as bool,
       residentKey: json['residentKey'] as String,
       userVerification: json['userVerification'] as String,
@@ -18,7 +18,8 @@ AuthenticatorSelectionType _$AuthenticatorSelectionTypeFromJson(
 Map<String, dynamic> _$AuthenticatorSelectionTypeToJson(
         AuthenticatorSelectionType instance) =>
     <String, dynamic>{
-      'authenticatorAttachment': instance.authenticatorAttachment,
+      if (instance.authenticatorAttachment case final value?)
+        'authenticatorAttachment': value,
       'requireResidentKey': instance.requireResidentKey,
       'residentKey': instance.residentKey,
       'userVerification': instance.userVerification,
diff --git a/packages/passkeys/passkeys_platform_interface/lib/types/availability.dart b/packages/passkeys/passkeys_platform_interface/lib/types/availability.dart
new file mode 100644
index 0000000..2abf3b9
--- /dev/null
+++ b/packages/passkeys/passkeys_platform_interface/lib/types/availability.dart
@@ -0,0 +1,81 @@
+/// The base class for platform-specific availability information.
+///
+/// This class defines common properties shared across platforms, such as
+/// support for passkeys and whether the platform is native.
+sealed class AvailabilityType {
+  /// Constructs an instance of [AvailabilityType].
+  ///
+  /// - [hasPasskeySupport]: Indicates if the platform supports passkeys.
+  /// - [isNative]: Whether the platform is native (true) or web-based (false).
+  AvailabilityType({
+    required this.hasPasskeySupport,
+    required this.isNative,
+  });
+
+  /// Indicates if the platform supports passkeys.
+  final bool hasPasskeySupport;
+
+  /// Indicates whether the platform is native (true) or web-based (false).
+  final bool isNative;
+}
+
+/// Represents the availability information specific to web platforms.
+///
+/// Extends [AvailabilityType] with web-specific attributes.
+class AvailabilityTypeWeb extends AvailabilityType {
+  /// Constructs an instance of [AvailabilityTypeWeb].
+  ///
+  /// - [hasPasskeySupport]: Indicates if the platform supports passkeys.
+  /// - [isNative]: Should be `false` for web platforms.
+  /// - [isUserVerifyingPlatformAuthenticatorAvailable]: Optional; whether user
+  ///   verifying platform authenticators are available.
+  /// - [isConditionalMediationAvailable]: Optional; whether conditional
+  ///   mediation is available on the web platform.
+  AvailabilityTypeWeb({
+    required super.hasPasskeySupport,
+    required super.isNative,
+    required this.isUserVerifyingPlatformAuthenticatorAvailable,
+    required this.isConditionalMediationAvailable,
+  });
+
+  final bool? isUserVerifyingPlatformAuthenticatorAvailable;
+  final bool? isConditionalMediationAvailable;
+}
+
+/// Represents the availability information specific to Android platforms.
+///
+/// Extends [AvailabilityType] with Android-specific attributes.
+class AvailabilityTypeAndroid extends AvailabilityType {
+  /// Constructs an instance of [AvailabilityTypeAndroid].
+  ///
+  /// - [hasPasskeySupport]: Indicates if the platform supports passkeys.
+  /// - [isNative]: Should be `true` for Android platforms.
+  /// - [isUserVerifyingPlatformAuthenticatorAvailable]: Required; whether user
+  ///   verifying platform authenticators are available.
+  AvailabilityTypeAndroid({
+    required super.hasPasskeySupport,
+    required super.isNative,
+    required this.isUserVerifyingPlatformAuthenticatorAvailable,
+  });
+
+  final bool? isUserVerifyingPlatformAuthenticatorAvailable;
+}
+
+/// Represents the availability information specific to iOS platforms.
+///
+/// Extends [AvailabilityType] with iOS-specific attributes.
+class AvailabilityTypeIOS extends AvailabilityType {
+  /// Constructs an instance of [AvailabilityTypeIOS].
+  ///
+  /// - [hasPasskeySupport]: Indicates if the platform supports passkeys.
+  /// - [isNative]: Should be `true` for iOS platforms.
+  /// - [hasBiometrics]: Required; indicates if the device has biometric support.
+  AvailabilityTypeIOS({
+    required super.hasPasskeySupport,
+    required super.isNative,
+    required this.hasBiometrics,
+  });
+
+  /// Indicates if the iOS device has biometric support.
+  final bool hasBiometrics;
+}
diff --git a/packages/passkeys/passkeys_platform_interface/lib/types/pubkeycred_param.g.dart b/packages/passkeys/passkeys_platform_interface/lib/types/pubkeycred_param.g.dart
index e94b323..bbe65a0 100644
--- a/packages/passkeys/passkeys_platform_interface/lib/types/pubkeycred_param.g.dart
+++ b/packages/passkeys/passkeys_platform_interface/lib/types/pubkeycred_param.g.dart
@@ -9,7 +9,7 @@ part of 'pubkeycred_param.dart';
 PubKeyCredParamType _$PubKeyCredParamTypeFromJson(Map<String, dynamic> json) =>
     PubKeyCredParamType(
       type: json['type'] as String,
-      alg: json['alg'] as int,
+      alg: (json['alg'] as num).toInt(),
     );
 
 Map<String, dynamic> _$PubKeyCredParamTypeToJson(
diff --git a/packages/passkeys/passkeys_platform_interface/lib/types/register_request.dart b/packages/passkeys/passkeys_platform_interface/lib/types/register_request.dart
index 8fca2f7..1493676 100644
--- a/packages/passkeys/passkeys_platform_interface/lib/types/register_request.dart
+++ b/packages/passkeys/passkeys_platform_interface/lib/types/register_request.dart
@@ -5,15 +5,16 @@ import 'package:passkeys_platform_interface/types/relying_party.dart';
 import 'package:passkeys_platform_interface/types/user.dart';
 
 class RegisterRequestType {
-  const RegisterRequestType(
-      {required this.challenge,
-      required this.relyingParty,
-      required this.user,
-      required this.authSelectionType,
-      required this.pubKeyCredParams,
-      required this.timeout,
-      required this.attestation,
-      required this.excludeCredentials});
+  const RegisterRequestType({
+    required this.challenge,
+    required this.relyingParty,
+    required this.user,
+    required this.authSelectionType,
+    required this.excludeCredentials,
+    this.pubKeyCredParams,
+    this.timeout,
+    this.attestation,
+  });
 
   final String challenge;
   final RelyingPartyType relyingParty;
diff --git a/packages/passkeys/passkeys_platform_interface/lib/types/register_response.dart b/packages/passkeys/passkeys_platform_interface/lib/types/register_response.dart
index 7b819ca..e15cbce 100644
--- a/packages/passkeys/passkeys_platform_interface/lib/types/register_response.dart
+++ b/packages/passkeys/passkeys_platform_interface/lib/types/register_response.dart
@@ -4,10 +4,12 @@ class RegisterResponseType {
     required this.rawId,
     required this.clientDataJSON,
     required this.attestationObject,
+    required this.transports,
   });
 
   final String id;
   final String rawId;
   final String clientDataJSON;
   final String attestationObject;
+  final List<String?> transports;
 }
diff --git a/packages/passkeys/passkeys_platform_interface/lib/types/types.dart b/packages/passkeys/passkeys_platform_interface/lib/types/types.dart
index e4dae55..a07b649 100644
--- a/packages/passkeys/passkeys_platform_interface/lib/types/types.dart
+++ b/packages/passkeys/passkeys_platform_interface/lib/types/types.dart
@@ -1,6 +1,7 @@
 export 'authenticate_request.dart';
 export 'authenticate_response.dart';
 export 'authenticator_selection.dart';
+export 'availability.dart';
 export 'mediation.dart';
 export 'register_request.dart';
 export 'register_response.dart';
diff --git a/packages/passkeys/passkeys_platform_interface/pubspec.yaml b/packages/passkeys/passkeys_platform_interface/pubspec.yaml
index 6265868..6ed063a 100644
--- a/packages/passkeys/passkeys_platform_interface/pubspec.yaml
+++ b/packages/passkeys/passkeys_platform_interface/pubspec.yaml
@@ -2,7 +2,7 @@ name: passkeys_platform_interface
 description: A common platform interface for the passkeys plugin. Must be implemented to support passkeys for a new platform.
 homepage: https://docs.corbado.com/overview/welcome
 repository: https://github.com/corbado/flutter-passkeys/tree/main/packages/passkeys/passkeys_platform_interface
-version: 2.0.1
+version: 2.3.1
 
 environment:
   sdk: ">=3.0.0 <4.0.0"
diff --git a/packages/passkeys/passkeys_platform_interface/test/passkeys_platform_interface_test.dart b/packages/passkeys/passkeys_platform_interface/test/passkeys_platform_interface_test.dart
index c684cc0..f1d83dc 100644
--- a/packages/passkeys/passkeys_platform_interface/test/passkeys_platform_interface_test.dart
+++ b/packages/passkeys/passkeys_platform_interface/test/passkeys_platform_interface_test.dart
@@ -1,5 +1,6 @@
 import 'package:flutter_test/flutter_test.dart';
 import 'package:passkeys_platform_interface/passkeys_platform_interface.dart';
+import 'package:passkeys_platform_interface/types/availability.dart';
 import 'package:passkeys_platform_interface/types/types.dart';
 
 class PasskeysMock extends PasskeysPlatform {
@@ -22,6 +23,9 @@ class PasskeysMock extends PasskeysPlatform {
   Future<void> cancelCurrentAuthenticatorOperation() {
     throw UnimplementedError();
   }
+
+  @override
+  Future<AvailabilityType> getAvailability() => throw UnimplementedError();
 }
 
 void main() {
diff --git a/packages/passkeys/passkeys_web/CHANGELOG.md b/packages/passkeys/passkeys_web/CHANGELOG.md
index 3f6a6fa..fb657f1 100644
--- a/packages/passkeys/passkeys_web/CHANGELOG.md
+++ b/packages/passkeys/passkeys_web/CHANGELOG.md
@@ -1,3 +1,21 @@
+## 2.5.0
+* Fixed Exception when trying to register while `authenticatorAttachment` is null on Safari or IOS device. 
+
+## 2.4.0
+* Added `transports` to RegistrationResponse
+
+## 2.3.0
+* Added `hasPasskeySupport` to `AvailabilityType` to check if the platform supports passkeys.
+
+## 2.2.0
+* Added support for WebAssembly (Wasm)
+
+## 2.1.0
+* Added getAvailability() to check for isUserVerifyingPlatformAuthenticatorAvailable and isConditionalMediationAvailable.
+
+## 2.0.2
+* Version bump for js dependency.
+
 ## 2.0.1 
 * Added excludeCredentials support
 
diff --git a/packages/passkeys/passkeys_web/javascript/output/bundle.js b/packages/passkeys/passkeys_web/javascript/output/bundle.js
deleted file mode 100644
index f36999d..0000000
--- a/packages/passkeys/passkeys_web/javascript/output/bundle.js
+++ /dev/null
@@ -1,353 +0,0 @@
-var PasskeyAuthenticator = (function (exports) {
-    'use strict';
-
-    /******************************************************************************
-    Copyright (c) Microsoft Corporation.
-
-    Permission to use, copy, modify, and/or distribute this software for any
-    purpose with or without fee is hereby granted.
-
-    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
-    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
-    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
-    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
-    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
-    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
-    PERFORMANCE OF THIS SOFTWARE.
-    ***************************************************************************** */
-    /* global Reflect, Promise, SuppressedError, Symbol */
-
-
-    function __classPrivateFieldGet(receiver, state, kind, f) {
-        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
-        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
-        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
-    }
-
-    function __classPrivateFieldSet(receiver, state, value, kind, f) {
-        if (kind === "m") throw new TypeError("Private method is not writable");
-        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
-        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
-        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
-    }
-
-    typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
-        var e = new Error(message);
-        return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
-    };
-
-    // src/webauthn-json/base64url.ts
-    function base64urlToBuffer(baseurl64String) {
-      const padding = "==".slice(0, (4 - baseurl64String.length % 4) % 4);
-      const base64String = baseurl64String.replace(/-/g, "+").replace(/_/g, "/") + padding;
-      const str = atob(base64String);
-      const buffer = new ArrayBuffer(str.length);
-      const byteView = new Uint8Array(buffer);
-      for (let i = 0; i < str.length; i++) {
-        byteView[i] = str.charCodeAt(i);
-      }
-      return buffer;
-    }
-    function bufferToBase64url(buffer) {
-      const byteView = new Uint8Array(buffer);
-      let str = "";
-      for (const charCode of byteView) {
-        str += String.fromCharCode(charCode);
-      }
-      const base64String = btoa(str);
-      const base64urlString = base64String.replace(/\+/g, "-").replace(
-        /\//g,
-        "_"
-      ).replace(/=/g, "");
-      return base64urlString;
-    }
-
-    // src/webauthn-json/convert.ts
-    var copyValue = "copy";
-    var convertValue = "convert";
-    function convert(conversionFn, schema2, input) {
-      if (schema2 === copyValue) {
-        return input;
-      }
-      if (schema2 === convertValue) {
-        return conversionFn(input);
-      }
-      if (schema2 instanceof Array) {
-        return input.map((v) => convert(conversionFn, schema2[0], v));
-      }
-      if (schema2 instanceof Object) {
-        const output = {};
-        for (const [key, schemaField] of Object.entries(schema2)) {
-          if (schemaField.derive) {
-            const v = schemaField.derive(input);
-            if (v !== void 0) {
-              input[key] = v;
-            }
-          }
-          if (!(key in input)) {
-            if (schemaField.required) {
-              throw new Error(`Missing key: ${key}`);
-            }
-            continue;
-          }
-          if (input[key] == null) {
-            output[key] = null;
-            continue;
-          }
-          output[key] = convert(
-            conversionFn,
-            schemaField.schema,
-            input[key]
-          );
-        }
-        return output;
-      }
-    }
-    function derived(schema2, derive) {
-      return {
-        required: true,
-        schema: schema2,
-        derive
-      };
-    }
-    function required(schema2) {
-      return {
-        required: true,
-        schema: schema2
-      };
-    }
-    function optional(schema2) {
-      return {
-        required: false,
-        schema: schema2
-      };
-    }
-
-    // src/webauthn-json/basic/schema.ts
-    var publicKeyCredentialDescriptorSchema = {
-      type: required(copyValue),
-      id: required(convertValue),
-      transports: optional(copyValue)
-    };
-    var simplifiedExtensionsSchema = {
-      appid: optional(copyValue),
-      appidExclude: optional(copyValue),
-      credProps: optional(copyValue)
-    };
-    var simplifiedClientExtensionResultsSchema = {
-      appid: optional(copyValue),
-      appidExclude: optional(copyValue),
-      credProps: optional(copyValue)
-    };
-    var credentialCreationOptions = {
-      publicKey: required({
-        rp: required(copyValue),
-        user: required({
-          id: required(convertValue),
-          name: required(copyValue),
-          displayName: required(copyValue)
-        }),
-        challenge: required(convertValue),
-        pubKeyCredParams: required(copyValue),
-        timeout: optional(copyValue),
-        excludeCredentials: optional([publicKeyCredentialDescriptorSchema]),
-        authenticatorSelection: optional(copyValue),
-        attestation: optional(copyValue),
-        extensions: optional(simplifiedExtensionsSchema)
-      }),
-      signal: optional(copyValue)
-    };
-    var publicKeyCredentialWithAttestation = {
-      type: required(copyValue),
-      id: required(copyValue),
-      rawId: required(convertValue),
-      authenticatorAttachment: optional(copyValue),
-      response: required({
-        clientDataJSON: required(convertValue),
-        attestationObject: required(convertValue),
-        transports: derived(
-          copyValue,
-          (response) => {
-            var _a;
-            return ((_a = response.getTransports) == null ? void 0 : _a.call(response)) || [];
-          }
-        )
-      }),
-      clientExtensionResults: derived(
-        simplifiedClientExtensionResultsSchema,
-        (pkc) => pkc.getClientExtensionResults()
-      )
-    };
-    var credentialRequestOptions = {
-      mediation: optional(copyValue),
-      publicKey: required({
-        challenge: required(convertValue),
-        timeout: optional(copyValue),
-        rpId: optional(copyValue),
-        allowCredentials: optional([publicKeyCredentialDescriptorSchema]),
-        userVerification: optional(copyValue),
-        extensions: optional(simplifiedExtensionsSchema)
-      }),
-      signal: optional(copyValue)
-    };
-    var publicKeyCredentialWithAssertion = {
-      type: required(copyValue),
-      id: required(copyValue),
-      rawId: required(convertValue),
-      authenticatorAttachment: optional(copyValue),
-      response: required({
-        clientDataJSON: required(convertValue),
-        authenticatorData: required(convertValue),
-        signature: required(convertValue),
-        userHandle: required(convertValue)
-      }),
-      clientExtensionResults: derived(
-        simplifiedClientExtensionResultsSchema,
-        (pkc) => pkc.getClientExtensionResults()
-      )
-    };
-
-    // src/webauthn-json/basic/api.ts
-    function createRequestFromJSON(requestJSON) {
-      return convert(base64urlToBuffer, credentialCreationOptions, requestJSON);
-    }
-    function createResponseToJSON(credential) {
-      return convert(
-        bufferToBase64url,
-        publicKeyCredentialWithAttestation,
-        credential
-      );
-    }
-    async function create(requestJSON) {
-      const credential = await navigator.credentials.create(
-        createRequestFromJSON(requestJSON)
-      );
-      return createResponseToJSON(credential);
-    }
-    function getRequestFromJSON(requestJSON) {
-      return convert(base64urlToBuffer, credentialRequestOptions, requestJSON);
-    }
-    function getResponseToJSON(credential) {
-      return convert(
-        bufferToBase64url,
-        publicKeyCredentialWithAssertion,
-        credential
-      );
-    }
-    async function get(requestJSON) {
-      const credential = await navigator.credentials.get(
-        getRequestFromJSON(requestJSON)
-      );
-      return getResponseToJSON(credential);
-    }
-
-    var _PasskeyAuthenticator_abortController;
-    const ABORTED_BY_USER = 'operation aborted by user.';
-    class PasskeyAuthenticator {
-        constructor() {
-            _PasskeyAuthenticator_abortController.set(this, void 0);
-        }
-        async register(params) {
-            try {
-                const typedParams = JSON.parse(params);
-                const out = await create(typedParams);
-                return JSON.stringify(out);
-            }
-            catch (e) {
-                let error;
-                if (e instanceof DOMException) {
-                    error = PlatformError.fromDOMException(e);
-                }
-                else if (e instanceof String) {
-                    error = PlatformError.unknownError(e.toString());
-                }
-                else {
-                    error = PlatformError.unknownError('-');
-                }
-                const serializedError = JSON.stringify(error);
-                console.log(serializedError);
-                return Promise.reject(serializedError);
-            }
-        }
-        async login(params) {
-            try {
-                __classPrivateFieldSet(this, _PasskeyAuthenticator_abortController, new AbortController(), "f");
-                const typedParams = JSON.parse(params);
-                typedParams.signal = __classPrivateFieldGet(this, _PasskeyAuthenticator_abortController, "f").signal;
-                const out = await get(typedParams);
-                return JSON.stringify(out);
-            }
-            catch (e) {
-                let error;
-                if (e instanceof DOMException) {
-                    error = PlatformError.fromDOMException(e);
-                }
-                else if (e instanceof String) {
-                    error = PlatformError.unknownError(e.toString());
-                }
-                else if (e === ABORTED_BY_USER) {
-                    error = PlatformError.cancelled();
-                }
-                else {
-                    error = PlatformError.unknownError('-');
-                }
-                const serializedError = JSON.stringify(error);
-                return Promise.reject(serializedError);
-            }
-        }
-        abortCurrentWebAuthnOperation() {
-            if (!__classPrivateFieldGet(this, _PasskeyAuthenticator_abortController, "f")) {
-                return;
-            }
-            __classPrivateFieldGet(this, _PasskeyAuthenticator_abortController, "f").abort(ABORTED_BY_USER);
-        }
-    }
-    _PasskeyAuthenticator_abortController = new WeakMap();
-    class PlatformError {
-        constructor(code, message, details) {
-            this.code = code;
-            this.message = message;
-            this.details = details;
-        }
-        static fromDOMException(error) {
-            switch (error.name) {
-                case 'NotAllowedError':
-                    return PlatformError.cancelled();
-                default:
-                    return new PlatformError(error.name, error.message, '');
-            }
-        }
-        static unknownError(error) {
-            return new PlatformError('unknown', error, '');
-        }
-        static cancelled() {
-            return new PlatformError('cancelled', 'operation was cancelled by the user.', '');
-        }
-    }
-
-    let passkeyAuthenticator = new PasskeyAuthenticator();
-    async function canAuthenticate() {
-        return await PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable();
-    }
-    function init() {
-        passkeyAuthenticator = new PasskeyAuthenticator();
-    }
-    function register(params) {
-        return passkeyAuthenticator.register(params);
-    }
-    function login(params) {
-        return passkeyAuthenticator.login(params);
-    }
-    function cancelCurrentAuthenticatorOperation() {
-        passkeyAuthenticator.abortCurrentWebAuthnOperation();
-    }
-
-    exports.canAuthenticate = canAuthenticate;
-    exports.cancelCurrentAuthenticatorOperation = cancelCurrentAuthenticatorOperation;
-    exports.init = init;
-    exports.login = login;
-    exports.register = register;
-
-    return exports;
-
-})({});
diff --git a/packages/passkeys/passkeys_web/javascript/package-lock.json b/packages/passkeys/passkeys_web/javascript/package-lock.json
index dc01fc2..e529a9c 100644
--- a/packages/passkeys/passkeys_web/javascript/package-lock.json
+++ b/packages/passkeys/passkeys_web/javascript/package-lock.json
@@ -12,7 +12,7 @@
         "@github/webauthn-json": "^2.1.1"
       },
       "devDependencies": {
-        "rollup": "^4.7.0",
+        "rollup": "^4.31.0",
         "rollup-plugin-commonjs": "^10.1.0",
         "rollup-plugin-node-resolve": "^5.2.0",
         "rollup-plugin-typescript2": "^0.36.0",
@@ -41,179 +41,277 @@
       }
     },
     "node_modules/@rollup/rollup-android-arm-eabi": {
-      "version": "4.7.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm-eabi/-/rollup-android-arm-eabi-4.7.0.tgz",
-      "integrity": "sha512-rGku10pL1StFlFvXX5pEv88KdGW6DHUghsxyP/aRYb9eH+74jTGJ3U0S/rtlsQ4yYq1Hcc7AMkoJOb1xu29Fxw==",
+      "version": "4.31.0",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm-eabi/-/rollup-android-arm-eabi-4.31.0.tgz",
+      "integrity": "sha512-9NrR4033uCbUBRgvLcBrJofa2KY9DzxL2UKZ1/4xA/mnTNyhZCWBuD8X3tPm1n4KxcgaraOYgrFKSgwjASfmlA==",
       "cpu": [
         "arm"
       ],
       "dev": true,
+      "license": "MIT",
       "optional": true,
       "os": [
         "android"
       ]
     },
     "node_modules/@rollup/rollup-android-arm64": {
-      "version": "4.7.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm64/-/rollup-android-arm64-4.7.0.tgz",
-      "integrity": "sha512-/EBw0cuJ/KVHiU2qyVYUhogXz7W2vXxBzeE9xtVIMC+RyitlY2vvaoysMUqASpkUtoNIHlnKTu/l7mXOPgnKOA==",
+      "version": "4.31.0",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm64/-/rollup-android-arm64-4.31.0.tgz",
+      "integrity": "sha512-iBbODqT86YBFHajxxF8ebj2hwKm1k8PTBQSojSt3d1FFt1gN+xf4CowE47iN0vOSdnd+5ierMHBbu/rHc7nq5g==",
       "cpu": [
         "arm64"
       ],
       "dev": true,
+      "license": "MIT",
       "optional": true,
       "os": [
         "android"
       ]
     },
     "node_modules/@rollup/rollup-darwin-arm64": {
-      "version": "4.7.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-arm64/-/rollup-darwin-arm64-4.7.0.tgz",
-      "integrity": "sha512-4VXG1bgvClJdbEYYjQ85RkOtwN8sqI3uCxH0HC5w9fKdqzRzgG39K7GAehATGS8jghA7zNoS5CjSKkDEqWmNZg==",
+      "version": "4.31.0",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-arm64/-/rollup-darwin-arm64-4.31.0.tgz",
+      "integrity": "sha512-WHIZfXgVBX30SWuTMhlHPXTyN20AXrLH4TEeH/D0Bolvx9PjgZnn4H677PlSGvU6MKNsjCQJYczkpvBbrBnG6g==",
       "cpu": [
         "arm64"
       ],
       "dev": true,
+      "license": "MIT",
       "optional": true,
       "os": [
         "darwin"
       ]
     },
     "node_modules/@rollup/rollup-darwin-x64": {
-      "version": "4.7.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-x64/-/rollup-darwin-x64-4.7.0.tgz",
-      "integrity": "sha512-/ImhO+T/RWJ96hUbxiCn2yWI0/MeQZV/aeukQQfhxiSXuZJfyqtdHPUPrc84jxCfXTxbJLmg4q+GBETeb61aNw==",
+      "version": "4.31.0",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-x64/-/rollup-darwin-x64-4.31.0.tgz",
+      "integrity": "sha512-hrWL7uQacTEF8gdrQAqcDy9xllQ0w0zuL1wk1HV8wKGSGbKPVjVUv/DEwT2+Asabf8Dh/As+IvfdU+H8hhzrQQ==",
       "cpu": [
         "x64"
       ],
       "dev": true,
+      "license": "MIT",
       "optional": true,
       "os": [
         "darwin"
       ]
     },
+    "node_modules/@rollup/rollup-freebsd-arm64": {
+      "version": "4.31.0",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-arm64/-/rollup-freebsd-arm64-4.31.0.tgz",
+      "integrity": "sha512-S2oCsZ4hJviG1QjPY1h6sVJLBI6ekBeAEssYKad1soRFv3SocsQCzX6cwnk6fID6UQQACTjeIMB+hyYrFacRew==",
+      "cpu": [
+        "arm64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "freebsd"
+      ]
+    },
+    "node_modules/@rollup/rollup-freebsd-x64": {
+      "version": "4.31.0",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-x64/-/rollup-freebsd-x64-4.31.0.tgz",
+      "integrity": "sha512-pCANqpynRS4Jirn4IKZH4tnm2+2CqCNLKD7gAdEjzdLGbH1iO0zouHz4mxqg0uEMpO030ejJ0aA6e1PJo2xrPA==",
+      "cpu": [
+        "x64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "freebsd"
+      ]
+    },
     "node_modules/@rollup/rollup-linux-arm-gnueabihf": {
-      "version": "4.7.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-gnueabihf/-/rollup-linux-arm-gnueabihf-4.7.0.tgz",
-      "integrity": "sha512-zhye8POvTyUXlKbfPBVqoHy3t43gIgffY+7qBFqFxNqVtltQLtWeHNAbrMnXiLIfYmxcoL/feuLDote2tx+Qbg==",
+      "version": "4.31.0",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-gnueabihf/-/rollup-linux-arm-gnueabihf-4.31.0.tgz",
+      "integrity": "sha512-0O8ViX+QcBd3ZmGlcFTnYXZKGbFu09EhgD27tgTdGnkcYXLat4KIsBBQeKLR2xZDCXdIBAlWLkiXE1+rJpCxFw==",
       "cpu": [
         "arm"
       ],
       "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@rollup/rollup-linux-arm-musleabihf": {
+      "version": "4.31.0",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-musleabihf/-/rollup-linux-arm-musleabihf-4.31.0.tgz",
+      "integrity": "sha512-w5IzG0wTVv7B0/SwDnMYmbr2uERQp999q8FMkKG1I+j8hpPX2BYFjWe69xbhbP6J9h2gId/7ogesl9hwblFwwg==",
+      "cpu": [
+        "arm"
+      ],
+      "dev": true,
+      "license": "MIT",
       "optional": true,
       "os": [
         "linux"
       ]
     },
     "node_modules/@rollup/rollup-linux-arm64-gnu": {
-      "version": "4.7.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-gnu/-/rollup-linux-arm64-gnu-4.7.0.tgz",
-      "integrity": "sha512-RAdr3OJnUum6Vs83cQmKjxdTg31zJnLLTkjhcFt0auxM6jw00GD6IPFF42uasYPr/wGC6TRm7FsQiJyk0qIEfg==",
+      "version": "4.31.0",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-gnu/-/rollup-linux-arm64-gnu-4.31.0.tgz",
+      "integrity": "sha512-JyFFshbN5xwy6fulZ8B/8qOqENRmDdEkcIMF0Zz+RsfamEW+Zabl5jAb0IozP/8UKnJ7g2FtZZPEUIAlUSX8cA==",
       "cpu": [
         "arm64"
       ],
       "dev": true,
+      "license": "MIT",
       "optional": true,
       "os": [
         "linux"
       ]
     },
     "node_modules/@rollup/rollup-linux-arm64-musl": {
-      "version": "4.7.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-musl/-/rollup-linux-arm64-musl-4.7.0.tgz",
-      "integrity": "sha512-nhWwYsiJwZGq7SyR3afS3EekEOsEAlrNMpPC4ZDKn5ooYSEjDLe9W/xGvoIV8/F/+HNIY6jY8lIdXjjxfxopXw==",
+      "version": "4.31.0",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-musl/-/rollup-linux-arm64-musl-4.31.0.tgz",
+      "integrity": "sha512-kpQXQ0UPFeMPmPYksiBL9WS/BDiQEjRGMfklVIsA0Sng347H8W2iexch+IEwaR7OVSKtr2ZFxggt11zVIlZ25g==",
       "cpu": [
         "arm64"
       ],
       "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@rollup/rollup-linux-loongarch64-gnu": {
+      "version": "4.31.0",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-loongarch64-gnu/-/rollup-linux-loongarch64-gnu-4.31.0.tgz",
+      "integrity": "sha512-pMlxLjt60iQTzt9iBb3jZphFIl55a70wexvo8p+vVFK+7ifTRookdoXX3bOsRdmfD+OKnMozKO6XM4zR0sHRrQ==",
+      "cpu": [
+        "loong64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@rollup/rollup-linux-powerpc64le-gnu": {
+      "version": "4.31.0",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-powerpc64le-gnu/-/rollup-linux-powerpc64le-gnu-4.31.0.tgz",
+      "integrity": "sha512-D7TXT7I/uKEuWiRkEFbed1UUYZwcJDU4vZQdPTcepK7ecPhzKOYk4Er2YR4uHKme4qDeIh6N3XrLfpuM7vzRWQ==",
+      "cpu": [
+        "ppc64"
+      ],
+      "dev": true,
+      "license": "MIT",
       "optional": true,
       "os": [
         "linux"
       ]
     },
     "node_modules/@rollup/rollup-linux-riscv64-gnu": {
-      "version": "4.7.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-gnu/-/rollup-linux-riscv64-gnu-4.7.0.tgz",
-      "integrity": "sha512-rlfy5RnQG1aop1BL/gjdH42M2geMUyVQqd52GJVirqYc787A/XVvl3kQ5NG/43KXgOgE9HXgCaEH05kzQ+hLoA==",
+      "version": "4.31.0",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-gnu/-/rollup-linux-riscv64-gnu-4.31.0.tgz",
+      "integrity": "sha512-wal2Tc8O5lMBtoePLBYRKj2CImUCJ4UNGJlLwspx7QApYny7K1cUYlzQ/4IGQBLmm+y0RS7dwc3TDO/pmcneTw==",
       "cpu": [
         "riscv64"
       ],
       "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@rollup/rollup-linux-s390x-gnu": {
+      "version": "4.31.0",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-s390x-gnu/-/rollup-linux-s390x-gnu-4.31.0.tgz",
+      "integrity": "sha512-O1o5EUI0+RRMkK9wiTVpk2tyzXdXefHtRTIjBbmFREmNMy7pFeYXCFGbhKFwISA3UOExlo5GGUuuj3oMKdK6JQ==",
+      "cpu": [
+        "s390x"
+      ],
+      "dev": true,
+      "license": "MIT",
       "optional": true,
       "os": [
         "linux"
       ]
     },
     "node_modules/@rollup/rollup-linux-x64-gnu": {
-      "version": "4.7.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-gnu/-/rollup-linux-x64-gnu-4.7.0.tgz",
-      "integrity": "sha512-cCkoGlGWfBobdDtiiypxf79q6k3/iRVGu1HVLbD92gWV5WZbmuWJCgRM4x2N6i7ljGn1cGytPn9ZAfS8UwF6vg==",
+      "version": "4.31.0",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-gnu/-/rollup-linux-x64-gnu-4.31.0.tgz",
+      "integrity": "sha512-zSoHl356vKnNxwOWnLd60ixHNPRBglxpv2g7q0Cd3Pmr561gf0HiAcUBRL3S1vPqRC17Zo2CX/9cPkqTIiai1g==",
       "cpu": [
         "x64"
       ],
       "dev": true,
+      "license": "MIT",
       "optional": true,
       "os": [
         "linux"
       ]
     },
     "node_modules/@rollup/rollup-linux-x64-musl": {
-      "version": "4.7.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-musl/-/rollup-linux-x64-musl-4.7.0.tgz",
-      "integrity": "sha512-R2oBf2p/Arc1m+tWmiWbpHBjEcJnHVnv6bsypu4tcKdrYTpDfl1UT9qTyfkIL1iiii5D4WHxUHCg5X0pzqmxFg==",
+      "version": "4.31.0",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-musl/-/rollup-linux-x64-musl-4.31.0.tgz",
+      "integrity": "sha512-ypB/HMtcSGhKUQNiFwqgdclWNRrAYDH8iMYH4etw/ZlGwiTVxBz2tDrGRrPlfZu6QjXwtd+C3Zib5pFqID97ZA==",
       "cpu": [
         "x64"
       ],
       "dev": true,
+      "license": "MIT",
       "optional": true,
       "os": [
         "linux"
       ]
     },
     "node_modules/@rollup/rollup-win32-arm64-msvc": {
-      "version": "4.7.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-arm64-msvc/-/rollup-win32-arm64-msvc-4.7.0.tgz",
-      "integrity": "sha512-CPtgaQL1aaPc80m8SCVEoxFGHxKYIt3zQYC3AccL/SqqiWXblo3pgToHuBwR8eCP2Toa+X1WmTR/QKFMykws7g==",
+      "version": "4.31.0",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-arm64-msvc/-/rollup-win32-arm64-msvc-4.31.0.tgz",
+      "integrity": "sha512-JuhN2xdI/m8Hr+aVO3vspO7OQfUFO6bKLIRTAy0U15vmWjnZDLrEgCZ2s6+scAYaQVpYSh9tZtRijApw9IXyMw==",
       "cpu": [
         "arm64"
       ],
       "dev": true,
+      "license": "MIT",
       "optional": true,
       "os": [
         "win32"
       ]
     },
     "node_modules/@rollup/rollup-win32-ia32-msvc": {
-      "version": "4.7.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-ia32-msvc/-/rollup-win32-ia32-msvc-4.7.0.tgz",
-      "integrity": "sha512-pmioUlttNh9GXF5x2CzNa7Z8kmRTyhEzzAC+2WOOapjewMbl+3tGuAnxbwc5JyG8Jsz2+hf/QD/n5VjimOZ63g==",
+      "version": "4.31.0",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-ia32-msvc/-/rollup-win32-ia32-msvc-4.31.0.tgz",
+      "integrity": "sha512-U1xZZXYkvdf5MIWmftU8wrM5PPXzyaY1nGCI4KI4BFfoZxHamsIe+BtnPLIvvPykvQWlVbqUXdLa4aJUuilwLQ==",
       "cpu": [
         "ia32"
       ],
       "dev": true,
+      "license": "MIT",
       "optional": true,
       "os": [
         "win32"
       ]
     },
     "node_modules/@rollup/rollup-win32-x64-msvc": {
-      "version": "4.7.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-x64-msvc/-/rollup-win32-x64-msvc-4.7.0.tgz",
-      "integrity": "sha512-SeZzC2QhhdBQUm3U0c8+c/P6UlRyBcLL2Xp5KX7z46WXZxzR8RJSIWL9wSUeBTgxog5LTPJuPj0WOT9lvrtP7Q==",
+      "version": "4.31.0",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-x64-msvc/-/rollup-win32-x64-msvc-4.31.0.tgz",
+      "integrity": "sha512-ul8rnCsUumNln5YWwz0ted2ZHFhzhRRnkpBZ+YRuHoRAlUji9KChpOUOndY7uykrPEPXVbHLlsdo6v5yXo/TXw==",
       "cpu": [
         "x64"
       ],
       "dev": true,
+      "license": "MIT",
       "optional": true,
       "os": [
         "win32"
       ]
     },
     "node_modules/@types/estree": {
-      "version": "1.0.5",
-      "resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.5.tgz",
-      "integrity": "sha512-/kYRxGDLWzHOB7q+wtSUQlFrtcdUccpfy+X+9iMBpHK8QLLhx2wIPYuS5DYtR9Wa/YlZAbIovy7qVdB1Aq6Lyw==",
-      "dev": true
+      "version": "1.0.6",
+      "resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.6.tgz",
+      "integrity": "sha512-AYnb1nQyY49te+VRAVgmzfcgjYS91mY5P0TKUDCLEM+gNnA+3T6rWITXRLYCpahpqSQbN5cE+gHpnPyXjHWxcw==",
+      "dev": true,
+      "license": "MIT"
     },
     "node_modules/@types/node": {
       "version": "20.10.4",
@@ -531,10 +629,14 @@
       }
     },
     "node_modules/rollup": {
-      "version": "4.7.0",
-      "resolved": "https://registry.npmjs.org/rollup/-/rollup-4.7.0.tgz",
-      "integrity": "sha512-7Kw0dUP4BWH78zaZCqF1rPyQ8D5DSU6URG45v1dqS/faNsx9WXyess00uTOZxKr7oR/4TOjO1CPudT8L1UsEgw==",
+      "version": "4.31.0",
+      "resolved": "https://registry.npmjs.org/rollup/-/rollup-4.31.0.tgz",
+      "integrity": "sha512-9cCE8P4rZLx9+PjoyqHLs31V9a9Vpvfo4qNcs6JCiGWYhw2gijSetFbH6SSy1whnkgcefnUwr8sad7tgqsGvnw==",
       "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@types/estree": "1.0.6"
+      },
       "bin": {
         "rollup": "dist/bin/rollup"
       },
@@ -543,19 +645,25 @@
         "npm": ">=8.0.0"
       },
       "optionalDependencies": {
-        "@rollup/rollup-android-arm-eabi": "4.7.0",
-        "@rollup/rollup-android-arm64": "4.7.0",
-        "@rollup/rollup-darwin-arm64": "4.7.0",
-        "@rollup/rollup-darwin-x64": "4.7.0",
-        "@rollup/rollup-linux-arm-gnueabihf": "4.7.0",
-        "@rollup/rollup-linux-arm64-gnu": "4.7.0",
-        "@rollup/rollup-linux-arm64-musl": "4.7.0",
-        "@rollup/rollup-linux-riscv64-gnu": "4.7.0",
-        "@rollup/rollup-linux-x64-gnu": "4.7.0",
-        "@rollup/rollup-linux-x64-musl": "4.7.0",
-        "@rollup/rollup-win32-arm64-msvc": "4.7.0",
-        "@rollup/rollup-win32-ia32-msvc": "4.7.0",
-        "@rollup/rollup-win32-x64-msvc": "4.7.0",
+        "@rollup/rollup-android-arm-eabi": "4.31.0",
+        "@rollup/rollup-android-arm64": "4.31.0",
+        "@rollup/rollup-darwin-arm64": "4.31.0",
+        "@rollup/rollup-darwin-x64": "4.31.0",
+        "@rollup/rollup-freebsd-arm64": "4.31.0",
+        "@rollup/rollup-freebsd-x64": "4.31.0",
+        "@rollup/rollup-linux-arm-gnueabihf": "4.31.0",
+        "@rollup/rollup-linux-arm-musleabihf": "4.31.0",
+        "@rollup/rollup-linux-arm64-gnu": "4.31.0",
+        "@rollup/rollup-linux-arm64-musl": "4.31.0",
+        "@rollup/rollup-linux-loongarch64-gnu": "4.31.0",
+        "@rollup/rollup-linux-powerpc64le-gnu": "4.31.0",
+        "@rollup/rollup-linux-riscv64-gnu": "4.31.0",
+        "@rollup/rollup-linux-s390x-gnu": "4.31.0",
+        "@rollup/rollup-linux-x64-gnu": "4.31.0",
+        "@rollup/rollup-linux-x64-musl": "4.31.0",
+        "@rollup/rollup-win32-arm64-msvc": "4.31.0",
+        "@rollup/rollup-win32-ia32-msvc": "4.31.0",
+        "@rollup/rollup-win32-x64-msvc": "4.31.0",
         "fsevents": "~2.3.2"
       }
     },
diff --git a/packages/passkeys/passkeys_web/javascript/package.json b/packages/passkeys/passkeys_web/javascript/package.json
index 380a811..67eac13 100644
--- a/packages/passkeys/passkeys_web/javascript/package.json
+++ b/packages/passkeys/passkeys_web/javascript/package.json
@@ -10,7 +10,7 @@
   "author": "",
   "license": "ISC",
   "devDependencies": {
-    "rollup": "^4.7.0",
+    "rollup": "^4.31.0",
     "rollup-plugin-commonjs": "^10.1.0",
     "rollup-plugin-node-resolve": "^5.2.0",
     "rollup-plugin-typescript2": "^0.36.0",
diff --git a/packages/passkeys/passkeys_web/javascript/src/index.ts b/packages/passkeys/passkeys_web/javascript/src/index.ts
index 87493fa..2ba625c 100644
--- a/packages/passkeys/passkeys_web/javascript/src/index.ts
+++ b/packages/passkeys/passkeys_web/javascript/src/index.ts
@@ -2,8 +2,32 @@ import {PasskeyAuthenticator} from "./passkeyAuthenticator";
 
 let passkeyAuthenticator = new PasskeyAuthenticator();
 
-export async function canAuthenticate(): Promise<boolean> {
-    return await PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable();
+export async function isUserVerifyingPlatformAuthenticatorAvailable(): Promise<boolean|undefined> {
+    if (!window.PublicKeyCredential) {
+        return undefined;
+    }
+
+    try {
+        return await window.PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable();
+    } catch (e) {
+        return undefined;
+    }
+}
+
+export async function isConditionalMediationAvailable(): Promise<boolean|undefined> {
+    if (!window.PublicKeyCredential) {
+      return undefined;
+    }
+
+    try {
+      return await window.PublicKeyCredential.isConditionalMediationAvailable();
+    } catch (e) {
+      return undefined;
+    }
+}
+
+export function hasPasskeySupport(): boolean {
+    return Boolean(window.PublicKeyCredential);
 }
 
 export function init(): void {
diff --git a/packages/passkeys/passkeys_web/lib/interop.dart b/packages/passkeys/passkeys_web/lib/interop.dart
index e8930db..7705c58 100644
--- a/packages/passkeys/passkeys_web/lib/interop.dart
+++ b/packages/passkeys/passkeys_web/lib/interop.dart
@@ -1,16 +1,25 @@
 @JS()
 library bundle;
 
-import 'package:js/js.dart';
+import 'dart:js_interop';
 
 @JS('PasskeyAuthenticator.init')
 external void init();
 
 @JS('PasskeyAuthenticator.register')
-external Future<String> authenticatorRegister(Object options);
+external JSPromise<JSString> authenticatorRegister(JSString options);
 
 @JS('PasskeyAuthenticator.login')
-external Future<String> authenticatorLogin(Object options);
+external JSPromise<JSString> authenticatorLogin(JSString options);
 
 @JS('PasskeyAuthenticator.cancelCurrentAuthenticatorOperation')
-external Future<String> authenticatorCancel();
+external JSVoid authenticatorCancel();
+
+@JS('PasskeyAuthenticator.isUserVerifyingPlatformAuthenticatorAvailable')
+external JSPromise<JSBoolean?> isUserVerifyingPlatformAuthenticatorAvailable();
+
+@JS('PasskeyAuthenticator.isConditionalMediationAvailable')
+external JSPromise<JSBoolean?> isConditionalMediationAvailable();
+
+@JS('PasskeyAuthenticator.hasPasskeySupport')
+external JSBoolean hasPasskeySupport();
diff --git a/packages/passkeys/passkeys_web/lib/models/passkeyLoginRequest.dart b/packages/passkeys/passkeys_web/lib/models/passkeyLoginRequest.dart
index 7f73d14..43a4286 100644
--- a/packages/passkeys/passkeys_web/lib/models/passkeyLoginRequest.dart
+++ b/packages/passkeys/passkeys_web/lib/models/passkeyLoginRequest.dart
@@ -90,12 +90,24 @@ class PasskeyLoginAllowCredentialType {
 
 enum AuthenticatorTransport {
   @JsonValue('internal')
-  Internal;
+  Internal,
+  @JsonValue('nfc')
+  Nfc,
+  @JsonValue('usb')
+  Usb,
+  @JsonValue('bluetooth')
+  Bluetooth;
 
   factory AuthenticatorTransport.fromPlatformType(String value) {
     switch (value) {
       case 'internal':
         return AuthenticatorTransport.Internal;
+      case 'usb':
+        return AuthenticatorTransport.Usb;
+      case 'nfc':
+        return AuthenticatorTransport.Nfc;
+      case 'bluetooth':
+        return AuthenticatorTransport.Bluetooth;
       default:
         throw ArgumentError.value(value);
     }
diff --git a/packages/passkeys/passkeys_web/lib/models/passkeyLoginRequest.g.dart b/packages/passkeys/passkeys_web/lib/models/passkeyLoginRequest.g.dart
index 9dc2654..3bc642e 100644
--- a/packages/passkeys/passkeys_web/lib/models/passkeyLoginRequest.g.dart
+++ b/packages/passkeys/passkeys_web/lib/models/passkeyLoginRequest.g.dart
@@ -30,7 +30,7 @@ PasskeyLoginPublicKey _$PasskeyLoginPublicKeyFromJson(
         Map<String, dynamic> json) =>
     PasskeyLoginPublicKey(
       challenge: json['challenge'] as String,
-      timeout: json['timeout'] as int?,
+      timeout: (json['timeout'] as num?)?.toInt(),
       rpId: json['rpId'] as String?,
       allowCredentials: (json['allowCredentials'] as List<dynamic>?)
           ?.map((e) => PasskeyLoginAllowCredentialType.fromJson(
@@ -85,6 +85,9 @@ Map<String, dynamic> _$PasskeyLoginAllowCredentialTypeToJson(
 
 const _$AuthenticatorTransportEnumMap = {
   AuthenticatorTransport.Internal: 'internal',
+  AuthenticatorTransport.Nfc: 'nfc',
+  AuthenticatorTransport.Usb: 'usb',
+  AuthenticatorTransport.Bluetooth: 'bluetooth',
 };
 
 LoginExtensions _$LoginExtensionsFromJson(Map<String, dynamic> json) =>
diff --git a/packages/passkeys/passkeys_web/lib/models/passkeySignUpResponse.dart b/packages/passkeys/passkeys_web/lib/models/passkeySignUpResponse.dart
index baef6fc..6b8da6a 100644
--- a/packages/passkeys/passkeys_web/lib/models/passkeySignUpResponse.dart
+++ b/packages/passkeys/passkeys_web/lib/models/passkeySignUpResponse.dart
@@ -21,10 +21,15 @@ class AttestationResponse {
   factory AttestationResponse.fromJson(Map<String, dynamic> json) =>
       _$AttestationResponseFromJson(json);
 
-  AttestationResponse(this.clientDataJSON, this.attestationObject);
+  AttestationResponse(
+      this.clientDataJSON,
+      this.attestationObject,
+      this.transports,
+      );
 
   final String clientDataJSON;
   final String attestationObject;
+  final List<String> transports;
 
   Map<String, dynamic> toJson() => _$AttestationResponseToJson(this);
 }
diff --git a/packages/passkeys/passkeys_web/lib/models/passkeySignUpResponse.g.dart b/packages/passkeys/passkeys_web/lib/models/passkeySignUpResponse.g.dart
index 9e54d55..aaacffd 100644
--- a/packages/passkeys/passkeys_web/lib/models/passkeySignUpResponse.g.dart
+++ b/packages/passkeys/passkeys_web/lib/models/passkeySignUpResponse.g.dart
@@ -26,6 +26,7 @@ AttestationResponse _$AttestationResponseFromJson(Map<String, dynamic> json) =>
     AttestationResponse(
       json['clientDataJSON'] as String,
       json['attestationObject'] as String,
+      (json['transports'] as List<dynamic>).map((e) => e as String).toList(),
     );
 
 Map<String, dynamic> _$AttestationResponseToJson(
@@ -33,4 +34,5 @@ Map<String, dynamic> _$AttestationResponseToJson(
     <String, dynamic>{
       'clientDataJSON': instance.clientDataJSON,
       'attestationObject': instance.attestationObject,
+      'transports': instance.transports,
     };
diff --git a/packages/passkeys/passkeys_web/lib/passkeys_web.dart b/packages/passkeys/passkeys_web/lib/passkeys_web.dart
index 23adbdf..cbf1c46 100644
--- a/packages/passkeys/passkeys_web/lib/passkeys_web.dart
+++ b/packages/passkeys/passkeys_web/lib/passkeys_web.dart
@@ -1,7 +1,7 @@
 import 'dart:convert';
+import 'dart:js_interop';
 
 import 'package:flutter/services.dart';
-import 'package:js/js_util.dart';
 import 'package:passkeys_platform_interface/passkeys_platform_interface.dart';
 import 'package:passkeys_platform_interface/types/types.dart';
 import 'package:passkeys_web/interop.dart';
@@ -18,11 +18,6 @@ class PasskeysWeb extends PasskeysPlatform {
     init();
   }
 
-  @override
-  Future<bool> canAuthenticate() {
-    return Future.value(true);
-  }
-
   @override
   Future<RegisterResponseType> register(RegisterRequestType request) async {
     final r = PasskeySignUpRequest(
@@ -39,10 +34,10 @@ class PasskeysWeb extends PasskeysPlatform {
 
     try {
       final serializedRequest = jsonEncode(r.toJson());
-      final response = await promiseToFuture<String>(
-          authenticatorRegister(serializedRequest));
+      final response =
+          await authenticatorRegister(serializedRequest.toJS).toDart;
       final decodedResponse =
-          jsonDecode(response) as Map<String, dynamic>;
+          jsonDecode(response.toDart) as Map<String, dynamic>;
       final typedResponse = PasskeySignUpResponse.fromJson(decodedResponse);
 
       return RegisterResponseType(
@@ -50,6 +45,7 @@ class PasskeysWeb extends PasskeysPlatform {
         rawId: typedResponse.rawId,
         clientDataJSON: typedResponse.response.clientDataJSON,
         attestationObject: typedResponse.response.attestationObject,
+        transports: typedResponse.response.transports,
       );
     } catch (e) {
       final exception = _parseException(e as String);
@@ -71,9 +67,9 @@ class PasskeysWeb extends PasskeysPlatform {
 
     try {
       final serializedRequest = jsonEncode(r.toJson());
-      final response =
-          await promiseToFuture<String>(authenticatorLogin(serializedRequest));
-      final decodedResponse = jsonDecode(response) as Map<String, dynamic>;
+      final response = await authenticatorLogin(serializedRequest.toJS).toDart;
+      final decodedResponse =
+          jsonDecode(response.toDart) as Map<String, dynamic>;
       final typedResponse = PasskeyLoginResponse.fromJson(decodedResponse);
 
       return typedResponse.toAuthenticateResponseType();
@@ -101,6 +97,21 @@ class PasskeysWeb extends PasskeysPlatform {
 
   @override
   Future<void> cancelCurrentAuthenticatorOperation() async {
-    await authenticatorCancel();
+    authenticatorCancel();
+  }
+
+  @override
+  Future<AvailabilityTypeWeb> getAvailability() async {
+    final passkeySupport = hasPasskeySupport().toDart;
+    final v1 = await isUserVerifyingPlatformAuthenticatorAvailable().toDart;
+    final v2 = await isConditionalMediationAvailable().toDart;
+
+    return AvailabilityTypeWeb(
+      hasPasskeySupport: passkeySupport,
+      isUserVerifyingPlatformAuthenticatorAvailable:
+          v1.isUndefinedOrNull ? null : v1!.toDart,
+      isConditionalMediationAvailable: v2.isUndefinedOrNull ? null : v2!.toDart,
+      isNative: false,
+    );
   }
 }
diff --git a/packages/passkeys/passkeys_web/pubspec.yaml b/packages/passkeys/passkeys_web/pubspec.yaml
index 4a1d7ee..9adb036 100644
--- a/packages/passkeys/passkeys_web/pubspec.yaml
+++ b/packages/passkeys/passkeys_web/pubspec.yaml
@@ -2,11 +2,11 @@ name: passkeys_web
 description: Web implementation of the Corbado passkeys plugin. Manages the creation of passkeys in browsers.
 homepage: https://docs.corbado.com/overview/welcome
 repository: https://github.com/corbado/flutter-passkeys/tree/main/packages/passkeys/passkeys_web
-version: 2.0.1
+version: 2.5.0
 
 environment:
   sdk: ">=3.0.0 <4.0.0"
-  flutter: ">=3.3.0"
+  flutter: ">=3.19.0"
 
 flutter:
   plugin:
@@ -21,9 +21,8 @@ dependencies:
     sdk: flutter
   flutter_web_plugins:
     sdk: flutter
-  js: ^0.6.4
   json_annotation: ^4.8.1
-  passkeys_platform_interface: ^2.0.1
+  passkeys_platform_interface: ^2.3.1
 
 dev_dependencies:
   build_runner: ^2.4.5
